// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DigitalScreen : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DigitalScreen GetRootAsDigitalScreen(ByteBuffer _bb) { return GetRootAsDigitalScreen(_bb, new DigitalScreen()); }
  public static DigitalScreen GetRootAsDigitalScreen(ByteBuffer _bb, DigitalScreen obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DigitalScreen __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BackgroundPicture { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBackgroundPictureBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetBackgroundPictureBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetBackgroundPictureArray() { return __p.__vector_as_array<byte>(6); }
  public int Prefab { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExistTime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TextId(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TextIdLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTextIdBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetTextIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetTextIdArray() { return __p.__vector_as_array<int>(12); }
  public float TextFactor { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string LogoIconPath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLogoIconPathBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetLogoIconPathBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetLogoIconPathArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<WWParser.Defs.DigitalScreen> CreateDigitalScreen(FlatBufferBuilder builder,
      int id = 0,
      StringOffset background_pictureOffset = default(StringOffset),
      int prefab = 0,
      int exist_time = 0,
      VectorOffset text_idOffset = default(VectorOffset),
      float text_factor = 0.0f,
      StringOffset logo_icon_pathOffset = default(StringOffset)) {
    builder.StartTable(7);
    DigitalScreen.AddLogoIconPath(builder, logo_icon_pathOffset);
    DigitalScreen.AddTextFactor(builder, text_factor);
    DigitalScreen.AddTextId(builder, text_idOffset);
    DigitalScreen.AddExistTime(builder, exist_time);
    DigitalScreen.AddPrefab(builder, prefab);
    DigitalScreen.AddBackgroundPicture(builder, background_pictureOffset);
    DigitalScreen.AddId(builder, id);
    return DigitalScreen.EndDigitalScreen(builder);
  }

  public static void StartDigitalScreen(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddBackgroundPicture(FlatBufferBuilder builder, StringOffset backgroundPictureOffset) { builder.AddOffset(1, backgroundPictureOffset.Value, 0); }
  public static void AddPrefab(FlatBufferBuilder builder, int prefab) { builder.AddInt(2, prefab, 0); }
  public static void AddExistTime(FlatBufferBuilder builder, int existTime) { builder.AddInt(3, existTime, 0); }
  public static void AddTextId(FlatBufferBuilder builder, VectorOffset textIdOffset) { builder.AddOffset(4, textIdOffset.Value, 0); }
  public static VectorOffset CreateTextIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTextIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTextIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTextIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTextIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTextFactor(FlatBufferBuilder builder, float textFactor) { builder.AddFloat(5, textFactor, 0.0f); }
  public static void AddLogoIconPath(FlatBufferBuilder builder, StringOffset logoIconPathOffset) { builder.AddOffset(6, logoIconPathOffset.Value, 0); }
  public static Offset<WWParser.Defs.DigitalScreen> EndDigitalScreen(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DigitalScreen>(o);
  }
  public DigitalScreenT UnPack() {
    var _o = new DigitalScreenT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DigitalScreenT _o) {
    _o.Id = this.Id;
    _o.BackgroundPicture = this.BackgroundPicture;
    _o.Prefab = this.Prefab;
    _o.ExistTime = this.ExistTime;
    _o.TextId = new List<int>();
    for (var _j = 0; _j < this.TextIdLength; ++_j) {_o.TextId.Add(this.TextId(_j));}
    _o.TextFactor = this.TextFactor;
    _o.LogoIconPath = this.LogoIconPath;
  }
  public static Offset<WWParser.Defs.DigitalScreen> Pack(FlatBufferBuilder builder, DigitalScreenT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DigitalScreen>);
    var _background_picture = _o.BackgroundPicture == null ? default(StringOffset) : builder.CreateString(_o.BackgroundPicture);
    var _text_id = default(VectorOffset);
    if (_o.TextId != null) {
      var __text_id = _o.TextId.ToArray();
      _text_id = CreateTextIdVector(builder, __text_id);
    }
    var _logo_icon_path = _o.LogoIconPath == null ? default(StringOffset) : builder.CreateString(_o.LogoIconPath);
    return CreateDigitalScreen(
      builder,
      _o.Id,
      _background_picture,
      _o.Prefab,
      _o.ExistTime,
      _text_id,
      _o.TextFactor,
      _logo_icon_path);
  }
}

public class DigitalScreenT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("background_picture")]
  public string BackgroundPicture { get; set; }
  [Newtonsoft.Json.JsonProperty("prefab")]
  public int Prefab { get; set; }
  [Newtonsoft.Json.JsonProperty("exist_time")]
  public int ExistTime { get; set; }
  [Newtonsoft.Json.JsonProperty("text_id")]
  public List<int> TextId { get; set; }
  [Newtonsoft.Json.JsonProperty("text_factor")]
  public float TextFactor { get; set; }
  [Newtonsoft.Json.JsonProperty("logo_icon_path")]
  public string LogoIconPath { get; set; }

  public DigitalScreenT() {
    this.Id = 0;
    this.BackgroundPicture = null;
    this.Prefab = 0;
    this.ExistTime = 0;
    this.TextId = null;
    this.TextFactor = 0.0f;
    this.LogoIconPath = null;
  }
}


static public class DigitalScreenVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*BackgroundPicture*/, false)
      && verifier.VerifyField(tablePos, 8 /*Prefab*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ExistTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*TextId*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 14 /*TextFactor*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*LogoIconPath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
