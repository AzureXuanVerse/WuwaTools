// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ComboTeaching : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ComboTeaching GetRootAsComboTeaching(ByteBuffer _bb) { return GetRootAsComboTeaching(_bb, new ComboTeaching()); }
  public static ComboTeaching GetRootAsComboTeaching(ByteBuffer _bb, ComboTeaching obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ComboTeaching __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NextRoleGuideId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string KeyId(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int KeyIdLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string IconText(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int IconTextLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string IconTagText(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int IconTagTextLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string DescriptionTitle { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionTitleBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetDescriptionTitleBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDescriptionTitleArray() { return __p.__vector_as_array<byte>(14); }
  public string DescriptionContent { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionContentBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetDescriptionContentBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetDescriptionContentArray() { return __p.__vector_as_array<byte>(16); }
  public int CommandId(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CommandIdLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCommandIdBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetCommandIdBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetCommandIdArray() { return __p.__vector_as_array<int>(18); }
  public int GuideId(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int GuideIdLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetGuideIdBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetGuideIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetGuideIdArray() { return __p.__vector_as_array<int>(20); }
  public string InputEnums(int j) { int o = __p.__offset(22); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int InputEnumsLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public double AddBuffId(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int AddBuffIdLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetAddBuffIdBytes() { return __p.__vector_as_span<double>(24, 8); }
#else
  public ArraySegment<byte>? GetAddBuffIdBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public double[] GetAddBuffIdArray() { return __p.__vector_as_array<double>(24); }

  public static Offset<WWParser.Defs.ComboTeaching> CreateComboTeaching(FlatBufferBuilder builder,
      int id = 0,
      int next_role_guide_id = 0,
      VectorOffset key_idOffset = default(VectorOffset),
      VectorOffset icon_textOffset = default(VectorOffset),
      VectorOffset icon_tag_textOffset = default(VectorOffset),
      StringOffset description_titleOffset = default(StringOffset),
      StringOffset description_contentOffset = default(StringOffset),
      VectorOffset command_idOffset = default(VectorOffset),
      VectorOffset guide_idOffset = default(VectorOffset),
      VectorOffset input_enumsOffset = default(VectorOffset),
      VectorOffset add_buff_idOffset = default(VectorOffset)) {
    builder.StartTable(11);
    ComboTeaching.AddAddBuffId(builder, add_buff_idOffset);
    ComboTeaching.AddInputEnums(builder, input_enumsOffset);
    ComboTeaching.AddGuideId(builder, guide_idOffset);
    ComboTeaching.AddCommandId(builder, command_idOffset);
    ComboTeaching.AddDescriptionContent(builder, description_contentOffset);
    ComboTeaching.AddDescriptionTitle(builder, description_titleOffset);
    ComboTeaching.AddIconTagText(builder, icon_tag_textOffset);
    ComboTeaching.AddIconText(builder, icon_textOffset);
    ComboTeaching.AddKeyId(builder, key_idOffset);
    ComboTeaching.AddNextRoleGuideId(builder, next_role_guide_id);
    ComboTeaching.AddId(builder, id);
    return ComboTeaching.EndComboTeaching(builder);
  }

  public static void StartComboTeaching(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddNextRoleGuideId(FlatBufferBuilder builder, int nextRoleGuideId) { builder.AddInt(1, nextRoleGuideId, 0); }
  public static void AddKeyId(FlatBufferBuilder builder, VectorOffset keyIdOffset) { builder.AddOffset(2, keyIdOffset.Value, 0); }
  public static VectorOffset CreateKeyIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateKeyIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateKeyIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateKeyIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartKeyIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIconText(FlatBufferBuilder builder, VectorOffset iconTextOffset) { builder.AddOffset(3, iconTextOffset.Value, 0); }
  public static VectorOffset CreateIconTextVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIconTextVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIconTextVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIconTextVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIconTextVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIconTagText(FlatBufferBuilder builder, VectorOffset iconTagTextOffset) { builder.AddOffset(4, iconTagTextOffset.Value, 0); }
  public static VectorOffset CreateIconTagTextVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIconTagTextVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIconTagTextVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIconTagTextVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIconTagTextVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescriptionTitle(FlatBufferBuilder builder, StringOffset descriptionTitleOffset) { builder.AddOffset(5, descriptionTitleOffset.Value, 0); }
  public static void AddDescriptionContent(FlatBufferBuilder builder, StringOffset descriptionContentOffset) { builder.AddOffset(6, descriptionContentOffset.Value, 0); }
  public static void AddCommandId(FlatBufferBuilder builder, VectorOffset commandIdOffset) { builder.AddOffset(7, commandIdOffset.Value, 0); }
  public static VectorOffset CreateCommandIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCommandIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCommandIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCommandIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCommandIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGuideId(FlatBufferBuilder builder, VectorOffset guideIdOffset) { builder.AddOffset(8, guideIdOffset.Value, 0); }
  public static VectorOffset CreateGuideIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGuideIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGuideIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGuideIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGuideIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInputEnums(FlatBufferBuilder builder, VectorOffset inputEnumsOffset) { builder.AddOffset(9, inputEnumsOffset.Value, 0); }
  public static VectorOffset CreateInputEnumsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInputEnumsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInputEnumsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInputEnumsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInputEnumsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAddBuffId(FlatBufferBuilder builder, VectorOffset addBuffIdOffset) { builder.AddOffset(10, addBuffIdOffset.Value, 0); }
  public static VectorOffset CreateAddBuffIdVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAddBuffIdVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAddBuffIdVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAddBuffIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAddBuffIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<WWParser.Defs.ComboTeaching> EndComboTeaching(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ComboTeaching>(o);
  }
  public ComboTeachingT UnPack() {
    var _o = new ComboTeachingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ComboTeachingT _o) {
    _o.Id = this.Id;
    _o.NextRoleGuideId = this.NextRoleGuideId;
    _o.KeyId = new List<string>();
    for (var _j = 0; _j < this.KeyIdLength; ++_j) {_o.KeyId.Add(this.KeyId(_j));}
    _o.IconText = new List<string>();
    for (var _j = 0; _j < this.IconTextLength; ++_j) {_o.IconText.Add(this.IconText(_j));}
    _o.IconTagText = new List<string>();
    for (var _j = 0; _j < this.IconTagTextLength; ++_j) {_o.IconTagText.Add(this.IconTagText(_j));}
    _o.DescriptionTitle = this.DescriptionTitle;
    _o.DescriptionContent = this.DescriptionContent;
    _o.CommandId = new List<int>();
    for (var _j = 0; _j < this.CommandIdLength; ++_j) {_o.CommandId.Add(this.CommandId(_j));}
    _o.GuideId = new List<int>();
    for (var _j = 0; _j < this.GuideIdLength; ++_j) {_o.GuideId.Add(this.GuideId(_j));}
    _o.InputEnums = new List<string>();
    for (var _j = 0; _j < this.InputEnumsLength; ++_j) {_o.InputEnums.Add(this.InputEnums(_j));}
    _o.AddBuffId = new List<double>();
    for (var _j = 0; _j < this.AddBuffIdLength; ++_j) {_o.AddBuffId.Add(this.AddBuffId(_j));}
  }
  public static Offset<WWParser.Defs.ComboTeaching> Pack(FlatBufferBuilder builder, ComboTeachingT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ComboTeaching>);
    var _key_id = default(VectorOffset);
    if (_o.KeyId != null) {
      var __key_id = new StringOffset[_o.KeyId.Count];
      for (var _j = 0; _j < __key_id.Length; ++_j) { __key_id[_j] = builder.CreateString(_o.KeyId[_j]); }
      _key_id = CreateKeyIdVector(builder, __key_id);
    }
    var _icon_text = default(VectorOffset);
    if (_o.IconText != null) {
      var __icon_text = new StringOffset[_o.IconText.Count];
      for (var _j = 0; _j < __icon_text.Length; ++_j) { __icon_text[_j] = builder.CreateString(_o.IconText[_j]); }
      _icon_text = CreateIconTextVector(builder, __icon_text);
    }
    var _icon_tag_text = default(VectorOffset);
    if (_o.IconTagText != null) {
      var __icon_tag_text = new StringOffset[_o.IconTagText.Count];
      for (var _j = 0; _j < __icon_tag_text.Length; ++_j) { __icon_tag_text[_j] = builder.CreateString(_o.IconTagText[_j]); }
      _icon_tag_text = CreateIconTagTextVector(builder, __icon_tag_text);
    }
    var _description_title = _o.DescriptionTitle == null ? default(StringOffset) : builder.CreateString(_o.DescriptionTitle);
    var _description_content = _o.DescriptionContent == null ? default(StringOffset) : builder.CreateString(_o.DescriptionContent);
    var _command_id = default(VectorOffset);
    if (_o.CommandId != null) {
      var __command_id = _o.CommandId.ToArray();
      _command_id = CreateCommandIdVector(builder, __command_id);
    }
    var _guide_id = default(VectorOffset);
    if (_o.GuideId != null) {
      var __guide_id = _o.GuideId.ToArray();
      _guide_id = CreateGuideIdVector(builder, __guide_id);
    }
    var _input_enums = default(VectorOffset);
    if (_o.InputEnums != null) {
      var __input_enums = new StringOffset[_o.InputEnums.Count];
      for (var _j = 0; _j < __input_enums.Length; ++_j) { __input_enums[_j] = builder.CreateString(_o.InputEnums[_j]); }
      _input_enums = CreateInputEnumsVector(builder, __input_enums);
    }
    var _add_buff_id = default(VectorOffset);
    if (_o.AddBuffId != null) {
      var __add_buff_id = _o.AddBuffId.ToArray();
      _add_buff_id = CreateAddBuffIdVector(builder, __add_buff_id);
    }
    return CreateComboTeaching(
      builder,
      _o.Id,
      _o.NextRoleGuideId,
      _key_id,
      _icon_text,
      _icon_tag_text,
      _description_title,
      _description_content,
      _command_id,
      _guide_id,
      _input_enums,
      _add_buff_id);
  }
}

public class ComboTeachingT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("next_role_guide_id")]
  public int NextRoleGuideId { get; set; }
  [Newtonsoft.Json.JsonProperty("key_id")]
  public List<string> KeyId { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_text")]
  public List<string> IconText { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_tag_text")]
  public List<string> IconTagText { get; set; }
  [Newtonsoft.Json.JsonProperty("description_title")]
  public string DescriptionTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("description_content")]
  public string DescriptionContent { get; set; }
  [Newtonsoft.Json.JsonProperty("command_id")]
  public List<int> CommandId { get; set; }
  [Newtonsoft.Json.JsonProperty("guide_id")]
  public List<int> GuideId { get; set; }
  [Newtonsoft.Json.JsonProperty("input_enums")]
  public List<string> InputEnums { get; set; }
  [Newtonsoft.Json.JsonProperty("add_buff_id")]
  public List<double> AddBuffId { get; set; }

  public ComboTeachingT() {
    this.Id = 0;
    this.NextRoleGuideId = 0;
    this.KeyId = null;
    this.IconText = null;
    this.IconTagText = null;
    this.DescriptionTitle = null;
    this.DescriptionContent = null;
    this.CommandId = null;
    this.GuideId = null;
    this.InputEnums = null;
    this.AddBuffId = null;
  }
}


static public class ComboTeachingVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*NextRoleGuideId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*KeyId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*IconText*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*IconTagText*/, false)
      && verifier.VerifyString(tablePos, 14 /*DescriptionTitle*/, false)
      && verifier.VerifyString(tablePos, 16 /*DescriptionContent*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*CommandId*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*GuideId*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 22 /*InputEnums*/, false)
      && verifier.VerifyVectorOfData(tablePos, 24 /*AddBuffId*/, 8 /*double*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
