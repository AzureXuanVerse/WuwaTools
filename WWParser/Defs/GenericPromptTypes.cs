// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GenericPromptTypes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GenericPromptTypes GetRootAsGenericPromptTypes(ByteBuffer _bb) { return GetRootAsGenericPromptTypes(_bb, new GenericPromptTypes()); }
  public static GenericPromptTypes GetRootAsGenericPromptTypes(ByteBuffer _bb, GenericPromptTypes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GenericPromptTypes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TypeId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string GeneralText { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGeneralTextBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetGeneralTextBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetGeneralTextArray() { return __p.__vector_as_array<byte>(6); }
  public string GeneralExtraText { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGeneralExtraTextBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetGeneralExtraTextBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetGeneralExtraTextArray() { return __p.__vector_as_array<byte>(8); }
  public string TextColor { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextColorBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTextColorBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTextColorArray() { return __p.__vector_as_array<byte>(10); }
  public int Duration { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Priority { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ShowArea { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShowAreaBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetShowAreaBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetShowAreaArray() { return __p.__vector_as_array<byte>(16); }
  public int MaxCount { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public bool OnlyBattle { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Tickable { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string UiPath { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUiPathBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetUiPathBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetUiPathArray() { return __p.__vector_as_array<byte>(24); }
  public float Offsety { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<WWParser.Defs.GenericPromptTypes> CreateGenericPromptTypes(FlatBufferBuilder builder,
      int type_id = 0,
      StringOffset general_textOffset = default(StringOffset),
      StringOffset general_extra_textOffset = default(StringOffset),
      StringOffset text_colorOffset = default(StringOffset),
      int duration = 0,
      int priority = 0,
      StringOffset show_areaOffset = default(StringOffset),
      int max_count = 1,
      bool only_battle = false,
      bool tickable = false,
      StringOffset ui_pathOffset = default(StringOffset),
      float offsety = 0.0f) {
    builder.StartTable(12);
    GenericPromptTypes.AddOffsety(builder, offsety);
    GenericPromptTypes.AddUiPath(builder, ui_pathOffset);
    GenericPromptTypes.AddMaxCount(builder, max_count);
    GenericPromptTypes.AddShowArea(builder, show_areaOffset);
    GenericPromptTypes.AddPriority(builder, priority);
    GenericPromptTypes.AddDuration(builder, duration);
    GenericPromptTypes.AddTextColor(builder, text_colorOffset);
    GenericPromptTypes.AddGeneralExtraText(builder, general_extra_textOffset);
    GenericPromptTypes.AddGeneralText(builder, general_textOffset);
    GenericPromptTypes.AddTypeId(builder, type_id);
    GenericPromptTypes.AddTickable(builder, tickable);
    GenericPromptTypes.AddOnlyBattle(builder, only_battle);
    return GenericPromptTypes.EndGenericPromptTypes(builder);
  }

  public static void StartGenericPromptTypes(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddTypeId(FlatBufferBuilder builder, int typeId) { builder.AddInt(0, typeId, 0); }
  public static void AddGeneralText(FlatBufferBuilder builder, StringOffset generalTextOffset) { builder.AddOffset(1, generalTextOffset.Value, 0); }
  public static void AddGeneralExtraText(FlatBufferBuilder builder, StringOffset generalExtraTextOffset) { builder.AddOffset(2, generalExtraTextOffset.Value, 0); }
  public static void AddTextColor(FlatBufferBuilder builder, StringOffset textColorOffset) { builder.AddOffset(3, textColorOffset.Value, 0); }
  public static void AddDuration(FlatBufferBuilder builder, int duration) { builder.AddInt(4, duration, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(5, priority, 0); }
  public static void AddShowArea(FlatBufferBuilder builder, StringOffset showAreaOffset) { builder.AddOffset(6, showAreaOffset.Value, 0); }
  public static void AddMaxCount(FlatBufferBuilder builder, int maxCount) { builder.AddInt(7, maxCount, 1); }
  public static void AddOnlyBattle(FlatBufferBuilder builder, bool onlyBattle) { builder.AddBool(8, onlyBattle, false); }
  public static void AddTickable(FlatBufferBuilder builder, bool tickable) { builder.AddBool(9, tickable, false); }
  public static void AddUiPath(FlatBufferBuilder builder, StringOffset uiPathOffset) { builder.AddOffset(10, uiPathOffset.Value, 0); }
  public static void AddOffsety(FlatBufferBuilder builder, float offsety) { builder.AddFloat(11, offsety, 0.0f); }
  public static Offset<WWParser.Defs.GenericPromptTypes> EndGenericPromptTypes(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.GenericPromptTypes>(o);
  }
  public GenericPromptTypesT UnPack() {
    var _o = new GenericPromptTypesT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GenericPromptTypesT _o) {
    _o.TypeId = this.TypeId;
    _o.GeneralText = this.GeneralText;
    _o.GeneralExtraText = this.GeneralExtraText;
    _o.TextColor = this.TextColor;
    _o.Duration = this.Duration;
    _o.Priority = this.Priority;
    _o.ShowArea = this.ShowArea;
    _o.MaxCount = this.MaxCount;
    _o.OnlyBattle = this.OnlyBattle;
    _o.Tickable = this.Tickable;
    _o.UiPath = this.UiPath;
    _o.Offsety = this.Offsety;
  }
  public static Offset<WWParser.Defs.GenericPromptTypes> Pack(FlatBufferBuilder builder, GenericPromptTypesT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.GenericPromptTypes>);
    var _general_text = _o.GeneralText == null ? default(StringOffset) : builder.CreateString(_o.GeneralText);
    var _general_extra_text = _o.GeneralExtraText == null ? default(StringOffset) : builder.CreateString(_o.GeneralExtraText);
    var _text_color = _o.TextColor == null ? default(StringOffset) : builder.CreateString(_o.TextColor);
    var _show_area = _o.ShowArea == null ? default(StringOffset) : builder.CreateString(_o.ShowArea);
    var _ui_path = _o.UiPath == null ? default(StringOffset) : builder.CreateString(_o.UiPath);
    return CreateGenericPromptTypes(
      builder,
      _o.TypeId,
      _general_text,
      _general_extra_text,
      _text_color,
      _o.Duration,
      _o.Priority,
      _show_area,
      _o.MaxCount,
      _o.OnlyBattle,
      _o.Tickable,
      _ui_path,
      _o.Offsety);
  }
}

public class GenericPromptTypesT
{
  [Newtonsoft.Json.JsonProperty("type_id")]
  public int TypeId { get; set; }
  [Newtonsoft.Json.JsonProperty("general_text")]
  public string GeneralText { get; set; }
  [Newtonsoft.Json.JsonProperty("general_extra_text")]
  public string GeneralExtraText { get; set; }
  [Newtonsoft.Json.JsonProperty("text_color")]
  public string TextColor { get; set; }
  [Newtonsoft.Json.JsonProperty("duration")]
  public int Duration { get; set; }
  [Newtonsoft.Json.JsonProperty("priority")]
  public int Priority { get; set; }
  [Newtonsoft.Json.JsonProperty("show_area")]
  public string ShowArea { get; set; }
  [Newtonsoft.Json.JsonProperty("max_count")]
  public int MaxCount { get; set; }
  [Newtonsoft.Json.JsonProperty("only_battle")]
  public bool OnlyBattle { get; set; }
  [Newtonsoft.Json.JsonProperty("tickable")]
  public bool Tickable { get; set; }
  [Newtonsoft.Json.JsonProperty("ui_path")]
  public string UiPath { get; set; }
  [Newtonsoft.Json.JsonProperty("offsety")]
  public float Offsety { get; set; }

  public GenericPromptTypesT() {
    this.TypeId = 0;
    this.GeneralText = null;
    this.GeneralExtraText = null;
    this.TextColor = null;
    this.Duration = 0;
    this.Priority = 0;
    this.ShowArea = null;
    this.MaxCount = 1;
    this.OnlyBattle = false;
    this.Tickable = false;
    this.UiPath = null;
    this.Offsety = 0.0f;
  }
}


static public class GenericPromptTypesVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TypeId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*GeneralText*/, false)
      && verifier.VerifyString(tablePos, 8 /*GeneralExtraText*/, false)
      && verifier.VerifyString(tablePos, 10 /*TextColor*/, false)
      && verifier.VerifyField(tablePos, 12 /*Duration*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*Priority*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*ShowArea*/, false)
      && verifier.VerifyField(tablePos, 18 /*MaxCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*OnlyBattle*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*Tickable*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 24 /*UiPath*/, false)
      && verifier.VerifyField(tablePos, 26 /*Offsety*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
