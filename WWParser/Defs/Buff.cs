// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Buff : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Buff GetRootAsBuff(ByteBuffer _bb) { return GetRootAsBuff(_bb, new Buff()); }
  public static Buff GetRootAsBuff(ByteBuffer _bb, Buff obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Buff __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public string GeDesc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGeDescBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetGeDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetGeDescArray() { return __p.__vector_as_array<byte>(6); }
  public int DurationPolicy { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DurationCalculationPolicy(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DurationCalculationPolicyLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDurationCalculationPolicyBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetDurationCalculationPolicyBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetDurationCalculationPolicyArray() { return __p.__vector_as_array<int>(10); }
  public float DurationMagnitude(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int DurationMagnitudeLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetDurationMagnitudeBytes() { return __p.__vector_as_span<float>(12, 4); }
#else
  public ArraySegment<byte>? GetDurationMagnitudeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public float[] GetDurationMagnitudeArray() { return __p.__vector_as_array<float>(12); }
  public float DurationMagnitude2(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int DurationMagnitude2Length { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetDurationMagnitude2Bytes() { return __p.__vector_as_span<float>(14, 4); }
#else
  public ArraySegment<byte>? GetDurationMagnitude2Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public float[] GetDurationMagnitude2Array() { return __p.__vector_as_array<float>(14); }
  public bool BDurationAffectedByBulletTime { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int FormationPolicy { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Probability { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)10000; } }
  public float Period { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool BExecutePeriodicEffectOnApplication { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int PeriodicInhibitionPolicy { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GameAttributeId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CalculationPolicy(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CalculationPolicyLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCalculationPolicyBytes() { return __p.__vector_as_span<int>(30, 4); }
#else
  public ArraySegment<byte>? GetCalculationPolicyBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public int[] GetCalculationPolicyArray() { return __p.__vector_as_array<int>(30); }
  public int ModifierMagnitude(int j) { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ModifierMagnitudeLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetModifierMagnitudeBytes() { return __p.__vector_as_span<int>(32, 4); }
#else
  public ArraySegment<byte>? GetModifierMagnitudeBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public int[] GetModifierMagnitudeArray() { return __p.__vector_as_array<int>(32); }
  public int ModifierMagnitude2(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ModifierMagnitude2Length { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetModifierMagnitude2Bytes() { return __p.__vector_as_span<int>(34, 4); }
#else
  public ArraySegment<byte>? GetModifierMagnitude2Bytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public int[] GetModifierMagnitude2Array() { return __p.__vector_as_array<int>(34); }
  public int StackingType { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)2; } }
  public int DefaultStackCount { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int StackAppendCount { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StackLimitCount { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int StackDurationRefreshPolicy { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StackPeriodResetPolicy { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StackExpirationRemoveNumber { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public bool BDenyOverflowApplication { get { int o = __p.__offset(50); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool BClearStackOnOverflow { get { int o = __p.__offset(52); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool BRequireModifierSuccessToTriggerCues { get { int o = __p.__offset(54); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool BSuppressStackingCues { get { int o = __p.__offset(56); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public double GameplayCueIds(int j) { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int GameplayCueIdsLength { get { int o = __p.__offset(58); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetGameplayCueIdsBytes() { return __p.__vector_as_span<double>(58, 8); }
#else
  public ArraySegment<byte>? GetGameplayCueIdsBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public double[] GetGameplayCueIdsArray() { return __p.__vector_as_array<double>(58); }
  public string GrantedTags(int j) { int o = __p.__offset(60); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int GrantedTagsLength { get { int o = __p.__offset(60); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ApplicationSourceTagRequirements(int j) { int o = __p.__offset(62); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ApplicationSourceTagRequirementsLength { get { int o = __p.__offset(62); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ApplicationSourceTagIgnores(int j) { int o = __p.__offset(64); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ApplicationSourceTagIgnoresLength { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ApplicationTagRequirements(int j) { int o = __p.__offset(66); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ApplicationTagRequirementsLength { get { int o = __p.__offset(66); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ApplicationTagIgnores(int j) { int o = __p.__offset(68); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ApplicationTagIgnoresLength { get { int o = __p.__offset(68); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string OngoingTagRequirements(int j) { int o = __p.__offset(70); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int OngoingTagRequirementsLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string OngoingTagIgnores(int j) { int o = __p.__offset(72); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int OngoingTagIgnoresLength { get { int o = __p.__offset(72); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string RemovalTagRequirements(int j) { int o = __p.__offset(74); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RemovalTagRequirementsLength { get { int o = __p.__offset(74); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string RemovalTagIgnores(int j) { int o = __p.__offset(76); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RemovalTagIgnoresLength { get { int o = __p.__offset(76); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string RemoveBuffWithTags(int j) { int o = __p.__offset(78); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RemoveBuffWithTagsLength { get { int o = __p.__offset(78); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string GrantedApplicationImmunityTags(int j) { int o = __p.__offset(80); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int GrantedApplicationImmunityTagsLength { get { int o = __p.__offset(80); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string GrantedApplicationImmunityTagIgnores(int j) { int o = __p.__offset(82); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int GrantedApplicationImmunityTagIgnoresLength { get { int o = __p.__offset(82); return o != 0 ? __p.__vector_len(o) : 0; } }
  public double PrematureExpirationEffects(int j) { int o = __p.__offset(84); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int PrematureExpirationEffectsLength { get { int o = __p.__offset(84); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetPrematureExpirationEffectsBytes() { return __p.__vector_as_span<double>(84, 8); }
#else
  public ArraySegment<byte>? GetPrematureExpirationEffectsBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public double[] GetPrematureExpirationEffectsArray() { return __p.__vector_as_array<double>(84); }
  public double RoutineExpirationEffects(int j) { int o = __p.__offset(86); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int RoutineExpirationEffectsLength { get { int o = __p.__offset(86); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetRoutineExpirationEffectsBytes() { return __p.__vector_as_span<double>(86, 8); }
#else
  public ArraySegment<byte>? GetRoutineExpirationEffectsBytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public double[] GetRoutineExpirationEffectsArray() { return __p.__vector_as_array<double>(86); }
  public double OverflowEffects(int j) { int o = __p.__offset(88); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int OverflowEffectsLength { get { int o = __p.__offset(88); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetOverflowEffectsBytes() { return __p.__vector_as_span<double>(88, 8); }
#else
  public ArraySegment<byte>? GetOverflowEffectsBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public double[] GetOverflowEffectsArray() { return __p.__vector_as_array<double>(88); }
  public double RelatedExtraEffectBuffId(int j) { int o = __p.__offset(90); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int RelatedExtraEffectBuffIdLength { get { int o = __p.__offset(90); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetRelatedExtraEffectBuffIdBytes() { return __p.__vector_as_span<double>(90, 8); }
#else
  public ArraySegment<byte>? GetRelatedExtraEffectBuffIdBytes() { return __p.__vector_as_arraysegment(90); }
#endif
  public double[] GetRelatedExtraEffectBuffIdArray() { return __p.__vector_as_array<double>(90); }
  public int ExtraEffectId { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ExtraEffectParameters(int j) { int o = __p.__offset(94); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExtraEffectParametersLength { get { int o = __p.__offset(94); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int ExtraEffectParametersGrow1(int j) { int o = __p.__offset(96); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ExtraEffectParametersGrow1Length { get { int o = __p.__offset(96); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetExtraEffectParametersGrow1Bytes() { return __p.__vector_as_span<int>(96, 4); }
#else
  public ArraySegment<byte>? GetExtraEffectParametersGrow1Bytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public int[] GetExtraEffectParametersGrow1Array() { return __p.__vector_as_array<int>(96); }
  public int ExtraEffectParametersGrow2(int j) { int o = __p.__offset(98); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ExtraEffectParametersGrow2Length { get { int o = __p.__offset(98); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetExtraEffectParametersGrow2Bytes() { return __p.__vector_as_span<int>(98, 4); }
#else
  public ArraySegment<byte>? GetExtraEffectParametersGrow2Bytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public int[] GetExtraEffectParametersGrow2Array() { return __p.__vector_as_array<int>(98); }
  public int ExtraEffectRequirements(int j) { int o = __p.__offset(100); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ExtraEffectRequirementsLength { get { int o = __p.__offset(100); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetExtraEffectRequirementsBytes() { return __p.__vector_as_span<int>(100, 4); }
#else
  public ArraySegment<byte>? GetExtraEffectRequirementsBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public int[] GetExtraEffectRequirementsArray() { return __p.__vector_as_array<int>(100); }
  public string ExtraEffectReqPara(int j) { int o = __p.__offset(102); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExtraEffectReqParaLength { get { int o = __p.__offset(102); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int ExtraEffectReqSetting { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float ExtraEffectCd(int j) { int o = __p.__offset(106); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ExtraEffectCdLength { get { int o = __p.__offset(106); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetExtraEffectCdBytes() { return __p.__vector_as_span<float>(106, 4); }
#else
  public ArraySegment<byte>? GetExtraEffectCdBytes() { return __p.__vector_as_arraysegment(106); }
#endif
  public float[] GetExtraEffectCdArray() { return __p.__vector_as_array<float>(106); }
  public int ExtraEffectRemoveStackNum { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExtraEffectProbability(int j) { int o = __p.__offset(110); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ExtraEffectProbabilityLength { get { int o = __p.__offset(110); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetExtraEffectProbabilityBytes() { return __p.__vector_as_span<int>(110, 4); }
#else
  public ArraySegment<byte>? GetExtraEffectProbabilityBytes() { return __p.__vector_as_arraysegment(110); }
#endif
  public int[] GetExtraEffectProbabilityArray() { return __p.__vector_as_array<int>(110); }
  public string BuffAction(int j) { int o = __p.__offset(112); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BuffActionLength { get { int o = __p.__offset(112); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.IntArray? TagLogic(int j) { int o = __p.__offset(114); return o != 0 ? (WWParser.Defs.IntArray?)(new WWParser.Defs.IntArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TagLogicLength { get { int o = __p.__offset(114); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.Buff> CreateBuff(FlatBufferBuilder builder,
      double id = 0.0,
      StringOffset ge_descOffset = default(StringOffset),
      int duration_policy = 0,
      VectorOffset duration_calculation_policyOffset = default(VectorOffset),
      VectorOffset duration_magnitudeOffset = default(VectorOffset),
      VectorOffset duration_magnitude2Offset = default(VectorOffset),
      bool b_duration_affected_by_bullet_time = false,
      int formation_policy = 0,
      int probability = 10000,
      float period = 0.0f,
      bool b_execute_periodic_effect_on_application = false,
      int periodic_inhibition_policy = 0,
      int game_attribute_id = 0,
      VectorOffset calculation_policyOffset = default(VectorOffset),
      VectorOffset modifier_magnitudeOffset = default(VectorOffset),
      VectorOffset modifier_magnitude2Offset = default(VectorOffset),
      int stacking_type = 2,
      int default_stack_count = 1,
      int stack_append_count = 0,
      int stack_limit_count = 1,
      int stack_duration_refresh_policy = 0,
      int stack_period_reset_policy = 0,
      int stack_expiration_remove_number = 1,
      bool b_deny_overflow_application = false,
      bool b_clear_stack_on_overflow = false,
      bool b_require_modifier_success_to_trigger_cues = false,
      bool b_suppress_stacking_cues = false,
      VectorOffset gameplay_cue_idsOffset = default(VectorOffset),
      VectorOffset granted_tagsOffset = default(VectorOffset),
      VectorOffset application_source_tag_requirementsOffset = default(VectorOffset),
      VectorOffset application_source_tag_ignoresOffset = default(VectorOffset),
      VectorOffset application_tag_requirementsOffset = default(VectorOffset),
      VectorOffset application_tag_ignoresOffset = default(VectorOffset),
      VectorOffset ongoing_tag_requirementsOffset = default(VectorOffset),
      VectorOffset ongoing_tag_ignoresOffset = default(VectorOffset),
      VectorOffset removal_tag_requirementsOffset = default(VectorOffset),
      VectorOffset removal_tag_ignoresOffset = default(VectorOffset),
      VectorOffset remove_buff_with_tagsOffset = default(VectorOffset),
      VectorOffset granted_application_immunity_tagsOffset = default(VectorOffset),
      VectorOffset granted_application_immunity_tag_ignoresOffset = default(VectorOffset),
      VectorOffset premature_expiration_effectsOffset = default(VectorOffset),
      VectorOffset routine_expiration_effectsOffset = default(VectorOffset),
      VectorOffset overflow_effectsOffset = default(VectorOffset),
      VectorOffset related_extra_effect_buff_idOffset = default(VectorOffset),
      int extra_effect_id = 0,
      VectorOffset extra_effect_parametersOffset = default(VectorOffset),
      VectorOffset extra_effect_parameters_grow1Offset = default(VectorOffset),
      VectorOffset extra_effect_parameters_grow2Offset = default(VectorOffset),
      VectorOffset extra_effect_requirementsOffset = default(VectorOffset),
      VectorOffset extra_effect_req_paraOffset = default(VectorOffset),
      int extra_effect_req_setting = 0,
      VectorOffset extra_effect_cdOffset = default(VectorOffset),
      int extra_effect_remove_stack_num = 0,
      VectorOffset extra_effect_probabilityOffset = default(VectorOffset),
      VectorOffset buff_actionOffset = default(VectorOffset),
      VectorOffset tag_logicOffset = default(VectorOffset)) {
    builder.StartTable(56);
    Buff.AddId(builder, id);
    Buff.AddTagLogic(builder, tag_logicOffset);
    Buff.AddBuffAction(builder, buff_actionOffset);
    Buff.AddExtraEffectProbability(builder, extra_effect_probabilityOffset);
    Buff.AddExtraEffectRemoveStackNum(builder, extra_effect_remove_stack_num);
    Buff.AddExtraEffectCd(builder, extra_effect_cdOffset);
    Buff.AddExtraEffectReqSetting(builder, extra_effect_req_setting);
    Buff.AddExtraEffectReqPara(builder, extra_effect_req_paraOffset);
    Buff.AddExtraEffectRequirements(builder, extra_effect_requirementsOffset);
    Buff.AddExtraEffectParametersGrow2(builder, extra_effect_parameters_grow2Offset);
    Buff.AddExtraEffectParametersGrow1(builder, extra_effect_parameters_grow1Offset);
    Buff.AddExtraEffectParameters(builder, extra_effect_parametersOffset);
    Buff.AddExtraEffectId(builder, extra_effect_id);
    Buff.AddRelatedExtraEffectBuffId(builder, related_extra_effect_buff_idOffset);
    Buff.AddOverflowEffects(builder, overflow_effectsOffset);
    Buff.AddRoutineExpirationEffects(builder, routine_expiration_effectsOffset);
    Buff.AddPrematureExpirationEffects(builder, premature_expiration_effectsOffset);
    Buff.AddGrantedApplicationImmunityTagIgnores(builder, granted_application_immunity_tag_ignoresOffset);
    Buff.AddGrantedApplicationImmunityTags(builder, granted_application_immunity_tagsOffset);
    Buff.AddRemoveBuffWithTags(builder, remove_buff_with_tagsOffset);
    Buff.AddRemovalTagIgnores(builder, removal_tag_ignoresOffset);
    Buff.AddRemovalTagRequirements(builder, removal_tag_requirementsOffset);
    Buff.AddOngoingTagIgnores(builder, ongoing_tag_ignoresOffset);
    Buff.AddOngoingTagRequirements(builder, ongoing_tag_requirementsOffset);
    Buff.AddApplicationTagIgnores(builder, application_tag_ignoresOffset);
    Buff.AddApplicationTagRequirements(builder, application_tag_requirementsOffset);
    Buff.AddApplicationSourceTagIgnores(builder, application_source_tag_ignoresOffset);
    Buff.AddApplicationSourceTagRequirements(builder, application_source_tag_requirementsOffset);
    Buff.AddGrantedTags(builder, granted_tagsOffset);
    Buff.AddGameplayCueIds(builder, gameplay_cue_idsOffset);
    Buff.AddStackExpirationRemoveNumber(builder, stack_expiration_remove_number);
    Buff.AddStackPeriodResetPolicy(builder, stack_period_reset_policy);
    Buff.AddStackDurationRefreshPolicy(builder, stack_duration_refresh_policy);
    Buff.AddStackLimitCount(builder, stack_limit_count);
    Buff.AddStackAppendCount(builder, stack_append_count);
    Buff.AddDefaultStackCount(builder, default_stack_count);
    Buff.AddStackingType(builder, stacking_type);
    Buff.AddModifierMagnitude2(builder, modifier_magnitude2Offset);
    Buff.AddModifierMagnitude(builder, modifier_magnitudeOffset);
    Buff.AddCalculationPolicy(builder, calculation_policyOffset);
    Buff.AddGameAttributeId(builder, game_attribute_id);
    Buff.AddPeriodicInhibitionPolicy(builder, periodic_inhibition_policy);
    Buff.AddPeriod(builder, period);
    Buff.AddProbability(builder, probability);
    Buff.AddFormationPolicy(builder, formation_policy);
    Buff.AddDurationMagnitude2(builder, duration_magnitude2Offset);
    Buff.AddDurationMagnitude(builder, duration_magnitudeOffset);
    Buff.AddDurationCalculationPolicy(builder, duration_calculation_policyOffset);
    Buff.AddDurationPolicy(builder, duration_policy);
    Buff.AddGeDesc(builder, ge_descOffset);
    Buff.AddBSuppressStackingCues(builder, b_suppress_stacking_cues);
    Buff.AddBRequireModifierSuccessToTriggerCues(builder, b_require_modifier_success_to_trigger_cues);
    Buff.AddBClearStackOnOverflow(builder, b_clear_stack_on_overflow);
    Buff.AddBDenyOverflowApplication(builder, b_deny_overflow_application);
    Buff.AddBExecutePeriodicEffectOnApplication(builder, b_execute_periodic_effect_on_application);
    Buff.AddBDurationAffectedByBulletTime(builder, b_duration_affected_by_bullet_time);
    return Buff.EndBuff(builder);
  }

  public static void StartBuff(FlatBufferBuilder builder) { builder.StartTable(56); }
  public static void AddId(FlatBufferBuilder builder, double id) { builder.AddDouble(0, id, 0.0); }
  public static void AddGeDesc(FlatBufferBuilder builder, StringOffset geDescOffset) { builder.AddOffset(1, geDescOffset.Value, 0); }
  public static void AddDurationPolicy(FlatBufferBuilder builder, int durationPolicy) { builder.AddInt(2, durationPolicy, 0); }
  public static void AddDurationCalculationPolicy(FlatBufferBuilder builder, VectorOffset durationCalculationPolicyOffset) { builder.AddOffset(3, durationCalculationPolicyOffset.Value, 0); }
  public static VectorOffset CreateDurationCalculationPolicyVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDurationCalculationPolicyVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDurationCalculationPolicyVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDurationCalculationPolicyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDurationCalculationPolicyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDurationMagnitude(FlatBufferBuilder builder, VectorOffset durationMagnitudeOffset) { builder.AddOffset(4, durationMagnitudeOffset.Value, 0); }
  public static VectorOffset CreateDurationMagnitudeVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDurationMagnitudeVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDurationMagnitudeVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDurationMagnitudeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDurationMagnitudeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDurationMagnitude2(FlatBufferBuilder builder, VectorOffset durationMagnitude2Offset) { builder.AddOffset(5, durationMagnitude2Offset.Value, 0); }
  public static VectorOffset CreateDurationMagnitude2Vector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDurationMagnitude2VectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDurationMagnitude2VectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDurationMagnitude2VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDurationMagnitude2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBDurationAffectedByBulletTime(FlatBufferBuilder builder, bool bDurationAffectedByBulletTime) { builder.AddBool(6, bDurationAffectedByBulletTime, false); }
  public static void AddFormationPolicy(FlatBufferBuilder builder, int formationPolicy) { builder.AddInt(7, formationPolicy, 0); }
  public static void AddProbability(FlatBufferBuilder builder, int probability) { builder.AddInt(8, probability, 10000); }
  public static void AddPeriod(FlatBufferBuilder builder, float period) { builder.AddFloat(9, period, 0.0f); }
  public static void AddBExecutePeriodicEffectOnApplication(FlatBufferBuilder builder, bool bExecutePeriodicEffectOnApplication) { builder.AddBool(10, bExecutePeriodicEffectOnApplication, false); }
  public static void AddPeriodicInhibitionPolicy(FlatBufferBuilder builder, int periodicInhibitionPolicy) { builder.AddInt(11, periodicInhibitionPolicy, 0); }
  public static void AddGameAttributeId(FlatBufferBuilder builder, int gameAttributeId) { builder.AddInt(12, gameAttributeId, 0); }
  public static void AddCalculationPolicy(FlatBufferBuilder builder, VectorOffset calculationPolicyOffset) { builder.AddOffset(13, calculationPolicyOffset.Value, 0); }
  public static VectorOffset CreateCalculationPolicyVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCalculationPolicyVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCalculationPolicyVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCalculationPolicyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCalculationPolicyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddModifierMagnitude(FlatBufferBuilder builder, VectorOffset modifierMagnitudeOffset) { builder.AddOffset(14, modifierMagnitudeOffset.Value, 0); }
  public static VectorOffset CreateModifierMagnitudeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateModifierMagnitudeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateModifierMagnitudeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateModifierMagnitudeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartModifierMagnitudeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddModifierMagnitude2(FlatBufferBuilder builder, VectorOffset modifierMagnitude2Offset) { builder.AddOffset(15, modifierMagnitude2Offset.Value, 0); }
  public static VectorOffset CreateModifierMagnitude2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateModifierMagnitude2VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateModifierMagnitude2VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateModifierMagnitude2VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartModifierMagnitude2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStackingType(FlatBufferBuilder builder, int stackingType) { builder.AddInt(16, stackingType, 2); }
  public static void AddDefaultStackCount(FlatBufferBuilder builder, int defaultStackCount) { builder.AddInt(17, defaultStackCount, 1); }
  public static void AddStackAppendCount(FlatBufferBuilder builder, int stackAppendCount) { builder.AddInt(18, stackAppendCount, 0); }
  public static void AddStackLimitCount(FlatBufferBuilder builder, int stackLimitCount) { builder.AddInt(19, stackLimitCount, 1); }
  public static void AddStackDurationRefreshPolicy(FlatBufferBuilder builder, int stackDurationRefreshPolicy) { builder.AddInt(20, stackDurationRefreshPolicy, 0); }
  public static void AddStackPeriodResetPolicy(FlatBufferBuilder builder, int stackPeriodResetPolicy) { builder.AddInt(21, stackPeriodResetPolicy, 0); }
  public static void AddStackExpirationRemoveNumber(FlatBufferBuilder builder, int stackExpirationRemoveNumber) { builder.AddInt(22, stackExpirationRemoveNumber, 1); }
  public static void AddBDenyOverflowApplication(FlatBufferBuilder builder, bool bDenyOverflowApplication) { builder.AddBool(23, bDenyOverflowApplication, false); }
  public static void AddBClearStackOnOverflow(FlatBufferBuilder builder, bool bClearStackOnOverflow) { builder.AddBool(24, bClearStackOnOverflow, false); }
  public static void AddBRequireModifierSuccessToTriggerCues(FlatBufferBuilder builder, bool bRequireModifierSuccessToTriggerCues) { builder.AddBool(25, bRequireModifierSuccessToTriggerCues, false); }
  public static void AddBSuppressStackingCues(FlatBufferBuilder builder, bool bSuppressStackingCues) { builder.AddBool(26, bSuppressStackingCues, false); }
  public static void AddGameplayCueIds(FlatBufferBuilder builder, VectorOffset gameplayCueIdsOffset) { builder.AddOffset(27, gameplayCueIdsOffset.Value, 0); }
  public static VectorOffset CreateGameplayCueIdsVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGameplayCueIdsVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGameplayCueIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGameplayCueIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGameplayCueIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddGrantedTags(FlatBufferBuilder builder, VectorOffset grantedTagsOffset) { builder.AddOffset(28, grantedTagsOffset.Value, 0); }
  public static VectorOffset CreateGrantedTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGrantedTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGrantedTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGrantedTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGrantedTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddApplicationSourceTagRequirements(FlatBufferBuilder builder, VectorOffset applicationSourceTagRequirementsOffset) { builder.AddOffset(29, applicationSourceTagRequirementsOffset.Value, 0); }
  public static VectorOffset CreateApplicationSourceTagRequirementsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateApplicationSourceTagRequirementsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateApplicationSourceTagRequirementsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateApplicationSourceTagRequirementsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartApplicationSourceTagRequirementsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddApplicationSourceTagIgnores(FlatBufferBuilder builder, VectorOffset applicationSourceTagIgnoresOffset) { builder.AddOffset(30, applicationSourceTagIgnoresOffset.Value, 0); }
  public static VectorOffset CreateApplicationSourceTagIgnoresVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateApplicationSourceTagIgnoresVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateApplicationSourceTagIgnoresVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateApplicationSourceTagIgnoresVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartApplicationSourceTagIgnoresVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddApplicationTagRequirements(FlatBufferBuilder builder, VectorOffset applicationTagRequirementsOffset) { builder.AddOffset(31, applicationTagRequirementsOffset.Value, 0); }
  public static VectorOffset CreateApplicationTagRequirementsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateApplicationTagRequirementsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateApplicationTagRequirementsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateApplicationTagRequirementsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartApplicationTagRequirementsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddApplicationTagIgnores(FlatBufferBuilder builder, VectorOffset applicationTagIgnoresOffset) { builder.AddOffset(32, applicationTagIgnoresOffset.Value, 0); }
  public static VectorOffset CreateApplicationTagIgnoresVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateApplicationTagIgnoresVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateApplicationTagIgnoresVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateApplicationTagIgnoresVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartApplicationTagIgnoresVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOngoingTagRequirements(FlatBufferBuilder builder, VectorOffset ongoingTagRequirementsOffset) { builder.AddOffset(33, ongoingTagRequirementsOffset.Value, 0); }
  public static VectorOffset CreateOngoingTagRequirementsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOngoingTagRequirementsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOngoingTagRequirementsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOngoingTagRequirementsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOngoingTagRequirementsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOngoingTagIgnores(FlatBufferBuilder builder, VectorOffset ongoingTagIgnoresOffset) { builder.AddOffset(34, ongoingTagIgnoresOffset.Value, 0); }
  public static VectorOffset CreateOngoingTagIgnoresVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOngoingTagIgnoresVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOngoingTagIgnoresVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOngoingTagIgnoresVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOngoingTagIgnoresVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRemovalTagRequirements(FlatBufferBuilder builder, VectorOffset removalTagRequirementsOffset) { builder.AddOffset(35, removalTagRequirementsOffset.Value, 0); }
  public static VectorOffset CreateRemovalTagRequirementsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRemovalTagRequirementsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRemovalTagRequirementsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRemovalTagRequirementsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRemovalTagRequirementsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRemovalTagIgnores(FlatBufferBuilder builder, VectorOffset removalTagIgnoresOffset) { builder.AddOffset(36, removalTagIgnoresOffset.Value, 0); }
  public static VectorOffset CreateRemovalTagIgnoresVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRemovalTagIgnoresVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRemovalTagIgnoresVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRemovalTagIgnoresVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRemovalTagIgnoresVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRemoveBuffWithTags(FlatBufferBuilder builder, VectorOffset removeBuffWithTagsOffset) { builder.AddOffset(37, removeBuffWithTagsOffset.Value, 0); }
  public static VectorOffset CreateRemoveBuffWithTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRemoveBuffWithTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRemoveBuffWithTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRemoveBuffWithTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRemoveBuffWithTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGrantedApplicationImmunityTags(FlatBufferBuilder builder, VectorOffset grantedApplicationImmunityTagsOffset) { builder.AddOffset(38, grantedApplicationImmunityTagsOffset.Value, 0); }
  public static VectorOffset CreateGrantedApplicationImmunityTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGrantedApplicationImmunityTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGrantedApplicationImmunityTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGrantedApplicationImmunityTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGrantedApplicationImmunityTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGrantedApplicationImmunityTagIgnores(FlatBufferBuilder builder, VectorOffset grantedApplicationImmunityTagIgnoresOffset) { builder.AddOffset(39, grantedApplicationImmunityTagIgnoresOffset.Value, 0); }
  public static VectorOffset CreateGrantedApplicationImmunityTagIgnoresVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGrantedApplicationImmunityTagIgnoresVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGrantedApplicationImmunityTagIgnoresVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGrantedApplicationImmunityTagIgnoresVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGrantedApplicationImmunityTagIgnoresVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPrematureExpirationEffects(FlatBufferBuilder builder, VectorOffset prematureExpirationEffectsOffset) { builder.AddOffset(40, prematureExpirationEffectsOffset.Value, 0); }
  public static VectorOffset CreatePrematureExpirationEffectsVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePrematureExpirationEffectsVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePrematureExpirationEffectsVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePrematureExpirationEffectsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPrematureExpirationEffectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRoutineExpirationEffects(FlatBufferBuilder builder, VectorOffset routineExpirationEffectsOffset) { builder.AddOffset(41, routineExpirationEffectsOffset.Value, 0); }
  public static VectorOffset CreateRoutineExpirationEffectsVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRoutineExpirationEffectsVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRoutineExpirationEffectsVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRoutineExpirationEffectsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRoutineExpirationEffectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddOverflowEffects(FlatBufferBuilder builder, VectorOffset overflowEffectsOffset) { builder.AddOffset(42, overflowEffectsOffset.Value, 0); }
  public static VectorOffset CreateOverflowEffectsVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOverflowEffectsVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOverflowEffectsVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOverflowEffectsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOverflowEffectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRelatedExtraEffectBuffId(FlatBufferBuilder builder, VectorOffset relatedExtraEffectBuffIdOffset) { builder.AddOffset(43, relatedExtraEffectBuffIdOffset.Value, 0); }
  public static VectorOffset CreateRelatedExtraEffectBuffIdVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRelatedExtraEffectBuffIdVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelatedExtraEffectBuffIdVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelatedExtraEffectBuffIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRelatedExtraEffectBuffIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddExtraEffectId(FlatBufferBuilder builder, int extraEffectId) { builder.AddInt(44, extraEffectId, 0); }
  public static void AddExtraEffectParameters(FlatBufferBuilder builder, VectorOffset extraEffectParametersOffset) { builder.AddOffset(45, extraEffectParametersOffset.Value, 0); }
  public static VectorOffset CreateExtraEffectParametersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectParametersVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectParametersVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectParametersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtraEffectParametersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExtraEffectParametersGrow1(FlatBufferBuilder builder, VectorOffset extraEffectParametersGrow1Offset) { builder.AddOffset(46, extraEffectParametersGrow1Offset.Value, 0); }
  public static VectorOffset CreateExtraEffectParametersGrow1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectParametersGrow1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectParametersGrow1VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectParametersGrow1VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtraEffectParametersGrow1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExtraEffectParametersGrow2(FlatBufferBuilder builder, VectorOffset extraEffectParametersGrow2Offset) { builder.AddOffset(47, extraEffectParametersGrow2Offset.Value, 0); }
  public static VectorOffset CreateExtraEffectParametersGrow2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectParametersGrow2VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectParametersGrow2VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectParametersGrow2VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtraEffectParametersGrow2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExtraEffectRequirements(FlatBufferBuilder builder, VectorOffset extraEffectRequirementsOffset) { builder.AddOffset(48, extraEffectRequirementsOffset.Value, 0); }
  public static VectorOffset CreateExtraEffectRequirementsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectRequirementsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectRequirementsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectRequirementsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtraEffectRequirementsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExtraEffectReqPara(FlatBufferBuilder builder, VectorOffset extraEffectReqParaOffset) { builder.AddOffset(49, extraEffectReqParaOffset.Value, 0); }
  public static VectorOffset CreateExtraEffectReqParaVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectReqParaVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectReqParaVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectReqParaVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtraEffectReqParaVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExtraEffectReqSetting(FlatBufferBuilder builder, int extraEffectReqSetting) { builder.AddInt(50, extraEffectReqSetting, 0); }
  public static void AddExtraEffectCd(FlatBufferBuilder builder, VectorOffset extraEffectCdOffset) { builder.AddOffset(51, extraEffectCdOffset.Value, 0); }
  public static VectorOffset CreateExtraEffectCdVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectCdVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectCdVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectCdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtraEffectCdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExtraEffectRemoveStackNum(FlatBufferBuilder builder, int extraEffectRemoveStackNum) { builder.AddInt(52, extraEffectRemoveStackNum, 0); }
  public static void AddExtraEffectProbability(FlatBufferBuilder builder, VectorOffset extraEffectProbabilityOffset) { builder.AddOffset(53, extraEffectProbabilityOffset.Value, 0); }
  public static VectorOffset CreateExtraEffectProbabilityVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectProbabilityVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectProbabilityVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectProbabilityVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtraEffectProbabilityVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffAction(FlatBufferBuilder builder, VectorOffset buffActionOffset) { builder.AddOffset(54, buffActionOffset.Value, 0); }
  public static VectorOffset CreateBuffActionVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBuffActionVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffActionVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffActionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffActionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTagLogic(FlatBufferBuilder builder, VectorOffset tagLogicOffset) { builder.AddOffset(55, tagLogicOffset.Value, 0); }
  public static VectorOffset CreateTagLogicVector(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagLogicVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagLogicVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.IntArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagLogicVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.IntArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagLogicVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.Buff> EndBuff(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Buff>(o);
  }
  public BuffT UnPack() {
    var _o = new BuffT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BuffT _o) {
    _o.Id = this.Id;
    _o.GeDesc = this.GeDesc;
    _o.DurationPolicy = this.DurationPolicy;
    _o.DurationCalculationPolicy = new List<int>();
    for (var _j = 0; _j < this.DurationCalculationPolicyLength; ++_j) {_o.DurationCalculationPolicy.Add(this.DurationCalculationPolicy(_j));}
    _o.DurationMagnitude = new List<float>();
    for (var _j = 0; _j < this.DurationMagnitudeLength; ++_j) {_o.DurationMagnitude.Add(this.DurationMagnitude(_j));}
    _o.DurationMagnitude2 = new List<float>();
    for (var _j = 0; _j < this.DurationMagnitude2Length; ++_j) {_o.DurationMagnitude2.Add(this.DurationMagnitude2(_j));}
    _o.BDurationAffectedByBulletTime = this.BDurationAffectedByBulletTime;
    _o.FormationPolicy = this.FormationPolicy;
    _o.Probability = this.Probability;
    _o.Period = this.Period;
    _o.BExecutePeriodicEffectOnApplication = this.BExecutePeriodicEffectOnApplication;
    _o.PeriodicInhibitionPolicy = this.PeriodicInhibitionPolicy;
    _o.GameAttributeId = this.GameAttributeId;
    _o.CalculationPolicy = new List<int>();
    for (var _j = 0; _j < this.CalculationPolicyLength; ++_j) {_o.CalculationPolicy.Add(this.CalculationPolicy(_j));}
    _o.ModifierMagnitude = new List<int>();
    for (var _j = 0; _j < this.ModifierMagnitudeLength; ++_j) {_o.ModifierMagnitude.Add(this.ModifierMagnitude(_j));}
    _o.ModifierMagnitude2 = new List<int>();
    for (var _j = 0; _j < this.ModifierMagnitude2Length; ++_j) {_o.ModifierMagnitude2.Add(this.ModifierMagnitude2(_j));}
    _o.StackingType = this.StackingType;
    _o.DefaultStackCount = this.DefaultStackCount;
    _o.StackAppendCount = this.StackAppendCount;
    _o.StackLimitCount = this.StackLimitCount;
    _o.StackDurationRefreshPolicy = this.StackDurationRefreshPolicy;
    _o.StackPeriodResetPolicy = this.StackPeriodResetPolicy;
    _o.StackExpirationRemoveNumber = this.StackExpirationRemoveNumber;
    _o.BDenyOverflowApplication = this.BDenyOverflowApplication;
    _o.BClearStackOnOverflow = this.BClearStackOnOverflow;
    _o.BRequireModifierSuccessToTriggerCues = this.BRequireModifierSuccessToTriggerCues;
    _o.BSuppressStackingCues = this.BSuppressStackingCues;
    _o.GameplayCueIds = new List<double>();
    for (var _j = 0; _j < this.GameplayCueIdsLength; ++_j) {_o.GameplayCueIds.Add(this.GameplayCueIds(_j));}
    _o.GrantedTags = new List<string>();
    for (var _j = 0; _j < this.GrantedTagsLength; ++_j) {_o.GrantedTags.Add(this.GrantedTags(_j));}
    _o.ApplicationSourceTagRequirements = new List<string>();
    for (var _j = 0; _j < this.ApplicationSourceTagRequirementsLength; ++_j) {_o.ApplicationSourceTagRequirements.Add(this.ApplicationSourceTagRequirements(_j));}
    _o.ApplicationSourceTagIgnores = new List<string>();
    for (var _j = 0; _j < this.ApplicationSourceTagIgnoresLength; ++_j) {_o.ApplicationSourceTagIgnores.Add(this.ApplicationSourceTagIgnores(_j));}
    _o.ApplicationTagRequirements = new List<string>();
    for (var _j = 0; _j < this.ApplicationTagRequirementsLength; ++_j) {_o.ApplicationTagRequirements.Add(this.ApplicationTagRequirements(_j));}
    _o.ApplicationTagIgnores = new List<string>();
    for (var _j = 0; _j < this.ApplicationTagIgnoresLength; ++_j) {_o.ApplicationTagIgnores.Add(this.ApplicationTagIgnores(_j));}
    _o.OngoingTagRequirements = new List<string>();
    for (var _j = 0; _j < this.OngoingTagRequirementsLength; ++_j) {_o.OngoingTagRequirements.Add(this.OngoingTagRequirements(_j));}
    _o.OngoingTagIgnores = new List<string>();
    for (var _j = 0; _j < this.OngoingTagIgnoresLength; ++_j) {_o.OngoingTagIgnores.Add(this.OngoingTagIgnores(_j));}
    _o.RemovalTagRequirements = new List<string>();
    for (var _j = 0; _j < this.RemovalTagRequirementsLength; ++_j) {_o.RemovalTagRequirements.Add(this.RemovalTagRequirements(_j));}
    _o.RemovalTagIgnores = new List<string>();
    for (var _j = 0; _j < this.RemovalTagIgnoresLength; ++_j) {_o.RemovalTagIgnores.Add(this.RemovalTagIgnores(_j));}
    _o.RemoveBuffWithTags = new List<string>();
    for (var _j = 0; _j < this.RemoveBuffWithTagsLength; ++_j) {_o.RemoveBuffWithTags.Add(this.RemoveBuffWithTags(_j));}
    _o.GrantedApplicationImmunityTags = new List<string>();
    for (var _j = 0; _j < this.GrantedApplicationImmunityTagsLength; ++_j) {_o.GrantedApplicationImmunityTags.Add(this.GrantedApplicationImmunityTags(_j));}
    _o.GrantedApplicationImmunityTagIgnores = new List<string>();
    for (var _j = 0; _j < this.GrantedApplicationImmunityTagIgnoresLength; ++_j) {_o.GrantedApplicationImmunityTagIgnores.Add(this.GrantedApplicationImmunityTagIgnores(_j));}
    _o.PrematureExpirationEffects = new List<double>();
    for (var _j = 0; _j < this.PrematureExpirationEffectsLength; ++_j) {_o.PrematureExpirationEffects.Add(this.PrematureExpirationEffects(_j));}
    _o.RoutineExpirationEffects = new List<double>();
    for (var _j = 0; _j < this.RoutineExpirationEffectsLength; ++_j) {_o.RoutineExpirationEffects.Add(this.RoutineExpirationEffects(_j));}
    _o.OverflowEffects = new List<double>();
    for (var _j = 0; _j < this.OverflowEffectsLength; ++_j) {_o.OverflowEffects.Add(this.OverflowEffects(_j));}
    _o.RelatedExtraEffectBuffId = new List<double>();
    for (var _j = 0; _j < this.RelatedExtraEffectBuffIdLength; ++_j) {_o.RelatedExtraEffectBuffId.Add(this.RelatedExtraEffectBuffId(_j));}
    _o.ExtraEffectId = this.ExtraEffectId;
    _o.ExtraEffectParameters = new List<string>();
    for (var _j = 0; _j < this.ExtraEffectParametersLength; ++_j) {_o.ExtraEffectParameters.Add(this.ExtraEffectParameters(_j));}
    _o.ExtraEffectParametersGrow1 = new List<int>();
    for (var _j = 0; _j < this.ExtraEffectParametersGrow1Length; ++_j) {_o.ExtraEffectParametersGrow1.Add(this.ExtraEffectParametersGrow1(_j));}
    _o.ExtraEffectParametersGrow2 = new List<int>();
    for (var _j = 0; _j < this.ExtraEffectParametersGrow2Length; ++_j) {_o.ExtraEffectParametersGrow2.Add(this.ExtraEffectParametersGrow2(_j));}
    _o.ExtraEffectRequirements = new List<int>();
    for (var _j = 0; _j < this.ExtraEffectRequirementsLength; ++_j) {_o.ExtraEffectRequirements.Add(this.ExtraEffectRequirements(_j));}
    _o.ExtraEffectReqPara = new List<string>();
    for (var _j = 0; _j < this.ExtraEffectReqParaLength; ++_j) {_o.ExtraEffectReqPara.Add(this.ExtraEffectReqPara(_j));}
    _o.ExtraEffectReqSetting = this.ExtraEffectReqSetting;
    _o.ExtraEffectCd = new List<float>();
    for (var _j = 0; _j < this.ExtraEffectCdLength; ++_j) {_o.ExtraEffectCd.Add(this.ExtraEffectCd(_j));}
    _o.ExtraEffectRemoveStackNum = this.ExtraEffectRemoveStackNum;
    _o.ExtraEffectProbability = new List<int>();
    for (var _j = 0; _j < this.ExtraEffectProbabilityLength; ++_j) {_o.ExtraEffectProbability.Add(this.ExtraEffectProbability(_j));}
    _o.BuffAction = new List<string>();
    for (var _j = 0; _j < this.BuffActionLength; ++_j) {_o.BuffAction.Add(this.BuffAction(_j));}
    _o.TagLogic = new List<WWParser.Defs.IntArrayT>();
    for (var _j = 0; _j < this.TagLogicLength; ++_j) {_o.TagLogic.Add(this.TagLogic(_j).HasValue ? this.TagLogic(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.Buff> Pack(FlatBufferBuilder builder, BuffT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Buff>);
    var _ge_desc = _o.GeDesc == null ? default(StringOffset) : builder.CreateString(_o.GeDesc);
    var _duration_calculation_policy = default(VectorOffset);
    if (_o.DurationCalculationPolicy != null) {
      var __duration_calculation_policy = _o.DurationCalculationPolicy.ToArray();
      _duration_calculation_policy = CreateDurationCalculationPolicyVector(builder, __duration_calculation_policy);
    }
    var _duration_magnitude = default(VectorOffset);
    if (_o.DurationMagnitude != null) {
      var __duration_magnitude = _o.DurationMagnitude.ToArray();
      _duration_magnitude = CreateDurationMagnitudeVector(builder, __duration_magnitude);
    }
    var _duration_magnitude2 = default(VectorOffset);
    if (_o.DurationMagnitude2 != null) {
      var __duration_magnitude2 = _o.DurationMagnitude2.ToArray();
      _duration_magnitude2 = CreateDurationMagnitude2Vector(builder, __duration_magnitude2);
    }
    var _calculation_policy = default(VectorOffset);
    if (_o.CalculationPolicy != null) {
      var __calculation_policy = _o.CalculationPolicy.ToArray();
      _calculation_policy = CreateCalculationPolicyVector(builder, __calculation_policy);
    }
    var _modifier_magnitude = default(VectorOffset);
    if (_o.ModifierMagnitude != null) {
      var __modifier_magnitude = _o.ModifierMagnitude.ToArray();
      _modifier_magnitude = CreateModifierMagnitudeVector(builder, __modifier_magnitude);
    }
    var _modifier_magnitude2 = default(VectorOffset);
    if (_o.ModifierMagnitude2 != null) {
      var __modifier_magnitude2 = _o.ModifierMagnitude2.ToArray();
      _modifier_magnitude2 = CreateModifierMagnitude2Vector(builder, __modifier_magnitude2);
    }
    var _gameplay_cue_ids = default(VectorOffset);
    if (_o.GameplayCueIds != null) {
      var __gameplay_cue_ids = _o.GameplayCueIds.ToArray();
      _gameplay_cue_ids = CreateGameplayCueIdsVector(builder, __gameplay_cue_ids);
    }
    var _granted_tags = default(VectorOffset);
    if (_o.GrantedTags != null) {
      var __granted_tags = new StringOffset[_o.GrantedTags.Count];
      for (var _j = 0; _j < __granted_tags.Length; ++_j) { __granted_tags[_j] = builder.CreateString(_o.GrantedTags[_j]); }
      _granted_tags = CreateGrantedTagsVector(builder, __granted_tags);
    }
    var _application_source_tag_requirements = default(VectorOffset);
    if (_o.ApplicationSourceTagRequirements != null) {
      var __application_source_tag_requirements = new StringOffset[_o.ApplicationSourceTagRequirements.Count];
      for (var _j = 0; _j < __application_source_tag_requirements.Length; ++_j) { __application_source_tag_requirements[_j] = builder.CreateString(_o.ApplicationSourceTagRequirements[_j]); }
      _application_source_tag_requirements = CreateApplicationSourceTagRequirementsVector(builder, __application_source_tag_requirements);
    }
    var _application_source_tag_ignores = default(VectorOffset);
    if (_o.ApplicationSourceTagIgnores != null) {
      var __application_source_tag_ignores = new StringOffset[_o.ApplicationSourceTagIgnores.Count];
      for (var _j = 0; _j < __application_source_tag_ignores.Length; ++_j) { __application_source_tag_ignores[_j] = builder.CreateString(_o.ApplicationSourceTagIgnores[_j]); }
      _application_source_tag_ignores = CreateApplicationSourceTagIgnoresVector(builder, __application_source_tag_ignores);
    }
    var _application_tag_requirements = default(VectorOffset);
    if (_o.ApplicationTagRequirements != null) {
      var __application_tag_requirements = new StringOffset[_o.ApplicationTagRequirements.Count];
      for (var _j = 0; _j < __application_tag_requirements.Length; ++_j) { __application_tag_requirements[_j] = builder.CreateString(_o.ApplicationTagRequirements[_j]); }
      _application_tag_requirements = CreateApplicationTagRequirementsVector(builder, __application_tag_requirements);
    }
    var _application_tag_ignores = default(VectorOffset);
    if (_o.ApplicationTagIgnores != null) {
      var __application_tag_ignores = new StringOffset[_o.ApplicationTagIgnores.Count];
      for (var _j = 0; _j < __application_tag_ignores.Length; ++_j) { __application_tag_ignores[_j] = builder.CreateString(_o.ApplicationTagIgnores[_j]); }
      _application_tag_ignores = CreateApplicationTagIgnoresVector(builder, __application_tag_ignores);
    }
    var _ongoing_tag_requirements = default(VectorOffset);
    if (_o.OngoingTagRequirements != null) {
      var __ongoing_tag_requirements = new StringOffset[_o.OngoingTagRequirements.Count];
      for (var _j = 0; _j < __ongoing_tag_requirements.Length; ++_j) { __ongoing_tag_requirements[_j] = builder.CreateString(_o.OngoingTagRequirements[_j]); }
      _ongoing_tag_requirements = CreateOngoingTagRequirementsVector(builder, __ongoing_tag_requirements);
    }
    var _ongoing_tag_ignores = default(VectorOffset);
    if (_o.OngoingTagIgnores != null) {
      var __ongoing_tag_ignores = new StringOffset[_o.OngoingTagIgnores.Count];
      for (var _j = 0; _j < __ongoing_tag_ignores.Length; ++_j) { __ongoing_tag_ignores[_j] = builder.CreateString(_o.OngoingTagIgnores[_j]); }
      _ongoing_tag_ignores = CreateOngoingTagIgnoresVector(builder, __ongoing_tag_ignores);
    }
    var _removal_tag_requirements = default(VectorOffset);
    if (_o.RemovalTagRequirements != null) {
      var __removal_tag_requirements = new StringOffset[_o.RemovalTagRequirements.Count];
      for (var _j = 0; _j < __removal_tag_requirements.Length; ++_j) { __removal_tag_requirements[_j] = builder.CreateString(_o.RemovalTagRequirements[_j]); }
      _removal_tag_requirements = CreateRemovalTagRequirementsVector(builder, __removal_tag_requirements);
    }
    var _removal_tag_ignores = default(VectorOffset);
    if (_o.RemovalTagIgnores != null) {
      var __removal_tag_ignores = new StringOffset[_o.RemovalTagIgnores.Count];
      for (var _j = 0; _j < __removal_tag_ignores.Length; ++_j) { __removal_tag_ignores[_j] = builder.CreateString(_o.RemovalTagIgnores[_j]); }
      _removal_tag_ignores = CreateRemovalTagIgnoresVector(builder, __removal_tag_ignores);
    }
    var _remove_buff_with_tags = default(VectorOffset);
    if (_o.RemoveBuffWithTags != null) {
      var __remove_buff_with_tags = new StringOffset[_o.RemoveBuffWithTags.Count];
      for (var _j = 0; _j < __remove_buff_with_tags.Length; ++_j) { __remove_buff_with_tags[_j] = builder.CreateString(_o.RemoveBuffWithTags[_j]); }
      _remove_buff_with_tags = CreateRemoveBuffWithTagsVector(builder, __remove_buff_with_tags);
    }
    var _granted_application_immunity_tags = default(VectorOffset);
    if (_o.GrantedApplicationImmunityTags != null) {
      var __granted_application_immunity_tags = new StringOffset[_o.GrantedApplicationImmunityTags.Count];
      for (var _j = 0; _j < __granted_application_immunity_tags.Length; ++_j) { __granted_application_immunity_tags[_j] = builder.CreateString(_o.GrantedApplicationImmunityTags[_j]); }
      _granted_application_immunity_tags = CreateGrantedApplicationImmunityTagsVector(builder, __granted_application_immunity_tags);
    }
    var _granted_application_immunity_tag_ignores = default(VectorOffset);
    if (_o.GrantedApplicationImmunityTagIgnores != null) {
      var __granted_application_immunity_tag_ignores = new StringOffset[_o.GrantedApplicationImmunityTagIgnores.Count];
      for (var _j = 0; _j < __granted_application_immunity_tag_ignores.Length; ++_j) { __granted_application_immunity_tag_ignores[_j] = builder.CreateString(_o.GrantedApplicationImmunityTagIgnores[_j]); }
      _granted_application_immunity_tag_ignores = CreateGrantedApplicationImmunityTagIgnoresVector(builder, __granted_application_immunity_tag_ignores);
    }
    var _premature_expiration_effects = default(VectorOffset);
    if (_o.PrematureExpirationEffects != null) {
      var __premature_expiration_effects = _o.PrematureExpirationEffects.ToArray();
      _premature_expiration_effects = CreatePrematureExpirationEffectsVector(builder, __premature_expiration_effects);
    }
    var _routine_expiration_effects = default(VectorOffset);
    if (_o.RoutineExpirationEffects != null) {
      var __routine_expiration_effects = _o.RoutineExpirationEffects.ToArray();
      _routine_expiration_effects = CreateRoutineExpirationEffectsVector(builder, __routine_expiration_effects);
    }
    var _overflow_effects = default(VectorOffset);
    if (_o.OverflowEffects != null) {
      var __overflow_effects = _o.OverflowEffects.ToArray();
      _overflow_effects = CreateOverflowEffectsVector(builder, __overflow_effects);
    }
    var _related_extra_effect_buff_id = default(VectorOffset);
    if (_o.RelatedExtraEffectBuffId != null) {
      var __related_extra_effect_buff_id = _o.RelatedExtraEffectBuffId.ToArray();
      _related_extra_effect_buff_id = CreateRelatedExtraEffectBuffIdVector(builder, __related_extra_effect_buff_id);
    }
    var _extra_effect_parameters = default(VectorOffset);
    if (_o.ExtraEffectParameters != null) {
      var __extra_effect_parameters = new StringOffset[_o.ExtraEffectParameters.Count];
      for (var _j = 0; _j < __extra_effect_parameters.Length; ++_j) { __extra_effect_parameters[_j] = builder.CreateString(_o.ExtraEffectParameters[_j]); }
      _extra_effect_parameters = CreateExtraEffectParametersVector(builder, __extra_effect_parameters);
    }
    var _extra_effect_parameters_grow1 = default(VectorOffset);
    if (_o.ExtraEffectParametersGrow1 != null) {
      var __extra_effect_parameters_grow1 = _o.ExtraEffectParametersGrow1.ToArray();
      _extra_effect_parameters_grow1 = CreateExtraEffectParametersGrow1Vector(builder, __extra_effect_parameters_grow1);
    }
    var _extra_effect_parameters_grow2 = default(VectorOffset);
    if (_o.ExtraEffectParametersGrow2 != null) {
      var __extra_effect_parameters_grow2 = _o.ExtraEffectParametersGrow2.ToArray();
      _extra_effect_parameters_grow2 = CreateExtraEffectParametersGrow2Vector(builder, __extra_effect_parameters_grow2);
    }
    var _extra_effect_requirements = default(VectorOffset);
    if (_o.ExtraEffectRequirements != null) {
      var __extra_effect_requirements = _o.ExtraEffectRequirements.ToArray();
      _extra_effect_requirements = CreateExtraEffectRequirementsVector(builder, __extra_effect_requirements);
    }
    var _extra_effect_req_para = default(VectorOffset);
    if (_o.ExtraEffectReqPara != null) {
      var __extra_effect_req_para = new StringOffset[_o.ExtraEffectReqPara.Count];
      for (var _j = 0; _j < __extra_effect_req_para.Length; ++_j) { __extra_effect_req_para[_j] = builder.CreateString(_o.ExtraEffectReqPara[_j]); }
      _extra_effect_req_para = CreateExtraEffectReqParaVector(builder, __extra_effect_req_para);
    }
    var _extra_effect_cd = default(VectorOffset);
    if (_o.ExtraEffectCd != null) {
      var __extra_effect_cd = _o.ExtraEffectCd.ToArray();
      _extra_effect_cd = CreateExtraEffectCdVector(builder, __extra_effect_cd);
    }
    var _extra_effect_probability = default(VectorOffset);
    if (_o.ExtraEffectProbability != null) {
      var __extra_effect_probability = _o.ExtraEffectProbability.ToArray();
      _extra_effect_probability = CreateExtraEffectProbabilityVector(builder, __extra_effect_probability);
    }
    var _buff_action = default(VectorOffset);
    if (_o.BuffAction != null) {
      var __buff_action = new StringOffset[_o.BuffAction.Count];
      for (var _j = 0; _j < __buff_action.Length; ++_j) { __buff_action[_j] = builder.CreateString(_o.BuffAction[_j]); }
      _buff_action = CreateBuffActionVector(builder, __buff_action);
    }
    var _tag_logic = default(VectorOffset);
    if (_o.TagLogic != null) {
      var __tag_logic = new Offset<WWParser.Defs.IntArray>[_o.TagLogic.Count];
      for (var _j = 0; _j < __tag_logic.Length; ++_j) { __tag_logic[_j] = WWParser.Defs.IntArray.Pack(builder, _o.TagLogic[_j]); }
      _tag_logic = CreateTagLogicVector(builder, __tag_logic);
    }
    return CreateBuff(
      builder,
      _o.Id,
      _ge_desc,
      _o.DurationPolicy,
      _duration_calculation_policy,
      _duration_magnitude,
      _duration_magnitude2,
      _o.BDurationAffectedByBulletTime,
      _o.FormationPolicy,
      _o.Probability,
      _o.Period,
      _o.BExecutePeriodicEffectOnApplication,
      _o.PeriodicInhibitionPolicy,
      _o.GameAttributeId,
      _calculation_policy,
      _modifier_magnitude,
      _modifier_magnitude2,
      _o.StackingType,
      _o.DefaultStackCount,
      _o.StackAppendCount,
      _o.StackLimitCount,
      _o.StackDurationRefreshPolicy,
      _o.StackPeriodResetPolicy,
      _o.StackExpirationRemoveNumber,
      _o.BDenyOverflowApplication,
      _o.BClearStackOnOverflow,
      _o.BRequireModifierSuccessToTriggerCues,
      _o.BSuppressStackingCues,
      _gameplay_cue_ids,
      _granted_tags,
      _application_source_tag_requirements,
      _application_source_tag_ignores,
      _application_tag_requirements,
      _application_tag_ignores,
      _ongoing_tag_requirements,
      _ongoing_tag_ignores,
      _removal_tag_requirements,
      _removal_tag_ignores,
      _remove_buff_with_tags,
      _granted_application_immunity_tags,
      _granted_application_immunity_tag_ignores,
      _premature_expiration_effects,
      _routine_expiration_effects,
      _overflow_effects,
      _related_extra_effect_buff_id,
      _o.ExtraEffectId,
      _extra_effect_parameters,
      _extra_effect_parameters_grow1,
      _extra_effect_parameters_grow2,
      _extra_effect_requirements,
      _extra_effect_req_para,
      _o.ExtraEffectReqSetting,
      _extra_effect_cd,
      _o.ExtraEffectRemoveStackNum,
      _extra_effect_probability,
      _buff_action,
      _tag_logic);
  }
}

public class BuffT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public double Id { get; set; }
  [Newtonsoft.Json.JsonProperty("ge_desc")]
  public string GeDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("duration_policy")]
  public int DurationPolicy { get; set; }
  [Newtonsoft.Json.JsonProperty("duration_calculation_policy")]
  public List<int> DurationCalculationPolicy { get; set; }
  [Newtonsoft.Json.JsonProperty("duration_magnitude")]
  public List<float> DurationMagnitude { get; set; }
  [Newtonsoft.Json.JsonProperty("duration_magnitude2")]
  public List<float> DurationMagnitude2 { get; set; }
  [Newtonsoft.Json.JsonProperty("b_duration_affected_by_bullet_time")]
  public bool BDurationAffectedByBulletTime { get; set; }
  [Newtonsoft.Json.JsonProperty("formation_policy")]
  public int FormationPolicy { get; set; }
  [Newtonsoft.Json.JsonProperty("probability")]
  public int Probability { get; set; }
  [Newtonsoft.Json.JsonProperty("period")]
  public float Period { get; set; }
  [Newtonsoft.Json.JsonProperty("b_execute_periodic_effect_on_application")]
  public bool BExecutePeriodicEffectOnApplication { get; set; }
  [Newtonsoft.Json.JsonProperty("periodic_inhibition_policy")]
  public int PeriodicInhibitionPolicy { get; set; }
  [Newtonsoft.Json.JsonProperty("game_attribute_id")]
  public int GameAttributeId { get; set; }
  [Newtonsoft.Json.JsonProperty("calculation_policy")]
  public List<int> CalculationPolicy { get; set; }
  [Newtonsoft.Json.JsonProperty("modifier_magnitude")]
  public List<int> ModifierMagnitude { get; set; }
  [Newtonsoft.Json.JsonProperty("modifier_magnitude2")]
  public List<int> ModifierMagnitude2 { get; set; }
  [Newtonsoft.Json.JsonProperty("stacking_type")]
  public int StackingType { get; set; }
  [Newtonsoft.Json.JsonProperty("default_stack_count")]
  public int DefaultStackCount { get; set; }
  [Newtonsoft.Json.JsonProperty("stack_append_count")]
  public int StackAppendCount { get; set; }
  [Newtonsoft.Json.JsonProperty("stack_limit_count")]
  public int StackLimitCount { get; set; }
  [Newtonsoft.Json.JsonProperty("stack_duration_refresh_policy")]
  public int StackDurationRefreshPolicy { get; set; }
  [Newtonsoft.Json.JsonProperty("stack_period_reset_policy")]
  public int StackPeriodResetPolicy { get; set; }
  [Newtonsoft.Json.JsonProperty("stack_expiration_remove_number")]
  public int StackExpirationRemoveNumber { get; set; }
  [Newtonsoft.Json.JsonProperty("b_deny_overflow_application")]
  public bool BDenyOverflowApplication { get; set; }
  [Newtonsoft.Json.JsonProperty("b_clear_stack_on_overflow")]
  public bool BClearStackOnOverflow { get; set; }
  [Newtonsoft.Json.JsonProperty("b_require_modifier_success_to_trigger_cues")]
  public bool BRequireModifierSuccessToTriggerCues { get; set; }
  [Newtonsoft.Json.JsonProperty("b_suppress_stacking_cues")]
  public bool BSuppressStackingCues { get; set; }
  [Newtonsoft.Json.JsonProperty("gameplay_cue_ids")]
  public List<double> GameplayCueIds { get; set; }
  [Newtonsoft.Json.JsonProperty("granted_tags")]
  public List<string> GrantedTags { get; set; }
  [Newtonsoft.Json.JsonProperty("application_source_tag_requirements")]
  public List<string> ApplicationSourceTagRequirements { get; set; }
  [Newtonsoft.Json.JsonProperty("application_source_tag_ignores")]
  public List<string> ApplicationSourceTagIgnores { get; set; }
  [Newtonsoft.Json.JsonProperty("application_tag_requirements")]
  public List<string> ApplicationTagRequirements { get; set; }
  [Newtonsoft.Json.JsonProperty("application_tag_ignores")]
  public List<string> ApplicationTagIgnores { get; set; }
  [Newtonsoft.Json.JsonProperty("ongoing_tag_requirements")]
  public List<string> OngoingTagRequirements { get; set; }
  [Newtonsoft.Json.JsonProperty("ongoing_tag_ignores")]
  public List<string> OngoingTagIgnores { get; set; }
  [Newtonsoft.Json.JsonProperty("removal_tag_requirements")]
  public List<string> RemovalTagRequirements { get; set; }
  [Newtonsoft.Json.JsonProperty("removal_tag_ignores")]
  public List<string> RemovalTagIgnores { get; set; }
  [Newtonsoft.Json.JsonProperty("remove_buff_with_tags")]
  public List<string> RemoveBuffWithTags { get; set; }
  [Newtonsoft.Json.JsonProperty("granted_application_immunity_tags")]
  public List<string> GrantedApplicationImmunityTags { get; set; }
  [Newtonsoft.Json.JsonProperty("granted_application_immunity_tag_ignores")]
  public List<string> GrantedApplicationImmunityTagIgnores { get; set; }
  [Newtonsoft.Json.JsonProperty("premature_expiration_effects")]
  public List<double> PrematureExpirationEffects { get; set; }
  [Newtonsoft.Json.JsonProperty("routine_expiration_effects")]
  public List<double> RoutineExpirationEffects { get; set; }
  [Newtonsoft.Json.JsonProperty("overflow_effects")]
  public List<double> OverflowEffects { get; set; }
  [Newtonsoft.Json.JsonProperty("related_extra_effect_buff_id")]
  public List<double> RelatedExtraEffectBuffId { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_effect_id")]
  public int ExtraEffectId { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_effect_parameters")]
  public List<string> ExtraEffectParameters { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_effect_parameters_grow1")]
  public List<int> ExtraEffectParametersGrow1 { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_effect_parameters_grow2")]
  public List<int> ExtraEffectParametersGrow2 { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_effect_requirements")]
  public List<int> ExtraEffectRequirements { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_effect_req_para")]
  public List<string> ExtraEffectReqPara { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_effect_req_setting")]
  public int ExtraEffectReqSetting { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_effect_cd")]
  public List<float> ExtraEffectCd { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_effect_remove_stack_num")]
  public int ExtraEffectRemoveStackNum { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_effect_probability")]
  public List<int> ExtraEffectProbability { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_action")]
  public List<string> BuffAction { get; set; }
  [Newtonsoft.Json.JsonProperty("tag_logic")]
  public List<WWParser.Defs.IntArrayT> TagLogic { get; set; }

  public BuffT() {
    this.Id = 0.0;
    this.GeDesc = null;
    this.DurationPolicy = 0;
    this.DurationCalculationPolicy = null;
    this.DurationMagnitude = null;
    this.DurationMagnitude2 = null;
    this.BDurationAffectedByBulletTime = false;
    this.FormationPolicy = 0;
    this.Probability = 10000;
    this.Period = 0.0f;
    this.BExecutePeriodicEffectOnApplication = false;
    this.PeriodicInhibitionPolicy = 0;
    this.GameAttributeId = 0;
    this.CalculationPolicy = null;
    this.ModifierMagnitude = null;
    this.ModifierMagnitude2 = null;
    this.StackingType = 2;
    this.DefaultStackCount = 1;
    this.StackAppendCount = 0;
    this.StackLimitCount = 1;
    this.StackDurationRefreshPolicy = 0;
    this.StackPeriodResetPolicy = 0;
    this.StackExpirationRemoveNumber = 1;
    this.BDenyOverflowApplication = false;
    this.BClearStackOnOverflow = false;
    this.BRequireModifierSuccessToTriggerCues = false;
    this.BSuppressStackingCues = false;
    this.GameplayCueIds = null;
    this.GrantedTags = null;
    this.ApplicationSourceTagRequirements = null;
    this.ApplicationSourceTagIgnores = null;
    this.ApplicationTagRequirements = null;
    this.ApplicationTagIgnores = null;
    this.OngoingTagRequirements = null;
    this.OngoingTagIgnores = null;
    this.RemovalTagRequirements = null;
    this.RemovalTagIgnores = null;
    this.RemoveBuffWithTags = null;
    this.GrantedApplicationImmunityTags = null;
    this.GrantedApplicationImmunityTagIgnores = null;
    this.PrematureExpirationEffects = null;
    this.RoutineExpirationEffects = null;
    this.OverflowEffects = null;
    this.RelatedExtraEffectBuffId = null;
    this.ExtraEffectId = 0;
    this.ExtraEffectParameters = null;
    this.ExtraEffectParametersGrow1 = null;
    this.ExtraEffectParametersGrow2 = null;
    this.ExtraEffectRequirements = null;
    this.ExtraEffectReqPara = null;
    this.ExtraEffectReqSetting = 0;
    this.ExtraEffectCd = null;
    this.ExtraEffectRemoveStackNum = 0;
    this.ExtraEffectProbability = null;
    this.BuffAction = null;
    this.TagLogic = null;
  }
}


static public class BuffVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*GeDesc*/, false)
      && verifier.VerifyField(tablePos, 8 /*DurationPolicy*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*DurationCalculationPolicy*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*DurationMagnitude*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*DurationMagnitude2*/, 4 /*float*/, false)
      && verifier.VerifyField(tablePos, 16 /*BDurationAffectedByBulletTime*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*FormationPolicy*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*Probability*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*Period*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*BExecutePeriodicEffectOnApplication*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 26 /*PeriodicInhibitionPolicy*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*GameAttributeId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 30 /*CalculationPolicy*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 32 /*ModifierMagnitude*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 34 /*ModifierMagnitude2*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 36 /*StackingType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*DefaultStackCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*StackAppendCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*StackLimitCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*StackDurationRefreshPolicy*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*StackPeriodResetPolicy*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*StackExpirationRemoveNumber*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*BDenyOverflowApplication*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 52 /*BClearStackOnOverflow*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 54 /*BRequireModifierSuccessToTriggerCues*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 56 /*BSuppressStackingCues*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 58 /*GameplayCueIds*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 60 /*GrantedTags*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 62 /*ApplicationSourceTagRequirements*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 64 /*ApplicationSourceTagIgnores*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 66 /*ApplicationTagRequirements*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 68 /*ApplicationTagIgnores*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 70 /*OngoingTagRequirements*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 72 /*OngoingTagIgnores*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 74 /*RemovalTagRequirements*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 76 /*RemovalTagIgnores*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 78 /*RemoveBuffWithTags*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 80 /*GrantedApplicationImmunityTags*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 82 /*GrantedApplicationImmunityTagIgnores*/, false)
      && verifier.VerifyVectorOfData(tablePos, 84 /*PrematureExpirationEffects*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfData(tablePos, 86 /*RoutineExpirationEffects*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfData(tablePos, 88 /*OverflowEffects*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfData(tablePos, 90 /*RelatedExtraEffectBuffId*/, 8 /*double*/, false)
      && verifier.VerifyField(tablePos, 92 /*ExtraEffectId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 94 /*ExtraEffectParameters*/, false)
      && verifier.VerifyVectorOfData(tablePos, 96 /*ExtraEffectParametersGrow1*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 98 /*ExtraEffectParametersGrow2*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 100 /*ExtraEffectRequirements*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 102 /*ExtraEffectReqPara*/, false)
      && verifier.VerifyField(tablePos, 104 /*ExtraEffectReqSetting*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 106 /*ExtraEffectCd*/, 4 /*float*/, false)
      && verifier.VerifyField(tablePos, 108 /*ExtraEffectRemoveStackNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 110 /*ExtraEffectProbability*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 112 /*BuffAction*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 114 /*TagLogic*/, WWParser.Defs.IntArrayVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
