// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiSense : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AiSense GetRootAsAiSense(ByteBuffer _bb) { return GetRootAsAiSense(_bb, new AiSense()); }
  public static AiSense GetRootAsAiSense(ByteBuffer _bb, AiSense obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiSense __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SenseType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public bool DefaultEnabled { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public WWParser.Defs.FloatRange? SenseDistanceRange { get { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.FloatRange? HorizontalAngle { get { int o = __p.__offset(12); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.FloatRange? VerticalAngle { get { int o = __p.__offset(14); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool CantBeBlock { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int BlockType { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float WalkSenseRate { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public float AirSenseRate { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public int SenseTarget { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.AiSense> CreateAiSense(FlatBufferBuilder builder,
      int id = 0,
      int sense_type = 1,
      bool default_enabled = false,
      Offset<WWParser.Defs.FloatRange> sense_distance_rangeOffset = default(Offset<WWParser.Defs.FloatRange>),
      Offset<WWParser.Defs.FloatRange> horizontal_angleOffset = default(Offset<WWParser.Defs.FloatRange>),
      Offset<WWParser.Defs.FloatRange> vertical_angleOffset = default(Offset<WWParser.Defs.FloatRange>),
      bool cant_be_block = false,
      int block_type = 0,
      float walk_sense_rate = 1.0f,
      float air_sense_rate = 1.0f,
      int sense_target = 0) {
    builder.StartTable(11);
    AiSense.AddSenseTarget(builder, sense_target);
    AiSense.AddAirSenseRate(builder, air_sense_rate);
    AiSense.AddWalkSenseRate(builder, walk_sense_rate);
    AiSense.AddBlockType(builder, block_type);
    AiSense.AddVerticalAngle(builder, vertical_angleOffset);
    AiSense.AddHorizontalAngle(builder, horizontal_angleOffset);
    AiSense.AddSenseDistanceRange(builder, sense_distance_rangeOffset);
    AiSense.AddSenseType(builder, sense_type);
    AiSense.AddId(builder, id);
    AiSense.AddCantBeBlock(builder, cant_be_block);
    AiSense.AddDefaultEnabled(builder, default_enabled);
    return AiSense.EndAiSense(builder);
  }

  public static void StartAiSense(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddSenseType(FlatBufferBuilder builder, int senseType) { builder.AddInt(1, senseType, 1); }
  public static void AddDefaultEnabled(FlatBufferBuilder builder, bool defaultEnabled) { builder.AddBool(2, defaultEnabled, false); }
  public static void AddSenseDistanceRange(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> senseDistanceRangeOffset) { builder.AddOffset(3, senseDistanceRangeOffset.Value, 0); }
  public static void AddHorizontalAngle(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> horizontalAngleOffset) { builder.AddOffset(4, horizontalAngleOffset.Value, 0); }
  public static void AddVerticalAngle(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> verticalAngleOffset) { builder.AddOffset(5, verticalAngleOffset.Value, 0); }
  public static void AddCantBeBlock(FlatBufferBuilder builder, bool cantBeBlock) { builder.AddBool(6, cantBeBlock, false); }
  public static void AddBlockType(FlatBufferBuilder builder, int blockType) { builder.AddInt(7, blockType, 0); }
  public static void AddWalkSenseRate(FlatBufferBuilder builder, float walkSenseRate) { builder.AddFloat(8, walkSenseRate, 1.0f); }
  public static void AddAirSenseRate(FlatBufferBuilder builder, float airSenseRate) { builder.AddFloat(9, airSenseRate, 1.0f); }
  public static void AddSenseTarget(FlatBufferBuilder builder, int senseTarget) { builder.AddInt(10, senseTarget, 0); }
  public static Offset<WWParser.Defs.AiSense> EndAiSense(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AiSense>(o);
  }
  public AiSenseT UnPack() {
    var _o = new AiSenseT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AiSenseT _o) {
    _o.Id = this.Id;
    _o.SenseType = this.SenseType;
    _o.DefaultEnabled = this.DefaultEnabled;
    _o.SenseDistanceRange = this.SenseDistanceRange.HasValue ? this.SenseDistanceRange.Value.UnPack() : null;
    _o.HorizontalAngle = this.HorizontalAngle.HasValue ? this.HorizontalAngle.Value.UnPack() : null;
    _o.VerticalAngle = this.VerticalAngle.HasValue ? this.VerticalAngle.Value.UnPack() : null;
    _o.CantBeBlock = this.CantBeBlock;
    _o.BlockType = this.BlockType;
    _o.WalkSenseRate = this.WalkSenseRate;
    _o.AirSenseRate = this.AirSenseRate;
    _o.SenseTarget = this.SenseTarget;
  }
  public static Offset<WWParser.Defs.AiSense> Pack(FlatBufferBuilder builder, AiSenseT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AiSense>);
    var _sense_distance_range = _o.SenseDistanceRange == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.SenseDistanceRange);
    var _horizontal_angle = _o.HorizontalAngle == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.HorizontalAngle);
    var _vertical_angle = _o.VerticalAngle == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.VerticalAngle);
    return CreateAiSense(
      builder,
      _o.Id,
      _o.SenseType,
      _o.DefaultEnabled,
      _sense_distance_range,
      _horizontal_angle,
      _vertical_angle,
      _o.CantBeBlock,
      _o.BlockType,
      _o.WalkSenseRate,
      _o.AirSenseRate,
      _o.SenseTarget);
  }
}

public class AiSenseT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("sense_type")]
  public int SenseType { get; set; }
  [Newtonsoft.Json.JsonProperty("default_enabled")]
  public bool DefaultEnabled { get; set; }
  [Newtonsoft.Json.JsonProperty("sense_distance_range")]
  public WWParser.Defs.FloatRangeT SenseDistanceRange { get; set; }
  [Newtonsoft.Json.JsonProperty("horizontal_angle")]
  public WWParser.Defs.FloatRangeT HorizontalAngle { get; set; }
  [Newtonsoft.Json.JsonProperty("vertical_angle")]
  public WWParser.Defs.FloatRangeT VerticalAngle { get; set; }
  [Newtonsoft.Json.JsonProperty("cant_be_block")]
  public bool CantBeBlock { get; set; }
  [Newtonsoft.Json.JsonProperty("block_type")]
  public int BlockType { get; set; }
  [Newtonsoft.Json.JsonProperty("walk_sense_rate")]
  public float WalkSenseRate { get; set; }
  [Newtonsoft.Json.JsonProperty("air_sense_rate")]
  public float AirSenseRate { get; set; }
  [Newtonsoft.Json.JsonProperty("sense_target")]
  public int SenseTarget { get; set; }

  public AiSenseT() {
    this.Id = 0;
    this.SenseType = 1;
    this.DefaultEnabled = false;
    this.SenseDistanceRange = null;
    this.HorizontalAngle = null;
    this.VerticalAngle = null;
    this.CantBeBlock = false;
    this.BlockType = 0;
    this.WalkSenseRate = 1.0f;
    this.AirSenseRate = 1.0f;
    this.SenseTarget = 0;
  }
}


static public class AiSenseVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SenseType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*DefaultEnabled*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTable(tablePos, 10 /*SenseDistanceRange*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 12 /*HorizontalAngle*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 14 /*VerticalAngle*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyField(tablePos, 16 /*CantBeBlock*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*BlockType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*WalkSenseRate*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*AirSenseRate*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*SenseTarget*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
