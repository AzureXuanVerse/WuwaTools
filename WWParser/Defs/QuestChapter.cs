// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct QuestChapter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static QuestChapter GetRootAsQuestChapter(ByteBuffer _bb) { return GetRootAsQuestChapter(_bb, new QuestChapter()); }
  public static QuestChapter GetRootAsQuestChapter(ByteBuffer _bb, QuestChapter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public QuestChapter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ChapterNum { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChapterNumBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetChapterNumBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetChapterNumArray() { return __p.__vector_as_array<byte>(6); }
  public string SectionNum { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSectionNumBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSectionNumBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSectionNumArray() { return __p.__vector_as_array<byte>(8); }
  public string ActName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetActNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetActNameArray() { return __p.__vector_as_array<byte>(10); }
  public string ChapterName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChapterNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetChapterNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetChapterNameArray() { return __p.__vector_as_array<byte>(12); }
  public string ChapterIcon { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChapterIconBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetChapterIconBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetChapterIconArray() { return __p.__vector_as_array<byte>(14); }
  public string PrefabName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetPrefabNameArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<WWParser.Defs.QuestChapter> CreateQuestChapter(FlatBufferBuilder builder,
      int id = 0,
      StringOffset chapter_numOffset = default(StringOffset),
      StringOffset section_numOffset = default(StringOffset),
      StringOffset act_nameOffset = default(StringOffset),
      StringOffset chapter_nameOffset = default(StringOffset),
      StringOffset chapter_iconOffset = default(StringOffset),
      StringOffset prefab_nameOffset = default(StringOffset)) {
    builder.StartTable(7);
    QuestChapter.AddPrefabName(builder, prefab_nameOffset);
    QuestChapter.AddChapterIcon(builder, chapter_iconOffset);
    QuestChapter.AddChapterName(builder, chapter_nameOffset);
    QuestChapter.AddActName(builder, act_nameOffset);
    QuestChapter.AddSectionNum(builder, section_numOffset);
    QuestChapter.AddChapterNum(builder, chapter_numOffset);
    QuestChapter.AddId(builder, id);
    return QuestChapter.EndQuestChapter(builder);
  }

  public static void StartQuestChapter(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddChapterNum(FlatBufferBuilder builder, StringOffset chapterNumOffset) { builder.AddOffset(1, chapterNumOffset.Value, 0); }
  public static void AddSectionNum(FlatBufferBuilder builder, StringOffset sectionNumOffset) { builder.AddOffset(2, sectionNumOffset.Value, 0); }
  public static void AddActName(FlatBufferBuilder builder, StringOffset actNameOffset) { builder.AddOffset(3, actNameOffset.Value, 0); }
  public static void AddChapterName(FlatBufferBuilder builder, StringOffset chapterNameOffset) { builder.AddOffset(4, chapterNameOffset.Value, 0); }
  public static void AddChapterIcon(FlatBufferBuilder builder, StringOffset chapterIconOffset) { builder.AddOffset(5, chapterIconOffset.Value, 0); }
  public static void AddPrefabName(FlatBufferBuilder builder, StringOffset prefabNameOffset) { builder.AddOffset(6, prefabNameOffset.Value, 0); }
  public static Offset<WWParser.Defs.QuestChapter> EndQuestChapter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.QuestChapter>(o);
  }
  public QuestChapterT UnPack() {
    var _o = new QuestChapterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QuestChapterT _o) {
    _o.Id = this.Id;
    _o.ChapterNum = this.ChapterNum;
    _o.SectionNum = this.SectionNum;
    _o.ActName = this.ActName;
    _o.ChapterName = this.ChapterName;
    _o.ChapterIcon = this.ChapterIcon;
    _o.PrefabName = this.PrefabName;
  }
  public static Offset<WWParser.Defs.QuestChapter> Pack(FlatBufferBuilder builder, QuestChapterT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.QuestChapter>);
    var _chapter_num = _o.ChapterNum == null ? default(StringOffset) : builder.CreateString(_o.ChapterNum);
    var _section_num = _o.SectionNum == null ? default(StringOffset) : builder.CreateString(_o.SectionNum);
    var _act_name = _o.ActName == null ? default(StringOffset) : builder.CreateString(_o.ActName);
    var _chapter_name = _o.ChapterName == null ? default(StringOffset) : builder.CreateString(_o.ChapterName);
    var _chapter_icon = _o.ChapterIcon == null ? default(StringOffset) : builder.CreateString(_o.ChapterIcon);
    var _prefab_name = _o.PrefabName == null ? default(StringOffset) : builder.CreateString(_o.PrefabName);
    return CreateQuestChapter(
      builder,
      _o.Id,
      _chapter_num,
      _section_num,
      _act_name,
      _chapter_name,
      _chapter_icon,
      _prefab_name);
  }
}

public class QuestChapterT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("chapter_num")]
  public string ChapterNum { get; set; }
  [Newtonsoft.Json.JsonProperty("section_num")]
  public string SectionNum { get; set; }
  [Newtonsoft.Json.JsonProperty("act_name")]
  public string ActName { get; set; }
  [Newtonsoft.Json.JsonProperty("chapter_name")]
  public string ChapterName { get; set; }
  [Newtonsoft.Json.JsonProperty("chapter_icon")]
  public string ChapterIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("prefab_name")]
  public string PrefabName { get; set; }

  public QuestChapterT() {
    this.Id = 0;
    this.ChapterNum = null;
    this.SectionNum = null;
    this.ActName = null;
    this.ChapterName = null;
    this.ChapterIcon = null;
    this.PrefabName = null;
  }
}


static public class QuestChapterVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*ChapterNum*/, false)
      && verifier.VerifyString(tablePos, 8 /*SectionNum*/, false)
      && verifier.VerifyString(tablePos, 10 /*ActName*/, false)
      && verifier.VerifyString(tablePos, 12 /*ChapterName*/, false)
      && verifier.VerifyString(tablePos, 14 /*ChapterIcon*/, false)
      && verifier.VerifyString(tablePos, 16 /*PrefabName*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
