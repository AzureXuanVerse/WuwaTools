// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct OpenAndCloseViewHotKey : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static OpenAndCloseViewHotKey GetRootAsOpenAndCloseViewHotKey(ByteBuffer _bb) { return GetRootAsOpenAndCloseViewHotKey(_bb, new OpenAndCloseViewHotKey()); }
  public static OpenAndCloseViewHotKey GetRootAsOpenAndCloseViewHotKey(ByteBuffer _bb, OpenAndCloseViewHotKey obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OpenAndCloseViewHotKey __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ActionName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActionNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetActionNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetActionNameArray() { return __p.__vector_as_array<byte>(6); }
  public int InputControllerType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ViewName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetViewNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetViewNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetViewNameArray() { return __p.__vector_as_array<byte>(10); }
  public string HandleType { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHandleTypeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetHandleTypeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetHandleTypeArray() { return __p.__vector_as_array<byte>(12); }
  public bool IsPressTrigger { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int PressStartTime { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PressTriggerTime { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsReleaseTrigger { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int ReleaseInvalidTime { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsPressClose { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsReleaseClose { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ViewParam(int j) { int o = __p.__offset(28); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ViewParamLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.OpenAndCloseViewHotKey> CreateOpenAndCloseViewHotKey(FlatBufferBuilder builder,
      int id = 0,
      StringOffset action_nameOffset = default(StringOffset),
      int input_controller_type = 0,
      StringOffset view_nameOffset = default(StringOffset),
      StringOffset handle_typeOffset = default(StringOffset),
      bool is_press_trigger = false,
      int press_start_time = 0,
      int press_trigger_time = 0,
      bool is_release_trigger = false,
      int release_invalid_time = 0,
      bool is_press_close = false,
      bool is_release_close = false,
      VectorOffset view_paramOffset = default(VectorOffset)) {
    builder.StartTable(13);
    OpenAndCloseViewHotKey.AddViewParam(builder, view_paramOffset);
    OpenAndCloseViewHotKey.AddReleaseInvalidTime(builder, release_invalid_time);
    OpenAndCloseViewHotKey.AddPressTriggerTime(builder, press_trigger_time);
    OpenAndCloseViewHotKey.AddPressStartTime(builder, press_start_time);
    OpenAndCloseViewHotKey.AddHandleType(builder, handle_typeOffset);
    OpenAndCloseViewHotKey.AddViewName(builder, view_nameOffset);
    OpenAndCloseViewHotKey.AddInputControllerType(builder, input_controller_type);
    OpenAndCloseViewHotKey.AddActionName(builder, action_nameOffset);
    OpenAndCloseViewHotKey.AddId(builder, id);
    OpenAndCloseViewHotKey.AddIsReleaseClose(builder, is_release_close);
    OpenAndCloseViewHotKey.AddIsPressClose(builder, is_press_close);
    OpenAndCloseViewHotKey.AddIsReleaseTrigger(builder, is_release_trigger);
    OpenAndCloseViewHotKey.AddIsPressTrigger(builder, is_press_trigger);
    return OpenAndCloseViewHotKey.EndOpenAndCloseViewHotKey(builder);
  }

  public static void StartOpenAndCloseViewHotKey(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActionName(FlatBufferBuilder builder, StringOffset actionNameOffset) { builder.AddOffset(1, actionNameOffset.Value, 0); }
  public static void AddInputControllerType(FlatBufferBuilder builder, int inputControllerType) { builder.AddInt(2, inputControllerType, 0); }
  public static void AddViewName(FlatBufferBuilder builder, StringOffset viewNameOffset) { builder.AddOffset(3, viewNameOffset.Value, 0); }
  public static void AddHandleType(FlatBufferBuilder builder, StringOffset handleTypeOffset) { builder.AddOffset(4, handleTypeOffset.Value, 0); }
  public static void AddIsPressTrigger(FlatBufferBuilder builder, bool isPressTrigger) { builder.AddBool(5, isPressTrigger, false); }
  public static void AddPressStartTime(FlatBufferBuilder builder, int pressStartTime) { builder.AddInt(6, pressStartTime, 0); }
  public static void AddPressTriggerTime(FlatBufferBuilder builder, int pressTriggerTime) { builder.AddInt(7, pressTriggerTime, 0); }
  public static void AddIsReleaseTrigger(FlatBufferBuilder builder, bool isReleaseTrigger) { builder.AddBool(8, isReleaseTrigger, false); }
  public static void AddReleaseInvalidTime(FlatBufferBuilder builder, int releaseInvalidTime) { builder.AddInt(9, releaseInvalidTime, 0); }
  public static void AddIsPressClose(FlatBufferBuilder builder, bool isPressClose) { builder.AddBool(10, isPressClose, false); }
  public static void AddIsReleaseClose(FlatBufferBuilder builder, bool isReleaseClose) { builder.AddBool(11, isReleaseClose, false); }
  public static void AddViewParam(FlatBufferBuilder builder, VectorOffset viewParamOffset) { builder.AddOffset(12, viewParamOffset.Value, 0); }
  public static VectorOffset CreateViewParamVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateViewParamVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateViewParamVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateViewParamVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartViewParamVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.OpenAndCloseViewHotKey> EndOpenAndCloseViewHotKey(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.OpenAndCloseViewHotKey>(o);
  }
  public OpenAndCloseViewHotKeyT UnPack() {
    var _o = new OpenAndCloseViewHotKeyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OpenAndCloseViewHotKeyT _o) {
    _o.Id = this.Id;
    _o.ActionName = this.ActionName;
    _o.InputControllerType = this.InputControllerType;
    _o.ViewName = this.ViewName;
    _o.HandleType = this.HandleType;
    _o.IsPressTrigger = this.IsPressTrigger;
    _o.PressStartTime = this.PressStartTime;
    _o.PressTriggerTime = this.PressTriggerTime;
    _o.IsReleaseTrigger = this.IsReleaseTrigger;
    _o.ReleaseInvalidTime = this.ReleaseInvalidTime;
    _o.IsPressClose = this.IsPressClose;
    _o.IsReleaseClose = this.IsReleaseClose;
    _o.ViewParam = new List<string>();
    for (var _j = 0; _j < this.ViewParamLength; ++_j) {_o.ViewParam.Add(this.ViewParam(_j));}
  }
  public static Offset<WWParser.Defs.OpenAndCloseViewHotKey> Pack(FlatBufferBuilder builder, OpenAndCloseViewHotKeyT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.OpenAndCloseViewHotKey>);
    var _action_name = _o.ActionName == null ? default(StringOffset) : builder.CreateString(_o.ActionName);
    var _view_name = _o.ViewName == null ? default(StringOffset) : builder.CreateString(_o.ViewName);
    var _handle_type = _o.HandleType == null ? default(StringOffset) : builder.CreateString(_o.HandleType);
    var _view_param = default(VectorOffset);
    if (_o.ViewParam != null) {
      var __view_param = new StringOffset[_o.ViewParam.Count];
      for (var _j = 0; _j < __view_param.Length; ++_j) { __view_param[_j] = builder.CreateString(_o.ViewParam[_j]); }
      _view_param = CreateViewParamVector(builder, __view_param);
    }
    return CreateOpenAndCloseViewHotKey(
      builder,
      _o.Id,
      _action_name,
      _o.InputControllerType,
      _view_name,
      _handle_type,
      _o.IsPressTrigger,
      _o.PressStartTime,
      _o.PressTriggerTime,
      _o.IsReleaseTrigger,
      _o.ReleaseInvalidTime,
      _o.IsPressClose,
      _o.IsReleaseClose,
      _view_param);
  }
}

public class OpenAndCloseViewHotKeyT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("action_name")]
  public string ActionName { get; set; }
  [Newtonsoft.Json.JsonProperty("input_controller_type")]
  public int InputControllerType { get; set; }
  [Newtonsoft.Json.JsonProperty("view_name")]
  public string ViewName { get; set; }
  [Newtonsoft.Json.JsonProperty("handle_type")]
  public string HandleType { get; set; }
  [Newtonsoft.Json.JsonProperty("is_press_trigger")]
  public bool IsPressTrigger { get; set; }
  [Newtonsoft.Json.JsonProperty("press_start_time")]
  public int PressStartTime { get; set; }
  [Newtonsoft.Json.JsonProperty("press_trigger_time")]
  public int PressTriggerTime { get; set; }
  [Newtonsoft.Json.JsonProperty("is_release_trigger")]
  public bool IsReleaseTrigger { get; set; }
  [Newtonsoft.Json.JsonProperty("release_invalid_time")]
  public int ReleaseInvalidTime { get; set; }
  [Newtonsoft.Json.JsonProperty("is_press_close")]
  public bool IsPressClose { get; set; }
  [Newtonsoft.Json.JsonProperty("is_release_close")]
  public bool IsReleaseClose { get; set; }
  [Newtonsoft.Json.JsonProperty("view_param")]
  public List<string> ViewParam { get; set; }

  public OpenAndCloseViewHotKeyT() {
    this.Id = 0;
    this.ActionName = null;
    this.InputControllerType = 0;
    this.ViewName = null;
    this.HandleType = null;
    this.IsPressTrigger = false;
    this.PressStartTime = 0;
    this.PressTriggerTime = 0;
    this.IsReleaseTrigger = false;
    this.ReleaseInvalidTime = 0;
    this.IsPressClose = false;
    this.IsReleaseClose = false;
    this.ViewParam = null;
  }
}


static public class OpenAndCloseViewHotKeyVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*ActionName*/, false)
      && verifier.VerifyField(tablePos, 8 /*InputControllerType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*ViewName*/, false)
      && verifier.VerifyString(tablePos, 12 /*HandleType*/, false)
      && verifier.VerifyField(tablePos, 14 /*IsPressTrigger*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*PressStartTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*PressTriggerTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*IsReleaseTrigger*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*ReleaseInvalidTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*IsPressClose*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 26 /*IsReleaseClose*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 28 /*ViewParam*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
