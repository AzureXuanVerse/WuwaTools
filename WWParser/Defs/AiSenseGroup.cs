// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiSenseGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AiSenseGroup GetRootAsAiSenseGroup(ByteBuffer _bb) { return GetRootAsAiSenseGroup(_bb, new AiSenseGroup()); }
  public static AiSenseGroup GetRootAsAiSenseGroup(ByteBuffer _bb, AiSenseGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiSenseGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.FloatRange? LoseDelay { get { int o = __p.__offset(6); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int AiSenseIds(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AiSenseIdsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAiSenseIdsBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetAiSenseIdsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetAiSenseIdsArray() { return __p.__vector_as_array<int>(8); }
  public float ShareDis { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<WWParser.Defs.AiSenseGroup> CreateAiSenseGroup(FlatBufferBuilder builder,
      int id = 0,
      Offset<WWParser.Defs.FloatRange> lose_delayOffset = default(Offset<WWParser.Defs.FloatRange>),
      VectorOffset ai_sense_idsOffset = default(VectorOffset),
      float share_dis = 0.0f) {
    builder.StartTable(4);
    AiSenseGroup.AddShareDis(builder, share_dis);
    AiSenseGroup.AddAiSenseIds(builder, ai_sense_idsOffset);
    AiSenseGroup.AddLoseDelay(builder, lose_delayOffset);
    AiSenseGroup.AddId(builder, id);
    return AiSenseGroup.EndAiSenseGroup(builder);
  }

  public static void StartAiSenseGroup(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddLoseDelay(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> loseDelayOffset) { builder.AddOffset(1, loseDelayOffset.Value, 0); }
  public static void AddAiSenseIds(FlatBufferBuilder builder, VectorOffset aiSenseIdsOffset) { builder.AddOffset(2, aiSenseIdsOffset.Value, 0); }
  public static VectorOffset CreateAiSenseIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAiSenseIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAiSenseIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAiSenseIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAiSenseIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShareDis(FlatBufferBuilder builder, float shareDis) { builder.AddFloat(3, shareDis, 0.0f); }
  public static Offset<WWParser.Defs.AiSenseGroup> EndAiSenseGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AiSenseGroup>(o);
  }
  public AiSenseGroupT UnPack() {
    var _o = new AiSenseGroupT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AiSenseGroupT _o) {
    _o.Id = this.Id;
    _o.LoseDelay = this.LoseDelay.HasValue ? this.LoseDelay.Value.UnPack() : null;
    _o.AiSenseIds = new List<int>();
    for (var _j = 0; _j < this.AiSenseIdsLength; ++_j) {_o.AiSenseIds.Add(this.AiSenseIds(_j));}
    _o.ShareDis = this.ShareDis;
  }
  public static Offset<WWParser.Defs.AiSenseGroup> Pack(FlatBufferBuilder builder, AiSenseGroupT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AiSenseGroup>);
    var _lose_delay = _o.LoseDelay == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.LoseDelay);
    var _ai_sense_ids = default(VectorOffset);
    if (_o.AiSenseIds != null) {
      var __ai_sense_ids = _o.AiSenseIds.ToArray();
      _ai_sense_ids = CreateAiSenseIdsVector(builder, __ai_sense_ids);
    }
    return CreateAiSenseGroup(
      builder,
      _o.Id,
      _lose_delay,
      _ai_sense_ids,
      _o.ShareDis);
  }
}

public class AiSenseGroupT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("lose_delay")]
  public WWParser.Defs.FloatRangeT LoseDelay { get; set; }
  [Newtonsoft.Json.JsonProperty("ai_sense_ids")]
  public List<int> AiSenseIds { get; set; }
  [Newtonsoft.Json.JsonProperty("share_dis")]
  public float ShareDis { get; set; }

  public AiSenseGroupT() {
    this.Id = 0;
    this.LoseDelay = null;
    this.AiSenseIds = null;
    this.ShareDis = 0.0f;
  }
}


static public class AiSenseGroupVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 6 /*LoseDelay*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*AiSenseIds*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 10 /*ShareDis*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
