// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ExploreType : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ExploreType GetRootAsExploreType(ByteBuffer _bb) { return GetRootAsExploreType(_bb, new ExploreType()); }
  public static ExploreType GetRootAsExploreType(ByteBuffer _bb, ExploreType obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ExploreType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ExploreType_ { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Icon { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(8); }
  public string DescBg { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBgBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDescBgBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescBgArray() { return __p.__vector_as_array<byte>(10); }
  public string LockDescId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLockDescIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetLockDescIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetLockDescIdArray() { return __p.__vector_as_array<byte>(12); }
  public string DescId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetDescIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDescIdArray() { return __p.__vector_as_array<byte>(14); }
  public int CountMode { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SortIndex { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.ExploreType> CreateExploreType(FlatBufferBuilder builder,
      int explore_type = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset desc_bgOffset = default(StringOffset),
      StringOffset lock_desc_idOffset = default(StringOffset),
      StringOffset desc_idOffset = default(StringOffset),
      int count_mode = 0,
      int sort_index = 0) {
    builder.StartTable(8);
    ExploreType.AddSortIndex(builder, sort_index);
    ExploreType.AddCountMode(builder, count_mode);
    ExploreType.AddDescId(builder, desc_idOffset);
    ExploreType.AddLockDescId(builder, lock_desc_idOffset);
    ExploreType.AddDescBg(builder, desc_bgOffset);
    ExploreType.AddIcon(builder, iconOffset);
    ExploreType.AddName(builder, nameOffset);
    ExploreType.AddExploreType(builder, explore_type);
    return ExploreType.EndExploreType(builder);
  }

  public static void StartExploreType(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddExploreType(FlatBufferBuilder builder, int exploreType) { builder.AddInt(0, exploreType, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(2, iconOffset.Value, 0); }
  public static void AddDescBg(FlatBufferBuilder builder, StringOffset descBgOffset) { builder.AddOffset(3, descBgOffset.Value, 0); }
  public static void AddLockDescId(FlatBufferBuilder builder, StringOffset lockDescIdOffset) { builder.AddOffset(4, lockDescIdOffset.Value, 0); }
  public static void AddDescId(FlatBufferBuilder builder, StringOffset descIdOffset) { builder.AddOffset(5, descIdOffset.Value, 0); }
  public static void AddCountMode(FlatBufferBuilder builder, int countMode) { builder.AddInt(6, countMode, 0); }
  public static void AddSortIndex(FlatBufferBuilder builder, int sortIndex) { builder.AddInt(7, sortIndex, 0); }
  public static Offset<WWParser.Defs.ExploreType> EndExploreType(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ExploreType>(o);
  }
  public ExploreTypeT UnPack() {
    var _o = new ExploreTypeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ExploreTypeT _o) {
    _o.ExploreType_ = this.ExploreType_;
    _o.Name = this.Name;
    _o.Icon = this.Icon;
    _o.DescBg = this.DescBg;
    _o.LockDescId = this.LockDescId;
    _o.DescId = this.DescId;
    _o.CountMode = this.CountMode;
    _o.SortIndex = this.SortIndex;
  }
  public static Offset<WWParser.Defs.ExploreType> Pack(FlatBufferBuilder builder, ExploreTypeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ExploreType>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _desc_bg = _o.DescBg == null ? default(StringOffset) : builder.CreateString(_o.DescBg);
    var _lock_desc_id = _o.LockDescId == null ? default(StringOffset) : builder.CreateString(_o.LockDescId);
    var _desc_id = _o.DescId == null ? default(StringOffset) : builder.CreateString(_o.DescId);
    return CreateExploreType(
      builder,
      _o.ExploreType_,
      _name,
      _icon,
      _desc_bg,
      _lock_desc_id,
      _desc_id,
      _o.CountMode,
      _o.SortIndex);
  }
}

public class ExploreTypeT
{
  [Newtonsoft.Json.JsonProperty("explore_type")]
  public int ExploreType_ { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("desc_bg")]
  public string DescBg { get; set; }
  [Newtonsoft.Json.JsonProperty("lock_desc_id")]
  public string LockDescId { get; set; }
  [Newtonsoft.Json.JsonProperty("desc_id")]
  public string DescId { get; set; }
  [Newtonsoft.Json.JsonProperty("count_mode")]
  public int CountMode { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_index")]
  public int SortIndex { get; set; }

  public ExploreTypeT() {
    this.ExploreType_ = 0;
    this.Name = null;
    this.Icon = null;
    this.DescBg = null;
    this.LockDescId = null;
    this.DescId = null;
    this.CountMode = 0;
    this.SortIndex = 0;
  }
}


static public class ExploreTypeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ExploreType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyString(tablePos, 8 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 10 /*DescBg*/, false)
      && verifier.VerifyString(tablePos, 12 /*LockDescId*/, false)
      && verifier.VerifyString(tablePos, 14 /*DescId*/, false)
      && verifier.VerifyField(tablePos, 16 /*CountMode*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*SortIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
