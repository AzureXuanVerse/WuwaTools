// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BattlePassUnlockPop : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BattlePassUnlockPop GetRootAsBattlePassUnlockPop(ByteBuffer _bb) { return GetRootAsBattlePassUnlockPop(_bb, new BattlePassUnlockPop()); }
  public static BattlePassUnlockPop GetRootAsBattlePassUnlockPop(ByteBuffer _bb, BattlePassUnlockPop obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BattlePassUnlockPop __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TpyeId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string UnlockTitle { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnlockTitleBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetUnlockTitleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetUnlockTitleArray() { return __p.__vector_as_array<byte>(6); }
  public string UnlockText { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnlockTextBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetUnlockTextBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetUnlockTextArray() { return __p.__vector_as_array<byte>(8); }
  public WWParser.Defs.DicIntInt? UnlockReward(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UnlockRewardLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.BattlePassUnlockPop> CreateBattlePassUnlockPop(FlatBufferBuilder builder,
      int tpye_id = 0,
      StringOffset unlock_titleOffset = default(StringOffset),
      StringOffset unlock_textOffset = default(StringOffset),
      VectorOffset unlock_rewardOffset = default(VectorOffset)) {
    builder.StartTable(4);
    BattlePassUnlockPop.AddUnlockReward(builder, unlock_rewardOffset);
    BattlePassUnlockPop.AddUnlockText(builder, unlock_textOffset);
    BattlePassUnlockPop.AddUnlockTitle(builder, unlock_titleOffset);
    BattlePassUnlockPop.AddTpyeId(builder, tpye_id);
    return BattlePassUnlockPop.EndBattlePassUnlockPop(builder);
  }

  public static void StartBattlePassUnlockPop(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddTpyeId(FlatBufferBuilder builder, int tpyeId) { builder.AddInt(0, tpyeId, 0); }
  public static void AddUnlockTitle(FlatBufferBuilder builder, StringOffset unlockTitleOffset) { builder.AddOffset(1, unlockTitleOffset.Value, 0); }
  public static void AddUnlockText(FlatBufferBuilder builder, StringOffset unlockTextOffset) { builder.AddOffset(2, unlockTextOffset.Value, 0); }
  public static void AddUnlockReward(FlatBufferBuilder builder, VectorOffset unlockRewardOffset) { builder.AddOffset(3, unlockRewardOffset.Value, 0); }
  public static VectorOffset CreateUnlockRewardVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUnlockRewardVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUnlockRewardVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUnlockRewardVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUnlockRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.BattlePassUnlockPop> EndBattlePassUnlockPop(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BattlePassUnlockPop>(o);
  }
  public BattlePassUnlockPopT UnPack() {
    var _o = new BattlePassUnlockPopT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BattlePassUnlockPopT _o) {
    _o.TpyeId = this.TpyeId;
    _o.UnlockTitle = this.UnlockTitle;
    _o.UnlockText = this.UnlockText;
    _o.UnlockReward = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.UnlockRewardLength; ++_j) {_o.UnlockReward.Add(this.UnlockReward(_j).HasValue ? this.UnlockReward(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.BattlePassUnlockPop> Pack(FlatBufferBuilder builder, BattlePassUnlockPopT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BattlePassUnlockPop>);
    var _unlock_title = _o.UnlockTitle == null ? default(StringOffset) : builder.CreateString(_o.UnlockTitle);
    var _unlock_text = _o.UnlockText == null ? default(StringOffset) : builder.CreateString(_o.UnlockText);
    var _unlock_reward = default(VectorOffset);
    if (_o.UnlockReward != null) {
      var __unlock_reward = new Offset<WWParser.Defs.DicIntInt>[_o.UnlockReward.Count];
      for (var _j = 0; _j < __unlock_reward.Length; ++_j) { __unlock_reward[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.UnlockReward[_j]); }
      _unlock_reward = CreateUnlockRewardVector(builder, __unlock_reward);
    }
    return CreateBattlePassUnlockPop(
      builder,
      _o.TpyeId,
      _unlock_title,
      _unlock_text,
      _unlock_reward);
  }
}

public class BattlePassUnlockPopT
{
  [Newtonsoft.Json.JsonProperty("tpye_id")]
  public int TpyeId { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_title")]
  public string UnlockTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_text")]
  public string UnlockText { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_reward")]
  public List<WWParser.Defs.DicIntIntT> UnlockReward { get; set; }

  public BattlePassUnlockPopT() {
    this.TpyeId = 0;
    this.UnlockTitle = null;
    this.UnlockText = null;
    this.UnlockReward = null;
  }
}


static public class BattlePassUnlockPopVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TpyeId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*UnlockTitle*/, false)
      && verifier.VerifyString(tablePos, 8 /*UnlockText*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*UnlockReward*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
