// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GachaPool : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GachaPool GetRootAsGachaPool(ByteBuffer _bb) { return GetRootAsGachaPool(_bb, new GachaPool()); }
  public static GachaPool GetRootAsGachaPool(ByteBuffer _bb, GachaPool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GachaPool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GachaId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Sort { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)10; } }

  public static Offset<WWParser.Defs.GachaPool> CreateGachaPool(FlatBufferBuilder builder,
      int id = 0,
      int gacha_id = 0,
      int sort = 10) {
    builder.StartTable(3);
    GachaPool.AddSort(builder, sort);
    GachaPool.AddGachaId(builder, gacha_id);
    GachaPool.AddId(builder, id);
    return GachaPool.EndGachaPool(builder);
  }

  public static void StartGachaPool(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddGachaId(FlatBufferBuilder builder, int gachaId) { builder.AddInt(1, gachaId, 0); }
  public static void AddSort(FlatBufferBuilder builder, int sort) { builder.AddInt(2, sort, 10); }
  public static Offset<WWParser.Defs.GachaPool> EndGachaPool(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.GachaPool>(o);
  }
  public GachaPoolT UnPack() {
    var _o = new GachaPoolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GachaPoolT _o) {
    _o.Id = this.Id;
    _o.GachaId = this.GachaId;
    _o.Sort = this.Sort;
  }
  public static Offset<WWParser.Defs.GachaPool> Pack(FlatBufferBuilder builder, GachaPoolT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.GachaPool>);
    return CreateGachaPool(
      builder,
      _o.Id,
      _o.GachaId,
      _o.Sort);
  }
}

public class GachaPoolT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("gacha_id")]
  public int GachaId { get; set; }
  [Newtonsoft.Json.JsonProperty("sort")]
  public int Sort { get; set; }

  public GachaPoolT() {
    this.Id = 0;
    this.GachaId = 0;
    this.Sort = 10;
  }
}


static public class GachaPoolVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*GachaId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Sort*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
