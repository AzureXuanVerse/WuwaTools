// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Color : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Color GetRootAsColor(ByteBuffer _bb) { return GetRootAsColor(_bb, new Color()); }
  public static Color GetRootAsColor(ByteBuffer _bb, Color obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Color __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float R { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float G { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float B { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float A { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<WWParser.Defs.Color> CreateColor(FlatBufferBuilder builder,
      float r = 0.0f,
      float g = 0.0f,
      float b = 0.0f,
      float a = 0.0f) {
    builder.StartTable(4);
    Color.AddA(builder, a);
    Color.AddB(builder, b);
    Color.AddG(builder, g);
    Color.AddR(builder, r);
    return Color.EndColor(builder);
  }

  public static void StartColor(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddR(FlatBufferBuilder builder, float r) { builder.AddFloat(0, r, 0.0f); }
  public static void AddG(FlatBufferBuilder builder, float g) { builder.AddFloat(1, g, 0.0f); }
  public static void AddB(FlatBufferBuilder builder, float b) { builder.AddFloat(2, b, 0.0f); }
  public static void AddA(FlatBufferBuilder builder, float a) { builder.AddFloat(3, a, 0.0f); }
  public static Offset<WWParser.Defs.Color> EndColor(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Color>(o);
  }
  public ColorT UnPack() {
    var _o = new ColorT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ColorT _o) {
    _o.R = this.R;
    _o.G = this.G;
    _o.B = this.B;
    _o.A = this.A;
  }
  public static Offset<WWParser.Defs.Color> Pack(FlatBufferBuilder builder, ColorT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Color>);
    return CreateColor(
      builder,
      _o.R,
      _o.G,
      _o.B,
      _o.A);
  }
}

public class ColorT
{
  [Newtonsoft.Json.JsonProperty("r")]
  public float R { get; set; }
  [Newtonsoft.Json.JsonProperty("g")]
  public float G { get; set; }
  [Newtonsoft.Json.JsonProperty("b")]
  public float B { get; set; }
  [Newtonsoft.Json.JsonProperty("a")]
  public float A { get; set; }

  public ColorT() {
    this.R = 0.0f;
    this.G = 0.0f;
    this.B = 0.0f;
    this.A = 0.0f;
  }
}


static public class ColorVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*R*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*G*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*B*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*A*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
