// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BlackCoastThemeConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BlackCoastThemeConfig GetRootAsBlackCoastThemeConfig(ByteBuffer _bb) { return GetRootAsBlackCoastThemeConfig(_bb, new BlackCoastThemeConfig()); }
  public static BlackCoastThemeConfig GetRootAsBlackCoastThemeConfig(ByteBuffer _bb, BlackCoastThemeConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BlackCoastThemeConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ActivityId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WeaponPreviewId(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int WeaponPreviewIdLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetWeaponPreviewIdBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetWeaponPreviewIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetWeaponPreviewIdArray() { return __p.__vector_as_array<int>(8); }

  public static Offset<WWParser.Defs.BlackCoastThemeConfig> CreateBlackCoastThemeConfig(FlatBufferBuilder builder,
      int activity_id = 0,
      int item_id = 0,
      VectorOffset weapon_preview_idOffset = default(VectorOffset)) {
    builder.StartTable(3);
    BlackCoastThemeConfig.AddWeaponPreviewId(builder, weapon_preview_idOffset);
    BlackCoastThemeConfig.AddItemId(builder, item_id);
    BlackCoastThemeConfig.AddActivityId(builder, activity_id);
    return BlackCoastThemeConfig.EndBlackCoastThemeConfig(builder);
  }

  public static void StartBlackCoastThemeConfig(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(0, activityId, 0); }
  public static void AddItemId(FlatBufferBuilder builder, int itemId) { builder.AddInt(1, itemId, 0); }
  public static void AddWeaponPreviewId(FlatBufferBuilder builder, VectorOffset weaponPreviewIdOffset) { builder.AddOffset(2, weaponPreviewIdOffset.Value, 0); }
  public static VectorOffset CreateWeaponPreviewIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateWeaponPreviewIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponPreviewIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponPreviewIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartWeaponPreviewIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.BlackCoastThemeConfig> EndBlackCoastThemeConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BlackCoastThemeConfig>(o);
  }
  public BlackCoastThemeConfigT UnPack() {
    var _o = new BlackCoastThemeConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BlackCoastThemeConfigT _o) {
    _o.ActivityId = this.ActivityId;
    _o.ItemId = this.ItemId;
    _o.WeaponPreviewId = new List<int>();
    for (var _j = 0; _j < this.WeaponPreviewIdLength; ++_j) {_o.WeaponPreviewId.Add(this.WeaponPreviewId(_j));}
  }
  public static Offset<WWParser.Defs.BlackCoastThemeConfig> Pack(FlatBufferBuilder builder, BlackCoastThemeConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BlackCoastThemeConfig>);
    var _weapon_preview_id = default(VectorOffset);
    if (_o.WeaponPreviewId != null) {
      var __weapon_preview_id = _o.WeaponPreviewId.ToArray();
      _weapon_preview_id = CreateWeaponPreviewIdVector(builder, __weapon_preview_id);
    }
    return CreateBlackCoastThemeConfig(
      builder,
      _o.ActivityId,
      _o.ItemId,
      _weapon_preview_id);
  }
}

public class BlackCoastThemeConfigT
{
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("item_id")]
  public int ItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("weapon_preview_id")]
  public List<int> WeaponPreviewId { get; set; }

  public BlackCoastThemeConfigT() {
    this.ActivityId = 0;
    this.ItemId = 0;
    this.WeaponPreviewId = null;
  }
}


static public class BlackCoastThemeConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*WeaponPreviewId*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
