// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SkillDescribeStruct : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SkillDescribeStruct GetRootAsSkillDescribeStruct(ByteBuffer _bb) { return GetRootAsSkillDescribeStruct(_bb, new SkillDescribeStruct()); }
  public static SkillDescribeStruct GetRootAsSkillDescribeStruct(ByteBuffer _bb, SkillDescribeStruct obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillDescribeStruct __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Title { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(4); }
  public string Content { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetContentBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetContentArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<WWParser.Defs.SkillDescribeStruct> CreateSkillDescribeStruct(FlatBufferBuilder builder,
      StringOffset titleOffset = default(StringOffset),
      StringOffset contentOffset = default(StringOffset)) {
    builder.StartTable(2);
    SkillDescribeStruct.AddContent(builder, contentOffset);
    SkillDescribeStruct.AddTitle(builder, titleOffset);
    return SkillDescribeStruct.EndSkillDescribeStruct(builder);
  }

  public static void StartSkillDescribeStruct(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(0, titleOffset.Value, 0); }
  public static void AddContent(FlatBufferBuilder builder, StringOffset contentOffset) { builder.AddOffset(1, contentOffset.Value, 0); }
  public static Offset<WWParser.Defs.SkillDescribeStruct> EndSkillDescribeStruct(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SkillDescribeStruct>(o);
  }
  public SkillDescribeStructT UnPack() {
    var _o = new SkillDescribeStructT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillDescribeStructT _o) {
    _o.Title = this.Title;
    _o.Content = this.Content;
  }
  public static Offset<WWParser.Defs.SkillDescribeStruct> Pack(FlatBufferBuilder builder, SkillDescribeStructT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SkillDescribeStruct>);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _content = _o.Content == null ? default(StringOffset) : builder.CreateString(_o.Content);
    return CreateSkillDescribeStruct(
      builder,
      _title,
      _content);
  }
}

public class SkillDescribeStructT
{
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("content")]
  public string Content { get; set; }

  public SkillDescribeStructT() {
    this.Title = null;
    this.Content = null;
  }
}


static public class SkillDescribeStructVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Title*/, false)
      && verifier.VerifyString(tablePos, 6 /*Content*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
