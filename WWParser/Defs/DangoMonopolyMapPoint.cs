// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DangoMonopolyMapPoint : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DangoMonopolyMapPoint GetRootAsDangoMonopolyMapPoint(ByteBuffer _bb) { return GetRootAsDangoMonopolyMapPoint(_bb, new DangoMonopolyMapPoint()); }
  public static DangoMonopolyMapPoint GetRootAsDangoMonopolyMapPoint(ByteBuffer _bb, DangoMonopolyMapPoint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DangoMonopolyMapPoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SeasonId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SortId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EntityId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.DangoMonopolyMapPoint> CreateDangoMonopolyMapPoint(FlatBufferBuilder builder,
      int id = 0,
      int season_id = 0,
      int sort_id = 0,
      int entity_id = 0) {
    builder.StartTable(4);
    DangoMonopolyMapPoint.AddEntityId(builder, entity_id);
    DangoMonopolyMapPoint.AddSortId(builder, sort_id);
    DangoMonopolyMapPoint.AddSeasonId(builder, season_id);
    DangoMonopolyMapPoint.AddId(builder, id);
    return DangoMonopolyMapPoint.EndDangoMonopolyMapPoint(builder);
  }

  public static void StartDangoMonopolyMapPoint(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddSeasonId(FlatBufferBuilder builder, int seasonId) { builder.AddInt(1, seasonId, 0); }
  public static void AddSortId(FlatBufferBuilder builder, int sortId) { builder.AddInt(2, sortId, 0); }
  public static void AddEntityId(FlatBufferBuilder builder, int entityId) { builder.AddInt(3, entityId, 0); }
  public static Offset<WWParser.Defs.DangoMonopolyMapPoint> EndDangoMonopolyMapPoint(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DangoMonopolyMapPoint>(o);
  }
  public DangoMonopolyMapPointT UnPack() {
    var _o = new DangoMonopolyMapPointT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DangoMonopolyMapPointT _o) {
    _o.Id = this.Id;
    _o.SeasonId = this.SeasonId;
    _o.SortId = this.SortId;
    _o.EntityId = this.EntityId;
  }
  public static Offset<WWParser.Defs.DangoMonopolyMapPoint> Pack(FlatBufferBuilder builder, DangoMonopolyMapPointT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DangoMonopolyMapPoint>);
    return CreateDangoMonopolyMapPoint(
      builder,
      _o.Id,
      _o.SeasonId,
      _o.SortId,
      _o.EntityId);
  }
}

public class DangoMonopolyMapPointT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("season_id")]
  public int SeasonId { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_id")]
  public int SortId { get; set; }
  [Newtonsoft.Json.JsonProperty("entity_id")]
  public int EntityId { get; set; }

  public DangoMonopolyMapPointT() {
    this.Id = 0;
    this.SeasonId = 0;
    this.SortId = 0;
    this.EntityId = 0;
  }
}


static public class DangoMonopolyMapPointVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SeasonId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*SortId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*EntityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
