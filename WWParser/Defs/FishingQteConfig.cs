// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FishingQteConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FishingQteConfig GetRootAsFishingQteConfig(ByteBuffer _bb) { return GetRootAsFishingQteConfig(_bb, new FishingQteConfig()); }
  public static FishingQteConfig GetRootAsFishingQteConfig(ByteBuffer _bb, FishingQteConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FishingQteConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Comment { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommentBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCommentBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCommentArray() { return __p.__vector_as_array<byte>(6); }
  public int RandomArea(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RandomAreaLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRandomAreaBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetRandomAreaBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetRandomAreaArray() { return __p.__vector_as_array<int>(8); }
  public WWParser.Defs.IntArray? InvalidArea(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.IntArray?)(new WWParser.Defs.IntArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int InvalidAreaLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int MaxScore { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)100; } }
  public int HitAreaScore { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)10; } }
  public int PerfectSize { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? PerfectAppearRate(int j) { int o = __p.__offset(18); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PerfectAppearRateLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int PerfectScore { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? CursorSpeed(int j) { int o = __p.__offset(22); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CursorSpeedLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int HitColdTime { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)100; } }
  public int ScoreUp { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int MultiBoxGroup { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public float HiddenInterval(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int HiddenIntervalLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetHiddenIntervalBytes() { return __p.__vector_as_span<float>(30, 4); }
#else
  public ArraySegment<byte>? GetHiddenIntervalBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public float[] GetHiddenIntervalArray() { return __p.__vector_as_array<float>(30); }
  public WWParser.Defs.DicIntInt? RouletteRotateSpeed(int j) { int o = __p.__offset(32); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RouletteRotateSpeedLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int MistakeScore { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsAnticlockwise { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int RefreshType { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.FishingQteConfig> CreateFishingQteConfig(FlatBufferBuilder builder,
      int id = 0,
      StringOffset commentOffset = default(StringOffset),
      VectorOffset random_areaOffset = default(VectorOffset),
      VectorOffset invalid_areaOffset = default(VectorOffset),
      int max_score = 100,
      int hit_area_score = 10,
      int perfect_size = 0,
      VectorOffset perfect_appear_rateOffset = default(VectorOffset),
      int perfect_score = 0,
      VectorOffset cursor_speedOffset = default(VectorOffset),
      int hit_cold_time = 100,
      int score_up = 1,
      int multi_box_group = 1,
      VectorOffset hidden_intervalOffset = default(VectorOffset),
      VectorOffset roulette_rotate_speedOffset = default(VectorOffset),
      int mistake_score = 0,
      bool is_anticlockwise = false,
      int refresh_type = 0) {
    builder.StartTable(18);
    FishingQteConfig.AddRefreshType(builder, refresh_type);
    FishingQteConfig.AddMistakeScore(builder, mistake_score);
    FishingQteConfig.AddRouletteRotateSpeed(builder, roulette_rotate_speedOffset);
    FishingQteConfig.AddHiddenInterval(builder, hidden_intervalOffset);
    FishingQteConfig.AddMultiBoxGroup(builder, multi_box_group);
    FishingQteConfig.AddScoreUp(builder, score_up);
    FishingQteConfig.AddHitColdTime(builder, hit_cold_time);
    FishingQteConfig.AddCursorSpeed(builder, cursor_speedOffset);
    FishingQteConfig.AddPerfectScore(builder, perfect_score);
    FishingQteConfig.AddPerfectAppearRate(builder, perfect_appear_rateOffset);
    FishingQteConfig.AddPerfectSize(builder, perfect_size);
    FishingQteConfig.AddHitAreaScore(builder, hit_area_score);
    FishingQteConfig.AddMaxScore(builder, max_score);
    FishingQteConfig.AddInvalidArea(builder, invalid_areaOffset);
    FishingQteConfig.AddRandomArea(builder, random_areaOffset);
    FishingQteConfig.AddComment(builder, commentOffset);
    FishingQteConfig.AddId(builder, id);
    FishingQteConfig.AddIsAnticlockwise(builder, is_anticlockwise);
    return FishingQteConfig.EndFishingQteConfig(builder);
  }

  public static void StartFishingQteConfig(FlatBufferBuilder builder) { builder.StartTable(18); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddComment(FlatBufferBuilder builder, StringOffset commentOffset) { builder.AddOffset(1, commentOffset.Value, 0); }
  public static void AddRandomArea(FlatBufferBuilder builder, VectorOffset randomAreaOffset) { builder.AddOffset(2, randomAreaOffset.Value, 0); }
  public static VectorOffset CreateRandomAreaVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRandomAreaVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRandomAreaVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRandomAreaVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRandomAreaVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInvalidArea(FlatBufferBuilder builder, VectorOffset invalidAreaOffset) { builder.AddOffset(3, invalidAreaOffset.Value, 0); }
  public static VectorOffset CreateInvalidAreaVector(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInvalidAreaVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInvalidAreaVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.IntArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInvalidAreaVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.IntArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInvalidAreaVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMaxScore(FlatBufferBuilder builder, int maxScore) { builder.AddInt(4, maxScore, 100); }
  public static void AddHitAreaScore(FlatBufferBuilder builder, int hitAreaScore) { builder.AddInt(5, hitAreaScore, 10); }
  public static void AddPerfectSize(FlatBufferBuilder builder, int perfectSize) { builder.AddInt(6, perfectSize, 0); }
  public static void AddPerfectAppearRate(FlatBufferBuilder builder, VectorOffset perfectAppearRateOffset) { builder.AddOffset(7, perfectAppearRateOffset.Value, 0); }
  public static VectorOffset CreatePerfectAppearRateVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePerfectAppearRateVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePerfectAppearRateVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePerfectAppearRateVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPerfectAppearRateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPerfectScore(FlatBufferBuilder builder, int perfectScore) { builder.AddInt(8, perfectScore, 0); }
  public static void AddCursorSpeed(FlatBufferBuilder builder, VectorOffset cursorSpeedOffset) { builder.AddOffset(9, cursorSpeedOffset.Value, 0); }
  public static VectorOffset CreateCursorSpeedVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCursorSpeedVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCursorSpeedVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCursorSpeedVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCursorSpeedVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHitColdTime(FlatBufferBuilder builder, int hitColdTime) { builder.AddInt(10, hitColdTime, 100); }
  public static void AddScoreUp(FlatBufferBuilder builder, int scoreUp) { builder.AddInt(11, scoreUp, 1); }
  public static void AddMultiBoxGroup(FlatBufferBuilder builder, int multiBoxGroup) { builder.AddInt(12, multiBoxGroup, 1); }
  public static void AddHiddenInterval(FlatBufferBuilder builder, VectorOffset hiddenIntervalOffset) { builder.AddOffset(13, hiddenIntervalOffset.Value, 0); }
  public static VectorOffset CreateHiddenIntervalVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateHiddenIntervalVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHiddenIntervalVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHiddenIntervalVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartHiddenIntervalVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRouletteRotateSpeed(FlatBufferBuilder builder, VectorOffset rouletteRotateSpeedOffset) { builder.AddOffset(14, rouletteRotateSpeedOffset.Value, 0); }
  public static VectorOffset CreateRouletteRotateSpeedVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRouletteRotateSpeedVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRouletteRotateSpeedVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRouletteRotateSpeedVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRouletteRotateSpeedVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMistakeScore(FlatBufferBuilder builder, int mistakeScore) { builder.AddInt(15, mistakeScore, 0); }
  public static void AddIsAnticlockwise(FlatBufferBuilder builder, bool isAnticlockwise) { builder.AddBool(16, isAnticlockwise, false); }
  public static void AddRefreshType(FlatBufferBuilder builder, int refreshType) { builder.AddInt(17, refreshType, 0); }
  public static Offset<WWParser.Defs.FishingQteConfig> EndFishingQteConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FishingQteConfig>(o);
  }
  public FishingQteConfigT UnPack() {
    var _o = new FishingQteConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FishingQteConfigT _o) {
    _o.Id = this.Id;
    _o.Comment = this.Comment;
    _o.RandomArea = new List<int>();
    for (var _j = 0; _j < this.RandomAreaLength; ++_j) {_o.RandomArea.Add(this.RandomArea(_j));}
    _o.InvalidArea = new List<WWParser.Defs.IntArrayT>();
    for (var _j = 0; _j < this.InvalidAreaLength; ++_j) {_o.InvalidArea.Add(this.InvalidArea(_j).HasValue ? this.InvalidArea(_j).Value.UnPack() : null);}
    _o.MaxScore = this.MaxScore;
    _o.HitAreaScore = this.HitAreaScore;
    _o.PerfectSize = this.PerfectSize;
    _o.PerfectAppearRate = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.PerfectAppearRateLength; ++_j) {_o.PerfectAppearRate.Add(this.PerfectAppearRate(_j).HasValue ? this.PerfectAppearRate(_j).Value.UnPack() : null);}
    _o.PerfectScore = this.PerfectScore;
    _o.CursorSpeed = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.CursorSpeedLength; ++_j) {_o.CursorSpeed.Add(this.CursorSpeed(_j).HasValue ? this.CursorSpeed(_j).Value.UnPack() : null);}
    _o.HitColdTime = this.HitColdTime;
    _o.ScoreUp = this.ScoreUp;
    _o.MultiBoxGroup = this.MultiBoxGroup;
    _o.HiddenInterval = new List<float>();
    for (var _j = 0; _j < this.HiddenIntervalLength; ++_j) {_o.HiddenInterval.Add(this.HiddenInterval(_j));}
    _o.RouletteRotateSpeed = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.RouletteRotateSpeedLength; ++_j) {_o.RouletteRotateSpeed.Add(this.RouletteRotateSpeed(_j).HasValue ? this.RouletteRotateSpeed(_j).Value.UnPack() : null);}
    _o.MistakeScore = this.MistakeScore;
    _o.IsAnticlockwise = this.IsAnticlockwise;
    _o.RefreshType = this.RefreshType;
  }
  public static Offset<WWParser.Defs.FishingQteConfig> Pack(FlatBufferBuilder builder, FishingQteConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FishingQteConfig>);
    var _comment = _o.Comment == null ? default(StringOffset) : builder.CreateString(_o.Comment);
    var _random_area = default(VectorOffset);
    if (_o.RandomArea != null) {
      var __random_area = _o.RandomArea.ToArray();
      _random_area = CreateRandomAreaVector(builder, __random_area);
    }
    var _invalid_area = default(VectorOffset);
    if (_o.InvalidArea != null) {
      var __invalid_area = new Offset<WWParser.Defs.IntArray>[_o.InvalidArea.Count];
      for (var _j = 0; _j < __invalid_area.Length; ++_j) { __invalid_area[_j] = WWParser.Defs.IntArray.Pack(builder, _o.InvalidArea[_j]); }
      _invalid_area = CreateInvalidAreaVector(builder, __invalid_area);
    }
    var _perfect_appear_rate = default(VectorOffset);
    if (_o.PerfectAppearRate != null) {
      var __perfect_appear_rate = new Offset<WWParser.Defs.DicIntInt>[_o.PerfectAppearRate.Count];
      for (var _j = 0; _j < __perfect_appear_rate.Length; ++_j) { __perfect_appear_rate[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.PerfectAppearRate[_j]); }
      _perfect_appear_rate = CreatePerfectAppearRateVector(builder, __perfect_appear_rate);
    }
    var _cursor_speed = default(VectorOffset);
    if (_o.CursorSpeed != null) {
      var __cursor_speed = new Offset<WWParser.Defs.DicIntInt>[_o.CursorSpeed.Count];
      for (var _j = 0; _j < __cursor_speed.Length; ++_j) { __cursor_speed[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.CursorSpeed[_j]); }
      _cursor_speed = CreateCursorSpeedVector(builder, __cursor_speed);
    }
    var _hidden_interval = default(VectorOffset);
    if (_o.HiddenInterval != null) {
      var __hidden_interval = _o.HiddenInterval.ToArray();
      _hidden_interval = CreateHiddenIntervalVector(builder, __hidden_interval);
    }
    var _roulette_rotate_speed = default(VectorOffset);
    if (_o.RouletteRotateSpeed != null) {
      var __roulette_rotate_speed = new Offset<WWParser.Defs.DicIntInt>[_o.RouletteRotateSpeed.Count];
      for (var _j = 0; _j < __roulette_rotate_speed.Length; ++_j) { __roulette_rotate_speed[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.RouletteRotateSpeed[_j]); }
      _roulette_rotate_speed = CreateRouletteRotateSpeedVector(builder, __roulette_rotate_speed);
    }
    return CreateFishingQteConfig(
      builder,
      _o.Id,
      _comment,
      _random_area,
      _invalid_area,
      _o.MaxScore,
      _o.HitAreaScore,
      _o.PerfectSize,
      _perfect_appear_rate,
      _o.PerfectScore,
      _cursor_speed,
      _o.HitColdTime,
      _o.ScoreUp,
      _o.MultiBoxGroup,
      _hidden_interval,
      _roulette_rotate_speed,
      _o.MistakeScore,
      _o.IsAnticlockwise,
      _o.RefreshType);
  }
}

public class FishingQteConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("comment")]
  public string Comment { get; set; }
  [Newtonsoft.Json.JsonProperty("random_area")]
  public List<int> RandomArea { get; set; }
  [Newtonsoft.Json.JsonProperty("invalid_area")]
  public List<WWParser.Defs.IntArrayT> InvalidArea { get; set; }
  [Newtonsoft.Json.JsonProperty("max_score")]
  public int MaxScore { get; set; }
  [Newtonsoft.Json.JsonProperty("hit_area_score")]
  public int HitAreaScore { get; set; }
  [Newtonsoft.Json.JsonProperty("perfect_size")]
  public int PerfectSize { get; set; }
  [Newtonsoft.Json.JsonProperty("perfect_appear_rate")]
  public List<WWParser.Defs.DicIntIntT> PerfectAppearRate { get; set; }
  [Newtonsoft.Json.JsonProperty("perfect_score")]
  public int PerfectScore { get; set; }
  [Newtonsoft.Json.JsonProperty("cursor_speed")]
  public List<WWParser.Defs.DicIntIntT> CursorSpeed { get; set; }
  [Newtonsoft.Json.JsonProperty("hit_cold_time")]
  public int HitColdTime { get; set; }
  [Newtonsoft.Json.JsonProperty("score_up")]
  public int ScoreUp { get; set; }
  [Newtonsoft.Json.JsonProperty("multi_box_group")]
  public int MultiBoxGroup { get; set; }
  [Newtonsoft.Json.JsonProperty("hidden_interval")]
  public List<float> HiddenInterval { get; set; }
  [Newtonsoft.Json.JsonProperty("roulette_rotate_speed")]
  public List<WWParser.Defs.DicIntIntT> RouletteRotateSpeed { get; set; }
  [Newtonsoft.Json.JsonProperty("mistake_score")]
  public int MistakeScore { get; set; }
  [Newtonsoft.Json.JsonProperty("is_anticlockwise")]
  public bool IsAnticlockwise { get; set; }
  [Newtonsoft.Json.JsonProperty("refresh_type")]
  public int RefreshType { get; set; }

  public FishingQteConfigT() {
    this.Id = 0;
    this.Comment = null;
    this.RandomArea = null;
    this.InvalidArea = null;
    this.MaxScore = 100;
    this.HitAreaScore = 10;
    this.PerfectSize = 0;
    this.PerfectAppearRate = null;
    this.PerfectScore = 0;
    this.CursorSpeed = null;
    this.HitColdTime = 100;
    this.ScoreUp = 1;
    this.MultiBoxGroup = 1;
    this.HiddenInterval = null;
    this.RouletteRotateSpeed = null;
    this.MistakeScore = 0;
    this.IsAnticlockwise = false;
    this.RefreshType = 0;
  }
}


static public class FishingQteConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Comment*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*RandomArea*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*InvalidArea*/, WWParser.Defs.IntArrayVerify.Verify, false)
      && verifier.VerifyField(tablePos, 12 /*MaxScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*HitAreaScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*PerfectSize*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 18 /*PerfectAppearRate*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 20 /*PerfectScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 22 /*CursorSpeed*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 24 /*HitColdTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*ScoreUp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*MultiBoxGroup*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 30 /*HiddenInterval*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 32 /*RouletteRotateSpeed*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 34 /*MistakeScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*IsAnticlockwise*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 38 /*RefreshType*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
