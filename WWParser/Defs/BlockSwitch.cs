// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BlockSwitch : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BlockSwitch GetRootAsBlockSwitch(ByteBuffer _bb) { return GetRootAsBlockSwitch(_bb, new BlockSwitch()); }
  public static BlockSwitch GetRootAsBlockSwitch(ByteBuffer _bb, BlockSwitch obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BlockSwitch __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Block { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBlockBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetBlockBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetBlockArray() { return __p.__vector_as_array<byte>(6); }
  public string MapTilePath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapTilePathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMapTilePathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMapTilePathArray() { return __p.__vector_as_array<byte>(8); }
  public string MiniMapTilePath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMiniMapTilePathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMiniMapTilePathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMiniMapTilePathArray() { return __p.__vector_as_array<byte>(10); }
  public int MapConfigId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)8; } }
  public int GravityFlip { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int Priority { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.BlockSwitch> CreateBlockSwitch(FlatBufferBuilder builder,
      int id = 0,
      StringOffset blockOffset = default(StringOffset),
      StringOffset map_tile_pathOffset = default(StringOffset),
      StringOffset mini_map_tile_pathOffset = default(StringOffset),
      int map_config_id = 8,
      int gravity_flip = 1,
      int priority = 0) {
    builder.StartTable(7);
    BlockSwitch.AddPriority(builder, priority);
    BlockSwitch.AddGravityFlip(builder, gravity_flip);
    BlockSwitch.AddMapConfigId(builder, map_config_id);
    BlockSwitch.AddMiniMapTilePath(builder, mini_map_tile_pathOffset);
    BlockSwitch.AddMapTilePath(builder, map_tile_pathOffset);
    BlockSwitch.AddBlock(builder, blockOffset);
    BlockSwitch.AddId(builder, id);
    return BlockSwitch.EndBlockSwitch(builder);
  }

  public static void StartBlockSwitch(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddBlock(FlatBufferBuilder builder, StringOffset blockOffset) { builder.AddOffset(1, blockOffset.Value, 0); }
  public static void AddMapTilePath(FlatBufferBuilder builder, StringOffset mapTilePathOffset) { builder.AddOffset(2, mapTilePathOffset.Value, 0); }
  public static void AddMiniMapTilePath(FlatBufferBuilder builder, StringOffset miniMapTilePathOffset) { builder.AddOffset(3, miniMapTilePathOffset.Value, 0); }
  public static void AddMapConfigId(FlatBufferBuilder builder, int mapConfigId) { builder.AddInt(4, mapConfigId, 8); }
  public static void AddGravityFlip(FlatBufferBuilder builder, int gravityFlip) { builder.AddInt(5, gravityFlip, 1); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(6, priority, 0); }
  public static Offset<WWParser.Defs.BlockSwitch> EndBlockSwitch(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BlockSwitch>(o);
  }
  public BlockSwitchT UnPack() {
    var _o = new BlockSwitchT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BlockSwitchT _o) {
    _o.Id = this.Id;
    _o.Block = this.Block;
    _o.MapTilePath = this.MapTilePath;
    _o.MiniMapTilePath = this.MiniMapTilePath;
    _o.MapConfigId = this.MapConfigId;
    _o.GravityFlip = this.GravityFlip;
    _o.Priority = this.Priority;
  }
  public static Offset<WWParser.Defs.BlockSwitch> Pack(FlatBufferBuilder builder, BlockSwitchT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BlockSwitch>);
    var _block = _o.Block == null ? default(StringOffset) : builder.CreateString(_o.Block);
    var _map_tile_path = _o.MapTilePath == null ? default(StringOffset) : builder.CreateString(_o.MapTilePath);
    var _mini_map_tile_path = _o.MiniMapTilePath == null ? default(StringOffset) : builder.CreateString(_o.MiniMapTilePath);
    return CreateBlockSwitch(
      builder,
      _o.Id,
      _block,
      _map_tile_path,
      _mini_map_tile_path,
      _o.MapConfigId,
      _o.GravityFlip,
      _o.Priority);
  }
}

public class BlockSwitchT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("block")]
  public string Block { get; set; }
  [Newtonsoft.Json.JsonProperty("map_tile_path")]
  public string MapTilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("mini_map_tile_path")]
  public string MiniMapTilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("map_config_id")]
  public int MapConfigId { get; set; }
  [Newtonsoft.Json.JsonProperty("gravity_flip")]
  public int GravityFlip { get; set; }
  [Newtonsoft.Json.JsonProperty("priority")]
  public int Priority { get; set; }

  public BlockSwitchT() {
    this.Id = 0;
    this.Block = null;
    this.MapTilePath = null;
    this.MiniMapTilePath = null;
    this.MapConfigId = 8;
    this.GravityFlip = 1;
    this.Priority = 0;
  }
}


static public class BlockSwitchVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Block*/, false)
      && verifier.VerifyString(tablePos, 8 /*MapTilePath*/, false)
      && verifier.VerifyString(tablePos, 10 /*MiniMapTilePath*/, false)
      && verifier.VerifyField(tablePos, 12 /*MapConfigId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*GravityFlip*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*Priority*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
