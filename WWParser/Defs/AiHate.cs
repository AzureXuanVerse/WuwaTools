// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiHate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AiHate GetRootAsAiHate(ByteBuffer _bb) { return GetRootAsAiHate(_bb, new AiHate()); }
  public static AiHate GetRootAsAiHate(ByteBuffer _bb, AiHate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiHate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float BaseHatred { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public float DecreaseRate { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.8f; } }
  public float DecreaseTimeLength { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)5000.0f; } }
  public float DecreaseTimeCd { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)10000.0f; } }
  public float IncreaseRateWhenDecreasing { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public float MinClearTime { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1000.0f; } }
  public WWParser.Defs.FloatRange? DisengageDistanceRange { get { int o = __p.__offset(18); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.FloatRange? DisengageTimeRange { get { int o = __p.__offset(20); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.FloatRange? DisengageHeightRange { get { int o = __p.__offset(22); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.FloatRange? DisengageHeightRangeMax { get { int o = __p.__offset(24); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.FloatRange? DisengageBornDistance { get { int o = __p.__offset(26); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float MaxMoveFromBorn { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)-1.0f; } }
  public string ExcludeTag { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExcludeTagBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetExcludeTagBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetExcludeTagArray() { return __p.__vector_as_array<byte>(30); }
  public string SwornHatredTag { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSwornHatredTagBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetSwornHatredTagBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetSwornHatredTagArray() { return __p.__vector_as_array<byte>(32); }

  public static Offset<WWParser.Defs.AiHate> CreateAiHate(FlatBufferBuilder builder,
      int id = 0,
      float base_hatred = 1.0f,
      float decrease_rate = 0.8f,
      float decrease_time_length = 5000.0f,
      float decrease_time_cd = 10000.0f,
      float increase_rate_when_decreasing = 1.0f,
      float min_clear_time = 1000.0f,
      Offset<WWParser.Defs.FloatRange> disengage_distance_rangeOffset = default(Offset<WWParser.Defs.FloatRange>),
      Offset<WWParser.Defs.FloatRange> disengage_time_rangeOffset = default(Offset<WWParser.Defs.FloatRange>),
      Offset<WWParser.Defs.FloatRange> disengage_height_rangeOffset = default(Offset<WWParser.Defs.FloatRange>),
      Offset<WWParser.Defs.FloatRange> disengage_height_range_maxOffset = default(Offset<WWParser.Defs.FloatRange>),
      Offset<WWParser.Defs.FloatRange> disengage_born_distanceOffset = default(Offset<WWParser.Defs.FloatRange>),
      float max_move_from_born = -1.0f,
      StringOffset exclude_tagOffset = default(StringOffset),
      StringOffset sworn_hatred_tagOffset = default(StringOffset)) {
    builder.StartTable(15);
    AiHate.AddSwornHatredTag(builder, sworn_hatred_tagOffset);
    AiHate.AddExcludeTag(builder, exclude_tagOffset);
    AiHate.AddMaxMoveFromBorn(builder, max_move_from_born);
    AiHate.AddDisengageBornDistance(builder, disengage_born_distanceOffset);
    AiHate.AddDisengageHeightRangeMax(builder, disengage_height_range_maxOffset);
    AiHate.AddDisengageHeightRange(builder, disengage_height_rangeOffset);
    AiHate.AddDisengageTimeRange(builder, disengage_time_rangeOffset);
    AiHate.AddDisengageDistanceRange(builder, disengage_distance_rangeOffset);
    AiHate.AddMinClearTime(builder, min_clear_time);
    AiHate.AddIncreaseRateWhenDecreasing(builder, increase_rate_when_decreasing);
    AiHate.AddDecreaseTimeCd(builder, decrease_time_cd);
    AiHate.AddDecreaseTimeLength(builder, decrease_time_length);
    AiHate.AddDecreaseRate(builder, decrease_rate);
    AiHate.AddBaseHatred(builder, base_hatred);
    AiHate.AddId(builder, id);
    return AiHate.EndAiHate(builder);
  }

  public static void StartAiHate(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddBaseHatred(FlatBufferBuilder builder, float baseHatred) { builder.AddFloat(1, baseHatred, 1.0f); }
  public static void AddDecreaseRate(FlatBufferBuilder builder, float decreaseRate) { builder.AddFloat(2, decreaseRate, 0.8f); }
  public static void AddDecreaseTimeLength(FlatBufferBuilder builder, float decreaseTimeLength) { builder.AddFloat(3, decreaseTimeLength, 5000.0f); }
  public static void AddDecreaseTimeCd(FlatBufferBuilder builder, float decreaseTimeCd) { builder.AddFloat(4, decreaseTimeCd, 10000.0f); }
  public static void AddIncreaseRateWhenDecreasing(FlatBufferBuilder builder, float increaseRateWhenDecreasing) { builder.AddFloat(5, increaseRateWhenDecreasing, 1.0f); }
  public static void AddMinClearTime(FlatBufferBuilder builder, float minClearTime) { builder.AddFloat(6, minClearTime, 1000.0f); }
  public static void AddDisengageDistanceRange(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> disengageDistanceRangeOffset) { builder.AddOffset(7, disengageDistanceRangeOffset.Value, 0); }
  public static void AddDisengageTimeRange(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> disengageTimeRangeOffset) { builder.AddOffset(8, disengageTimeRangeOffset.Value, 0); }
  public static void AddDisengageHeightRange(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> disengageHeightRangeOffset) { builder.AddOffset(9, disengageHeightRangeOffset.Value, 0); }
  public static void AddDisengageHeightRangeMax(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> disengageHeightRangeMaxOffset) { builder.AddOffset(10, disengageHeightRangeMaxOffset.Value, 0); }
  public static void AddDisengageBornDistance(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> disengageBornDistanceOffset) { builder.AddOffset(11, disengageBornDistanceOffset.Value, 0); }
  public static void AddMaxMoveFromBorn(FlatBufferBuilder builder, float maxMoveFromBorn) { builder.AddFloat(12, maxMoveFromBorn, -1.0f); }
  public static void AddExcludeTag(FlatBufferBuilder builder, StringOffset excludeTagOffset) { builder.AddOffset(13, excludeTagOffset.Value, 0); }
  public static void AddSwornHatredTag(FlatBufferBuilder builder, StringOffset swornHatredTagOffset) { builder.AddOffset(14, swornHatredTagOffset.Value, 0); }
  public static Offset<WWParser.Defs.AiHate> EndAiHate(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AiHate>(o);
  }
  public AiHateT UnPack() {
    var _o = new AiHateT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AiHateT _o) {
    _o.Id = this.Id;
    _o.BaseHatred = this.BaseHatred;
    _o.DecreaseRate = this.DecreaseRate;
    _o.DecreaseTimeLength = this.DecreaseTimeLength;
    _o.DecreaseTimeCd = this.DecreaseTimeCd;
    _o.IncreaseRateWhenDecreasing = this.IncreaseRateWhenDecreasing;
    _o.MinClearTime = this.MinClearTime;
    _o.DisengageDistanceRange = this.DisengageDistanceRange.HasValue ? this.DisengageDistanceRange.Value.UnPack() : null;
    _o.DisengageTimeRange = this.DisengageTimeRange.HasValue ? this.DisengageTimeRange.Value.UnPack() : null;
    _o.DisengageHeightRange = this.DisengageHeightRange.HasValue ? this.DisengageHeightRange.Value.UnPack() : null;
    _o.DisengageHeightRangeMax = this.DisengageHeightRangeMax.HasValue ? this.DisengageHeightRangeMax.Value.UnPack() : null;
    _o.DisengageBornDistance = this.DisengageBornDistance.HasValue ? this.DisengageBornDistance.Value.UnPack() : null;
    _o.MaxMoveFromBorn = this.MaxMoveFromBorn;
    _o.ExcludeTag = this.ExcludeTag;
    _o.SwornHatredTag = this.SwornHatredTag;
  }
  public static Offset<WWParser.Defs.AiHate> Pack(FlatBufferBuilder builder, AiHateT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AiHate>);
    var _disengage_distance_range = _o.DisengageDistanceRange == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.DisengageDistanceRange);
    var _disengage_time_range = _o.DisengageTimeRange == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.DisengageTimeRange);
    var _disengage_height_range = _o.DisengageHeightRange == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.DisengageHeightRange);
    var _disengage_height_range_max = _o.DisengageHeightRangeMax == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.DisengageHeightRangeMax);
    var _disengage_born_distance = _o.DisengageBornDistance == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.DisengageBornDistance);
    var _exclude_tag = _o.ExcludeTag == null ? default(StringOffset) : builder.CreateString(_o.ExcludeTag);
    var _sworn_hatred_tag = _o.SwornHatredTag == null ? default(StringOffset) : builder.CreateString(_o.SwornHatredTag);
    return CreateAiHate(
      builder,
      _o.Id,
      _o.BaseHatred,
      _o.DecreaseRate,
      _o.DecreaseTimeLength,
      _o.DecreaseTimeCd,
      _o.IncreaseRateWhenDecreasing,
      _o.MinClearTime,
      _disengage_distance_range,
      _disengage_time_range,
      _disengage_height_range,
      _disengage_height_range_max,
      _disengage_born_distance,
      _o.MaxMoveFromBorn,
      _exclude_tag,
      _sworn_hatred_tag);
  }
}

public class AiHateT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("base_hatred")]
  public float BaseHatred { get; set; }
  [Newtonsoft.Json.JsonProperty("decrease_rate")]
  public float DecreaseRate { get; set; }
  [Newtonsoft.Json.JsonProperty("decrease_time_length")]
  public float DecreaseTimeLength { get; set; }
  [Newtonsoft.Json.JsonProperty("decrease_time_cd")]
  public float DecreaseTimeCd { get; set; }
  [Newtonsoft.Json.JsonProperty("increase_rate_when_decreasing")]
  public float IncreaseRateWhenDecreasing { get; set; }
  [Newtonsoft.Json.JsonProperty("min_clear_time")]
  public float MinClearTime { get; set; }
  [Newtonsoft.Json.JsonProperty("disengage_distance_range")]
  public WWParser.Defs.FloatRangeT DisengageDistanceRange { get; set; }
  [Newtonsoft.Json.JsonProperty("disengage_time_range")]
  public WWParser.Defs.FloatRangeT DisengageTimeRange { get; set; }
  [Newtonsoft.Json.JsonProperty("disengage_height_range")]
  public WWParser.Defs.FloatRangeT DisengageHeightRange { get; set; }
  [Newtonsoft.Json.JsonProperty("disengage_height_range_max")]
  public WWParser.Defs.FloatRangeT DisengageHeightRangeMax { get; set; }
  [Newtonsoft.Json.JsonProperty("disengage_born_distance")]
  public WWParser.Defs.FloatRangeT DisengageBornDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("max_move_from_born")]
  public float MaxMoveFromBorn { get; set; }
  [Newtonsoft.Json.JsonProperty("exclude_tag")]
  public string ExcludeTag { get; set; }
  [Newtonsoft.Json.JsonProperty("sworn_hatred_tag")]
  public string SwornHatredTag { get; set; }

  public AiHateT() {
    this.Id = 0;
    this.BaseHatred = 1.0f;
    this.DecreaseRate = 0.8f;
    this.DecreaseTimeLength = 5000.0f;
    this.DecreaseTimeCd = 10000.0f;
    this.IncreaseRateWhenDecreasing = 1.0f;
    this.MinClearTime = 1000.0f;
    this.DisengageDistanceRange = null;
    this.DisengageTimeRange = null;
    this.DisengageHeightRange = null;
    this.DisengageHeightRangeMax = null;
    this.DisengageBornDistance = null;
    this.MaxMoveFromBorn = -1.0f;
    this.ExcludeTag = null;
    this.SwornHatredTag = null;
  }
}


static public class AiHateVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*BaseHatred*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*DecreaseRate*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*DecreaseTimeLength*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*DecreaseTimeCd*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*IncreaseRateWhenDecreasing*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*MinClearTime*/, 4 /*float*/, 4, false)
      && verifier.VerifyTable(tablePos, 18 /*DisengageDistanceRange*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 20 /*DisengageTimeRange*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 22 /*DisengageHeightRange*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 24 /*DisengageHeightRangeMax*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 26 /*DisengageBornDistance*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyField(tablePos, 28 /*MaxMoveFromBorn*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 30 /*ExcludeTag*/, false)
      && verifier.VerifyString(tablePos, 32 /*SwornHatredTag*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
