// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CloudTime : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CloudTime GetRootAsCloudTime(ByteBuffer _bb) { return GetRootAsCloudTime(_bb, new CloudTime()); }
  public static CloudTime GetRootAsCloudTime(ByteBuffer _bb, CloudTime obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CloudTime __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Day { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Amount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int Timeout { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string StageImage { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStageImageBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetStageImageBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetStageImageArray() { return __p.__vector_as_array<byte>(12); }
  public string Icon { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(14); }
  public string Desc { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<WWParser.Defs.CloudTime> CreateCloudTime(FlatBufferBuilder builder,
      int id = 0,
      int day = 0,
      float amount = 0.0f,
      int timeout = 0,
      StringOffset stage_imageOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset)) {
    builder.StartTable(7);
    CloudTime.AddDesc(builder, descOffset);
    CloudTime.AddIcon(builder, iconOffset);
    CloudTime.AddStageImage(builder, stage_imageOffset);
    CloudTime.AddTimeout(builder, timeout);
    CloudTime.AddAmount(builder, amount);
    CloudTime.AddDay(builder, day);
    CloudTime.AddId(builder, id);
    return CloudTime.EndCloudTime(builder);
  }

  public static void StartCloudTime(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDay(FlatBufferBuilder builder, int day) { builder.AddInt(1, day, 0); }
  public static void AddAmount(FlatBufferBuilder builder, float amount) { builder.AddFloat(2, amount, 0.0f); }
  public static void AddTimeout(FlatBufferBuilder builder, int timeout) { builder.AddInt(3, timeout, 0); }
  public static void AddStageImage(FlatBufferBuilder builder, StringOffset stageImageOffset) { builder.AddOffset(4, stageImageOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(5, iconOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(6, descOffset.Value, 0); }
  public static Offset<WWParser.Defs.CloudTime> EndCloudTime(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.CloudTime>(o);
  }
  public CloudTimeT UnPack() {
    var _o = new CloudTimeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CloudTimeT _o) {
    _o.Id = this.Id;
    _o.Day = this.Day;
    _o.Amount = this.Amount;
    _o.Timeout = this.Timeout;
    _o.StageImage = this.StageImage;
    _o.Icon = this.Icon;
    _o.Desc = this.Desc;
  }
  public static Offset<WWParser.Defs.CloudTime> Pack(FlatBufferBuilder builder, CloudTimeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.CloudTime>);
    var _stage_image = _o.StageImage == null ? default(StringOffset) : builder.CreateString(_o.StageImage);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    return CreateCloudTime(
      builder,
      _o.Id,
      _o.Day,
      _o.Amount,
      _o.Timeout,
      _stage_image,
      _icon,
      _desc);
  }
}

public class CloudTimeT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("day")]
  public int Day { get; set; }
  [Newtonsoft.Json.JsonProperty("amount")]
  public float Amount { get; set; }
  [Newtonsoft.Json.JsonProperty("timeout")]
  public int Timeout { get; set; }
  [Newtonsoft.Json.JsonProperty("stage_image")]
  public string StageImage { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }

  public CloudTimeT() {
    this.Id = 0;
    this.Day = 0;
    this.Amount = 0.0f;
    this.Timeout = 0;
    this.StageImage = null;
    this.Icon = null;
    this.Desc = null;
  }
}


static public class CloudTimeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Day*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Amount*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Timeout*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*StageImage*/, false)
      && verifier.VerifyString(tablePos, 14 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 16 /*Desc*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
