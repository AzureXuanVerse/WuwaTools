// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SharePlatform : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SharePlatform GetRootAsSharePlatform(ByteBuffer _bb) { return GetRootAsSharePlatform(_bb, new SharePlatform()); }
  public static SharePlatform GetRootAsSharePlatform(ByteBuffer _bb, SharePlatform obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SharePlatform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PackageType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Sort { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Language(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LanguageLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string PackageId(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PackageIdLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Channel(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ChannelLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetChannelBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetChannelBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetChannelArray() { return __p.__vector_as_array<int>(14); }
  public int ShareId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Icon { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<WWParser.Defs.SharePlatform> CreateSharePlatform(FlatBufferBuilder builder,
      int id = 0,
      int package_type = 0,
      int sort = 0,
      VectorOffset languageOffset = default(VectorOffset),
      VectorOffset package_idOffset = default(VectorOffset),
      VectorOffset channelOffset = default(VectorOffset),
      int share_id = 0,
      StringOffset iconOffset = default(StringOffset)) {
    builder.StartTable(8);
    SharePlatform.AddIcon(builder, iconOffset);
    SharePlatform.AddShareId(builder, share_id);
    SharePlatform.AddChannel(builder, channelOffset);
    SharePlatform.AddPackageId(builder, package_idOffset);
    SharePlatform.AddLanguage(builder, languageOffset);
    SharePlatform.AddSort(builder, sort);
    SharePlatform.AddPackageType(builder, package_type);
    SharePlatform.AddId(builder, id);
    return SharePlatform.EndSharePlatform(builder);
  }

  public static void StartSharePlatform(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPackageType(FlatBufferBuilder builder, int packageType) { builder.AddInt(1, packageType, 0); }
  public static void AddSort(FlatBufferBuilder builder, int sort) { builder.AddInt(2, sort, 0); }
  public static void AddLanguage(FlatBufferBuilder builder, VectorOffset languageOffset) { builder.AddOffset(3, languageOffset.Value, 0); }
  public static VectorOffset CreateLanguageVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLanguageVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLanguageVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLanguageVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLanguageVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPackageId(FlatBufferBuilder builder, VectorOffset packageIdOffset) { builder.AddOffset(4, packageIdOffset.Value, 0); }
  public static VectorOffset CreatePackageIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePackageIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePackageIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePackageIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPackageIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddChannel(FlatBufferBuilder builder, VectorOffset channelOffset) { builder.AddOffset(5, channelOffset.Value, 0); }
  public static VectorOffset CreateChannelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateChannelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChannelVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChannelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartChannelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShareId(FlatBufferBuilder builder, int shareId) { builder.AddInt(6, shareId, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(7, iconOffset.Value, 0); }
  public static Offset<WWParser.Defs.SharePlatform> EndSharePlatform(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SharePlatform>(o);
  }
  public SharePlatformT UnPack() {
    var _o = new SharePlatformT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SharePlatformT _o) {
    _o.Id = this.Id;
    _o.PackageType = this.PackageType;
    _o.Sort = this.Sort;
    _o.Language = new List<string>();
    for (var _j = 0; _j < this.LanguageLength; ++_j) {_o.Language.Add(this.Language(_j));}
    _o.PackageId = new List<string>();
    for (var _j = 0; _j < this.PackageIdLength; ++_j) {_o.PackageId.Add(this.PackageId(_j));}
    _o.Channel = new List<int>();
    for (var _j = 0; _j < this.ChannelLength; ++_j) {_o.Channel.Add(this.Channel(_j));}
    _o.ShareId = this.ShareId;
    _o.Icon = this.Icon;
  }
  public static Offset<WWParser.Defs.SharePlatform> Pack(FlatBufferBuilder builder, SharePlatformT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SharePlatform>);
    var _language = default(VectorOffset);
    if (_o.Language != null) {
      var __language = new StringOffset[_o.Language.Count];
      for (var _j = 0; _j < __language.Length; ++_j) { __language[_j] = builder.CreateString(_o.Language[_j]); }
      _language = CreateLanguageVector(builder, __language);
    }
    var _package_id = default(VectorOffset);
    if (_o.PackageId != null) {
      var __package_id = new StringOffset[_o.PackageId.Count];
      for (var _j = 0; _j < __package_id.Length; ++_j) { __package_id[_j] = builder.CreateString(_o.PackageId[_j]); }
      _package_id = CreatePackageIdVector(builder, __package_id);
    }
    var _channel = default(VectorOffset);
    if (_o.Channel != null) {
      var __channel = _o.Channel.ToArray();
      _channel = CreateChannelVector(builder, __channel);
    }
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    return CreateSharePlatform(
      builder,
      _o.Id,
      _o.PackageType,
      _o.Sort,
      _language,
      _package_id,
      _channel,
      _o.ShareId,
      _icon);
  }
}

public class SharePlatformT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("package_type")]
  public int PackageType { get; set; }
  [Newtonsoft.Json.JsonProperty("sort")]
  public int Sort { get; set; }
  [Newtonsoft.Json.JsonProperty("language")]
  public List<string> Language { get; set; }
  [Newtonsoft.Json.JsonProperty("package_id")]
  public List<string> PackageId { get; set; }
  [Newtonsoft.Json.JsonProperty("channel")]
  public List<int> Channel { get; set; }
  [Newtonsoft.Json.JsonProperty("share_id")]
  public int ShareId { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }

  public SharePlatformT() {
    this.Id = 0;
    this.PackageType = 0;
    this.Sort = 0;
    this.Language = null;
    this.PackageId = null;
    this.Channel = null;
    this.ShareId = 0;
    this.Icon = null;
  }
}


static public class SharePlatformVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*PackageType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Sort*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*Language*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*PackageId*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*Channel*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 16 /*ShareId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*Icon*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
