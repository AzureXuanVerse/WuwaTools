// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueResDungeonConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueResDungeonConfig GetRootAsRogueResDungeonConfig(ByteBuffer _bb) { return GetRootAsRogueResDungeonConfig(_bb, new RogueResDungeonConfig()); }
  public static RogueResDungeonConfig GetRootAsRogueResDungeonConfig(ByteBuffer _bb, RogueResDungeonConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueResDungeonConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SeasonId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Iconf { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconfBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIconfBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIconfArray() { return __p.__vector_as_array<byte>(8); }
  public string Iconm { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconmBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIconmBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIconmArray() { return __p.__vector_as_array<byte>(10); }
  public string Coverf { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCoverfBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetCoverfBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetCoverfArray() { return __p.__vector_as_array<byte>(12); }
  public string Coverm { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCovermBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCovermBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCovermArray() { return __p.__vector_as_array<byte>(14); }
  public string SpineAtlasf { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpineAtlasfBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetSpineAtlasfBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetSpineAtlasfArray() { return __p.__vector_as_array<byte>(16); }
  public string SpineMainf { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpineMainfBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetSpineMainfBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetSpineMainfArray() { return __p.__vector_as_array<byte>(18); }
  public string SpineAtlasm { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpineAtlasmBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetSpineAtlasmBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetSpineAtlasmArray() { return __p.__vector_as_array<byte>(20); }
  public string SpineMainm { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpineMainmBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetSpineMainmBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetSpineMainmArray() { return __p.__vector_as_array<byte>(22); }
  public string Title { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(24); }
  public string Desc { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(26); }
  public int RecommendLevel { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FirstAward { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Award { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.RogueResDungeonConfig> CreateRogueResDungeonConfig(FlatBufferBuilder builder,
      int id = 0,
      int season_id = 0,
      StringOffset iconfOffset = default(StringOffset),
      StringOffset iconmOffset = default(StringOffset),
      StringOffset coverfOffset = default(StringOffset),
      StringOffset covermOffset = default(StringOffset),
      StringOffset spine_atlasfOffset = default(StringOffset),
      StringOffset spine_mainfOffset = default(StringOffset),
      StringOffset spine_atlasmOffset = default(StringOffset),
      StringOffset spine_mainmOffset = default(StringOffset),
      StringOffset titleOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      int recommend_level = 0,
      int first_award = 0,
      int award = 0) {
    builder.StartTable(15);
    RogueResDungeonConfig.AddAward(builder, award);
    RogueResDungeonConfig.AddFirstAward(builder, first_award);
    RogueResDungeonConfig.AddRecommendLevel(builder, recommend_level);
    RogueResDungeonConfig.AddDesc(builder, descOffset);
    RogueResDungeonConfig.AddTitle(builder, titleOffset);
    RogueResDungeonConfig.AddSpineMainm(builder, spine_mainmOffset);
    RogueResDungeonConfig.AddSpineAtlasm(builder, spine_atlasmOffset);
    RogueResDungeonConfig.AddSpineMainf(builder, spine_mainfOffset);
    RogueResDungeonConfig.AddSpineAtlasf(builder, spine_atlasfOffset);
    RogueResDungeonConfig.AddCoverm(builder, covermOffset);
    RogueResDungeonConfig.AddCoverf(builder, coverfOffset);
    RogueResDungeonConfig.AddIconm(builder, iconmOffset);
    RogueResDungeonConfig.AddIconf(builder, iconfOffset);
    RogueResDungeonConfig.AddSeasonId(builder, season_id);
    RogueResDungeonConfig.AddId(builder, id);
    return RogueResDungeonConfig.EndRogueResDungeonConfig(builder);
  }

  public static void StartRogueResDungeonConfig(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddSeasonId(FlatBufferBuilder builder, int seasonId) { builder.AddInt(1, seasonId, 0); }
  public static void AddIconf(FlatBufferBuilder builder, StringOffset iconfOffset) { builder.AddOffset(2, iconfOffset.Value, 0); }
  public static void AddIconm(FlatBufferBuilder builder, StringOffset iconmOffset) { builder.AddOffset(3, iconmOffset.Value, 0); }
  public static void AddCoverf(FlatBufferBuilder builder, StringOffset coverfOffset) { builder.AddOffset(4, coverfOffset.Value, 0); }
  public static void AddCoverm(FlatBufferBuilder builder, StringOffset covermOffset) { builder.AddOffset(5, covermOffset.Value, 0); }
  public static void AddSpineAtlasf(FlatBufferBuilder builder, StringOffset spineAtlasfOffset) { builder.AddOffset(6, spineAtlasfOffset.Value, 0); }
  public static void AddSpineMainf(FlatBufferBuilder builder, StringOffset spineMainfOffset) { builder.AddOffset(7, spineMainfOffset.Value, 0); }
  public static void AddSpineAtlasm(FlatBufferBuilder builder, StringOffset spineAtlasmOffset) { builder.AddOffset(8, spineAtlasmOffset.Value, 0); }
  public static void AddSpineMainm(FlatBufferBuilder builder, StringOffset spineMainmOffset) { builder.AddOffset(9, spineMainmOffset.Value, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(10, titleOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(11, descOffset.Value, 0); }
  public static void AddRecommendLevel(FlatBufferBuilder builder, int recommendLevel) { builder.AddInt(12, recommendLevel, 0); }
  public static void AddFirstAward(FlatBufferBuilder builder, int firstAward) { builder.AddInt(13, firstAward, 0); }
  public static void AddAward(FlatBufferBuilder builder, int award) { builder.AddInt(14, award, 0); }
  public static Offset<WWParser.Defs.RogueResDungeonConfig> EndRogueResDungeonConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueResDungeonConfig>(o);
  }
  public RogueResDungeonConfigT UnPack() {
    var _o = new RogueResDungeonConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueResDungeonConfigT _o) {
    _o.Id = this.Id;
    _o.SeasonId = this.SeasonId;
    _o.Iconf = this.Iconf;
    _o.Iconm = this.Iconm;
    _o.Coverf = this.Coverf;
    _o.Coverm = this.Coverm;
    _o.SpineAtlasf = this.SpineAtlasf;
    _o.SpineMainf = this.SpineMainf;
    _o.SpineAtlasm = this.SpineAtlasm;
    _o.SpineMainm = this.SpineMainm;
    _o.Title = this.Title;
    _o.Desc = this.Desc;
    _o.RecommendLevel = this.RecommendLevel;
    _o.FirstAward = this.FirstAward;
    _o.Award = this.Award;
  }
  public static Offset<WWParser.Defs.RogueResDungeonConfig> Pack(FlatBufferBuilder builder, RogueResDungeonConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueResDungeonConfig>);
    var _iconf = _o.Iconf == null ? default(StringOffset) : builder.CreateString(_o.Iconf);
    var _iconm = _o.Iconm == null ? default(StringOffset) : builder.CreateString(_o.Iconm);
    var _coverf = _o.Coverf == null ? default(StringOffset) : builder.CreateString(_o.Coverf);
    var _coverm = _o.Coverm == null ? default(StringOffset) : builder.CreateString(_o.Coverm);
    var _spine_atlasf = _o.SpineAtlasf == null ? default(StringOffset) : builder.CreateString(_o.SpineAtlasf);
    var _spine_mainf = _o.SpineMainf == null ? default(StringOffset) : builder.CreateString(_o.SpineMainf);
    var _spine_atlasm = _o.SpineAtlasm == null ? default(StringOffset) : builder.CreateString(_o.SpineAtlasm);
    var _spine_mainm = _o.SpineMainm == null ? default(StringOffset) : builder.CreateString(_o.SpineMainm);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    return CreateRogueResDungeonConfig(
      builder,
      _o.Id,
      _o.SeasonId,
      _iconf,
      _iconm,
      _coverf,
      _coverm,
      _spine_atlasf,
      _spine_mainf,
      _spine_atlasm,
      _spine_mainm,
      _title,
      _desc,
      _o.RecommendLevel,
      _o.FirstAward,
      _o.Award);
  }
}

public class RogueResDungeonConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("season_id")]
  public int SeasonId { get; set; }
  [Newtonsoft.Json.JsonProperty("iconf")]
  public string Iconf { get; set; }
  [Newtonsoft.Json.JsonProperty("iconm")]
  public string Iconm { get; set; }
  [Newtonsoft.Json.JsonProperty("coverf")]
  public string Coverf { get; set; }
  [Newtonsoft.Json.JsonProperty("coverm")]
  public string Coverm { get; set; }
  [Newtonsoft.Json.JsonProperty("spine_atlasf")]
  public string SpineAtlasf { get; set; }
  [Newtonsoft.Json.JsonProperty("spine_mainf")]
  public string SpineMainf { get; set; }
  [Newtonsoft.Json.JsonProperty("spine_atlasm")]
  public string SpineAtlasm { get; set; }
  [Newtonsoft.Json.JsonProperty("spine_mainm")]
  public string SpineMainm { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }
  [Newtonsoft.Json.JsonProperty("recommend_level")]
  public int RecommendLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("first_award")]
  public int FirstAward { get; set; }
  [Newtonsoft.Json.JsonProperty("award")]
  public int Award { get; set; }

  public RogueResDungeonConfigT() {
    this.Id = 0;
    this.SeasonId = 0;
    this.Iconf = null;
    this.Iconm = null;
    this.Coverf = null;
    this.Coverm = null;
    this.SpineAtlasf = null;
    this.SpineMainf = null;
    this.SpineAtlasm = null;
    this.SpineMainm = null;
    this.Title = null;
    this.Desc = null;
    this.RecommendLevel = 0;
    this.FirstAward = 0;
    this.Award = 0;
  }
}


static public class RogueResDungeonConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SeasonId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Iconf*/, false)
      && verifier.VerifyString(tablePos, 10 /*Iconm*/, false)
      && verifier.VerifyString(tablePos, 12 /*Coverf*/, false)
      && verifier.VerifyString(tablePos, 14 /*Coverm*/, false)
      && verifier.VerifyString(tablePos, 16 /*SpineAtlasf*/, false)
      && verifier.VerifyString(tablePos, 18 /*SpineMainf*/, false)
      && verifier.VerifyString(tablePos, 20 /*SpineAtlasm*/, false)
      && verifier.VerifyString(tablePos, 22 /*SpineMainm*/, false)
      && verifier.VerifyString(tablePos, 24 /*Title*/, false)
      && verifier.VerifyString(tablePos, 26 /*Desc*/, false)
      && verifier.VerifyField(tablePos, 28 /*RecommendLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*FirstAward*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*Award*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
