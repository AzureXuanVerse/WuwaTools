// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PhotoSetup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PhotoSetup GetRootAsPhotoSetup(ByteBuffer _bb) { return GetRootAsPhotoSetup(_bb, new PhotoSetup()); }
  public static PhotoSetup GetRootAsPhotoSetup(ByteBuffer _bb, PhotoSetup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PhotoSetup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ValueType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public int Type { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Options(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int OptionsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int DefaultOptionIndex { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public WWParser.Defs.DicIntIntArray? SubOptions(int j) { int o = __p.__offset(16); return o != 0 ? (WWParser.Defs.DicIntIntArray?)(new WWParser.Defs.DicIntIntArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SubOptionsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public float ValueRange(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ValueRangeLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetValueRangeBytes() { return __p.__vector_as_span<float>(18, 4); }
#else
  public ArraySegment<byte>? GetValueRangeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public float[] GetValueRangeArray() { return __p.__vector_as_array<float>(18); }
  public bool IsReverseSet { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float ChangeValue { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.1f; } }

  public static Offset<WWParser.Defs.PhotoSetup> CreatePhotoSetup(FlatBufferBuilder builder,
      int id = 0,
      int value_type = 0,
      StringOffset nameOffset = default(StringOffset),
      int type = 0,
      VectorOffset optionsOffset = default(VectorOffset),
      int default_option_index = 1,
      VectorOffset sub_optionsOffset = default(VectorOffset),
      VectorOffset value_rangeOffset = default(VectorOffset),
      bool is_reverse_set = false,
      float change_value = 0.1f) {
    builder.StartTable(10);
    PhotoSetup.AddChangeValue(builder, change_value);
    PhotoSetup.AddValueRange(builder, value_rangeOffset);
    PhotoSetup.AddSubOptions(builder, sub_optionsOffset);
    PhotoSetup.AddDefaultOptionIndex(builder, default_option_index);
    PhotoSetup.AddOptions(builder, optionsOffset);
    PhotoSetup.AddType(builder, type);
    PhotoSetup.AddName(builder, nameOffset);
    PhotoSetup.AddValueType(builder, value_type);
    PhotoSetup.AddId(builder, id);
    PhotoSetup.AddIsReverseSet(builder, is_reverse_set);
    return PhotoSetup.EndPhotoSetup(builder);
  }

  public static void StartPhotoSetup(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddValueType(FlatBufferBuilder builder, int valueType) { builder.AddInt(1, valueType, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(3, type, 0); }
  public static void AddOptions(FlatBufferBuilder builder, VectorOffset optionsOffset) { builder.AddOffset(4, optionsOffset.Value, 0); }
  public static VectorOffset CreateOptionsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOptionsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOptionsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOptionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOptionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDefaultOptionIndex(FlatBufferBuilder builder, int defaultOptionIndex) { builder.AddInt(5, defaultOptionIndex, 1); }
  public static void AddSubOptions(FlatBufferBuilder builder, VectorOffset subOptionsOffset) { builder.AddOffset(6, subOptionsOffset.Value, 0); }
  public static VectorOffset CreateSubOptionsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntIntArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSubOptionsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntIntArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubOptionsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntIntArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubOptionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntIntArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSubOptionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddValueRange(FlatBufferBuilder builder, VectorOffset valueRangeOffset) { builder.AddOffset(7, valueRangeOffset.Value, 0); }
  public static VectorOffset CreateValueRangeVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValueRangeVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValueRangeVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValueRangeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartValueRangeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsReverseSet(FlatBufferBuilder builder, bool isReverseSet) { builder.AddBool(8, isReverseSet, false); }
  public static void AddChangeValue(FlatBufferBuilder builder, float changeValue) { builder.AddFloat(9, changeValue, 0.1f); }
  public static Offset<WWParser.Defs.PhotoSetup> EndPhotoSetup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PhotoSetup>(o);
  }
  public PhotoSetupT UnPack() {
    var _o = new PhotoSetupT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PhotoSetupT _o) {
    _o.Id = this.Id;
    _o.ValueType = this.ValueType;
    _o.Name = this.Name;
    _o.Type = this.Type;
    _o.Options = new List<string>();
    for (var _j = 0; _j < this.OptionsLength; ++_j) {_o.Options.Add(this.Options(_j));}
    _o.DefaultOptionIndex = this.DefaultOptionIndex;
    _o.SubOptions = new List<WWParser.Defs.DicIntIntArrayT>();
    for (var _j = 0; _j < this.SubOptionsLength; ++_j) {_o.SubOptions.Add(this.SubOptions(_j).HasValue ? this.SubOptions(_j).Value.UnPack() : null);}
    _o.ValueRange = new List<float>();
    for (var _j = 0; _j < this.ValueRangeLength; ++_j) {_o.ValueRange.Add(this.ValueRange(_j));}
    _o.IsReverseSet = this.IsReverseSet;
    _o.ChangeValue = this.ChangeValue;
  }
  public static Offset<WWParser.Defs.PhotoSetup> Pack(FlatBufferBuilder builder, PhotoSetupT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PhotoSetup>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _options = default(VectorOffset);
    if (_o.Options != null) {
      var __options = new StringOffset[_o.Options.Count];
      for (var _j = 0; _j < __options.Length; ++_j) { __options[_j] = builder.CreateString(_o.Options[_j]); }
      _options = CreateOptionsVector(builder, __options);
    }
    var _sub_options = default(VectorOffset);
    if (_o.SubOptions != null) {
      var __sub_options = new Offset<WWParser.Defs.DicIntIntArray>[_o.SubOptions.Count];
      for (var _j = 0; _j < __sub_options.Length; ++_j) { __sub_options[_j] = WWParser.Defs.DicIntIntArray.Pack(builder, _o.SubOptions[_j]); }
      _sub_options = CreateSubOptionsVector(builder, __sub_options);
    }
    var _value_range = default(VectorOffset);
    if (_o.ValueRange != null) {
      var __value_range = _o.ValueRange.ToArray();
      _value_range = CreateValueRangeVector(builder, __value_range);
    }
    return CreatePhotoSetup(
      builder,
      _o.Id,
      _o.ValueType,
      _name,
      _o.Type,
      _options,
      _o.DefaultOptionIndex,
      _sub_options,
      _value_range,
      _o.IsReverseSet,
      _o.ChangeValue);
  }
}

public class PhotoSetupT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("value_type")]
  public int ValueType { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("options")]
  public List<string> Options { get; set; }
  [Newtonsoft.Json.JsonProperty("default_option_index")]
  public int DefaultOptionIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("sub_options")]
  public List<WWParser.Defs.DicIntIntArrayT> SubOptions { get; set; }
  [Newtonsoft.Json.JsonProperty("value_range")]
  public List<float> ValueRange { get; set; }
  [Newtonsoft.Json.JsonProperty("is_reverse_set")]
  public bool IsReverseSet { get; set; }
  [Newtonsoft.Json.JsonProperty("change_value")]
  public float ChangeValue { get; set; }

  public PhotoSetupT() {
    this.Id = 0;
    this.ValueType = 0;
    this.Name = null;
    this.Type = 0;
    this.Options = null;
    this.DefaultOptionIndex = 1;
    this.SubOptions = null;
    this.ValueRange = null;
    this.IsReverseSet = false;
    this.ChangeValue = 0.1f;
  }
}


static public class PhotoSetupVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ValueType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyField(tablePos, 10 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*Options*/, false)
      && verifier.VerifyField(tablePos, 14 /*DefaultOptionIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 16 /*SubOptions*/, WWParser.Defs.DicIntIntArrayVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*ValueRange*/, 4 /*float*/, false)
      && verifier.VerifyField(tablePos, 20 /*IsReverseSet*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*ChangeValue*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
