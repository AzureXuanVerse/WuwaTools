// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ExploreProgress : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ExploreProgress GetRootAsExploreProgress(ByteBuffer _bb) { return GetRootAsExploreProgress(_bb, new ExploreProgress()); }
  public static ExploreProgress GetRootAsExploreProgress(ByteBuffer _bb, ExploreProgress obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ExploreProgress __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Area { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExploreType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? SubTypeScore(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SubTypeScoreLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int PhantomSkillId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string UnlockTextId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnlockTextIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetUnlockTextIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetUnlockTextIdArray() { return __p.__vector_as_array<byte>(14); }
  public string LockTextId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLockTextIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetLockTextIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetLockTextIdArray() { return __p.__vector_as_array<byte>(16); }
  public int UnlockCondition { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? SpecialPlayerMap(int j) { int o = __p.__offset(20); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SpecialPlayerMapLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool IsRecommend { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsShowProgress { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsShowTrack { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string SpecialPlayerDesc { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpecialPlayerDescBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetSpecialPlayerDescBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetSpecialPlayerDescArray() { return __p.__vector_as_array<byte>(28); }

  public static Offset<WWParser.Defs.ExploreProgress> CreateExploreProgress(FlatBufferBuilder builder,
      int id = 0,
      int area = 0,
      int explore_type = 0,
      VectorOffset sub_type_scoreOffset = default(VectorOffset),
      int phantom_skill_id = 0,
      StringOffset unlock_text_idOffset = default(StringOffset),
      StringOffset lock_text_idOffset = default(StringOffset),
      int unlock_condition = 0,
      VectorOffset special_player_mapOffset = default(VectorOffset),
      bool is_recommend = false,
      bool is_show_progress = false,
      bool is_show_track = false,
      StringOffset special_player_descOffset = default(StringOffset)) {
    builder.StartTable(13);
    ExploreProgress.AddSpecialPlayerDesc(builder, special_player_descOffset);
    ExploreProgress.AddSpecialPlayerMap(builder, special_player_mapOffset);
    ExploreProgress.AddUnlockCondition(builder, unlock_condition);
    ExploreProgress.AddLockTextId(builder, lock_text_idOffset);
    ExploreProgress.AddUnlockTextId(builder, unlock_text_idOffset);
    ExploreProgress.AddPhantomSkillId(builder, phantom_skill_id);
    ExploreProgress.AddSubTypeScore(builder, sub_type_scoreOffset);
    ExploreProgress.AddExploreType(builder, explore_type);
    ExploreProgress.AddArea(builder, area);
    ExploreProgress.AddId(builder, id);
    ExploreProgress.AddIsShowTrack(builder, is_show_track);
    ExploreProgress.AddIsShowProgress(builder, is_show_progress);
    ExploreProgress.AddIsRecommend(builder, is_recommend);
    return ExploreProgress.EndExploreProgress(builder);
  }

  public static void StartExploreProgress(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddArea(FlatBufferBuilder builder, int area) { builder.AddInt(1, area, 0); }
  public static void AddExploreType(FlatBufferBuilder builder, int exploreType) { builder.AddInt(2, exploreType, 0); }
  public static void AddSubTypeScore(FlatBufferBuilder builder, VectorOffset subTypeScoreOffset) { builder.AddOffset(3, subTypeScoreOffset.Value, 0); }
  public static VectorOffset CreateSubTypeScoreVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSubTypeScoreVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubTypeScoreVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubTypeScoreVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSubTypeScoreVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPhantomSkillId(FlatBufferBuilder builder, int phantomSkillId) { builder.AddInt(4, phantomSkillId, 0); }
  public static void AddUnlockTextId(FlatBufferBuilder builder, StringOffset unlockTextIdOffset) { builder.AddOffset(5, unlockTextIdOffset.Value, 0); }
  public static void AddLockTextId(FlatBufferBuilder builder, StringOffset lockTextIdOffset) { builder.AddOffset(6, lockTextIdOffset.Value, 0); }
  public static void AddUnlockCondition(FlatBufferBuilder builder, int unlockCondition) { builder.AddInt(7, unlockCondition, 0); }
  public static void AddSpecialPlayerMap(FlatBufferBuilder builder, VectorOffset specialPlayerMapOffset) { builder.AddOffset(8, specialPlayerMapOffset.Value, 0); }
  public static VectorOffset CreateSpecialPlayerMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSpecialPlayerMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecialPlayerMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecialPlayerMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpecialPlayerMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsRecommend(FlatBufferBuilder builder, bool isRecommend) { builder.AddBool(9, isRecommend, false); }
  public static void AddIsShowProgress(FlatBufferBuilder builder, bool isShowProgress) { builder.AddBool(10, isShowProgress, false); }
  public static void AddIsShowTrack(FlatBufferBuilder builder, bool isShowTrack) { builder.AddBool(11, isShowTrack, false); }
  public static void AddSpecialPlayerDesc(FlatBufferBuilder builder, StringOffset specialPlayerDescOffset) { builder.AddOffset(12, specialPlayerDescOffset.Value, 0); }
  public static Offset<WWParser.Defs.ExploreProgress> EndExploreProgress(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ExploreProgress>(o);
  }
  public ExploreProgressT UnPack() {
    var _o = new ExploreProgressT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ExploreProgressT _o) {
    _o.Id = this.Id;
    _o.Area = this.Area;
    _o.ExploreType = this.ExploreType;
    _o.SubTypeScore = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.SubTypeScoreLength; ++_j) {_o.SubTypeScore.Add(this.SubTypeScore(_j).HasValue ? this.SubTypeScore(_j).Value.UnPack() : null);}
    _o.PhantomSkillId = this.PhantomSkillId;
    _o.UnlockTextId = this.UnlockTextId;
    _o.LockTextId = this.LockTextId;
    _o.UnlockCondition = this.UnlockCondition;
    _o.SpecialPlayerMap = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.SpecialPlayerMapLength; ++_j) {_o.SpecialPlayerMap.Add(this.SpecialPlayerMap(_j).HasValue ? this.SpecialPlayerMap(_j).Value.UnPack() : null);}
    _o.IsRecommend = this.IsRecommend;
    _o.IsShowProgress = this.IsShowProgress;
    _o.IsShowTrack = this.IsShowTrack;
    _o.SpecialPlayerDesc = this.SpecialPlayerDesc;
  }
  public static Offset<WWParser.Defs.ExploreProgress> Pack(FlatBufferBuilder builder, ExploreProgressT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ExploreProgress>);
    var _sub_type_score = default(VectorOffset);
    if (_o.SubTypeScore != null) {
      var __sub_type_score = new Offset<WWParser.Defs.DicIntInt>[_o.SubTypeScore.Count];
      for (var _j = 0; _j < __sub_type_score.Length; ++_j) { __sub_type_score[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.SubTypeScore[_j]); }
      _sub_type_score = CreateSubTypeScoreVector(builder, __sub_type_score);
    }
    var _unlock_text_id = _o.UnlockTextId == null ? default(StringOffset) : builder.CreateString(_o.UnlockTextId);
    var _lock_text_id = _o.LockTextId == null ? default(StringOffset) : builder.CreateString(_o.LockTextId);
    var _special_player_map = default(VectorOffset);
    if (_o.SpecialPlayerMap != null) {
      var __special_player_map = new Offset<WWParser.Defs.DicIntInt>[_o.SpecialPlayerMap.Count];
      for (var _j = 0; _j < __special_player_map.Length; ++_j) { __special_player_map[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.SpecialPlayerMap[_j]); }
      _special_player_map = CreateSpecialPlayerMapVector(builder, __special_player_map);
    }
    var _special_player_desc = _o.SpecialPlayerDesc == null ? default(StringOffset) : builder.CreateString(_o.SpecialPlayerDesc);
    return CreateExploreProgress(
      builder,
      _o.Id,
      _o.Area,
      _o.ExploreType,
      _sub_type_score,
      _o.PhantomSkillId,
      _unlock_text_id,
      _lock_text_id,
      _o.UnlockCondition,
      _special_player_map,
      _o.IsRecommend,
      _o.IsShowProgress,
      _o.IsShowTrack,
      _special_player_desc);
  }
}

public class ExploreProgressT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("area")]
  public int Area { get; set; }
  [Newtonsoft.Json.JsonProperty("explore_type")]
  public int ExploreType { get; set; }
  [Newtonsoft.Json.JsonProperty("sub_type_score")]
  public List<WWParser.Defs.DicIntIntT> SubTypeScore { get; set; }
  [Newtonsoft.Json.JsonProperty("phantom_skill_id")]
  public int PhantomSkillId { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_text_id")]
  public string UnlockTextId { get; set; }
  [Newtonsoft.Json.JsonProperty("lock_text_id")]
  public string LockTextId { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_condition")]
  public int UnlockCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("special_player_map")]
  public List<WWParser.Defs.DicIntIntT> SpecialPlayerMap { get; set; }
  [Newtonsoft.Json.JsonProperty("is_recommend")]
  public bool IsRecommend { get; set; }
  [Newtonsoft.Json.JsonProperty("is_show_progress")]
  public bool IsShowProgress { get; set; }
  [Newtonsoft.Json.JsonProperty("is_show_track")]
  public bool IsShowTrack { get; set; }
  [Newtonsoft.Json.JsonProperty("special_player_desc")]
  public string SpecialPlayerDesc { get; set; }

  public ExploreProgressT() {
    this.Id = 0;
    this.Area = 0;
    this.ExploreType = 0;
    this.SubTypeScore = null;
    this.PhantomSkillId = 0;
    this.UnlockTextId = null;
    this.LockTextId = null;
    this.UnlockCondition = 0;
    this.SpecialPlayerMap = null;
    this.IsRecommend = false;
    this.IsShowProgress = false;
    this.IsShowTrack = false;
    this.SpecialPlayerDesc = null;
  }
}


static public class ExploreProgressVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Area*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ExploreType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*SubTypeScore*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 12 /*PhantomSkillId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*UnlockTextId*/, false)
      && verifier.VerifyString(tablePos, 16 /*LockTextId*/, false)
      && verifier.VerifyField(tablePos, 18 /*UnlockCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 20 /*SpecialPlayerMap*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 22 /*IsRecommend*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*IsShowProgress*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 26 /*IsShowTrack*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 28 /*SpecialPlayerDesc*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
