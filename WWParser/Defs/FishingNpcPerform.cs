// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FishingNpcPerform : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FishingNpcPerform GetRootAsFishingNpcPerform(ByteBuffer _bb) { return GetRootAsFishingNpcPerform(_bb, new FishingNpcPerform()); }
  public static FishingNpcPerform GetRootAsFishingNpcPerform(ByteBuffer _bb, FishingNpcPerform obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FishingNpcPerform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Title { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(6); }
  public string Content { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetContentBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetContentArray() { return __p.__vector_as_array<byte>(8); }
  public string AudioEvent { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAudioEventBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetAudioEventBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetAudioEventArray() { return __p.__vector_as_array<byte>(10); }
  public string MontagePath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMontagePathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMontagePathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMontagePathArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<WWParser.Defs.FishingNpcPerform> CreateFishingNpcPerform(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset titleOffset = default(StringOffset),
      StringOffset contentOffset = default(StringOffset),
      StringOffset audio_eventOffset = default(StringOffset),
      StringOffset montage_pathOffset = default(StringOffset)) {
    builder.StartTable(5);
    FishingNpcPerform.AddMontagePath(builder, montage_pathOffset);
    FishingNpcPerform.AddAudioEvent(builder, audio_eventOffset);
    FishingNpcPerform.AddContent(builder, contentOffset);
    FishingNpcPerform.AddTitle(builder, titleOffset);
    FishingNpcPerform.AddId(builder, idOffset);
    return FishingNpcPerform.EndFishingNpcPerform(builder);
  }

  public static void StartFishingNpcPerform(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(1, titleOffset.Value, 0); }
  public static void AddContent(FlatBufferBuilder builder, StringOffset contentOffset) { builder.AddOffset(2, contentOffset.Value, 0); }
  public static void AddAudioEvent(FlatBufferBuilder builder, StringOffset audioEventOffset) { builder.AddOffset(3, audioEventOffset.Value, 0); }
  public static void AddMontagePath(FlatBufferBuilder builder, StringOffset montagePathOffset) { builder.AddOffset(4, montagePathOffset.Value, 0); }
  public static Offset<WWParser.Defs.FishingNpcPerform> EndFishingNpcPerform(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FishingNpcPerform>(o);
  }
  public FishingNpcPerformT UnPack() {
    var _o = new FishingNpcPerformT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FishingNpcPerformT _o) {
    _o.Id = this.Id;
    _o.Title = this.Title;
    _o.Content = this.Content;
    _o.AudioEvent = this.AudioEvent;
    _o.MontagePath = this.MontagePath;
  }
  public static Offset<WWParser.Defs.FishingNpcPerform> Pack(FlatBufferBuilder builder, FishingNpcPerformT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FishingNpcPerform>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _content = _o.Content == null ? default(StringOffset) : builder.CreateString(_o.Content);
    var _audio_event = _o.AudioEvent == null ? default(StringOffset) : builder.CreateString(_o.AudioEvent);
    var _montage_path = _o.MontagePath == null ? default(StringOffset) : builder.CreateString(_o.MontagePath);
    return CreateFishingNpcPerform(
      builder,
      _id,
      _title,
      _content,
      _audio_event,
      _montage_path);
  }
}

public class FishingNpcPerformT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("content")]
  public string Content { get; set; }
  [Newtonsoft.Json.JsonProperty("audio_event")]
  public string AudioEvent { get; set; }
  [Newtonsoft.Json.JsonProperty("montage_path")]
  public string MontagePath { get; set; }

  public FishingNpcPerformT() {
    this.Id = null;
    this.Title = null;
    this.Content = null;
    this.AudioEvent = null;
    this.MontagePath = null;
  }
}


static public class FishingNpcPerformVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*Title*/, false)
      && verifier.VerifyString(tablePos, 8 /*Content*/, false)
      && verifier.VerifyString(tablePos, 10 /*AudioEvent*/, false)
      && verifier.VerifyString(tablePos, 12 /*MontagePath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
