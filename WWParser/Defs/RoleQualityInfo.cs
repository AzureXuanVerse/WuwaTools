// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RoleQualityInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RoleQualityInfo GetRootAsRoleQualityInfo(ByteBuffer _bb) { return GetRootAsRoleQualityInfo(_bb, new RoleQualityInfo()); }
  public static RoleQualityInfo GetRootAsRoleQualityInfo(ByteBuffer _bb, RoleQualityInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoleQualityInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Icon { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(8); }
  public string QualityColor { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQualityColorBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetQualityColorBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetQualityColorArray() { return __p.__vector_as_array<byte>(10); }
  public string Image { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImageBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetImageBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetImageArray() { return __p.__vector_as_array<byte>(12); }
  public string GachaQualityImage { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGachaQualityImageBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetGachaQualityImageBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetGachaQualityImageArray() { return __p.__vector_as_array<byte>(14); }
  public WWParser.Defs.DicIntInt? SpiloverCompensate(int j) { int o = __p.__offset(16); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SpiloverCompensateLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.RoleQualityInfo> CreateRoleQualityInfo(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset quality_colorOffset = default(StringOffset),
      StringOffset imageOffset = default(StringOffset),
      StringOffset gacha_quality_imageOffset = default(StringOffset),
      VectorOffset spilover_compensateOffset = default(VectorOffset)) {
    builder.StartTable(7);
    RoleQualityInfo.AddSpiloverCompensate(builder, spilover_compensateOffset);
    RoleQualityInfo.AddGachaQualityImage(builder, gacha_quality_imageOffset);
    RoleQualityInfo.AddImage(builder, imageOffset);
    RoleQualityInfo.AddQualityColor(builder, quality_colorOffset);
    RoleQualityInfo.AddIcon(builder, iconOffset);
    RoleQualityInfo.AddName(builder, nameOffset);
    RoleQualityInfo.AddId(builder, id);
    return RoleQualityInfo.EndRoleQualityInfo(builder);
  }

  public static void StartRoleQualityInfo(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(2, iconOffset.Value, 0); }
  public static void AddQualityColor(FlatBufferBuilder builder, StringOffset qualityColorOffset) { builder.AddOffset(3, qualityColorOffset.Value, 0); }
  public static void AddImage(FlatBufferBuilder builder, StringOffset imageOffset) { builder.AddOffset(4, imageOffset.Value, 0); }
  public static void AddGachaQualityImage(FlatBufferBuilder builder, StringOffset gachaQualityImageOffset) { builder.AddOffset(5, gachaQualityImageOffset.Value, 0); }
  public static void AddSpiloverCompensate(FlatBufferBuilder builder, VectorOffset spiloverCompensateOffset) { builder.AddOffset(6, spiloverCompensateOffset.Value, 0); }
  public static VectorOffset CreateSpiloverCompensateVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSpiloverCompensateVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpiloverCompensateVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpiloverCompensateVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpiloverCompensateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.RoleQualityInfo> EndRoleQualityInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RoleQualityInfo>(o);
  }
  public RoleQualityInfoT UnPack() {
    var _o = new RoleQualityInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RoleQualityInfoT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.Icon = this.Icon;
    _o.QualityColor = this.QualityColor;
    _o.Image = this.Image;
    _o.GachaQualityImage = this.GachaQualityImage;
    _o.SpiloverCompensate = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.SpiloverCompensateLength; ++_j) {_o.SpiloverCompensate.Add(this.SpiloverCompensate(_j).HasValue ? this.SpiloverCompensate(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.RoleQualityInfo> Pack(FlatBufferBuilder builder, RoleQualityInfoT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RoleQualityInfo>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _quality_color = _o.QualityColor == null ? default(StringOffset) : builder.CreateString(_o.QualityColor);
    var _image = _o.Image == null ? default(StringOffset) : builder.CreateString(_o.Image);
    var _gacha_quality_image = _o.GachaQualityImage == null ? default(StringOffset) : builder.CreateString(_o.GachaQualityImage);
    var _spilover_compensate = default(VectorOffset);
    if (_o.SpiloverCompensate != null) {
      var __spilover_compensate = new Offset<WWParser.Defs.DicIntInt>[_o.SpiloverCompensate.Count];
      for (var _j = 0; _j < __spilover_compensate.Length; ++_j) { __spilover_compensate[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.SpiloverCompensate[_j]); }
      _spilover_compensate = CreateSpiloverCompensateVector(builder, __spilover_compensate);
    }
    return CreateRoleQualityInfo(
      builder,
      _o.Id,
      _name,
      _icon,
      _quality_color,
      _image,
      _gacha_quality_image,
      _spilover_compensate);
  }
}

public class RoleQualityInfoT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("quality_color")]
  public string QualityColor { get; set; }
  [Newtonsoft.Json.JsonProperty("image")]
  public string Image { get; set; }
  [Newtonsoft.Json.JsonProperty("gacha_quality_image")]
  public string GachaQualityImage { get; set; }
  [Newtonsoft.Json.JsonProperty("spilover_compensate")]
  public List<WWParser.Defs.DicIntIntT> SpiloverCompensate { get; set; }

  public RoleQualityInfoT() {
    this.Id = 0;
    this.Name = null;
    this.Icon = null;
    this.QualityColor = null;
    this.Image = null;
    this.GachaQualityImage = null;
    this.SpiloverCompensate = null;
  }
}


static public class RoleQualityInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyString(tablePos, 8 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 10 /*QualityColor*/, false)
      && verifier.VerifyString(tablePos, 12 /*Image*/, false)
      && verifier.VerifyString(tablePos, 14 /*GachaQualityImage*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 16 /*SpiloverCompensate*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
