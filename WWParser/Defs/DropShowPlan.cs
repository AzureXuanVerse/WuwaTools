// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DropShowPlan : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DropShowPlan GetRootAsDropShowPlan(ByteBuffer _bb) { return GetRootAsDropShowPlan(_bb, new DropShowPlan()); }
  public static DropShowPlan GetRootAsDropShowPlan(ByteBuffer _bb, DropShowPlan obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DropShowPlan __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Force(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ForceLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetForceBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetForceBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetForceArray() { return __p.__vector_as_array<int>(6); }
  public int Angle(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AngleLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAngleBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetAngleBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetAngleArray() { return __p.__vector_as_array<int>(8); }
  public int VerticalAngle(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int VerticalAngleLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetVerticalAngleBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetVerticalAngleBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetVerticalAngleArray() { return __p.__vector_as_array<int>(10); }
  public int ShowBg { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShowTime { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)3000; } }
  public int ShowCout { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)7; } }
  public int Adsorption { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.DropShowPlan> CreateDropShowPlan(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset forceOffset = default(VectorOffset),
      VectorOffset angleOffset = default(VectorOffset),
      VectorOffset vertical_angleOffset = default(VectorOffset),
      int show_bg = 0,
      int show_time = 3000,
      int show_cout = 7,
      int adsorption = 0) {
    builder.StartTable(8);
    DropShowPlan.AddAdsorption(builder, adsorption);
    DropShowPlan.AddShowCout(builder, show_cout);
    DropShowPlan.AddShowTime(builder, show_time);
    DropShowPlan.AddShowBg(builder, show_bg);
    DropShowPlan.AddVerticalAngle(builder, vertical_angleOffset);
    DropShowPlan.AddAngle(builder, angleOffset);
    DropShowPlan.AddForce(builder, forceOffset);
    DropShowPlan.AddId(builder, id);
    return DropShowPlan.EndDropShowPlan(builder);
  }

  public static void StartDropShowPlan(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddForce(FlatBufferBuilder builder, VectorOffset forceOffset) { builder.AddOffset(1, forceOffset.Value, 0); }
  public static VectorOffset CreateForceVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateForceVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateForceVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateForceVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartForceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAngle(FlatBufferBuilder builder, VectorOffset angleOffset) { builder.AddOffset(2, angleOffset.Value, 0); }
  public static VectorOffset CreateAngleVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAngleVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAngleVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAngleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAngleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVerticalAngle(FlatBufferBuilder builder, VectorOffset verticalAngleOffset) { builder.AddOffset(3, verticalAngleOffset.Value, 0); }
  public static VectorOffset CreateVerticalAngleVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateVerticalAngleVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVerticalAngleVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVerticalAngleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVerticalAngleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShowBg(FlatBufferBuilder builder, int showBg) { builder.AddInt(4, showBg, 0); }
  public static void AddShowTime(FlatBufferBuilder builder, int showTime) { builder.AddInt(5, showTime, 3000); }
  public static void AddShowCout(FlatBufferBuilder builder, int showCout) { builder.AddInt(6, showCout, 7); }
  public static void AddAdsorption(FlatBufferBuilder builder, int adsorption) { builder.AddInt(7, adsorption, 0); }
  public static Offset<WWParser.Defs.DropShowPlan> EndDropShowPlan(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DropShowPlan>(o);
  }
  public DropShowPlanT UnPack() {
    var _o = new DropShowPlanT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DropShowPlanT _o) {
    _o.Id = this.Id;
    _o.Force = new List<int>();
    for (var _j = 0; _j < this.ForceLength; ++_j) {_o.Force.Add(this.Force(_j));}
    _o.Angle = new List<int>();
    for (var _j = 0; _j < this.AngleLength; ++_j) {_o.Angle.Add(this.Angle(_j));}
    _o.VerticalAngle = new List<int>();
    for (var _j = 0; _j < this.VerticalAngleLength; ++_j) {_o.VerticalAngle.Add(this.VerticalAngle(_j));}
    _o.ShowBg = this.ShowBg;
    _o.ShowTime = this.ShowTime;
    _o.ShowCout = this.ShowCout;
    _o.Adsorption = this.Adsorption;
  }
  public static Offset<WWParser.Defs.DropShowPlan> Pack(FlatBufferBuilder builder, DropShowPlanT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DropShowPlan>);
    var _force = default(VectorOffset);
    if (_o.Force != null) {
      var __force = _o.Force.ToArray();
      _force = CreateForceVector(builder, __force);
    }
    var _angle = default(VectorOffset);
    if (_o.Angle != null) {
      var __angle = _o.Angle.ToArray();
      _angle = CreateAngleVector(builder, __angle);
    }
    var _vertical_angle = default(VectorOffset);
    if (_o.VerticalAngle != null) {
      var __vertical_angle = _o.VerticalAngle.ToArray();
      _vertical_angle = CreateVerticalAngleVector(builder, __vertical_angle);
    }
    return CreateDropShowPlan(
      builder,
      _o.Id,
      _force,
      _angle,
      _vertical_angle,
      _o.ShowBg,
      _o.ShowTime,
      _o.ShowCout,
      _o.Adsorption);
  }
}

public class DropShowPlanT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("force")]
  public List<int> Force { get; set; }
  [Newtonsoft.Json.JsonProperty("angle")]
  public List<int> Angle { get; set; }
  [Newtonsoft.Json.JsonProperty("vertical_angle")]
  public List<int> VerticalAngle { get; set; }
  [Newtonsoft.Json.JsonProperty("show_bg")]
  public int ShowBg { get; set; }
  [Newtonsoft.Json.JsonProperty("show_time")]
  public int ShowTime { get; set; }
  [Newtonsoft.Json.JsonProperty("show_cout")]
  public int ShowCout { get; set; }
  [Newtonsoft.Json.JsonProperty("adsorption")]
  public int Adsorption { get; set; }

  public DropShowPlanT() {
    this.Id = 0;
    this.Force = null;
    this.Angle = null;
    this.VerticalAngle = null;
    this.ShowBg = 0;
    this.ShowTime = 3000;
    this.ShowCout = 7;
    this.Adsorption = 0;
  }
}


static public class DropShowPlanVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Force*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*Angle*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*VerticalAngle*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 12 /*ShowBg*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ShowTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*ShowCout*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Adsorption*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
