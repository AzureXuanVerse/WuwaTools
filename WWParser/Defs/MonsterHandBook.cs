// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MonsterHandBook : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MonsterHandBook GetRootAsMonsterHandBook(ByteBuffer _bb) { return GetRootAsMonsterHandBook(_bb, new MonsterHandBook()); }
  public static MonsterHandBook GetRootAsMonsterHandBook(ByteBuffer _bb, MonsterHandBook obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MonsterHandBook __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public int MeshId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Scale(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ScaleLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetScaleBytes() { return __p.__vector_as_span<float>(12, 4); }
#else
  public ArraySegment<byte>? GetScaleBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public float[] GetScaleArray() { return __p.__vector_as_array<float>(12); }
  public float Position(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int PositionLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetPositionBytes() { return __p.__vector_as_span<float>(14, 4); }
#else
  public ArraySegment<byte>? GetPositionBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public float[] GetPositionArray() { return __p.__vector_as_array<float>(14); }
  public float Rotator(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int RotatorLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetRotatorBytes() { return __p.__vector_as_span<float>(16, 4); }
#else
  public ArraySegment<byte>? GetRotatorBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public float[] GetRotatorArray() { return __p.__vector_as_array<float>(16); }
  public string StandAnim { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStandAnimBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetStandAnimBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetStandAnimArray() { return __p.__vector_as_array<byte>(18); }
  public string TypeDescrtption { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeDescrtptionBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetTypeDescrtptionBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetTypeDescrtptionArray() { return __p.__vector_as_array<byte>(20); }
  public string Descrtption { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescrtptionBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetDescrtptionBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDescrtptionArray() { return __p.__vector_as_array<byte>(22); }
  public string FightSkillDescrtption { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFightSkillDescrtptionBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetFightSkillDescrtptionBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetFightSkillDescrtptionArray() { return __p.__vector_as_array<byte>(24); }
  public int PhantomItem(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PhantomItemLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPhantomItemBytes() { return __p.__vector_as_span<int>(26, 4); }
#else
  public ArraySegment<byte>? GetPhantomItemBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public int[] GetPhantomItemArray() { return __p.__vector_as_array<int>(26); }

  public static Offset<WWParser.Defs.MonsterHandBook> CreateMonsterHandBook(FlatBufferBuilder builder,
      int id = 0,
      int type = 0,
      StringOffset nameOffset = default(StringOffset),
      int mesh_id = 0,
      VectorOffset scaleOffset = default(VectorOffset),
      VectorOffset positionOffset = default(VectorOffset),
      VectorOffset rotatorOffset = default(VectorOffset),
      StringOffset stand_animOffset = default(StringOffset),
      StringOffset type_descrtptionOffset = default(StringOffset),
      StringOffset descrtptionOffset = default(StringOffset),
      StringOffset fight_skill_descrtptionOffset = default(StringOffset),
      VectorOffset phantom_itemOffset = default(VectorOffset)) {
    builder.StartTable(12);
    MonsterHandBook.AddPhantomItem(builder, phantom_itemOffset);
    MonsterHandBook.AddFightSkillDescrtption(builder, fight_skill_descrtptionOffset);
    MonsterHandBook.AddDescrtption(builder, descrtptionOffset);
    MonsterHandBook.AddTypeDescrtption(builder, type_descrtptionOffset);
    MonsterHandBook.AddStandAnim(builder, stand_animOffset);
    MonsterHandBook.AddRotator(builder, rotatorOffset);
    MonsterHandBook.AddPosition(builder, positionOffset);
    MonsterHandBook.AddScale(builder, scaleOffset);
    MonsterHandBook.AddMeshId(builder, mesh_id);
    MonsterHandBook.AddName(builder, nameOffset);
    MonsterHandBook.AddType(builder, type);
    MonsterHandBook.AddId(builder, id);
    return MonsterHandBook.EndMonsterHandBook(builder);
  }

  public static void StartMonsterHandBook(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(1, type, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddMeshId(FlatBufferBuilder builder, int meshId) { builder.AddInt(3, meshId, 0); }
  public static void AddScale(FlatBufferBuilder builder, VectorOffset scaleOffset) { builder.AddOffset(4, scaleOffset.Value, 0); }
  public static VectorOffset CreateScaleVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateScaleVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateScaleVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateScaleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartScaleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPosition(FlatBufferBuilder builder, VectorOffset positionOffset) { builder.AddOffset(5, positionOffset.Value, 0); }
  public static VectorOffset CreatePositionVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePositionVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePositionVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePositionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPositionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRotator(FlatBufferBuilder builder, VectorOffset rotatorOffset) { builder.AddOffset(6, rotatorOffset.Value, 0); }
  public static VectorOffset CreateRotatorVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRotatorVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRotatorVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRotatorVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRotatorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStandAnim(FlatBufferBuilder builder, StringOffset standAnimOffset) { builder.AddOffset(7, standAnimOffset.Value, 0); }
  public static void AddTypeDescrtption(FlatBufferBuilder builder, StringOffset typeDescrtptionOffset) { builder.AddOffset(8, typeDescrtptionOffset.Value, 0); }
  public static void AddDescrtption(FlatBufferBuilder builder, StringOffset descrtptionOffset) { builder.AddOffset(9, descrtptionOffset.Value, 0); }
  public static void AddFightSkillDescrtption(FlatBufferBuilder builder, StringOffset fightSkillDescrtptionOffset) { builder.AddOffset(10, fightSkillDescrtptionOffset.Value, 0); }
  public static void AddPhantomItem(FlatBufferBuilder builder, VectorOffset phantomItemOffset) { builder.AddOffset(11, phantomItemOffset.Value, 0); }
  public static VectorOffset CreatePhantomItemVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePhantomItemVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhantomItemVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhantomItemVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPhantomItemVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.MonsterHandBook> EndMonsterHandBook(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MonsterHandBook>(o);
  }
  public MonsterHandBookT UnPack() {
    var _o = new MonsterHandBookT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MonsterHandBookT _o) {
    _o.Id = this.Id;
    _o.Type = this.Type;
    _o.Name = this.Name;
    _o.MeshId = this.MeshId;
    _o.Scale = new List<float>();
    for (var _j = 0; _j < this.ScaleLength; ++_j) {_o.Scale.Add(this.Scale(_j));}
    _o.Position = new List<float>();
    for (var _j = 0; _j < this.PositionLength; ++_j) {_o.Position.Add(this.Position(_j));}
    _o.Rotator = new List<float>();
    for (var _j = 0; _j < this.RotatorLength; ++_j) {_o.Rotator.Add(this.Rotator(_j));}
    _o.StandAnim = this.StandAnim;
    _o.TypeDescrtption = this.TypeDescrtption;
    _o.Descrtption = this.Descrtption;
    _o.FightSkillDescrtption = this.FightSkillDescrtption;
    _o.PhantomItem = new List<int>();
    for (var _j = 0; _j < this.PhantomItemLength; ++_j) {_o.PhantomItem.Add(this.PhantomItem(_j));}
  }
  public static Offset<WWParser.Defs.MonsterHandBook> Pack(FlatBufferBuilder builder, MonsterHandBookT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MonsterHandBook>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _scale = default(VectorOffset);
    if (_o.Scale != null) {
      var __scale = _o.Scale.ToArray();
      _scale = CreateScaleVector(builder, __scale);
    }
    var _position = default(VectorOffset);
    if (_o.Position != null) {
      var __position = _o.Position.ToArray();
      _position = CreatePositionVector(builder, __position);
    }
    var _rotator = default(VectorOffset);
    if (_o.Rotator != null) {
      var __rotator = _o.Rotator.ToArray();
      _rotator = CreateRotatorVector(builder, __rotator);
    }
    var _stand_anim = _o.StandAnim == null ? default(StringOffset) : builder.CreateString(_o.StandAnim);
    var _type_descrtption = _o.TypeDescrtption == null ? default(StringOffset) : builder.CreateString(_o.TypeDescrtption);
    var _descrtption = _o.Descrtption == null ? default(StringOffset) : builder.CreateString(_o.Descrtption);
    var _fight_skill_descrtption = _o.FightSkillDescrtption == null ? default(StringOffset) : builder.CreateString(_o.FightSkillDescrtption);
    var _phantom_item = default(VectorOffset);
    if (_o.PhantomItem != null) {
      var __phantom_item = _o.PhantomItem.ToArray();
      _phantom_item = CreatePhantomItemVector(builder, __phantom_item);
    }
    return CreateMonsterHandBook(
      builder,
      _o.Id,
      _o.Type,
      _name,
      _o.MeshId,
      _scale,
      _position,
      _rotator,
      _stand_anim,
      _type_descrtption,
      _descrtption,
      _fight_skill_descrtption,
      _phantom_item);
  }
}

public class MonsterHandBookT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("mesh_id")]
  public int MeshId { get; set; }
  [Newtonsoft.Json.JsonProperty("scale")]
  public List<float> Scale { get; set; }
  [Newtonsoft.Json.JsonProperty("position")]
  public List<float> Position { get; set; }
  [Newtonsoft.Json.JsonProperty("rotator")]
  public List<float> Rotator { get; set; }
  [Newtonsoft.Json.JsonProperty("stand_anim")]
  public string StandAnim { get; set; }
  [Newtonsoft.Json.JsonProperty("type_descrtption")]
  public string TypeDescrtption { get; set; }
  [Newtonsoft.Json.JsonProperty("descrtption")]
  public string Descrtption { get; set; }
  [Newtonsoft.Json.JsonProperty("fight_skill_descrtption")]
  public string FightSkillDescrtption { get; set; }
  [Newtonsoft.Json.JsonProperty("phantom_item")]
  public List<int> PhantomItem { get; set; }

  public MonsterHandBookT() {
    this.Id = 0;
    this.Type = 0;
    this.Name = null;
    this.MeshId = 0;
    this.Scale = null;
    this.Position = null;
    this.Rotator = null;
    this.StandAnim = null;
    this.TypeDescrtption = null;
    this.Descrtption = null;
    this.FightSkillDescrtption = null;
    this.PhantomItem = null;
  }
}


static public class MonsterHandBookVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyField(tablePos, 10 /*MeshId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*Scale*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*Position*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*Rotator*/, 4 /*float*/, false)
      && verifier.VerifyString(tablePos, 18 /*StandAnim*/, false)
      && verifier.VerifyString(tablePos, 20 /*TypeDescrtption*/, false)
      && verifier.VerifyString(tablePos, 22 /*Descrtption*/, false)
      && verifier.VerifyString(tablePos, 24 /*FightSkillDescrtption*/, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*PhantomItem*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
