// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FeedingAnimal : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FeedingAnimal GetRootAsFeedingAnimal(ByteBuffer _bb) { return GetRootAsFeedingAnimal(_bb, new FeedingAnimal()); }
  public static FeedingAnimal GetRootAsFeedingAnimal(ByteBuffer _bb, FeedingAnimal obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FeedingAnimal __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemIds(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ItemIdsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItemIdsBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetItemIdsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetItemIdsArray() { return __p.__vector_as_array<int>(6); }
  public string GameplayTags(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int GameplayTagsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.FeedingAnimal> CreateFeedingAnimal(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset item_idsOffset = default(VectorOffset),
      VectorOffset gameplay_tagsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    FeedingAnimal.AddGameplayTags(builder, gameplay_tagsOffset);
    FeedingAnimal.AddItemIds(builder, item_idsOffset);
    FeedingAnimal.AddId(builder, id);
    return FeedingAnimal.EndFeedingAnimal(builder);
  }

  public static void StartFeedingAnimal(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddItemIds(FlatBufferBuilder builder, VectorOffset itemIdsOffset) { builder.AddOffset(1, itemIdsOffset.Value, 0); }
  public static VectorOffset CreateItemIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItemIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartItemIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGameplayTags(FlatBufferBuilder builder, VectorOffset gameplayTagsOffset) { builder.AddOffset(2, gameplayTagsOffset.Value, 0); }
  public static VectorOffset CreateGameplayTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGameplayTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGameplayTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGameplayTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGameplayTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.FeedingAnimal> EndFeedingAnimal(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FeedingAnimal>(o);
  }
  public FeedingAnimalT UnPack() {
    var _o = new FeedingAnimalT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FeedingAnimalT _o) {
    _o.Id = this.Id;
    _o.ItemIds = new List<int>();
    for (var _j = 0; _j < this.ItemIdsLength; ++_j) {_o.ItemIds.Add(this.ItemIds(_j));}
    _o.GameplayTags = new List<string>();
    for (var _j = 0; _j < this.GameplayTagsLength; ++_j) {_o.GameplayTags.Add(this.GameplayTags(_j));}
  }
  public static Offset<WWParser.Defs.FeedingAnimal> Pack(FlatBufferBuilder builder, FeedingAnimalT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FeedingAnimal>);
    var _item_ids = default(VectorOffset);
    if (_o.ItemIds != null) {
      var __item_ids = _o.ItemIds.ToArray();
      _item_ids = CreateItemIdsVector(builder, __item_ids);
    }
    var _gameplay_tags = default(VectorOffset);
    if (_o.GameplayTags != null) {
      var __gameplay_tags = new StringOffset[_o.GameplayTags.Count];
      for (var _j = 0; _j < __gameplay_tags.Length; ++_j) { __gameplay_tags[_j] = builder.CreateString(_o.GameplayTags[_j]); }
      _gameplay_tags = CreateGameplayTagsVector(builder, __gameplay_tags);
    }
    return CreateFeedingAnimal(
      builder,
      _o.Id,
      _item_ids,
      _gameplay_tags);
  }
}

public class FeedingAnimalT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("item_ids")]
  public List<int> ItemIds { get; set; }
  [Newtonsoft.Json.JsonProperty("gameplay_tags")]
  public List<string> GameplayTags { get; set; }

  public FeedingAnimalT() {
    this.Id = 0;
    this.ItemIds = null;
    this.GameplayTags = null;
  }
}


static public class FeedingAnimalVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*ItemIds*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*GameplayTags*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
