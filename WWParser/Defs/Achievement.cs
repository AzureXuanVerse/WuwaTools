// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Achievement : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Achievement GetRootAsAchievement(ByteBuffer _bb) { return GetRootAsAchievement(_bb, new Achievement()); }
  public static Achievement GetRootAsAchievement(ByteBuffer _bb, Achievement obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Achievement __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public string Desc { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(12); }
  public string IconPath { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconPathBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIconPathArray() { return __p.__vector_as_array<byte>(14); }
  public int OverrideDropId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Hidden { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int NextLink { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public bool ClientTrigger { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int ThirdPartyTrophyId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }

  public static Offset<WWParser.Defs.Achievement> CreateAchievement(FlatBufferBuilder builder,
      int id = 0,
      int group_id = 0,
      int level = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      StringOffset icon_pathOffset = default(StringOffset),
      int override_drop_id = 0,
      bool hidden = false,
      int next_link = -1,
      bool client_trigger = false,
      int third_party_trophy_id = -1) {
    builder.StartTable(11);
    Achievement.AddThirdPartyTrophyId(builder, third_party_trophy_id);
    Achievement.AddNextLink(builder, next_link);
    Achievement.AddOverrideDropId(builder, override_drop_id);
    Achievement.AddIconPath(builder, icon_pathOffset);
    Achievement.AddDesc(builder, descOffset);
    Achievement.AddName(builder, nameOffset);
    Achievement.AddLevel(builder, level);
    Achievement.AddGroupId(builder, group_id);
    Achievement.AddId(builder, id);
    Achievement.AddClientTrigger(builder, client_trigger);
    Achievement.AddHidden(builder, hidden);
    return Achievement.EndAchievement(builder);
  }

  public static void StartAchievement(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, int groupId) { builder.AddInt(1, groupId, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(2, level, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(4, descOffset.Value, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset iconPathOffset) { builder.AddOffset(5, iconPathOffset.Value, 0); }
  public static void AddOverrideDropId(FlatBufferBuilder builder, int overrideDropId) { builder.AddInt(6, overrideDropId, 0); }
  public static void AddHidden(FlatBufferBuilder builder, bool hidden) { builder.AddBool(7, hidden, false); }
  public static void AddNextLink(FlatBufferBuilder builder, int nextLink) { builder.AddInt(8, nextLink, -1); }
  public static void AddClientTrigger(FlatBufferBuilder builder, bool clientTrigger) { builder.AddBool(9, clientTrigger, false); }
  public static void AddThirdPartyTrophyId(FlatBufferBuilder builder, int thirdPartyTrophyId) { builder.AddInt(10, thirdPartyTrophyId, -1); }
  public static Offset<WWParser.Defs.Achievement> EndAchievement(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Achievement>(o);
  }
  public AchievementT UnPack() {
    var _o = new AchievementT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AchievementT _o) {
    _o.Id = this.Id;
    _o.GroupId = this.GroupId;
    _o.Level = this.Level;
    _o.Name = this.Name;
    _o.Desc = this.Desc;
    _o.IconPath = this.IconPath;
    _o.OverrideDropId = this.OverrideDropId;
    _o.Hidden = this.Hidden;
    _o.NextLink = this.NextLink;
    _o.ClientTrigger = this.ClientTrigger;
    _o.ThirdPartyTrophyId = this.ThirdPartyTrophyId;
  }
  public static Offset<WWParser.Defs.Achievement> Pack(FlatBufferBuilder builder, AchievementT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Achievement>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    var _icon_path = _o.IconPath == null ? default(StringOffset) : builder.CreateString(_o.IconPath);
    return CreateAchievement(
      builder,
      _o.Id,
      _o.GroupId,
      _o.Level,
      _name,
      _desc,
      _icon_path,
      _o.OverrideDropId,
      _o.Hidden,
      _o.NextLink,
      _o.ClientTrigger,
      _o.ThirdPartyTrophyId);
  }
}

public class AchievementT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("group_id")]
  public int GroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("level")]
  public int Level { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_path")]
  public string IconPath { get; set; }
  [Newtonsoft.Json.JsonProperty("override_drop_id")]
  public int OverrideDropId { get; set; }
  [Newtonsoft.Json.JsonProperty("hidden")]
  public bool Hidden { get; set; }
  [Newtonsoft.Json.JsonProperty("next_link")]
  public int NextLink { get; set; }
  [Newtonsoft.Json.JsonProperty("client_trigger")]
  public bool ClientTrigger { get; set; }
  [Newtonsoft.Json.JsonProperty("third_party_trophy_id")]
  public int ThirdPartyTrophyId { get; set; }

  public AchievementT() {
    this.Id = 0;
    this.GroupId = 0;
    this.Level = 0;
    this.Name = null;
    this.Desc = null;
    this.IconPath = null;
    this.OverrideDropId = 0;
    this.Hidden = false;
    this.NextLink = -1;
    this.ClientTrigger = false;
    this.ThirdPartyTrophyId = -1;
  }
}


static public class AchievementVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*GroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Name*/, false)
      && verifier.VerifyString(tablePos, 12 /*Desc*/, false)
      && verifier.VerifyString(tablePos, 14 /*IconPath*/, false)
      && verifier.VerifyField(tablePos, 16 /*OverrideDropId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Hidden*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 20 /*NextLink*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*ClientTrigger*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*ThirdPartyTrophyId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
