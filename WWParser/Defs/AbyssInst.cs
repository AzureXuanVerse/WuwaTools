// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AbyssInst : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AbyssInst GetRootAsAbyssInst(ByteBuffer _bb) { return GetRootAsAbyssInst(_bb, new AbyssInst()); }
  public static AbyssInst GetRootAsAbyssInst(ByteBuffer _bb, AbyssInst obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AbyssInst __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstEntranceId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RouteId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Difficulty { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int OpenDay { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsEndless { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int ConditionId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? ConsumeItem(int j) { int o = __p.__offset(22); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConsumeItemLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public double BuffIds(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int BuffIdsLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetBuffIdsBytes() { return __p.__vector_as_span<double>(24, 8); }
#else
  public ArraySegment<byte>? GetBuffIdsBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public double[] GetBuffIdsArray() { return __p.__vector_as_array<double>(24); }
  public int ReviveTimes(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ReviveTimesLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetReviveTimesBytes() { return __p.__vector_as_span<int>(26, 4); }
#else
  public ArraySegment<byte>? GetReviveTimesBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public int[] GetReviveTimesArray() { return __p.__vector_as_array<int>(26); }
  public int SingleReviveDelay { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MultiReviveDelay { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockLittleRole(int j) { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int UnlockLittleRoleLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetUnlockLittleRoleBytes() { return __p.__vector_as_span<int>(32, 4); }
#else
  public ArraySegment<byte>? GetUnlockLittleRoleBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public int[] GetUnlockLittleRoleArray() { return __p.__vector_as_array<int>(32); }
  public bool RankOpen { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int TotalTime { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntString? BtPropName(int j) { int o = __p.__offset(38); return o != 0 ? (WWParser.Defs.DicIntString?)(new WWParser.Defs.DicIntString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BtPropNameLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int TotalScore { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? MonsterTypeScore(int j) { int o = __p.__offset(42); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MonsterTypeScoreLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntInt? RewardTime(int j) { int o = __p.__offset(44); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RewardTimeLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int DropPreviewId { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(48); }
  public string SubTitle { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSubTitleBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetSubTitleBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetSubTitleArray() { return __p.__vector_as_array<byte>(50); }
  public string Desc { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(52); }
  public string Goat { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGoatBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetGoatBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetGoatArray() { return __p.__vector_as_array<byte>(54); }
  public string UnLockDesc { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnLockDescBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetUnLockDescBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetUnLockDescArray() { return __p.__vector_as_array<byte>(56); }
  public string AbyssColor { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAbyssColorBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetAbyssColorBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetAbyssColorArray() { return __p.__vector_as_array<byte>(58); }
  public string SmallWorldShowSceneItem { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSmallWorldShowSceneItemBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetSmallWorldShowSceneItemBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetSmallWorldShowSceneItemArray() { return __p.__vector_as_array<byte>(60); }
  public string AbyssShowCake { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAbyssShowCakeBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetAbyssShowCakeBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetAbyssShowCakeArray() { return __p.__vector_as_array<byte>(62); }
  public int RecommendLittleRole(int j) { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RecommendLittleRoleLength { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRecommendLittleRoleBytes() { return __p.__vector_as_span<int>(64, 4); }
#else
  public ArraySegment<byte>? GetRecommendLittleRoleBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public int[] GetRecommendLittleRoleArray() { return __p.__vector_as_array<int>(64); }
  public bool AbyssDevelopEntr { get { int o = __p.__offset(66); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool AbyssStoreEntr { get { int o = __p.__offset(68); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool AbyssSynthesisEntr { get { int o = __p.__offset(70); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool AbyssRank { get { int o = __p.__offset(72); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IfStoryChallenge { get { int o = __p.__offset(74); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.AbyssInst> CreateAbyssInst(FlatBufferBuilder builder,
      int id = 0,
      int inst_id = 0,
      int activity_id = 0,
      int inst_entrance_id = 0,
      int route_id = 0,
      int difficulty = 0,
      int open_day = 0,
      bool is_endless = false,
      int condition_id = 0,
      VectorOffset consume_itemOffset = default(VectorOffset),
      VectorOffset buff_idsOffset = default(VectorOffset),
      VectorOffset revive_timesOffset = default(VectorOffset),
      int single_revive_delay = 0,
      int multi_revive_delay = 0,
      VectorOffset unlock_little_roleOffset = default(VectorOffset),
      bool rank_open = false,
      int total_time = 0,
      VectorOffset bt_prop_nameOffset = default(VectorOffset),
      int total_score = 0,
      VectorOffset monster_type_scoreOffset = default(VectorOffset),
      VectorOffset reward_timeOffset = default(VectorOffset),
      int drop_preview_id = 0,
      StringOffset titleOffset = default(StringOffset),
      StringOffset sub_titleOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      StringOffset goatOffset = default(StringOffset),
      StringOffset un_lock_descOffset = default(StringOffset),
      StringOffset abyss_colorOffset = default(StringOffset),
      StringOffset small_world_show_scene_itemOffset = default(StringOffset),
      StringOffset abyss_show_cakeOffset = default(StringOffset),
      VectorOffset recommend_little_roleOffset = default(VectorOffset),
      bool abyss_develop_entr = false,
      bool abyss_store_entr = false,
      bool abyss_synthesis_entr = false,
      bool abyss_rank = false,
      bool if_story_challenge = false) {
    builder.StartTable(36);
    AbyssInst.AddRecommendLittleRole(builder, recommend_little_roleOffset);
    AbyssInst.AddAbyssShowCake(builder, abyss_show_cakeOffset);
    AbyssInst.AddSmallWorldShowSceneItem(builder, small_world_show_scene_itemOffset);
    AbyssInst.AddAbyssColor(builder, abyss_colorOffset);
    AbyssInst.AddUnLockDesc(builder, un_lock_descOffset);
    AbyssInst.AddGoat(builder, goatOffset);
    AbyssInst.AddDesc(builder, descOffset);
    AbyssInst.AddSubTitle(builder, sub_titleOffset);
    AbyssInst.AddTitle(builder, titleOffset);
    AbyssInst.AddDropPreviewId(builder, drop_preview_id);
    AbyssInst.AddRewardTime(builder, reward_timeOffset);
    AbyssInst.AddMonsterTypeScore(builder, monster_type_scoreOffset);
    AbyssInst.AddTotalScore(builder, total_score);
    AbyssInst.AddBtPropName(builder, bt_prop_nameOffset);
    AbyssInst.AddTotalTime(builder, total_time);
    AbyssInst.AddUnlockLittleRole(builder, unlock_little_roleOffset);
    AbyssInst.AddMultiReviveDelay(builder, multi_revive_delay);
    AbyssInst.AddSingleReviveDelay(builder, single_revive_delay);
    AbyssInst.AddReviveTimes(builder, revive_timesOffset);
    AbyssInst.AddBuffIds(builder, buff_idsOffset);
    AbyssInst.AddConsumeItem(builder, consume_itemOffset);
    AbyssInst.AddConditionId(builder, condition_id);
    AbyssInst.AddOpenDay(builder, open_day);
    AbyssInst.AddDifficulty(builder, difficulty);
    AbyssInst.AddRouteId(builder, route_id);
    AbyssInst.AddInstEntranceId(builder, inst_entrance_id);
    AbyssInst.AddActivityId(builder, activity_id);
    AbyssInst.AddInstId(builder, inst_id);
    AbyssInst.AddId(builder, id);
    AbyssInst.AddIfStoryChallenge(builder, if_story_challenge);
    AbyssInst.AddAbyssRank(builder, abyss_rank);
    AbyssInst.AddAbyssSynthesisEntr(builder, abyss_synthesis_entr);
    AbyssInst.AddAbyssStoreEntr(builder, abyss_store_entr);
    AbyssInst.AddAbyssDevelopEntr(builder, abyss_develop_entr);
    AbyssInst.AddRankOpen(builder, rank_open);
    AbyssInst.AddIsEndless(builder, is_endless);
    return AbyssInst.EndAbyssInst(builder);
  }

  public static void StartAbyssInst(FlatBufferBuilder builder) { builder.StartTable(36); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddInstId(FlatBufferBuilder builder, int instId) { builder.AddInt(1, instId, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(2, activityId, 0); }
  public static void AddInstEntranceId(FlatBufferBuilder builder, int instEntranceId) { builder.AddInt(3, instEntranceId, 0); }
  public static void AddRouteId(FlatBufferBuilder builder, int routeId) { builder.AddInt(4, routeId, 0); }
  public static void AddDifficulty(FlatBufferBuilder builder, int difficulty) { builder.AddInt(5, difficulty, 0); }
  public static void AddOpenDay(FlatBufferBuilder builder, int openDay) { builder.AddInt(6, openDay, 0); }
  public static void AddIsEndless(FlatBufferBuilder builder, bool isEndless) { builder.AddBool(7, isEndless, false); }
  public static void AddConditionId(FlatBufferBuilder builder, int conditionId) { builder.AddInt(8, conditionId, 0); }
  public static void AddConsumeItem(FlatBufferBuilder builder, VectorOffset consumeItemOffset) { builder.AddOffset(9, consumeItemOffset.Value, 0); }
  public static VectorOffset CreateConsumeItemVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConsumeItemVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConsumeItemVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConsumeItemVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConsumeItemVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffIds(FlatBufferBuilder builder, VectorOffset buffIdsOffset) { builder.AddOffset(10, buffIdsOffset.Value, 0); }
  public static VectorOffset CreateBuffIdsVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddReviveTimes(FlatBufferBuilder builder, VectorOffset reviveTimesOffset) { builder.AddOffset(11, reviveTimesOffset.Value, 0); }
  public static VectorOffset CreateReviveTimesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateReviveTimesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReviveTimesVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReviveTimesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartReviveTimesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSingleReviveDelay(FlatBufferBuilder builder, int singleReviveDelay) { builder.AddInt(12, singleReviveDelay, 0); }
  public static void AddMultiReviveDelay(FlatBufferBuilder builder, int multiReviveDelay) { builder.AddInt(13, multiReviveDelay, 0); }
  public static void AddUnlockLittleRole(FlatBufferBuilder builder, VectorOffset unlockLittleRoleOffset) { builder.AddOffset(14, unlockLittleRoleOffset.Value, 0); }
  public static VectorOffset CreateUnlockLittleRoleVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateUnlockLittleRoleVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUnlockLittleRoleVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUnlockLittleRoleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUnlockLittleRoleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRankOpen(FlatBufferBuilder builder, bool rankOpen) { builder.AddBool(15, rankOpen, false); }
  public static void AddTotalTime(FlatBufferBuilder builder, int totalTime) { builder.AddInt(16, totalTime, 0); }
  public static void AddBtPropName(FlatBufferBuilder builder, VectorOffset btPropNameOffset) { builder.AddOffset(17, btPropNameOffset.Value, 0); }
  public static VectorOffset CreateBtPropNameVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBtPropNameVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBtPropNameVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBtPropNameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBtPropNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTotalScore(FlatBufferBuilder builder, int totalScore) { builder.AddInt(18, totalScore, 0); }
  public static void AddMonsterTypeScore(FlatBufferBuilder builder, VectorOffset monsterTypeScoreOffset) { builder.AddOffset(19, monsterTypeScoreOffset.Value, 0); }
  public static VectorOffset CreateMonsterTypeScoreVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMonsterTypeScoreVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMonsterTypeScoreVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMonsterTypeScoreVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMonsterTypeScoreVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardTime(FlatBufferBuilder builder, VectorOffset rewardTimeOffset) { builder.AddOffset(20, rewardTimeOffset.Value, 0); }
  public static VectorOffset CreateRewardTimeVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRewardTimeVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardTimeVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardTimeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardTimeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDropPreviewId(FlatBufferBuilder builder, int dropPreviewId) { builder.AddInt(21, dropPreviewId, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(22, titleOffset.Value, 0); }
  public static void AddSubTitle(FlatBufferBuilder builder, StringOffset subTitleOffset) { builder.AddOffset(23, subTitleOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(24, descOffset.Value, 0); }
  public static void AddGoat(FlatBufferBuilder builder, StringOffset goatOffset) { builder.AddOffset(25, goatOffset.Value, 0); }
  public static void AddUnLockDesc(FlatBufferBuilder builder, StringOffset unLockDescOffset) { builder.AddOffset(26, unLockDescOffset.Value, 0); }
  public static void AddAbyssColor(FlatBufferBuilder builder, StringOffset abyssColorOffset) { builder.AddOffset(27, abyssColorOffset.Value, 0); }
  public static void AddSmallWorldShowSceneItem(FlatBufferBuilder builder, StringOffset smallWorldShowSceneItemOffset) { builder.AddOffset(28, smallWorldShowSceneItemOffset.Value, 0); }
  public static void AddAbyssShowCake(FlatBufferBuilder builder, StringOffset abyssShowCakeOffset) { builder.AddOffset(29, abyssShowCakeOffset.Value, 0); }
  public static void AddRecommendLittleRole(FlatBufferBuilder builder, VectorOffset recommendLittleRoleOffset) { builder.AddOffset(30, recommendLittleRoleOffset.Value, 0); }
  public static VectorOffset CreateRecommendLittleRoleVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRecommendLittleRoleVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecommendLittleRoleVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecommendLittleRoleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRecommendLittleRoleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAbyssDevelopEntr(FlatBufferBuilder builder, bool abyssDevelopEntr) { builder.AddBool(31, abyssDevelopEntr, false); }
  public static void AddAbyssStoreEntr(FlatBufferBuilder builder, bool abyssStoreEntr) { builder.AddBool(32, abyssStoreEntr, false); }
  public static void AddAbyssSynthesisEntr(FlatBufferBuilder builder, bool abyssSynthesisEntr) { builder.AddBool(33, abyssSynthesisEntr, false); }
  public static void AddAbyssRank(FlatBufferBuilder builder, bool abyssRank) { builder.AddBool(34, abyssRank, false); }
  public static void AddIfStoryChallenge(FlatBufferBuilder builder, bool ifStoryChallenge) { builder.AddBool(35, ifStoryChallenge, false); }
  public static Offset<WWParser.Defs.AbyssInst> EndAbyssInst(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AbyssInst>(o);
  }
  public AbyssInstT UnPack() {
    var _o = new AbyssInstT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AbyssInstT _o) {
    _o.Id = this.Id;
    _o.InstId = this.InstId;
    _o.ActivityId = this.ActivityId;
    _o.InstEntranceId = this.InstEntranceId;
    _o.RouteId = this.RouteId;
    _o.Difficulty = this.Difficulty;
    _o.OpenDay = this.OpenDay;
    _o.IsEndless = this.IsEndless;
    _o.ConditionId = this.ConditionId;
    _o.ConsumeItem = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.ConsumeItemLength; ++_j) {_o.ConsumeItem.Add(this.ConsumeItem(_j).HasValue ? this.ConsumeItem(_j).Value.UnPack() : null);}
    _o.BuffIds = new List<double>();
    for (var _j = 0; _j < this.BuffIdsLength; ++_j) {_o.BuffIds.Add(this.BuffIds(_j));}
    _o.ReviveTimes = new List<int>();
    for (var _j = 0; _j < this.ReviveTimesLength; ++_j) {_o.ReviveTimes.Add(this.ReviveTimes(_j));}
    _o.SingleReviveDelay = this.SingleReviveDelay;
    _o.MultiReviveDelay = this.MultiReviveDelay;
    _o.UnlockLittleRole = new List<int>();
    for (var _j = 0; _j < this.UnlockLittleRoleLength; ++_j) {_o.UnlockLittleRole.Add(this.UnlockLittleRole(_j));}
    _o.RankOpen = this.RankOpen;
    _o.TotalTime = this.TotalTime;
    _o.BtPropName = new List<WWParser.Defs.DicIntStringT>();
    for (var _j = 0; _j < this.BtPropNameLength; ++_j) {_o.BtPropName.Add(this.BtPropName(_j).HasValue ? this.BtPropName(_j).Value.UnPack() : null);}
    _o.TotalScore = this.TotalScore;
    _o.MonsterTypeScore = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.MonsterTypeScoreLength; ++_j) {_o.MonsterTypeScore.Add(this.MonsterTypeScore(_j).HasValue ? this.MonsterTypeScore(_j).Value.UnPack() : null);}
    _o.RewardTime = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.RewardTimeLength; ++_j) {_o.RewardTime.Add(this.RewardTime(_j).HasValue ? this.RewardTime(_j).Value.UnPack() : null);}
    _o.DropPreviewId = this.DropPreviewId;
    _o.Title = this.Title;
    _o.SubTitle = this.SubTitle;
    _o.Desc = this.Desc;
    _o.Goat = this.Goat;
    _o.UnLockDesc = this.UnLockDesc;
    _o.AbyssColor = this.AbyssColor;
    _o.SmallWorldShowSceneItem = this.SmallWorldShowSceneItem;
    _o.AbyssShowCake = this.AbyssShowCake;
    _o.RecommendLittleRole = new List<int>();
    for (var _j = 0; _j < this.RecommendLittleRoleLength; ++_j) {_o.RecommendLittleRole.Add(this.RecommendLittleRole(_j));}
    _o.AbyssDevelopEntr = this.AbyssDevelopEntr;
    _o.AbyssStoreEntr = this.AbyssStoreEntr;
    _o.AbyssSynthesisEntr = this.AbyssSynthesisEntr;
    _o.AbyssRank = this.AbyssRank;
    _o.IfStoryChallenge = this.IfStoryChallenge;
  }
  public static Offset<WWParser.Defs.AbyssInst> Pack(FlatBufferBuilder builder, AbyssInstT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AbyssInst>);
    var _consume_item = default(VectorOffset);
    if (_o.ConsumeItem != null) {
      var __consume_item = new Offset<WWParser.Defs.DicIntInt>[_o.ConsumeItem.Count];
      for (var _j = 0; _j < __consume_item.Length; ++_j) { __consume_item[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.ConsumeItem[_j]); }
      _consume_item = CreateConsumeItemVector(builder, __consume_item);
    }
    var _buff_ids = default(VectorOffset);
    if (_o.BuffIds != null) {
      var __buff_ids = _o.BuffIds.ToArray();
      _buff_ids = CreateBuffIdsVector(builder, __buff_ids);
    }
    var _revive_times = default(VectorOffset);
    if (_o.ReviveTimes != null) {
      var __revive_times = _o.ReviveTimes.ToArray();
      _revive_times = CreateReviveTimesVector(builder, __revive_times);
    }
    var _unlock_little_role = default(VectorOffset);
    if (_o.UnlockLittleRole != null) {
      var __unlock_little_role = _o.UnlockLittleRole.ToArray();
      _unlock_little_role = CreateUnlockLittleRoleVector(builder, __unlock_little_role);
    }
    var _bt_prop_name = default(VectorOffset);
    if (_o.BtPropName != null) {
      var __bt_prop_name = new Offset<WWParser.Defs.DicIntString>[_o.BtPropName.Count];
      for (var _j = 0; _j < __bt_prop_name.Length; ++_j) { __bt_prop_name[_j] = WWParser.Defs.DicIntString.Pack(builder, _o.BtPropName[_j]); }
      _bt_prop_name = CreateBtPropNameVector(builder, __bt_prop_name);
    }
    var _monster_type_score = default(VectorOffset);
    if (_o.MonsterTypeScore != null) {
      var __monster_type_score = new Offset<WWParser.Defs.DicIntInt>[_o.MonsterTypeScore.Count];
      for (var _j = 0; _j < __monster_type_score.Length; ++_j) { __monster_type_score[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.MonsterTypeScore[_j]); }
      _monster_type_score = CreateMonsterTypeScoreVector(builder, __monster_type_score);
    }
    var _reward_time = default(VectorOffset);
    if (_o.RewardTime != null) {
      var __reward_time = new Offset<WWParser.Defs.DicIntInt>[_o.RewardTime.Count];
      for (var _j = 0; _j < __reward_time.Length; ++_j) { __reward_time[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.RewardTime[_j]); }
      _reward_time = CreateRewardTimeVector(builder, __reward_time);
    }
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _sub_title = _o.SubTitle == null ? default(StringOffset) : builder.CreateString(_o.SubTitle);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    var _goat = _o.Goat == null ? default(StringOffset) : builder.CreateString(_o.Goat);
    var _un_lock_desc = _o.UnLockDesc == null ? default(StringOffset) : builder.CreateString(_o.UnLockDesc);
    var _abyss_color = _o.AbyssColor == null ? default(StringOffset) : builder.CreateString(_o.AbyssColor);
    var _small_world_show_scene_item = _o.SmallWorldShowSceneItem == null ? default(StringOffset) : builder.CreateString(_o.SmallWorldShowSceneItem);
    var _abyss_show_cake = _o.AbyssShowCake == null ? default(StringOffset) : builder.CreateString(_o.AbyssShowCake);
    var _recommend_little_role = default(VectorOffset);
    if (_o.RecommendLittleRole != null) {
      var __recommend_little_role = _o.RecommendLittleRole.ToArray();
      _recommend_little_role = CreateRecommendLittleRoleVector(builder, __recommend_little_role);
    }
    return CreateAbyssInst(
      builder,
      _o.Id,
      _o.InstId,
      _o.ActivityId,
      _o.InstEntranceId,
      _o.RouteId,
      _o.Difficulty,
      _o.OpenDay,
      _o.IsEndless,
      _o.ConditionId,
      _consume_item,
      _buff_ids,
      _revive_times,
      _o.SingleReviveDelay,
      _o.MultiReviveDelay,
      _unlock_little_role,
      _o.RankOpen,
      _o.TotalTime,
      _bt_prop_name,
      _o.TotalScore,
      _monster_type_score,
      _reward_time,
      _o.DropPreviewId,
      _title,
      _sub_title,
      _desc,
      _goat,
      _un_lock_desc,
      _abyss_color,
      _small_world_show_scene_item,
      _abyss_show_cake,
      _recommend_little_role,
      _o.AbyssDevelopEntr,
      _o.AbyssStoreEntr,
      _o.AbyssSynthesisEntr,
      _o.AbyssRank,
      _o.IfStoryChallenge);
  }
}

public class AbyssInstT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("inst_id")]
  public int InstId { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("inst_entrance_id")]
  public int InstEntranceId { get; set; }
  [Newtonsoft.Json.JsonProperty("route_id")]
  public int RouteId { get; set; }
  [Newtonsoft.Json.JsonProperty("difficulty")]
  public int Difficulty { get; set; }
  [Newtonsoft.Json.JsonProperty("open_day")]
  public int OpenDay { get; set; }
  [Newtonsoft.Json.JsonProperty("is_endless")]
  public bool IsEndless { get; set; }
  [Newtonsoft.Json.JsonProperty("condition_id")]
  public int ConditionId { get; set; }
  [Newtonsoft.Json.JsonProperty("consume_item")]
  public List<WWParser.Defs.DicIntIntT> ConsumeItem { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_ids")]
  public List<double> BuffIds { get; set; }
  [Newtonsoft.Json.JsonProperty("revive_times")]
  public List<int> ReviveTimes { get; set; }
  [Newtonsoft.Json.JsonProperty("single_revive_delay")]
  public int SingleReviveDelay { get; set; }
  [Newtonsoft.Json.JsonProperty("multi_revive_delay")]
  public int MultiReviveDelay { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_little_role")]
  public List<int> UnlockLittleRole { get; set; }
  [Newtonsoft.Json.JsonProperty("rank_open")]
  public bool RankOpen { get; set; }
  [Newtonsoft.Json.JsonProperty("total_time")]
  public int TotalTime { get; set; }
  [Newtonsoft.Json.JsonProperty("bt_prop_name")]
  public List<WWParser.Defs.DicIntStringT> BtPropName { get; set; }
  [Newtonsoft.Json.JsonProperty("total_score")]
  public int TotalScore { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_type_score")]
  public List<WWParser.Defs.DicIntIntT> MonsterTypeScore { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_time")]
  public List<WWParser.Defs.DicIntIntT> RewardTime { get; set; }
  [Newtonsoft.Json.JsonProperty("drop_preview_id")]
  public int DropPreviewId { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("sub_title")]
  public string SubTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }
  [Newtonsoft.Json.JsonProperty("goat")]
  public string Goat { get; set; }
  [Newtonsoft.Json.JsonProperty("un_lock_desc")]
  public string UnLockDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("abyss_color")]
  public string AbyssColor { get; set; }
  [Newtonsoft.Json.JsonProperty("small_world_show_scene_item")]
  public string SmallWorldShowSceneItem { get; set; }
  [Newtonsoft.Json.JsonProperty("abyss_show_cake")]
  public string AbyssShowCake { get; set; }
  [Newtonsoft.Json.JsonProperty("recommend_little_role")]
  public List<int> RecommendLittleRole { get; set; }
  [Newtonsoft.Json.JsonProperty("abyss_develop_entr")]
  public bool AbyssDevelopEntr { get; set; }
  [Newtonsoft.Json.JsonProperty("abyss_store_entr")]
  public bool AbyssStoreEntr { get; set; }
  [Newtonsoft.Json.JsonProperty("abyss_synthesis_entr")]
  public bool AbyssSynthesisEntr { get; set; }
  [Newtonsoft.Json.JsonProperty("abyss_rank")]
  public bool AbyssRank { get; set; }
  [Newtonsoft.Json.JsonProperty("if_story_challenge")]
  public bool IfStoryChallenge { get; set; }

  public AbyssInstT() {
    this.Id = 0;
    this.InstId = 0;
    this.ActivityId = 0;
    this.InstEntranceId = 0;
    this.RouteId = 0;
    this.Difficulty = 0;
    this.OpenDay = 0;
    this.IsEndless = false;
    this.ConditionId = 0;
    this.ConsumeItem = null;
    this.BuffIds = null;
    this.ReviveTimes = null;
    this.SingleReviveDelay = 0;
    this.MultiReviveDelay = 0;
    this.UnlockLittleRole = null;
    this.RankOpen = false;
    this.TotalTime = 0;
    this.BtPropName = null;
    this.TotalScore = 0;
    this.MonsterTypeScore = null;
    this.RewardTime = null;
    this.DropPreviewId = 0;
    this.Title = null;
    this.SubTitle = null;
    this.Desc = null;
    this.Goat = null;
    this.UnLockDesc = null;
    this.AbyssColor = null;
    this.SmallWorldShowSceneItem = null;
    this.AbyssShowCake = null;
    this.RecommendLittleRole = null;
    this.AbyssDevelopEntr = false;
    this.AbyssStoreEntr = false;
    this.AbyssSynthesisEntr = false;
    this.AbyssRank = false;
    this.IfStoryChallenge = false;
  }
}


static public class AbyssInstVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*InstId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*InstEntranceId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*RouteId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*Difficulty*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*OpenDay*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*IsEndless*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 20 /*ConditionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 22 /*ConsumeItem*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 24 /*BuffIds*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*ReviveTimes*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 28 /*SingleReviveDelay*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*MultiReviveDelay*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 32 /*UnlockLittleRole*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 34 /*RankOpen*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 36 /*TotalTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 38 /*BtPropName*/, WWParser.Defs.DicIntStringVerify.Verify, false)
      && verifier.VerifyField(tablePos, 40 /*TotalScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 42 /*MonsterTypeScore*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 44 /*RewardTime*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 46 /*DropPreviewId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 48 /*Title*/, false)
      && verifier.VerifyString(tablePos, 50 /*SubTitle*/, false)
      && verifier.VerifyString(tablePos, 52 /*Desc*/, false)
      && verifier.VerifyString(tablePos, 54 /*Goat*/, false)
      && verifier.VerifyString(tablePos, 56 /*UnLockDesc*/, false)
      && verifier.VerifyString(tablePos, 58 /*AbyssColor*/, false)
      && verifier.VerifyString(tablePos, 60 /*SmallWorldShowSceneItem*/, false)
      && verifier.VerifyString(tablePos, 62 /*AbyssShowCake*/, false)
      && verifier.VerifyVectorOfData(tablePos, 64 /*RecommendLittleRole*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 66 /*AbyssDevelopEntr*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 68 /*AbyssStoreEntr*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 70 /*AbyssSynthesisEntr*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 72 /*AbyssRank*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 74 /*IfStoryChallenge*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
