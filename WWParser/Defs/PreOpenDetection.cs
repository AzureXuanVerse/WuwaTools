// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PreOpenDetection : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PreOpenDetection GetRootAsPreOpenDetection(ByteBuffer _bb) { return GetRootAsPreOpenDetection(_bb, new PreOpenDetection()); }
  public static PreOpenDetection GetRootAsPreOpenDetection(ByteBuffer _bb, PreOpenDetection obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PreOpenDetection __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SoundAreaType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DetectionId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConditionGroup { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TeleportEntityId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DungeonEntranceId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstanceId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Spoiler { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.PreOpenDetection> CreatePreOpenDetection(FlatBufferBuilder builder,
      int id = 0,
      int sound_area_type = 0,
      int detection_id = 0,
      int condition_group = 0,
      int teleport_entity_id = 0,
      int dungeon_entrance_id = 0,
      int instance_id = 0,
      bool spoiler = false) {
    builder.StartTable(8);
    PreOpenDetection.AddInstanceId(builder, instance_id);
    PreOpenDetection.AddDungeonEntranceId(builder, dungeon_entrance_id);
    PreOpenDetection.AddTeleportEntityId(builder, teleport_entity_id);
    PreOpenDetection.AddConditionGroup(builder, condition_group);
    PreOpenDetection.AddDetectionId(builder, detection_id);
    PreOpenDetection.AddSoundAreaType(builder, sound_area_type);
    PreOpenDetection.AddId(builder, id);
    PreOpenDetection.AddSpoiler(builder, spoiler);
    return PreOpenDetection.EndPreOpenDetection(builder);
  }

  public static void StartPreOpenDetection(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddSoundAreaType(FlatBufferBuilder builder, int soundAreaType) { builder.AddInt(1, soundAreaType, 0); }
  public static void AddDetectionId(FlatBufferBuilder builder, int detectionId) { builder.AddInt(2, detectionId, 0); }
  public static void AddConditionGroup(FlatBufferBuilder builder, int conditionGroup) { builder.AddInt(3, conditionGroup, 0); }
  public static void AddTeleportEntityId(FlatBufferBuilder builder, int teleportEntityId) { builder.AddInt(4, teleportEntityId, 0); }
  public static void AddDungeonEntranceId(FlatBufferBuilder builder, int dungeonEntranceId) { builder.AddInt(5, dungeonEntranceId, 0); }
  public static void AddInstanceId(FlatBufferBuilder builder, int instanceId) { builder.AddInt(6, instanceId, 0); }
  public static void AddSpoiler(FlatBufferBuilder builder, bool spoiler) { builder.AddBool(7, spoiler, false); }
  public static Offset<WWParser.Defs.PreOpenDetection> EndPreOpenDetection(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PreOpenDetection>(o);
  }
  public PreOpenDetectionT UnPack() {
    var _o = new PreOpenDetectionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PreOpenDetectionT _o) {
    _o.Id = this.Id;
    _o.SoundAreaType = this.SoundAreaType;
    _o.DetectionId = this.DetectionId;
    _o.ConditionGroup = this.ConditionGroup;
    _o.TeleportEntityId = this.TeleportEntityId;
    _o.DungeonEntranceId = this.DungeonEntranceId;
    _o.InstanceId = this.InstanceId;
    _o.Spoiler = this.Spoiler;
  }
  public static Offset<WWParser.Defs.PreOpenDetection> Pack(FlatBufferBuilder builder, PreOpenDetectionT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PreOpenDetection>);
    return CreatePreOpenDetection(
      builder,
      _o.Id,
      _o.SoundAreaType,
      _o.DetectionId,
      _o.ConditionGroup,
      _o.TeleportEntityId,
      _o.DungeonEntranceId,
      _o.InstanceId,
      _o.Spoiler);
  }
}

public class PreOpenDetectionT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("sound_area_type")]
  public int SoundAreaType { get; set; }
  [Newtonsoft.Json.JsonProperty("detection_id")]
  public int DetectionId { get; set; }
  [Newtonsoft.Json.JsonProperty("condition_group")]
  public int ConditionGroup { get; set; }
  [Newtonsoft.Json.JsonProperty("teleport_entity_id")]
  public int TeleportEntityId { get; set; }
  [Newtonsoft.Json.JsonProperty("dungeon_entrance_id")]
  public int DungeonEntranceId { get; set; }
  [Newtonsoft.Json.JsonProperty("instance_id")]
  public int InstanceId { get; set; }
  [Newtonsoft.Json.JsonProperty("spoiler")]
  public bool Spoiler { get; set; }

  public PreOpenDetectionT() {
    this.Id = 0;
    this.SoundAreaType = 0;
    this.DetectionId = 0;
    this.ConditionGroup = 0;
    this.TeleportEntityId = 0;
    this.DungeonEntranceId = 0;
    this.InstanceId = 0;
    this.Spoiler = false;
  }
}


static public class PreOpenDetectionVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SoundAreaType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*DetectionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ConditionGroup*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*TeleportEntityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*DungeonEntranceId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*InstanceId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Spoiler*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
