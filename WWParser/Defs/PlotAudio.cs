// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PlotAudio : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PlotAudio GetRootAsPlotAudio(ByteBuffer _bb) { return GetRootAsPlotAudio(_bb, new PlotAudio()); }
  public static PlotAudio GetRootAsPlotAudio(ByteBuffer _bb, PlotAudio obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlotAudio __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string ExternalSourceSetting { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalSourceSettingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetExternalSourceSettingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetExternalSourceSettingArray() { return __p.__vector_as_array<byte>(6); }
  public string FileName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFileNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetFileNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetFileNameArray() { return __p.__vector_as_array<byte>(8); }
  public bool GlobalLanguage { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool CheckGenderEn { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool CheckGenderJa { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool CheckGenderKo { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool CheckGenderZh { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int TailTime { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }

  public static Offset<WWParser.Defs.PlotAudio> CreatePlotAudio(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset external_source_settingOffset = default(StringOffset),
      StringOffset file_nameOffset = default(StringOffset),
      bool global_language = false,
      bool check_gender_en = false,
      bool check_gender_ja = false,
      bool check_gender_ko = false,
      bool check_gender_zh = false,
      int tail_time = -1) {
    builder.StartTable(9);
    PlotAudio.AddTailTime(builder, tail_time);
    PlotAudio.AddFileName(builder, file_nameOffset);
    PlotAudio.AddExternalSourceSetting(builder, external_source_settingOffset);
    PlotAudio.AddId(builder, idOffset);
    PlotAudio.AddCheckGenderZh(builder, check_gender_zh);
    PlotAudio.AddCheckGenderKo(builder, check_gender_ko);
    PlotAudio.AddCheckGenderJa(builder, check_gender_ja);
    PlotAudio.AddCheckGenderEn(builder, check_gender_en);
    PlotAudio.AddGlobalLanguage(builder, global_language);
    return PlotAudio.EndPlotAudio(builder);
  }

  public static void StartPlotAudio(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddExternalSourceSetting(FlatBufferBuilder builder, StringOffset externalSourceSettingOffset) { builder.AddOffset(1, externalSourceSettingOffset.Value, 0); }
  public static void AddFileName(FlatBufferBuilder builder, StringOffset fileNameOffset) { builder.AddOffset(2, fileNameOffset.Value, 0); }
  public static void AddGlobalLanguage(FlatBufferBuilder builder, bool globalLanguage) { builder.AddBool(3, globalLanguage, false); }
  public static void AddCheckGenderEn(FlatBufferBuilder builder, bool checkGenderEn) { builder.AddBool(4, checkGenderEn, false); }
  public static void AddCheckGenderJa(FlatBufferBuilder builder, bool checkGenderJa) { builder.AddBool(5, checkGenderJa, false); }
  public static void AddCheckGenderKo(FlatBufferBuilder builder, bool checkGenderKo) { builder.AddBool(6, checkGenderKo, false); }
  public static void AddCheckGenderZh(FlatBufferBuilder builder, bool checkGenderZh) { builder.AddBool(7, checkGenderZh, false); }
  public static void AddTailTime(FlatBufferBuilder builder, int tailTime) { builder.AddInt(8, tailTime, -1); }
  public static Offset<WWParser.Defs.PlotAudio> EndPlotAudio(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PlotAudio>(o);
  }
  public PlotAudioT UnPack() {
    var _o = new PlotAudioT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlotAudioT _o) {
    _o.Id = this.Id;
    _o.ExternalSourceSetting = this.ExternalSourceSetting;
    _o.FileName = this.FileName;
    _o.GlobalLanguage = this.GlobalLanguage;
    _o.CheckGenderEn = this.CheckGenderEn;
    _o.CheckGenderJa = this.CheckGenderJa;
    _o.CheckGenderKo = this.CheckGenderKo;
    _o.CheckGenderZh = this.CheckGenderZh;
    _o.TailTime = this.TailTime;
  }
  public static Offset<WWParser.Defs.PlotAudio> Pack(FlatBufferBuilder builder, PlotAudioT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PlotAudio>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _external_source_setting = _o.ExternalSourceSetting == null ? default(StringOffset) : builder.CreateString(_o.ExternalSourceSetting);
    var _file_name = _o.FileName == null ? default(StringOffset) : builder.CreateString(_o.FileName);
    return CreatePlotAudio(
      builder,
      _id,
      _external_source_setting,
      _file_name,
      _o.GlobalLanguage,
      _o.CheckGenderEn,
      _o.CheckGenderJa,
      _o.CheckGenderKo,
      _o.CheckGenderZh,
      _o.TailTime);
  }
}

public class PlotAudioT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("external_source_setting")]
  public string ExternalSourceSetting { get; set; }
  [Newtonsoft.Json.JsonProperty("file_name")]
  public string FileName { get; set; }
  [Newtonsoft.Json.JsonProperty("global_language")]
  public bool GlobalLanguage { get; set; }
  [Newtonsoft.Json.JsonProperty("check_gender_en")]
  public bool CheckGenderEn { get; set; }
  [Newtonsoft.Json.JsonProperty("check_gender_ja")]
  public bool CheckGenderJa { get; set; }
  [Newtonsoft.Json.JsonProperty("check_gender_ko")]
  public bool CheckGenderKo { get; set; }
  [Newtonsoft.Json.JsonProperty("check_gender_zh")]
  public bool CheckGenderZh { get; set; }
  [Newtonsoft.Json.JsonProperty("tail_time")]
  public int TailTime { get; set; }

  public PlotAudioT() {
    this.Id = null;
    this.ExternalSourceSetting = null;
    this.FileName = null;
    this.GlobalLanguage = false;
    this.CheckGenderEn = false;
    this.CheckGenderJa = false;
    this.CheckGenderKo = false;
    this.CheckGenderZh = false;
    this.TailTime = -1;
  }
}


static public class PlotAudioVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ExternalSourceSetting*/, false)
      && verifier.VerifyString(tablePos, 8 /*FileName*/, false)
      && verifier.VerifyField(tablePos, 10 /*GlobalLanguage*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*CheckGenderEn*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*CheckGenderJa*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*CheckGenderKo*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*CheckGenderZh*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 20 /*TailTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
