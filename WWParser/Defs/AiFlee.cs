// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiFlee : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AiFlee GetRootAsAiFlee(ByteBuffer _bb) { return GetRootAsAiFlee(_bb, new AiFlee()); }
  public static AiFlee GetRootAsAiFlee(ByteBuffer _bb, AiFlee obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiFlee __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.FloatRange? FleeDistance { get { int o = __p.__offset(6); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.FloatRange? FleeAngle { get { int o = __p.__offset(8); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float FleeHeight { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float TimeMilliseconds { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1000.0f; } }

  public static Offset<WWParser.Defs.AiFlee> CreateAiFlee(FlatBufferBuilder builder,
      int id = 0,
      Offset<WWParser.Defs.FloatRange> flee_distanceOffset = default(Offset<WWParser.Defs.FloatRange>),
      Offset<WWParser.Defs.FloatRange> flee_angleOffset = default(Offset<WWParser.Defs.FloatRange>),
      float flee_height = 0.0f,
      float time_milliseconds = 1000.0f) {
    builder.StartTable(5);
    AiFlee.AddTimeMilliseconds(builder, time_milliseconds);
    AiFlee.AddFleeHeight(builder, flee_height);
    AiFlee.AddFleeAngle(builder, flee_angleOffset);
    AiFlee.AddFleeDistance(builder, flee_distanceOffset);
    AiFlee.AddId(builder, id);
    return AiFlee.EndAiFlee(builder);
  }

  public static void StartAiFlee(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddFleeDistance(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> fleeDistanceOffset) { builder.AddOffset(1, fleeDistanceOffset.Value, 0); }
  public static void AddFleeAngle(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> fleeAngleOffset) { builder.AddOffset(2, fleeAngleOffset.Value, 0); }
  public static void AddFleeHeight(FlatBufferBuilder builder, float fleeHeight) { builder.AddFloat(3, fleeHeight, 0.0f); }
  public static void AddTimeMilliseconds(FlatBufferBuilder builder, float timeMilliseconds) { builder.AddFloat(4, timeMilliseconds, 1000.0f); }
  public static Offset<WWParser.Defs.AiFlee> EndAiFlee(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AiFlee>(o);
  }
  public AiFleeT UnPack() {
    var _o = new AiFleeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AiFleeT _o) {
    _o.Id = this.Id;
    _o.FleeDistance = this.FleeDistance.HasValue ? this.FleeDistance.Value.UnPack() : null;
    _o.FleeAngle = this.FleeAngle.HasValue ? this.FleeAngle.Value.UnPack() : null;
    _o.FleeHeight = this.FleeHeight;
    _o.TimeMilliseconds = this.TimeMilliseconds;
  }
  public static Offset<WWParser.Defs.AiFlee> Pack(FlatBufferBuilder builder, AiFleeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AiFlee>);
    var _flee_distance = _o.FleeDistance == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.FleeDistance);
    var _flee_angle = _o.FleeAngle == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.FleeAngle);
    return CreateAiFlee(
      builder,
      _o.Id,
      _flee_distance,
      _flee_angle,
      _o.FleeHeight,
      _o.TimeMilliseconds);
  }
}

public class AiFleeT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("flee_distance")]
  public WWParser.Defs.FloatRangeT FleeDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("flee_angle")]
  public WWParser.Defs.FloatRangeT FleeAngle { get; set; }
  [Newtonsoft.Json.JsonProperty("flee_height")]
  public float FleeHeight { get; set; }
  [Newtonsoft.Json.JsonProperty("time_milliseconds")]
  public float TimeMilliseconds { get; set; }

  public AiFleeT() {
    this.Id = 0;
    this.FleeDistance = null;
    this.FleeAngle = null;
    this.FleeHeight = 0.0f;
    this.TimeMilliseconds = 1000.0f;
  }
}


static public class AiFleeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 6 /*FleeDistance*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 8 /*FleeAngle*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyField(tablePos, 10 /*FleeHeight*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*TimeMilliseconds*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
