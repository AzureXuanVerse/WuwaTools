// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MapRange : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MapRange GetRootAsMapRange(ByteBuffer _bb) { return GetRootAsMapRange(_bb, new MapRange()); }
  public static MapRange GetRootAsMapRange(ByteBuffer _bb, MapRange obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MapRange __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)8; } }
  public string MapName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMapNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMapNameArray() { return __p.__vector_as_array<byte>(8); }
  public int AreaRange(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AreaRangeLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAreaRangeBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetAreaRangeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetAreaRangeArray() { return __p.__vector_as_array<int>(10); }

  public static Offset<WWParser.Defs.MapRange> CreateMapRange(FlatBufferBuilder builder,
      int id = 0,
      int map_id = 8,
      StringOffset map_nameOffset = default(StringOffset),
      VectorOffset area_rangeOffset = default(VectorOffset)) {
    builder.StartTable(4);
    MapRange.AddAreaRange(builder, area_rangeOffset);
    MapRange.AddMapName(builder, map_nameOffset);
    MapRange.AddMapId(builder, map_id);
    MapRange.AddId(builder, id);
    return MapRange.EndMapRange(builder);
  }

  public static void StartMapRange(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMapId(FlatBufferBuilder builder, int mapId) { builder.AddInt(1, mapId, 8); }
  public static void AddMapName(FlatBufferBuilder builder, StringOffset mapNameOffset) { builder.AddOffset(2, mapNameOffset.Value, 0); }
  public static void AddAreaRange(FlatBufferBuilder builder, VectorOffset areaRangeOffset) { builder.AddOffset(3, areaRangeOffset.Value, 0); }
  public static VectorOffset CreateAreaRangeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAreaRangeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAreaRangeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAreaRangeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAreaRangeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.MapRange> EndMapRange(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MapRange>(o);
  }
  public MapRangeT UnPack() {
    var _o = new MapRangeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MapRangeT _o) {
    _o.Id = this.Id;
    _o.MapId = this.MapId;
    _o.MapName = this.MapName;
    _o.AreaRange = new List<int>();
    for (var _j = 0; _j < this.AreaRangeLength; ++_j) {_o.AreaRange.Add(this.AreaRange(_j));}
  }
  public static Offset<WWParser.Defs.MapRange> Pack(FlatBufferBuilder builder, MapRangeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MapRange>);
    var _map_name = _o.MapName == null ? default(StringOffset) : builder.CreateString(_o.MapName);
    var _area_range = default(VectorOffset);
    if (_o.AreaRange != null) {
      var __area_range = _o.AreaRange.ToArray();
      _area_range = CreateAreaRangeVector(builder, __area_range);
    }
    return CreateMapRange(
      builder,
      _o.Id,
      _o.MapId,
      _map_name,
      _area_range);
  }
}

public class MapRangeT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("map_id")]
  public int MapId { get; set; }
  [Newtonsoft.Json.JsonProperty("map_name")]
  public string MapName { get; set; }
  [Newtonsoft.Json.JsonProperty("area_range")]
  public List<int> AreaRange { get; set; }

  public MapRangeT() {
    this.Id = 0;
    this.MapId = 8;
    this.MapName = null;
    this.AreaRange = null;
  }
}


static public class MapRangeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MapId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*MapName*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*AreaRange*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
