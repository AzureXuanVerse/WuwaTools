// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FaceExpressionData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FaceExpressionData GetRootAsFaceExpressionData(ByteBuffer _bb) { return GetRootAsFaceExpressionData(_bb, new FaceExpressionData()); }
  public static FaceExpressionData GetRootAsFaceExpressionData(ByteBuffer _bb, FaceExpressionData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FaceExpressionData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string FaceExpression { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFaceExpressionBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFaceExpressionBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFaceExpressionArray() { return __p.__vector_as_array<byte>(6); }
  public string MaleVariant { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMaleVariantBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMaleVariantBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMaleVariantArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<WWParser.Defs.FaceExpressionData> CreateFaceExpressionData(FlatBufferBuilder builder,
      int id = 0,
      StringOffset face_expressionOffset = default(StringOffset),
      StringOffset male_variantOffset = default(StringOffset)) {
    builder.StartTable(3);
    FaceExpressionData.AddMaleVariant(builder, male_variantOffset);
    FaceExpressionData.AddFaceExpression(builder, face_expressionOffset);
    FaceExpressionData.AddId(builder, id);
    return FaceExpressionData.EndFaceExpressionData(builder);
  }

  public static void StartFaceExpressionData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddFaceExpression(FlatBufferBuilder builder, StringOffset faceExpressionOffset) { builder.AddOffset(1, faceExpressionOffset.Value, 0); }
  public static void AddMaleVariant(FlatBufferBuilder builder, StringOffset maleVariantOffset) { builder.AddOffset(2, maleVariantOffset.Value, 0); }
  public static Offset<WWParser.Defs.FaceExpressionData> EndFaceExpressionData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FaceExpressionData>(o);
  }
  public FaceExpressionDataT UnPack() {
    var _o = new FaceExpressionDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FaceExpressionDataT _o) {
    _o.Id = this.Id;
    _o.FaceExpression = this.FaceExpression;
    _o.MaleVariant = this.MaleVariant;
  }
  public static Offset<WWParser.Defs.FaceExpressionData> Pack(FlatBufferBuilder builder, FaceExpressionDataT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FaceExpressionData>);
    var _face_expression = _o.FaceExpression == null ? default(StringOffset) : builder.CreateString(_o.FaceExpression);
    var _male_variant = _o.MaleVariant == null ? default(StringOffset) : builder.CreateString(_o.MaleVariant);
    return CreateFaceExpressionData(
      builder,
      _o.Id,
      _face_expression,
      _male_variant);
  }
}

public class FaceExpressionDataT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("face_expression")]
  public string FaceExpression { get; set; }
  [Newtonsoft.Json.JsonProperty("male_variant")]
  public string MaleVariant { get; set; }

  public FaceExpressionDataT() {
    this.Id = 0;
    this.FaceExpression = null;
    this.MaleVariant = null;
  }
}


static public class FaceExpressionDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*FaceExpression*/, false)
      && verifier.VerifyString(tablePos, 8 /*MaleVariant*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
