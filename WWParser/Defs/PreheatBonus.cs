// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PreheatBonus : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PreheatBonus GetRootAsPreheatBonus(ByteBuffer _bb) { return GetRootAsPreheatBonus(_bb, new PreheatBonus()); }
  public static PreheatBonus GetRootAsPreheatBonus(ByteBuffer _bb, PreheatBonus obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PreheatBonus __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(6); }
  public string Content { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetContentBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetContentArray() { return __p.__vector_as_array<byte>(8); }
  public int CrestIndex { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MainTex { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMainTexBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMainTexBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMainTexArray() { return __p.__vector_as_array<byte>(12); }
  public string Photo { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPhotoBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetPhotoBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetPhotoArray() { return __p.__vector_as_array<byte>(14); }
  public string SharePhoto { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSharePhotoBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetSharePhotoBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetSharePhotoArray() { return __p.__vector_as_array<byte>(16); }
  public string NpcIconPath { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNpcIconPathBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetNpcIconPathBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetNpcIconPathArray() { return __p.__vector_as_array<byte>(18); }
  public string NpcContent { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNpcContentBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetNpcContentBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetNpcContentArray() { return __p.__vector_as_array<byte>(20); }
  public string BonusTxt { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBonusTxtBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetBonusTxtBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetBonusTxtArray() { return __p.__vector_as_array<byte>(22); }

  public static Offset<WWParser.Defs.PreheatBonus> CreatePreheatBonus(FlatBufferBuilder builder,
      int id = 0,
      StringOffset titleOffset = default(StringOffset),
      StringOffset contentOffset = default(StringOffset),
      int crest_index = 0,
      StringOffset main_texOffset = default(StringOffset),
      StringOffset photoOffset = default(StringOffset),
      StringOffset share_photoOffset = default(StringOffset),
      StringOffset npc_icon_pathOffset = default(StringOffset),
      StringOffset npc_contentOffset = default(StringOffset),
      StringOffset bonus_txtOffset = default(StringOffset)) {
    builder.StartTable(10);
    PreheatBonus.AddBonusTxt(builder, bonus_txtOffset);
    PreheatBonus.AddNpcContent(builder, npc_contentOffset);
    PreheatBonus.AddNpcIconPath(builder, npc_icon_pathOffset);
    PreheatBonus.AddSharePhoto(builder, share_photoOffset);
    PreheatBonus.AddPhoto(builder, photoOffset);
    PreheatBonus.AddMainTex(builder, main_texOffset);
    PreheatBonus.AddCrestIndex(builder, crest_index);
    PreheatBonus.AddContent(builder, contentOffset);
    PreheatBonus.AddTitle(builder, titleOffset);
    PreheatBonus.AddId(builder, id);
    return PreheatBonus.EndPreheatBonus(builder);
  }

  public static void StartPreheatBonus(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(1, titleOffset.Value, 0); }
  public static void AddContent(FlatBufferBuilder builder, StringOffset contentOffset) { builder.AddOffset(2, contentOffset.Value, 0); }
  public static void AddCrestIndex(FlatBufferBuilder builder, int crestIndex) { builder.AddInt(3, crestIndex, 0); }
  public static void AddMainTex(FlatBufferBuilder builder, StringOffset mainTexOffset) { builder.AddOffset(4, mainTexOffset.Value, 0); }
  public static void AddPhoto(FlatBufferBuilder builder, StringOffset photoOffset) { builder.AddOffset(5, photoOffset.Value, 0); }
  public static void AddSharePhoto(FlatBufferBuilder builder, StringOffset sharePhotoOffset) { builder.AddOffset(6, sharePhotoOffset.Value, 0); }
  public static void AddNpcIconPath(FlatBufferBuilder builder, StringOffset npcIconPathOffset) { builder.AddOffset(7, npcIconPathOffset.Value, 0); }
  public static void AddNpcContent(FlatBufferBuilder builder, StringOffset npcContentOffset) { builder.AddOffset(8, npcContentOffset.Value, 0); }
  public static void AddBonusTxt(FlatBufferBuilder builder, StringOffset bonusTxtOffset) { builder.AddOffset(9, bonusTxtOffset.Value, 0); }
  public static Offset<WWParser.Defs.PreheatBonus> EndPreheatBonus(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PreheatBonus>(o);
  }
  public PreheatBonusT UnPack() {
    var _o = new PreheatBonusT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PreheatBonusT _o) {
    _o.Id = this.Id;
    _o.Title = this.Title;
    _o.Content = this.Content;
    _o.CrestIndex = this.CrestIndex;
    _o.MainTex = this.MainTex;
    _o.Photo = this.Photo;
    _o.SharePhoto = this.SharePhoto;
    _o.NpcIconPath = this.NpcIconPath;
    _o.NpcContent = this.NpcContent;
    _o.BonusTxt = this.BonusTxt;
  }
  public static Offset<WWParser.Defs.PreheatBonus> Pack(FlatBufferBuilder builder, PreheatBonusT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PreheatBonus>);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _content = _o.Content == null ? default(StringOffset) : builder.CreateString(_o.Content);
    var _main_tex = _o.MainTex == null ? default(StringOffset) : builder.CreateString(_o.MainTex);
    var _photo = _o.Photo == null ? default(StringOffset) : builder.CreateString(_o.Photo);
    var _share_photo = _o.SharePhoto == null ? default(StringOffset) : builder.CreateString(_o.SharePhoto);
    var _npc_icon_path = _o.NpcIconPath == null ? default(StringOffset) : builder.CreateString(_o.NpcIconPath);
    var _npc_content = _o.NpcContent == null ? default(StringOffset) : builder.CreateString(_o.NpcContent);
    var _bonus_txt = _o.BonusTxt == null ? default(StringOffset) : builder.CreateString(_o.BonusTxt);
    return CreatePreheatBonus(
      builder,
      _o.Id,
      _title,
      _content,
      _o.CrestIndex,
      _main_tex,
      _photo,
      _share_photo,
      _npc_icon_path,
      _npc_content,
      _bonus_txt);
  }
}

public class PreheatBonusT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("content")]
  public string Content { get; set; }
  [Newtonsoft.Json.JsonProperty("crest_index")]
  public int CrestIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("main_tex")]
  public string MainTex { get; set; }
  [Newtonsoft.Json.JsonProperty("photo")]
  public string Photo { get; set; }
  [Newtonsoft.Json.JsonProperty("share_photo")]
  public string SharePhoto { get; set; }
  [Newtonsoft.Json.JsonProperty("npc_icon_path")]
  public string NpcIconPath { get; set; }
  [Newtonsoft.Json.JsonProperty("npc_content")]
  public string NpcContent { get; set; }
  [Newtonsoft.Json.JsonProperty("bonus_txt")]
  public string BonusTxt { get; set; }

  public PreheatBonusT() {
    this.Id = 0;
    this.Title = null;
    this.Content = null;
    this.CrestIndex = 0;
    this.MainTex = null;
    this.Photo = null;
    this.SharePhoto = null;
    this.NpcIconPath = null;
    this.NpcContent = null;
    this.BonusTxt = null;
  }
}


static public class PreheatBonusVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Title*/, false)
      && verifier.VerifyString(tablePos, 8 /*Content*/, false)
      && verifier.VerifyField(tablePos, 10 /*CrestIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*MainTex*/, false)
      && verifier.VerifyString(tablePos, 14 /*Photo*/, false)
      && verifier.VerifyString(tablePos, 16 /*SharePhoto*/, false)
      && verifier.VerifyString(tablePos, 18 /*NpcIconPath*/, false)
      && verifier.VerifyString(tablePos, 20 /*NpcContent*/, false)
      && verifier.VerifyString(tablePos, 22 /*BonusTxt*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
