// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ExchangeReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ExchangeReward GetRootAsExchangeReward(ByteBuffer _bb) { return GetRootAsExchangeReward(_bb, new ExchangeReward()); }
  public static ExchangeReward GetRootAsExchangeReward(ByteBuffer _bb, ExchangeReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ExchangeReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SharedId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? Cost(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CostLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntInt? RewardId(int j) { int o = __p.__offset(12); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RewardIdLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntIntIntMap? PreviewReward(int j) { int o = __p.__offset(14); return o != 0 ? (WWParser.Defs.DicIntIntIntMap?)(new WWParser.Defs.DicIntIntIntMap()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PreviewRewardLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.ExchangeReward> CreateExchangeReward(FlatBufferBuilder builder,
      int id = 0,
      int shared_id = 0,
      int max_count = 0,
      VectorOffset costOffset = default(VectorOffset),
      VectorOffset reward_idOffset = default(VectorOffset),
      VectorOffset preview_rewardOffset = default(VectorOffset)) {
    builder.StartTable(6);
    ExchangeReward.AddPreviewReward(builder, preview_rewardOffset);
    ExchangeReward.AddRewardId(builder, reward_idOffset);
    ExchangeReward.AddCost(builder, costOffset);
    ExchangeReward.AddMaxCount(builder, max_count);
    ExchangeReward.AddSharedId(builder, shared_id);
    ExchangeReward.AddId(builder, id);
    return ExchangeReward.EndExchangeReward(builder);
  }

  public static void StartExchangeReward(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddSharedId(FlatBufferBuilder builder, int sharedId) { builder.AddInt(1, sharedId, 0); }
  public static void AddMaxCount(FlatBufferBuilder builder, int maxCount) { builder.AddInt(2, maxCount, 0); }
  public static void AddCost(FlatBufferBuilder builder, VectorOffset costOffset) { builder.AddOffset(3, costOffset.Value, 0); }
  public static VectorOffset CreateCostVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCostVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCostVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCostVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardId(FlatBufferBuilder builder, VectorOffset rewardIdOffset) { builder.AddOffset(4, rewardIdOffset.Value, 0); }
  public static VectorOffset CreateRewardIdVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRewardIdVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardIdVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPreviewReward(FlatBufferBuilder builder, VectorOffset previewRewardOffset) { builder.AddOffset(5, previewRewardOffset.Value, 0); }
  public static VectorOffset CreatePreviewRewardVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntIntIntMap>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePreviewRewardVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntIntIntMap>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePreviewRewardVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntIntIntMap>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePreviewRewardVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntIntIntMap>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPreviewRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.ExchangeReward> EndExchangeReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ExchangeReward>(o);
  }
  public ExchangeRewardT UnPack() {
    var _o = new ExchangeRewardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ExchangeRewardT _o) {
    _o.Id = this.Id;
    _o.SharedId = this.SharedId;
    _o.MaxCount = this.MaxCount;
    _o.Cost = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.CostLength; ++_j) {_o.Cost.Add(this.Cost(_j).HasValue ? this.Cost(_j).Value.UnPack() : null);}
    _o.RewardId = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.RewardIdLength; ++_j) {_o.RewardId.Add(this.RewardId(_j).HasValue ? this.RewardId(_j).Value.UnPack() : null);}
    _o.PreviewReward = new List<WWParser.Defs.DicIntIntIntMapT>();
    for (var _j = 0; _j < this.PreviewRewardLength; ++_j) {_o.PreviewReward.Add(this.PreviewReward(_j).HasValue ? this.PreviewReward(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.ExchangeReward> Pack(FlatBufferBuilder builder, ExchangeRewardT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ExchangeReward>);
    var _cost = default(VectorOffset);
    if (_o.Cost != null) {
      var __cost = new Offset<WWParser.Defs.DicIntInt>[_o.Cost.Count];
      for (var _j = 0; _j < __cost.Length; ++_j) { __cost[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.Cost[_j]); }
      _cost = CreateCostVector(builder, __cost);
    }
    var _reward_id = default(VectorOffset);
    if (_o.RewardId != null) {
      var __reward_id = new Offset<WWParser.Defs.DicIntInt>[_o.RewardId.Count];
      for (var _j = 0; _j < __reward_id.Length; ++_j) { __reward_id[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.RewardId[_j]); }
      _reward_id = CreateRewardIdVector(builder, __reward_id);
    }
    var _preview_reward = default(VectorOffset);
    if (_o.PreviewReward != null) {
      var __preview_reward = new Offset<WWParser.Defs.DicIntIntIntMap>[_o.PreviewReward.Count];
      for (var _j = 0; _j < __preview_reward.Length; ++_j) { __preview_reward[_j] = WWParser.Defs.DicIntIntIntMap.Pack(builder, _o.PreviewReward[_j]); }
      _preview_reward = CreatePreviewRewardVector(builder, __preview_reward);
    }
    return CreateExchangeReward(
      builder,
      _o.Id,
      _o.SharedId,
      _o.MaxCount,
      _cost,
      _reward_id,
      _preview_reward);
  }
}

public class ExchangeRewardT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("shared_id")]
  public int SharedId { get; set; }
  [Newtonsoft.Json.JsonProperty("max_count")]
  public int MaxCount { get; set; }
  [Newtonsoft.Json.JsonProperty("cost")]
  public List<WWParser.Defs.DicIntIntT> Cost { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_id")]
  public List<WWParser.Defs.DicIntIntT> RewardId { get; set; }
  [Newtonsoft.Json.JsonProperty("preview_reward")]
  public List<WWParser.Defs.DicIntIntIntMapT> PreviewReward { get; set; }

  public ExchangeRewardT() {
    this.Id = 0;
    this.SharedId = 0;
    this.MaxCount = 0;
    this.Cost = null;
    this.RewardId = null;
    this.PreviewReward = null;
  }
}


static public class ExchangeRewardVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SharedId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*MaxCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*Cost*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 12 /*RewardId*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 14 /*PreviewReward*/, WWParser.Defs.DicIntIntIntMapVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
