// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FishingManualRefresh : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FishingManualRefresh GetRootAsFishingManualRefresh(ByteBuffer _bb) { return GetRootAsFishingManualRefresh(_bb, new FishingManualRefresh()); }
  public static FishingManualRefresh GetRootAsFishingManualRefresh(ByteBuffer _bb, FishingManualRefresh obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FishingManualRefresh __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EntrustPoolType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Star { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RefreshCost { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.FishingManualRefresh> CreateFishingManualRefresh(FlatBufferBuilder builder,
      int id = 0,
      int entrust_pool_type = 0,
      int star = 0,
      int refresh_cost = 0) {
    builder.StartTable(4);
    FishingManualRefresh.AddRefreshCost(builder, refresh_cost);
    FishingManualRefresh.AddStar(builder, star);
    FishingManualRefresh.AddEntrustPoolType(builder, entrust_pool_type);
    FishingManualRefresh.AddId(builder, id);
    return FishingManualRefresh.EndFishingManualRefresh(builder);
  }

  public static void StartFishingManualRefresh(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddEntrustPoolType(FlatBufferBuilder builder, int entrustPoolType) { builder.AddInt(1, entrustPoolType, 0); }
  public static void AddStar(FlatBufferBuilder builder, int star) { builder.AddInt(2, star, 0); }
  public static void AddRefreshCost(FlatBufferBuilder builder, int refreshCost) { builder.AddInt(3, refreshCost, 0); }
  public static Offset<WWParser.Defs.FishingManualRefresh> EndFishingManualRefresh(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FishingManualRefresh>(o);
  }
  public FishingManualRefreshT UnPack() {
    var _o = new FishingManualRefreshT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FishingManualRefreshT _o) {
    _o.Id = this.Id;
    _o.EntrustPoolType = this.EntrustPoolType;
    _o.Star = this.Star;
    _o.RefreshCost = this.RefreshCost;
  }
  public static Offset<WWParser.Defs.FishingManualRefresh> Pack(FlatBufferBuilder builder, FishingManualRefreshT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FishingManualRefresh>);
    return CreateFishingManualRefresh(
      builder,
      _o.Id,
      _o.EntrustPoolType,
      _o.Star,
      _o.RefreshCost);
  }
}

public class FishingManualRefreshT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("entrust_pool_type")]
  public int EntrustPoolType { get; set; }
  [Newtonsoft.Json.JsonProperty("star")]
  public int Star { get; set; }
  [Newtonsoft.Json.JsonProperty("refresh_cost")]
  public int RefreshCost { get; set; }

  public FishingManualRefreshT() {
    this.Id = 0;
    this.EntrustPoolType = 0;
    this.Star = 0;
    this.RefreshCost = 0;
  }
}


static public class FishingManualRefreshVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*EntrustPoolType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Star*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*RefreshCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
