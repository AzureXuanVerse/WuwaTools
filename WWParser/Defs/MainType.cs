// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MainType : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MainType GetRootAsMainType(ByteBuffer _bb) { return GetRootAsMainType(_bb, new MainType()); }
  public static MainType GetRootAsMainType(ByteBuffer _bb, MainType obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MainType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MainSort { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MainName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMainNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMainNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMainNameArray() { return __p.__vector_as_array<byte>(8); }
  public string MainIcon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMainIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMainIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMainIconArray() { return __p.__vector_as_array<byte>(10); }
  public int TabPanelType { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int PcTabPanelType { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int XboxTabPanelType { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int PsTabPanelType { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public string MainSmallIcon { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMainSmallIconBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetMainSmallIconBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetMainSmallIconArray() { return __p.__vector_as_array<byte>(20); }

  public static Offset<WWParser.Defs.MainType> CreateMainType(FlatBufferBuilder builder,
      int id = 0,
      int main_sort = 0,
      StringOffset main_nameOffset = default(StringOffset),
      StringOffset main_iconOffset = default(StringOffset),
      int tab_panel_type = 1,
      int pc_tab_panel_type = 1,
      int xbox_tab_panel_type = 1,
      int ps_tab_panel_type = 1,
      StringOffset main_small_iconOffset = default(StringOffset)) {
    builder.StartTable(9);
    MainType.AddMainSmallIcon(builder, main_small_iconOffset);
    MainType.AddPsTabPanelType(builder, ps_tab_panel_type);
    MainType.AddXboxTabPanelType(builder, xbox_tab_panel_type);
    MainType.AddPcTabPanelType(builder, pc_tab_panel_type);
    MainType.AddTabPanelType(builder, tab_panel_type);
    MainType.AddMainIcon(builder, main_iconOffset);
    MainType.AddMainName(builder, main_nameOffset);
    MainType.AddMainSort(builder, main_sort);
    MainType.AddId(builder, id);
    return MainType.EndMainType(builder);
  }

  public static void StartMainType(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMainSort(FlatBufferBuilder builder, int mainSort) { builder.AddInt(1, mainSort, 0); }
  public static void AddMainName(FlatBufferBuilder builder, StringOffset mainNameOffset) { builder.AddOffset(2, mainNameOffset.Value, 0); }
  public static void AddMainIcon(FlatBufferBuilder builder, StringOffset mainIconOffset) { builder.AddOffset(3, mainIconOffset.Value, 0); }
  public static void AddTabPanelType(FlatBufferBuilder builder, int tabPanelType) { builder.AddInt(4, tabPanelType, 1); }
  public static void AddPcTabPanelType(FlatBufferBuilder builder, int pcTabPanelType) { builder.AddInt(5, pcTabPanelType, 1); }
  public static void AddXboxTabPanelType(FlatBufferBuilder builder, int xboxTabPanelType) { builder.AddInt(6, xboxTabPanelType, 1); }
  public static void AddPsTabPanelType(FlatBufferBuilder builder, int psTabPanelType) { builder.AddInt(7, psTabPanelType, 1); }
  public static void AddMainSmallIcon(FlatBufferBuilder builder, StringOffset mainSmallIconOffset) { builder.AddOffset(8, mainSmallIconOffset.Value, 0); }
  public static Offset<WWParser.Defs.MainType> EndMainType(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MainType>(o);
  }
  public MainTypeT UnPack() {
    var _o = new MainTypeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MainTypeT _o) {
    _o.Id = this.Id;
    _o.MainSort = this.MainSort;
    _o.MainName = this.MainName;
    _o.MainIcon = this.MainIcon;
    _o.TabPanelType = this.TabPanelType;
    _o.PcTabPanelType = this.PcTabPanelType;
    _o.XboxTabPanelType = this.XboxTabPanelType;
    _o.PsTabPanelType = this.PsTabPanelType;
    _o.MainSmallIcon = this.MainSmallIcon;
  }
  public static Offset<WWParser.Defs.MainType> Pack(FlatBufferBuilder builder, MainTypeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MainType>);
    var _main_name = _o.MainName == null ? default(StringOffset) : builder.CreateString(_o.MainName);
    var _main_icon = _o.MainIcon == null ? default(StringOffset) : builder.CreateString(_o.MainIcon);
    var _main_small_icon = _o.MainSmallIcon == null ? default(StringOffset) : builder.CreateString(_o.MainSmallIcon);
    return CreateMainType(
      builder,
      _o.Id,
      _o.MainSort,
      _main_name,
      _main_icon,
      _o.TabPanelType,
      _o.PcTabPanelType,
      _o.XboxTabPanelType,
      _o.PsTabPanelType,
      _main_small_icon);
  }
}

public class MainTypeT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("main_sort")]
  public int MainSort { get; set; }
  [Newtonsoft.Json.JsonProperty("main_name")]
  public string MainName { get; set; }
  [Newtonsoft.Json.JsonProperty("main_icon")]
  public string MainIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("tab_panel_type")]
  public int TabPanelType { get; set; }
  [Newtonsoft.Json.JsonProperty("pc_tab_panel_type")]
  public int PcTabPanelType { get; set; }
  [Newtonsoft.Json.JsonProperty("xbox_tab_panel_type")]
  public int XboxTabPanelType { get; set; }
  [Newtonsoft.Json.JsonProperty("ps_tab_panel_type")]
  public int PsTabPanelType { get; set; }
  [Newtonsoft.Json.JsonProperty("main_small_icon")]
  public string MainSmallIcon { get; set; }

  public MainTypeT() {
    this.Id = 0;
    this.MainSort = 0;
    this.MainName = null;
    this.MainIcon = null;
    this.TabPanelType = 1;
    this.PcTabPanelType = 1;
    this.XboxTabPanelType = 1;
    this.PsTabPanelType = 1;
    this.MainSmallIcon = null;
  }
}


static public class MainTypeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MainSort*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*MainName*/, false)
      && verifier.VerifyString(tablePos, 10 /*MainIcon*/, false)
      && verifier.VerifyField(tablePos, 12 /*TabPanelType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*PcTabPanelType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*XboxTabPanelType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*PsTabPanelType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*MainSmallIcon*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
