// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TrialWeaponInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TrialWeaponInfo GetRootAsTrialWeaponInfo(ByteBuffer _bb) { return GetRootAsTrialWeaponInfo(_bb, new TrialWeaponInfo()); }
  public static TrialWeaponInfo GetRootAsTrialWeaponInfo(ByteBuffer _bb, TrialWeaponInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TrialWeaponInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WeaponId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WeaponLevel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WeaponSkinId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WeaponResonanceLevel { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FullLevelTrialId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.TrialWeaponInfo> CreateTrialWeaponInfo(FlatBufferBuilder builder,
      int id = 0,
      int weapon_id = 0,
      int weapon_level = 0,
      int weapon_skin_id = 0,
      int weapon_resonance_level = 0,
      int full_level_trial_id = 0) {
    builder.StartTable(6);
    TrialWeaponInfo.AddFullLevelTrialId(builder, full_level_trial_id);
    TrialWeaponInfo.AddWeaponResonanceLevel(builder, weapon_resonance_level);
    TrialWeaponInfo.AddWeaponSkinId(builder, weapon_skin_id);
    TrialWeaponInfo.AddWeaponLevel(builder, weapon_level);
    TrialWeaponInfo.AddWeaponId(builder, weapon_id);
    TrialWeaponInfo.AddId(builder, id);
    return TrialWeaponInfo.EndTrialWeaponInfo(builder);
  }

  public static void StartTrialWeaponInfo(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddWeaponId(FlatBufferBuilder builder, int weaponId) { builder.AddInt(1, weaponId, 0); }
  public static void AddWeaponLevel(FlatBufferBuilder builder, int weaponLevel) { builder.AddInt(2, weaponLevel, 0); }
  public static void AddWeaponSkinId(FlatBufferBuilder builder, int weaponSkinId) { builder.AddInt(3, weaponSkinId, 0); }
  public static void AddWeaponResonanceLevel(FlatBufferBuilder builder, int weaponResonanceLevel) { builder.AddInt(4, weaponResonanceLevel, 0); }
  public static void AddFullLevelTrialId(FlatBufferBuilder builder, int fullLevelTrialId) { builder.AddInt(5, fullLevelTrialId, 0); }
  public static Offset<WWParser.Defs.TrialWeaponInfo> EndTrialWeaponInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.TrialWeaponInfo>(o);
  }
  public TrialWeaponInfoT UnPack() {
    var _o = new TrialWeaponInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TrialWeaponInfoT _o) {
    _o.Id = this.Id;
    _o.WeaponId = this.WeaponId;
    _o.WeaponLevel = this.WeaponLevel;
    _o.WeaponSkinId = this.WeaponSkinId;
    _o.WeaponResonanceLevel = this.WeaponResonanceLevel;
    _o.FullLevelTrialId = this.FullLevelTrialId;
  }
  public static Offset<WWParser.Defs.TrialWeaponInfo> Pack(FlatBufferBuilder builder, TrialWeaponInfoT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.TrialWeaponInfo>);
    return CreateTrialWeaponInfo(
      builder,
      _o.Id,
      _o.WeaponId,
      _o.WeaponLevel,
      _o.WeaponSkinId,
      _o.WeaponResonanceLevel,
      _o.FullLevelTrialId);
  }
}

public class TrialWeaponInfoT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("weapon_id")]
  public int WeaponId { get; set; }
  [Newtonsoft.Json.JsonProperty("weapon_level")]
  public int WeaponLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("weapon_skin_id")]
  public int WeaponSkinId { get; set; }
  [Newtonsoft.Json.JsonProperty("weapon_resonance_level")]
  public int WeaponResonanceLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("full_level_trial_id")]
  public int FullLevelTrialId { get; set; }

  public TrialWeaponInfoT() {
    this.Id = 0;
    this.WeaponId = 0;
    this.WeaponLevel = 0;
    this.WeaponSkinId = 0;
    this.WeaponResonanceLevel = 0;
    this.FullLevelTrialId = 0;
  }
}


static public class TrialWeaponInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*WeaponId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*WeaponLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*WeaponSkinId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*WeaponResonanceLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*FullLevelTrialId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
