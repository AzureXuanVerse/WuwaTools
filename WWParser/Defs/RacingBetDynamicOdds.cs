// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RacingBetDynamicOdds : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RacingBetDynamicOdds GetRootAsRacingBetDynamicOdds(ByteBuffer _bb) { return GetRootAsRacingBetDynamicOdds(_bb, new RacingBetDynamicOdds()); }
  public static RacingBetDynamicOdds GetRootAsRacingBetDynamicOdds(ByteBuffer _bb, RacingBetDynamicOdds obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RacingBetDynamicOdds __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LegId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Proportion(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ProportionLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetProportionBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetProportionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetProportionArray() { return __p.__vector_as_array<int>(8); }
  public int DynamicOdds { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.RacingBetDynamicOdds> CreateRacingBetDynamicOdds(FlatBufferBuilder builder,
      int id = 0,
      int leg_id = 0,
      VectorOffset proportionOffset = default(VectorOffset),
      int dynamic_odds = 0) {
    builder.StartTable(4);
    RacingBetDynamicOdds.AddDynamicOdds(builder, dynamic_odds);
    RacingBetDynamicOdds.AddProportion(builder, proportionOffset);
    RacingBetDynamicOdds.AddLegId(builder, leg_id);
    RacingBetDynamicOdds.AddId(builder, id);
    return RacingBetDynamicOdds.EndRacingBetDynamicOdds(builder);
  }

  public static void StartRacingBetDynamicOdds(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddLegId(FlatBufferBuilder builder, int legId) { builder.AddInt(1, legId, 0); }
  public static void AddProportion(FlatBufferBuilder builder, VectorOffset proportionOffset) { builder.AddOffset(2, proportionOffset.Value, 0); }
  public static VectorOffset CreateProportionVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateProportionVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateProportionVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateProportionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartProportionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDynamicOdds(FlatBufferBuilder builder, int dynamicOdds) { builder.AddInt(3, dynamicOdds, 0); }
  public static Offset<WWParser.Defs.RacingBetDynamicOdds> EndRacingBetDynamicOdds(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RacingBetDynamicOdds>(o);
  }
  public RacingBetDynamicOddsT UnPack() {
    var _o = new RacingBetDynamicOddsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RacingBetDynamicOddsT _o) {
    _o.Id = this.Id;
    _o.LegId = this.LegId;
    _o.Proportion = new List<int>();
    for (var _j = 0; _j < this.ProportionLength; ++_j) {_o.Proportion.Add(this.Proportion(_j));}
    _o.DynamicOdds = this.DynamicOdds;
  }
  public static Offset<WWParser.Defs.RacingBetDynamicOdds> Pack(FlatBufferBuilder builder, RacingBetDynamicOddsT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RacingBetDynamicOdds>);
    var _proportion = default(VectorOffset);
    if (_o.Proportion != null) {
      var __proportion = _o.Proportion.ToArray();
      _proportion = CreateProportionVector(builder, __proportion);
    }
    return CreateRacingBetDynamicOdds(
      builder,
      _o.Id,
      _o.LegId,
      _proportion,
      _o.DynamicOdds);
  }
}

public class RacingBetDynamicOddsT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("leg_id")]
  public int LegId { get; set; }
  [Newtonsoft.Json.JsonProperty("proportion")]
  public List<int> Proportion { get; set; }
  [Newtonsoft.Json.JsonProperty("dynamic_odds")]
  public int DynamicOdds { get; set; }

  public RacingBetDynamicOddsT() {
    this.Id = 0;
    this.LegId = 0;
    this.Proportion = null;
    this.DynamicOdds = 0;
  }
}


static public class RacingBetDynamicOddsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*LegId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*Proportion*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 10 /*DynamicOdds*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
