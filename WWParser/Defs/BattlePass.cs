// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BattlePass : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BattlePass GetRootAsBattlePass(ByteBuffer _bb) { return GetRootAsBattlePass(_bb, new BattlePass()); }
  public static BattlePass GetRootAsBattlePass(ByteBuffer _bb, BattlePass obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BattlePass __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InitialLevel { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LevelLimit { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LevelUpExp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConsumeId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConsumeCount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsRecurringLevel { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public WWParser.Defs.DicIntInt? FreeRecurringReward(int j) { int o = __p.__offset(18); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FreeRecurringRewardLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntInt? PayRecurringReward(int j) { int o = __p.__offset(20); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PayRecurringRewardLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int RecurringLevelExp { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WeekExpLimit { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ExclusiveRewardPath { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExclusiveRewardPathBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetExclusiveRewardPathBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetExclusiveRewardPathArray() { return __p.__vector_as_array<byte>(26); }

  public static Offset<WWParser.Defs.BattlePass> CreateBattlePass(FlatBufferBuilder builder,
      int id = 0,
      int initial_level = 0,
      int level_limit = 0,
      int level_up_exp = 0,
      int consume_id = 0,
      int consume_count = 0,
      bool is_recurring_level = false,
      VectorOffset free_recurring_rewardOffset = default(VectorOffset),
      VectorOffset pay_recurring_rewardOffset = default(VectorOffset),
      int recurring_level_exp = 0,
      int week_exp_limit = 0,
      StringOffset exclusive_reward_pathOffset = default(StringOffset)) {
    builder.StartTable(12);
    BattlePass.AddExclusiveRewardPath(builder, exclusive_reward_pathOffset);
    BattlePass.AddWeekExpLimit(builder, week_exp_limit);
    BattlePass.AddRecurringLevelExp(builder, recurring_level_exp);
    BattlePass.AddPayRecurringReward(builder, pay_recurring_rewardOffset);
    BattlePass.AddFreeRecurringReward(builder, free_recurring_rewardOffset);
    BattlePass.AddConsumeCount(builder, consume_count);
    BattlePass.AddConsumeId(builder, consume_id);
    BattlePass.AddLevelUpExp(builder, level_up_exp);
    BattlePass.AddLevelLimit(builder, level_limit);
    BattlePass.AddInitialLevel(builder, initial_level);
    BattlePass.AddId(builder, id);
    BattlePass.AddIsRecurringLevel(builder, is_recurring_level);
    return BattlePass.EndBattlePass(builder);
  }

  public static void StartBattlePass(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddInitialLevel(FlatBufferBuilder builder, int initialLevel) { builder.AddInt(1, initialLevel, 0); }
  public static void AddLevelLimit(FlatBufferBuilder builder, int levelLimit) { builder.AddInt(2, levelLimit, 0); }
  public static void AddLevelUpExp(FlatBufferBuilder builder, int levelUpExp) { builder.AddInt(3, levelUpExp, 0); }
  public static void AddConsumeId(FlatBufferBuilder builder, int consumeId) { builder.AddInt(4, consumeId, 0); }
  public static void AddConsumeCount(FlatBufferBuilder builder, int consumeCount) { builder.AddInt(5, consumeCount, 0); }
  public static void AddIsRecurringLevel(FlatBufferBuilder builder, bool isRecurringLevel) { builder.AddBool(6, isRecurringLevel, false); }
  public static void AddFreeRecurringReward(FlatBufferBuilder builder, VectorOffset freeRecurringRewardOffset) { builder.AddOffset(7, freeRecurringRewardOffset.Value, 0); }
  public static VectorOffset CreateFreeRecurringRewardVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFreeRecurringRewardVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFreeRecurringRewardVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFreeRecurringRewardVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFreeRecurringRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPayRecurringReward(FlatBufferBuilder builder, VectorOffset payRecurringRewardOffset) { builder.AddOffset(8, payRecurringRewardOffset.Value, 0); }
  public static VectorOffset CreatePayRecurringRewardVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePayRecurringRewardVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePayRecurringRewardVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePayRecurringRewardVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPayRecurringRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRecurringLevelExp(FlatBufferBuilder builder, int recurringLevelExp) { builder.AddInt(9, recurringLevelExp, 0); }
  public static void AddWeekExpLimit(FlatBufferBuilder builder, int weekExpLimit) { builder.AddInt(10, weekExpLimit, 0); }
  public static void AddExclusiveRewardPath(FlatBufferBuilder builder, StringOffset exclusiveRewardPathOffset) { builder.AddOffset(11, exclusiveRewardPathOffset.Value, 0); }
  public static Offset<WWParser.Defs.BattlePass> EndBattlePass(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BattlePass>(o);
  }
  public BattlePassT UnPack() {
    var _o = new BattlePassT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BattlePassT _o) {
    _o.Id = this.Id;
    _o.InitialLevel = this.InitialLevel;
    _o.LevelLimit = this.LevelLimit;
    _o.LevelUpExp = this.LevelUpExp;
    _o.ConsumeId = this.ConsumeId;
    _o.ConsumeCount = this.ConsumeCount;
    _o.IsRecurringLevel = this.IsRecurringLevel;
    _o.FreeRecurringReward = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.FreeRecurringRewardLength; ++_j) {_o.FreeRecurringReward.Add(this.FreeRecurringReward(_j).HasValue ? this.FreeRecurringReward(_j).Value.UnPack() : null);}
    _o.PayRecurringReward = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.PayRecurringRewardLength; ++_j) {_o.PayRecurringReward.Add(this.PayRecurringReward(_j).HasValue ? this.PayRecurringReward(_j).Value.UnPack() : null);}
    _o.RecurringLevelExp = this.RecurringLevelExp;
    _o.WeekExpLimit = this.WeekExpLimit;
    _o.ExclusiveRewardPath = this.ExclusiveRewardPath;
  }
  public static Offset<WWParser.Defs.BattlePass> Pack(FlatBufferBuilder builder, BattlePassT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BattlePass>);
    var _free_recurring_reward = default(VectorOffset);
    if (_o.FreeRecurringReward != null) {
      var __free_recurring_reward = new Offset<WWParser.Defs.DicIntInt>[_o.FreeRecurringReward.Count];
      for (var _j = 0; _j < __free_recurring_reward.Length; ++_j) { __free_recurring_reward[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.FreeRecurringReward[_j]); }
      _free_recurring_reward = CreateFreeRecurringRewardVector(builder, __free_recurring_reward);
    }
    var _pay_recurring_reward = default(VectorOffset);
    if (_o.PayRecurringReward != null) {
      var __pay_recurring_reward = new Offset<WWParser.Defs.DicIntInt>[_o.PayRecurringReward.Count];
      for (var _j = 0; _j < __pay_recurring_reward.Length; ++_j) { __pay_recurring_reward[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.PayRecurringReward[_j]); }
      _pay_recurring_reward = CreatePayRecurringRewardVector(builder, __pay_recurring_reward);
    }
    var _exclusive_reward_path = _o.ExclusiveRewardPath == null ? default(StringOffset) : builder.CreateString(_o.ExclusiveRewardPath);
    return CreateBattlePass(
      builder,
      _o.Id,
      _o.InitialLevel,
      _o.LevelLimit,
      _o.LevelUpExp,
      _o.ConsumeId,
      _o.ConsumeCount,
      _o.IsRecurringLevel,
      _free_recurring_reward,
      _pay_recurring_reward,
      _o.RecurringLevelExp,
      _o.WeekExpLimit,
      _exclusive_reward_path);
  }
}

public class BattlePassT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("initial_level")]
  public int InitialLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("level_limit")]
  public int LevelLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("level_up_exp")]
  public int LevelUpExp { get; set; }
  [Newtonsoft.Json.JsonProperty("consume_id")]
  public int ConsumeId { get; set; }
  [Newtonsoft.Json.JsonProperty("consume_count")]
  public int ConsumeCount { get; set; }
  [Newtonsoft.Json.JsonProperty("is_recurring_level")]
  public bool IsRecurringLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("free_recurring_reward")]
  public List<WWParser.Defs.DicIntIntT> FreeRecurringReward { get; set; }
  [Newtonsoft.Json.JsonProperty("pay_recurring_reward")]
  public List<WWParser.Defs.DicIntIntT> PayRecurringReward { get; set; }
  [Newtonsoft.Json.JsonProperty("recurring_level_exp")]
  public int RecurringLevelExp { get; set; }
  [Newtonsoft.Json.JsonProperty("week_exp_limit")]
  public int WeekExpLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("exclusive_reward_path")]
  public string ExclusiveRewardPath { get; set; }

  public BattlePassT() {
    this.Id = 0;
    this.InitialLevel = 0;
    this.LevelLimit = 0;
    this.LevelUpExp = 0;
    this.ConsumeId = 0;
    this.ConsumeCount = 0;
    this.IsRecurringLevel = false;
    this.FreeRecurringReward = null;
    this.PayRecurringReward = null;
    this.RecurringLevelExp = 0;
    this.WeekExpLimit = 0;
    this.ExclusiveRewardPath = null;
  }
}


static public class BattlePassVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*InitialLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*LevelLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*LevelUpExp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*ConsumeId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ConsumeCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*IsRecurringLevel*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfTables(tablePos, 18 /*FreeRecurringReward*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 20 /*PayRecurringReward*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 22 /*RecurringLevelExp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*WeekExpLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 26 /*ExclusiveRewardPath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
