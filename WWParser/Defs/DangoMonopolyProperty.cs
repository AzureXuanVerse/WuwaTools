// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DangoMonopolyProperty : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DangoMonopolyProperty GetRootAsDangoMonopolyProperty(ByteBuffer _bb) { return GetRootAsDangoMonopolyProperty(_bb, new DangoMonopolyProperty()); }
  public static DangoMonopolyProperty GetRootAsDangoMonopolyProperty(ByteBuffer _bb, DangoMonopolyProperty obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DangoMonopolyProperty __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PropertyInfo(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PropertyInfoLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPropertyInfoBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetPropertyInfoBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetPropertyInfoArray() { return __p.__vector_as_array<int>(6); }
  public string Title { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(8); }
  public string Desc { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<WWParser.Defs.DangoMonopolyProperty> CreateDangoMonopolyProperty(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset property_infoOffset = default(VectorOffset),
      StringOffset titleOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset)) {
    builder.StartTable(4);
    DangoMonopolyProperty.AddDesc(builder, descOffset);
    DangoMonopolyProperty.AddTitle(builder, titleOffset);
    DangoMonopolyProperty.AddPropertyInfo(builder, property_infoOffset);
    DangoMonopolyProperty.AddId(builder, id);
    return DangoMonopolyProperty.EndDangoMonopolyProperty(builder);
  }

  public static void StartDangoMonopolyProperty(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPropertyInfo(FlatBufferBuilder builder, VectorOffset propertyInfoOffset) { builder.AddOffset(1, propertyInfoOffset.Value, 0); }
  public static VectorOffset CreatePropertyInfoVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePropertyInfoVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePropertyInfoVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePropertyInfoVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPropertyInfoVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(2, titleOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(3, descOffset.Value, 0); }
  public static Offset<WWParser.Defs.DangoMonopolyProperty> EndDangoMonopolyProperty(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DangoMonopolyProperty>(o);
  }
  public DangoMonopolyPropertyT UnPack() {
    var _o = new DangoMonopolyPropertyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DangoMonopolyPropertyT _o) {
    _o.Id = this.Id;
    _o.PropertyInfo = new List<int>();
    for (var _j = 0; _j < this.PropertyInfoLength; ++_j) {_o.PropertyInfo.Add(this.PropertyInfo(_j));}
    _o.Title = this.Title;
    _o.Desc = this.Desc;
  }
  public static Offset<WWParser.Defs.DangoMonopolyProperty> Pack(FlatBufferBuilder builder, DangoMonopolyPropertyT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DangoMonopolyProperty>);
    var _property_info = default(VectorOffset);
    if (_o.PropertyInfo != null) {
      var __property_info = _o.PropertyInfo.ToArray();
      _property_info = CreatePropertyInfoVector(builder, __property_info);
    }
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    return CreateDangoMonopolyProperty(
      builder,
      _o.Id,
      _property_info,
      _title,
      _desc);
  }
}

public class DangoMonopolyPropertyT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("property_info")]
  public List<int> PropertyInfo { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }

  public DangoMonopolyPropertyT() {
    this.Id = 0;
    this.PropertyInfo = null;
    this.Title = null;
    this.Desc = null;
  }
}


static public class DangoMonopolyPropertyVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*PropertyInfo*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 8 /*Title*/, false)
      && verifier.VerifyString(tablePos, 10 /*Desc*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
