// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GuideFocusNew : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GuideFocusNew GetRootAsGuideFocusNew(ByteBuffer _bb) { return GetRootAsGuideFocusNew(_bb, new GuideFocusNew()); }
  public static GuideFocusNew GetRootAsGuideFocusNew(ByteBuffer _bb, GuideFocusNew obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GuideFocusNew __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int GuideId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ViewName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetViewNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetViewNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetViewNameArray() { return __p.__vector_as_array<byte>(6); }
  public string DynamicTabName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDynamicTabNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDynamicTabNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDynamicTabNameArray() { return __p.__vector_as_array<byte>(8); }
  public string Platform { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlatformBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetPlatformBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetPlatformArray() { return __p.__vector_as_array<byte>(10); }
  public string HookName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHookNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetHookNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetHookNameArray() { return __p.__vector_as_array<byte>(12); }
  public string HookNameForShow { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHookNameForShowBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetHookNameForShowBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetHookNameForShowArray() { return __p.__vector_as_array<byte>(14); }
  public string ExtraParam(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExtraParamLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ExtraParamDesc { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExtraParamDescBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetExtraParamDescBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetExtraParamDescArray() { return __p.__vector_as_array<byte>(18); }
  public string ContentDirection { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentDirectionBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetContentDirectionBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetContentDirectionArray() { return __p.__vector_as_array<byte>(20); }
  public bool ShowArrow { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Content { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetContentBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetContentArray() { return __p.__vector_as_array<byte>(24); }
  public string Button(int j) { int o = __p.__offset(26); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ButtonLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string InputEnums(int j) { int o = __p.__offset(28); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int InputEnumsLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string LimitInputEnums(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LimitInputEnumsLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool ShowMouse { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool UseMask { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool UseClick { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ClickAnywhere { get { int o = __p.__offset(38); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int ClickAnywhereShowTime { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool OnlyFrame { get { int o = __p.__offset(42); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool OnlyText { get { int o = __p.__offset(44); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int RoleHeadId { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool TextInScreen { get { int o = __p.__offset(48); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.GuideFocusNew> CreateGuideFocusNew(FlatBufferBuilder builder,
      int guide_id = 0,
      StringOffset view_nameOffset = default(StringOffset),
      StringOffset dynamic_tab_nameOffset = default(StringOffset),
      StringOffset platformOffset = default(StringOffset),
      StringOffset hook_nameOffset = default(StringOffset),
      StringOffset hook_name_for_showOffset = default(StringOffset),
      VectorOffset extra_paramOffset = default(VectorOffset),
      StringOffset extra_param_descOffset = default(StringOffset),
      StringOffset content_directionOffset = default(StringOffset),
      bool show_arrow = false,
      StringOffset contentOffset = default(StringOffset),
      VectorOffset buttonOffset = default(VectorOffset),
      VectorOffset input_enumsOffset = default(VectorOffset),
      VectorOffset limit_input_enumsOffset = default(VectorOffset),
      bool show_mouse = false,
      bool use_mask = false,
      bool use_click = false,
      bool click_anywhere = false,
      int click_anywhere_show_time = 0,
      bool only_frame = false,
      bool only_text = false,
      int role_head_id = 0,
      bool text_in_screen = false) {
    builder.StartTable(23);
    GuideFocusNew.AddRoleHeadId(builder, role_head_id);
    GuideFocusNew.AddClickAnywhereShowTime(builder, click_anywhere_show_time);
    GuideFocusNew.AddLimitInputEnums(builder, limit_input_enumsOffset);
    GuideFocusNew.AddInputEnums(builder, input_enumsOffset);
    GuideFocusNew.AddButton(builder, buttonOffset);
    GuideFocusNew.AddContent(builder, contentOffset);
    GuideFocusNew.AddContentDirection(builder, content_directionOffset);
    GuideFocusNew.AddExtraParamDesc(builder, extra_param_descOffset);
    GuideFocusNew.AddExtraParam(builder, extra_paramOffset);
    GuideFocusNew.AddHookNameForShow(builder, hook_name_for_showOffset);
    GuideFocusNew.AddHookName(builder, hook_nameOffset);
    GuideFocusNew.AddPlatform(builder, platformOffset);
    GuideFocusNew.AddDynamicTabName(builder, dynamic_tab_nameOffset);
    GuideFocusNew.AddViewName(builder, view_nameOffset);
    GuideFocusNew.AddGuideId(builder, guide_id);
    GuideFocusNew.AddTextInScreen(builder, text_in_screen);
    GuideFocusNew.AddOnlyText(builder, only_text);
    GuideFocusNew.AddOnlyFrame(builder, only_frame);
    GuideFocusNew.AddClickAnywhere(builder, click_anywhere);
    GuideFocusNew.AddUseClick(builder, use_click);
    GuideFocusNew.AddUseMask(builder, use_mask);
    GuideFocusNew.AddShowMouse(builder, show_mouse);
    GuideFocusNew.AddShowArrow(builder, show_arrow);
    return GuideFocusNew.EndGuideFocusNew(builder);
  }

  public static void StartGuideFocusNew(FlatBufferBuilder builder) { builder.StartTable(23); }
  public static void AddGuideId(FlatBufferBuilder builder, int guideId) { builder.AddInt(0, guideId, 0); }
  public static void AddViewName(FlatBufferBuilder builder, StringOffset viewNameOffset) { builder.AddOffset(1, viewNameOffset.Value, 0); }
  public static void AddDynamicTabName(FlatBufferBuilder builder, StringOffset dynamicTabNameOffset) { builder.AddOffset(2, dynamicTabNameOffset.Value, 0); }
  public static void AddPlatform(FlatBufferBuilder builder, StringOffset platformOffset) { builder.AddOffset(3, platformOffset.Value, 0); }
  public static void AddHookName(FlatBufferBuilder builder, StringOffset hookNameOffset) { builder.AddOffset(4, hookNameOffset.Value, 0); }
  public static void AddHookNameForShow(FlatBufferBuilder builder, StringOffset hookNameForShowOffset) { builder.AddOffset(5, hookNameForShowOffset.Value, 0); }
  public static void AddExtraParam(FlatBufferBuilder builder, VectorOffset extraParamOffset) { builder.AddOffset(6, extraParamOffset.Value, 0); }
  public static VectorOffset CreateExtraParamVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExtraParamVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraParamVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraParamVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtraParamVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExtraParamDesc(FlatBufferBuilder builder, StringOffset extraParamDescOffset) { builder.AddOffset(7, extraParamDescOffset.Value, 0); }
  public static void AddContentDirection(FlatBufferBuilder builder, StringOffset contentDirectionOffset) { builder.AddOffset(8, contentDirectionOffset.Value, 0); }
  public static void AddShowArrow(FlatBufferBuilder builder, bool showArrow) { builder.AddBool(9, showArrow, false); }
  public static void AddContent(FlatBufferBuilder builder, StringOffset contentOffset) { builder.AddOffset(10, contentOffset.Value, 0); }
  public static void AddButton(FlatBufferBuilder builder, VectorOffset buttonOffset) { builder.AddOffset(11, buttonOffset.Value, 0); }
  public static VectorOffset CreateButtonVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateButtonVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateButtonVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateButtonVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartButtonVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInputEnums(FlatBufferBuilder builder, VectorOffset inputEnumsOffset) { builder.AddOffset(12, inputEnumsOffset.Value, 0); }
  public static VectorOffset CreateInputEnumsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInputEnumsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInputEnumsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInputEnumsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInputEnumsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLimitInputEnums(FlatBufferBuilder builder, VectorOffset limitInputEnumsOffset) { builder.AddOffset(13, limitInputEnumsOffset.Value, 0); }
  public static VectorOffset CreateLimitInputEnumsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLimitInputEnumsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitInputEnumsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitInputEnumsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLimitInputEnumsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShowMouse(FlatBufferBuilder builder, bool showMouse) { builder.AddBool(14, showMouse, false); }
  public static void AddUseMask(FlatBufferBuilder builder, bool useMask) { builder.AddBool(15, useMask, false); }
  public static void AddUseClick(FlatBufferBuilder builder, bool useClick) { builder.AddBool(16, useClick, false); }
  public static void AddClickAnywhere(FlatBufferBuilder builder, bool clickAnywhere) { builder.AddBool(17, clickAnywhere, false); }
  public static void AddClickAnywhereShowTime(FlatBufferBuilder builder, int clickAnywhereShowTime) { builder.AddInt(18, clickAnywhereShowTime, 0); }
  public static void AddOnlyFrame(FlatBufferBuilder builder, bool onlyFrame) { builder.AddBool(19, onlyFrame, false); }
  public static void AddOnlyText(FlatBufferBuilder builder, bool onlyText) { builder.AddBool(20, onlyText, false); }
  public static void AddRoleHeadId(FlatBufferBuilder builder, int roleHeadId) { builder.AddInt(21, roleHeadId, 0); }
  public static void AddTextInScreen(FlatBufferBuilder builder, bool textInScreen) { builder.AddBool(22, textInScreen, false); }
  public static Offset<WWParser.Defs.GuideFocusNew> EndGuideFocusNew(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.GuideFocusNew>(o);
  }
  public GuideFocusNewT UnPack() {
    var _o = new GuideFocusNewT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GuideFocusNewT _o) {
    _o.GuideId = this.GuideId;
    _o.ViewName = this.ViewName;
    _o.DynamicTabName = this.DynamicTabName;
    _o.Platform = this.Platform;
    _o.HookName = this.HookName;
    _o.HookNameForShow = this.HookNameForShow;
    _o.ExtraParam = new List<string>();
    for (var _j = 0; _j < this.ExtraParamLength; ++_j) {_o.ExtraParam.Add(this.ExtraParam(_j));}
    _o.ExtraParamDesc = this.ExtraParamDesc;
    _o.ContentDirection = this.ContentDirection;
    _o.ShowArrow = this.ShowArrow;
    _o.Content = this.Content;
    _o.Button = new List<string>();
    for (var _j = 0; _j < this.ButtonLength; ++_j) {_o.Button.Add(this.Button(_j));}
    _o.InputEnums = new List<string>();
    for (var _j = 0; _j < this.InputEnumsLength; ++_j) {_o.InputEnums.Add(this.InputEnums(_j));}
    _o.LimitInputEnums = new List<string>();
    for (var _j = 0; _j < this.LimitInputEnumsLength; ++_j) {_o.LimitInputEnums.Add(this.LimitInputEnums(_j));}
    _o.ShowMouse = this.ShowMouse;
    _o.UseMask = this.UseMask;
    _o.UseClick = this.UseClick;
    _o.ClickAnywhere = this.ClickAnywhere;
    _o.ClickAnywhereShowTime = this.ClickAnywhereShowTime;
    _o.OnlyFrame = this.OnlyFrame;
    _o.OnlyText = this.OnlyText;
    _o.RoleHeadId = this.RoleHeadId;
    _o.TextInScreen = this.TextInScreen;
  }
  public static Offset<WWParser.Defs.GuideFocusNew> Pack(FlatBufferBuilder builder, GuideFocusNewT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.GuideFocusNew>);
    var _view_name = _o.ViewName == null ? default(StringOffset) : builder.CreateString(_o.ViewName);
    var _dynamic_tab_name = _o.DynamicTabName == null ? default(StringOffset) : builder.CreateString(_o.DynamicTabName);
    var _platform = _o.Platform == null ? default(StringOffset) : builder.CreateString(_o.Platform);
    var _hook_name = _o.HookName == null ? default(StringOffset) : builder.CreateString(_o.HookName);
    var _hook_name_for_show = _o.HookNameForShow == null ? default(StringOffset) : builder.CreateString(_o.HookNameForShow);
    var _extra_param = default(VectorOffset);
    if (_o.ExtraParam != null) {
      var __extra_param = new StringOffset[_o.ExtraParam.Count];
      for (var _j = 0; _j < __extra_param.Length; ++_j) { __extra_param[_j] = builder.CreateString(_o.ExtraParam[_j]); }
      _extra_param = CreateExtraParamVector(builder, __extra_param);
    }
    var _extra_param_desc = _o.ExtraParamDesc == null ? default(StringOffset) : builder.CreateString(_o.ExtraParamDesc);
    var _content_direction = _o.ContentDirection == null ? default(StringOffset) : builder.CreateString(_o.ContentDirection);
    var _content = _o.Content == null ? default(StringOffset) : builder.CreateString(_o.Content);
    var _button = default(VectorOffset);
    if (_o.Button != null) {
      var __button = new StringOffset[_o.Button.Count];
      for (var _j = 0; _j < __button.Length; ++_j) { __button[_j] = builder.CreateString(_o.Button[_j]); }
      _button = CreateButtonVector(builder, __button);
    }
    var _input_enums = default(VectorOffset);
    if (_o.InputEnums != null) {
      var __input_enums = new StringOffset[_o.InputEnums.Count];
      for (var _j = 0; _j < __input_enums.Length; ++_j) { __input_enums[_j] = builder.CreateString(_o.InputEnums[_j]); }
      _input_enums = CreateInputEnumsVector(builder, __input_enums);
    }
    var _limit_input_enums = default(VectorOffset);
    if (_o.LimitInputEnums != null) {
      var __limit_input_enums = new StringOffset[_o.LimitInputEnums.Count];
      for (var _j = 0; _j < __limit_input_enums.Length; ++_j) { __limit_input_enums[_j] = builder.CreateString(_o.LimitInputEnums[_j]); }
      _limit_input_enums = CreateLimitInputEnumsVector(builder, __limit_input_enums);
    }
    return CreateGuideFocusNew(
      builder,
      _o.GuideId,
      _view_name,
      _dynamic_tab_name,
      _platform,
      _hook_name,
      _hook_name_for_show,
      _extra_param,
      _extra_param_desc,
      _content_direction,
      _o.ShowArrow,
      _content,
      _button,
      _input_enums,
      _limit_input_enums,
      _o.ShowMouse,
      _o.UseMask,
      _o.UseClick,
      _o.ClickAnywhere,
      _o.ClickAnywhereShowTime,
      _o.OnlyFrame,
      _o.OnlyText,
      _o.RoleHeadId,
      _o.TextInScreen);
  }
}

public class GuideFocusNewT
{
  [Newtonsoft.Json.JsonProperty("guide_id")]
  public int GuideId { get; set; }
  [Newtonsoft.Json.JsonProperty("view_name")]
  public string ViewName { get; set; }
  [Newtonsoft.Json.JsonProperty("dynamic_tab_name")]
  public string DynamicTabName { get; set; }
  [Newtonsoft.Json.JsonProperty("platform")]
  public string Platform { get; set; }
  [Newtonsoft.Json.JsonProperty("hook_name")]
  public string HookName { get; set; }
  [Newtonsoft.Json.JsonProperty("hook_name_for_show")]
  public string HookNameForShow { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_param")]
  public List<string> ExtraParam { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_param_desc")]
  public string ExtraParamDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("content_direction")]
  public string ContentDirection { get; set; }
  [Newtonsoft.Json.JsonProperty("show_arrow")]
  public bool ShowArrow { get; set; }
  [Newtonsoft.Json.JsonProperty("content")]
  public string Content { get; set; }
  [Newtonsoft.Json.JsonProperty("button")]
  public List<string> Button { get; set; }
  [Newtonsoft.Json.JsonProperty("input_enums")]
  public List<string> InputEnums { get; set; }
  [Newtonsoft.Json.JsonProperty("limit_input_enums")]
  public List<string> LimitInputEnums { get; set; }
  [Newtonsoft.Json.JsonProperty("show_mouse")]
  public bool ShowMouse { get; set; }
  [Newtonsoft.Json.JsonProperty("use_mask")]
  public bool UseMask { get; set; }
  [Newtonsoft.Json.JsonProperty("use_click")]
  public bool UseClick { get; set; }
  [Newtonsoft.Json.JsonProperty("click_anywhere")]
  public bool ClickAnywhere { get; set; }
  [Newtonsoft.Json.JsonProperty("click_anywhere_show_time")]
  public int ClickAnywhereShowTime { get; set; }
  [Newtonsoft.Json.JsonProperty("only_frame")]
  public bool OnlyFrame { get; set; }
  [Newtonsoft.Json.JsonProperty("only_text")]
  public bool OnlyText { get; set; }
  [Newtonsoft.Json.JsonProperty("role_head_id")]
  public int RoleHeadId { get; set; }
  [Newtonsoft.Json.JsonProperty("text_in_screen")]
  public bool TextInScreen { get; set; }

  public GuideFocusNewT() {
    this.GuideId = 0;
    this.ViewName = null;
    this.DynamicTabName = null;
    this.Platform = null;
    this.HookName = null;
    this.HookNameForShow = null;
    this.ExtraParam = null;
    this.ExtraParamDesc = null;
    this.ContentDirection = null;
    this.ShowArrow = false;
    this.Content = null;
    this.Button = null;
    this.InputEnums = null;
    this.LimitInputEnums = null;
    this.ShowMouse = false;
    this.UseMask = false;
    this.UseClick = false;
    this.ClickAnywhere = false;
    this.ClickAnywhereShowTime = 0;
    this.OnlyFrame = false;
    this.OnlyText = false;
    this.RoleHeadId = 0;
    this.TextInScreen = false;
  }
}


static public class GuideFocusNewVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*GuideId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*ViewName*/, false)
      && verifier.VerifyString(tablePos, 8 /*DynamicTabName*/, false)
      && verifier.VerifyString(tablePos, 10 /*Platform*/, false)
      && verifier.VerifyString(tablePos, 12 /*HookName*/, false)
      && verifier.VerifyString(tablePos, 14 /*HookNameForShow*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 16 /*ExtraParam*/, false)
      && verifier.VerifyString(tablePos, 18 /*ExtraParamDesc*/, false)
      && verifier.VerifyString(tablePos, 20 /*ContentDirection*/, false)
      && verifier.VerifyField(tablePos, 22 /*ShowArrow*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 24 /*Content*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 26 /*Button*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 28 /*InputEnums*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 30 /*LimitInputEnums*/, false)
      && verifier.VerifyField(tablePos, 32 /*ShowMouse*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 34 /*UseMask*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 36 /*UseClick*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 38 /*ClickAnywhere*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 40 /*ClickAnywhereShowTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*OnlyFrame*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 44 /*OnlyText*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 46 /*RoleHeadId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*TextInScreen*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
