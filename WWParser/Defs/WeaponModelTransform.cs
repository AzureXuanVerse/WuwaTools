// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct WeaponModelTransform : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static WeaponModelTransform GetRootAsWeaponModelTransform(ByteBuffer _bb) { return GetRootAsWeaponModelTransform(_bb, new WeaponModelTransform()); }
  public static WeaponModelTransform GetRootAsWeaponModelTransform(ByteBuffer _bb, WeaponModelTransform obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WeaponModelTransform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.Vector? Location { get { int o = __p.__offset(6); return o != 0 ? (WWParser.Defs.Vector?)(new WWParser.Defs.Vector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.Vector? Rotation { get { int o = __p.__offset(8); return o != 0 ? (WWParser.Defs.Vector?)(new WWParser.Defs.Vector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Size { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public int RotateTime { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.Vector? ScabbardOffset { get { int o = __p.__offset(14); return o != 0 ? (WWParser.Defs.Vector?)(new WWParser.Defs.Vector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool ShowScabbard { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public WWParser.Defs.Vector? AxisRotate { get { int o = __p.__offset(18); return o != 0 ? (WWParser.Defs.Vector?)(new WWParser.Defs.Vector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<WWParser.Defs.WeaponModelTransform> CreateWeaponModelTransform(FlatBufferBuilder builder,
      int id = 0,
      Offset<WWParser.Defs.Vector> locationOffset = default(Offset<WWParser.Defs.Vector>),
      Offset<WWParser.Defs.Vector> rotationOffset = default(Offset<WWParser.Defs.Vector>),
      float size = 1.0f,
      int rotate_time = 0,
      Offset<WWParser.Defs.Vector> scabbard_offsetOffset = default(Offset<WWParser.Defs.Vector>),
      bool show_scabbard = false,
      Offset<WWParser.Defs.Vector> axis_rotateOffset = default(Offset<WWParser.Defs.Vector>)) {
    builder.StartTable(8);
    WeaponModelTransform.AddAxisRotate(builder, axis_rotateOffset);
    WeaponModelTransform.AddScabbardOffset(builder, scabbard_offsetOffset);
    WeaponModelTransform.AddRotateTime(builder, rotate_time);
    WeaponModelTransform.AddSize(builder, size);
    WeaponModelTransform.AddRotation(builder, rotationOffset);
    WeaponModelTransform.AddLocation(builder, locationOffset);
    WeaponModelTransform.AddId(builder, id);
    WeaponModelTransform.AddShowScabbard(builder, show_scabbard);
    return WeaponModelTransform.EndWeaponModelTransform(builder);
  }

  public static void StartWeaponModelTransform(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddLocation(FlatBufferBuilder builder, Offset<WWParser.Defs.Vector> locationOffset) { builder.AddOffset(1, locationOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<WWParser.Defs.Vector> rotationOffset) { builder.AddOffset(2, rotationOffset.Value, 0); }
  public static void AddSize(FlatBufferBuilder builder, float size) { builder.AddFloat(3, size, 1.0f); }
  public static void AddRotateTime(FlatBufferBuilder builder, int rotateTime) { builder.AddInt(4, rotateTime, 0); }
  public static void AddScabbardOffset(FlatBufferBuilder builder, Offset<WWParser.Defs.Vector> scabbardOffsetOffset) { builder.AddOffset(5, scabbardOffsetOffset.Value, 0); }
  public static void AddShowScabbard(FlatBufferBuilder builder, bool showScabbard) { builder.AddBool(6, showScabbard, false); }
  public static void AddAxisRotate(FlatBufferBuilder builder, Offset<WWParser.Defs.Vector> axisRotateOffset) { builder.AddOffset(7, axisRotateOffset.Value, 0); }
  public static Offset<WWParser.Defs.WeaponModelTransform> EndWeaponModelTransform(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.WeaponModelTransform>(o);
  }
  public WeaponModelTransformT UnPack() {
    var _o = new WeaponModelTransformT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WeaponModelTransformT _o) {
    _o.Id = this.Id;
    _o.Location = this.Location.HasValue ? this.Location.Value.UnPack() : null;
    _o.Rotation = this.Rotation.HasValue ? this.Rotation.Value.UnPack() : null;
    _o.Size = this.Size;
    _o.RotateTime = this.RotateTime;
    _o.ScabbardOffset = this.ScabbardOffset.HasValue ? this.ScabbardOffset.Value.UnPack() : null;
    _o.ShowScabbard = this.ShowScabbard;
    _o.AxisRotate = this.AxisRotate.HasValue ? this.AxisRotate.Value.UnPack() : null;
  }
  public static Offset<WWParser.Defs.WeaponModelTransform> Pack(FlatBufferBuilder builder, WeaponModelTransformT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.WeaponModelTransform>);
    var _location = _o.Location == null ? default(Offset<WWParser.Defs.Vector>) : WWParser.Defs.Vector.Pack(builder, _o.Location);
    var _rotation = _o.Rotation == null ? default(Offset<WWParser.Defs.Vector>) : WWParser.Defs.Vector.Pack(builder, _o.Rotation);
    var _scabbard_offset = _o.ScabbardOffset == null ? default(Offset<WWParser.Defs.Vector>) : WWParser.Defs.Vector.Pack(builder, _o.ScabbardOffset);
    var _axis_rotate = _o.AxisRotate == null ? default(Offset<WWParser.Defs.Vector>) : WWParser.Defs.Vector.Pack(builder, _o.AxisRotate);
    return CreateWeaponModelTransform(
      builder,
      _o.Id,
      _location,
      _rotation,
      _o.Size,
      _o.RotateTime,
      _scabbard_offset,
      _o.ShowScabbard,
      _axis_rotate);
  }
}

public class WeaponModelTransformT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("location")]
  public WWParser.Defs.VectorT Location { get; set; }
  [Newtonsoft.Json.JsonProperty("rotation")]
  public WWParser.Defs.VectorT Rotation { get; set; }
  [Newtonsoft.Json.JsonProperty("size")]
  public float Size { get; set; }
  [Newtonsoft.Json.JsonProperty("rotate_time")]
  public int RotateTime { get; set; }
  [Newtonsoft.Json.JsonProperty("scabbard_offset")]
  public WWParser.Defs.VectorT ScabbardOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("show_scabbard")]
  public bool ShowScabbard { get; set; }
  [Newtonsoft.Json.JsonProperty("axis_rotate")]
  public WWParser.Defs.VectorT AxisRotate { get; set; }

  public WeaponModelTransformT() {
    this.Id = 0;
    this.Location = null;
    this.Rotation = null;
    this.Size = 1.0f;
    this.RotateTime = 0;
    this.ScabbardOffset = null;
    this.ShowScabbard = false;
    this.AxisRotate = null;
  }
}


static public class WeaponModelTransformVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 6 /*Location*/, WWParser.Defs.VectorVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 8 /*Rotation*/, WWParser.Defs.VectorVerify.Verify, false)
      && verifier.VerifyField(tablePos, 10 /*Size*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*RotateTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 14 /*ScabbardOffset*/, WWParser.Defs.VectorVerify.Verify, false)
      && verifier.VerifyField(tablePos, 16 /*ShowScabbard*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTable(tablePos, 18 /*AxisRotate*/, WWParser.Defs.VectorVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
