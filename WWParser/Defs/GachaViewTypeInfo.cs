// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GachaViewTypeInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GachaViewTypeInfo GetRootAsGachaViewTypeInfo(ByteBuffer _bb) { return GetRootAsGachaViewTypeInfo(_bb, new GachaViewTypeInfo()); }
  public static GachaViewTypeInfo GetRootAsGachaViewTypeInfo(ByteBuffer _bb, GachaViewTypeInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GachaViewTypeInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Type { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TagText { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTagTextBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTagTextBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTagTextArray() { return __p.__vector_as_array<byte>(6); }
  public string TagColor { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTagColorBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTagColorBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTagColorArray() { return __p.__vector_as_array<byte>(8); }
  public string TypeText { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeTextBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTypeTextBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTypeTextArray() { return __p.__vector_as_array<byte>(10); }
  public string OptionalTitle { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOptionalTitleBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOptionalTitleBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOptionalTitleArray() { return __p.__vector_as_array<byte>(12); }
  public string OptionalDesc { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOptionalDescBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetOptionalDescBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetOptionalDescArray() { return __p.__vector_as_array<byte>(14); }
  public string GachaButtonTip { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGachaButtonTipBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetGachaButtonTipBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetGachaButtonTipArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<WWParser.Defs.GachaViewTypeInfo> CreateGachaViewTypeInfo(FlatBufferBuilder builder,
      int type = 0,
      StringOffset tag_textOffset = default(StringOffset),
      StringOffset tag_colorOffset = default(StringOffset),
      StringOffset type_textOffset = default(StringOffset),
      StringOffset optional_titleOffset = default(StringOffset),
      StringOffset optional_descOffset = default(StringOffset),
      StringOffset gacha_button_tipOffset = default(StringOffset)) {
    builder.StartTable(7);
    GachaViewTypeInfo.AddGachaButtonTip(builder, gacha_button_tipOffset);
    GachaViewTypeInfo.AddOptionalDesc(builder, optional_descOffset);
    GachaViewTypeInfo.AddOptionalTitle(builder, optional_titleOffset);
    GachaViewTypeInfo.AddTypeText(builder, type_textOffset);
    GachaViewTypeInfo.AddTagColor(builder, tag_colorOffset);
    GachaViewTypeInfo.AddTagText(builder, tag_textOffset);
    GachaViewTypeInfo.AddType(builder, type);
    return GachaViewTypeInfo.EndGachaViewTypeInfo(builder);
  }

  public static void StartGachaViewTypeInfo(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(0, type, 0); }
  public static void AddTagText(FlatBufferBuilder builder, StringOffset tagTextOffset) { builder.AddOffset(1, tagTextOffset.Value, 0); }
  public static void AddTagColor(FlatBufferBuilder builder, StringOffset tagColorOffset) { builder.AddOffset(2, tagColorOffset.Value, 0); }
  public static void AddTypeText(FlatBufferBuilder builder, StringOffset typeTextOffset) { builder.AddOffset(3, typeTextOffset.Value, 0); }
  public static void AddOptionalTitle(FlatBufferBuilder builder, StringOffset optionalTitleOffset) { builder.AddOffset(4, optionalTitleOffset.Value, 0); }
  public static void AddOptionalDesc(FlatBufferBuilder builder, StringOffset optionalDescOffset) { builder.AddOffset(5, optionalDescOffset.Value, 0); }
  public static void AddGachaButtonTip(FlatBufferBuilder builder, StringOffset gachaButtonTipOffset) { builder.AddOffset(6, gachaButtonTipOffset.Value, 0); }
  public static Offset<WWParser.Defs.GachaViewTypeInfo> EndGachaViewTypeInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.GachaViewTypeInfo>(o);
  }
  public GachaViewTypeInfoT UnPack() {
    var _o = new GachaViewTypeInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GachaViewTypeInfoT _o) {
    _o.Type = this.Type;
    _o.TagText = this.TagText;
    _o.TagColor = this.TagColor;
    _o.TypeText = this.TypeText;
    _o.OptionalTitle = this.OptionalTitle;
    _o.OptionalDesc = this.OptionalDesc;
    _o.GachaButtonTip = this.GachaButtonTip;
  }
  public static Offset<WWParser.Defs.GachaViewTypeInfo> Pack(FlatBufferBuilder builder, GachaViewTypeInfoT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.GachaViewTypeInfo>);
    var _tag_text = _o.TagText == null ? default(StringOffset) : builder.CreateString(_o.TagText);
    var _tag_color = _o.TagColor == null ? default(StringOffset) : builder.CreateString(_o.TagColor);
    var _type_text = _o.TypeText == null ? default(StringOffset) : builder.CreateString(_o.TypeText);
    var _optional_title = _o.OptionalTitle == null ? default(StringOffset) : builder.CreateString(_o.OptionalTitle);
    var _optional_desc = _o.OptionalDesc == null ? default(StringOffset) : builder.CreateString(_o.OptionalDesc);
    var _gacha_button_tip = _o.GachaButtonTip == null ? default(StringOffset) : builder.CreateString(_o.GachaButtonTip);
    return CreateGachaViewTypeInfo(
      builder,
      _o.Type,
      _tag_text,
      _tag_color,
      _type_text,
      _optional_title,
      _optional_desc,
      _gacha_button_tip);
  }
}

public class GachaViewTypeInfoT
{
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("tag_text")]
  public string TagText { get; set; }
  [Newtonsoft.Json.JsonProperty("tag_color")]
  public string TagColor { get; set; }
  [Newtonsoft.Json.JsonProperty("type_text")]
  public string TypeText { get; set; }
  [Newtonsoft.Json.JsonProperty("optional_title")]
  public string OptionalTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("optional_desc")]
  public string OptionalDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("gacha_button_tip")]
  public string GachaButtonTip { get; set; }

  public GachaViewTypeInfoT() {
    this.Type = 0;
    this.TagText = null;
    this.TagColor = null;
    this.TypeText = null;
    this.OptionalTitle = null;
    this.OptionalDesc = null;
    this.GachaButtonTip = null;
  }
}


static public class GachaViewTypeInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*TagText*/, false)
      && verifier.VerifyString(tablePos, 8 /*TagColor*/, false)
      && verifier.VerifyString(tablePos, 10 /*TypeText*/, false)
      && verifier.VerifyString(tablePos, 12 /*OptionalTitle*/, false)
      && verifier.VerifyString(tablePos, 14 /*OptionalDesc*/, false)
      && verifier.VerifyString(tablePos, 16 /*GachaButtonTip*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
