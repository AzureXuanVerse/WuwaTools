// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PackageCapacity : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PackageCapacity GetRootAsPackageCapacity(ByteBuffer _bb) { return GetRootAsPackageCapacity(_bb, new PackageCapacity()); }
  public static PackageCapacity GetRootAsPackageCapacity(ByteBuffer _bb, PackageCapacity obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PackageCapacity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PackageId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PackageCapacity_ { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.PackageCapacity> CreatePackageCapacity(FlatBufferBuilder builder,
      int package_id = 0,
      int package_capacity = 0) {
    builder.StartTable(2);
    PackageCapacity.AddPackageCapacity(builder, package_capacity);
    PackageCapacity.AddPackageId(builder, package_id);
    return PackageCapacity.EndPackageCapacity(builder);
  }

  public static void StartPackageCapacity(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPackageId(FlatBufferBuilder builder, int packageId) { builder.AddInt(0, packageId, 0); }
  public static void AddPackageCapacity(FlatBufferBuilder builder, int packageCapacity) { builder.AddInt(1, packageCapacity, 0); }
  public static Offset<WWParser.Defs.PackageCapacity> EndPackageCapacity(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PackageCapacity>(o);
  }
  public PackageCapacityT UnPack() {
    var _o = new PackageCapacityT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PackageCapacityT _o) {
    _o.PackageId = this.PackageId;
    _o.PackageCapacity_ = this.PackageCapacity_;
  }
  public static Offset<WWParser.Defs.PackageCapacity> Pack(FlatBufferBuilder builder, PackageCapacityT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PackageCapacity>);
    return CreatePackageCapacity(
      builder,
      _o.PackageId,
      _o.PackageCapacity_);
  }
}

public class PackageCapacityT
{
  [Newtonsoft.Json.JsonProperty("package_id")]
  public int PackageId { get; set; }
  [Newtonsoft.Json.JsonProperty("package_capacity")]
  public int PackageCapacity_ { get; set; }

  public PackageCapacityT() {
    this.PackageId = 0;
    this.PackageCapacity_ = 0;
  }
}


static public class PackageCapacityVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PackageId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*PackageCapacity*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
