// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MultiMapAreaConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MultiMapAreaConfig GetRootAsMultiMapAreaConfig(ByteBuffer _bb) { return GetRootAsMultiMapAreaConfig(_bb, new MultiMapAreaConfig()); }
  public static MultiMapAreaConfig GetRootAsMultiMapAreaConfig(ByteBuffer _bb, MultiMapAreaConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MultiMapAreaConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Block { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBlockBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetBlockBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetBlockArray() { return __p.__vector_as_array<byte>(6); }
  public int MultiMapList(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MultiMapListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetMultiMapListBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetMultiMapListBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetMultiMapListArray() { return __p.__vector_as_array<int>(8); }
  public WWParser.Defs.IntArray? MultiMapRangeList(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.IntArray?)(new WWParser.Defs.IntArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MultiMapRangeListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int MapConfigId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)8; } }
  public int GravityFlip { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }

  public static Offset<WWParser.Defs.MultiMapAreaConfig> CreateMultiMapAreaConfig(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset blockOffset = default(StringOffset),
      VectorOffset multi_map_listOffset = default(VectorOffset),
      VectorOffset multi_map_range_listOffset = default(VectorOffset),
      int map_config_id = 8,
      int gravity_flip = 1) {
    builder.StartTable(6);
    MultiMapAreaConfig.AddGravityFlip(builder, gravity_flip);
    MultiMapAreaConfig.AddMapConfigId(builder, map_config_id);
    MultiMapAreaConfig.AddMultiMapRangeList(builder, multi_map_range_listOffset);
    MultiMapAreaConfig.AddMultiMapList(builder, multi_map_listOffset);
    MultiMapAreaConfig.AddBlock(builder, blockOffset);
    MultiMapAreaConfig.AddId(builder, idOffset);
    return MultiMapAreaConfig.EndMultiMapAreaConfig(builder);
  }

  public static void StartMultiMapAreaConfig(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddBlock(FlatBufferBuilder builder, StringOffset blockOffset) { builder.AddOffset(1, blockOffset.Value, 0); }
  public static void AddMultiMapList(FlatBufferBuilder builder, VectorOffset multiMapListOffset) { builder.AddOffset(2, multiMapListOffset.Value, 0); }
  public static VectorOffset CreateMultiMapListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMultiMapListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMultiMapListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMultiMapListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMultiMapListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMultiMapRangeList(FlatBufferBuilder builder, VectorOffset multiMapRangeListOffset) { builder.AddOffset(3, multiMapRangeListOffset.Value, 0); }
  public static VectorOffset CreateMultiMapRangeListVector(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMultiMapRangeListVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMultiMapRangeListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.IntArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMultiMapRangeListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.IntArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMultiMapRangeListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMapConfigId(FlatBufferBuilder builder, int mapConfigId) { builder.AddInt(4, mapConfigId, 8); }
  public static void AddGravityFlip(FlatBufferBuilder builder, int gravityFlip) { builder.AddInt(5, gravityFlip, 1); }
  public static Offset<WWParser.Defs.MultiMapAreaConfig> EndMultiMapAreaConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MultiMapAreaConfig>(o);
  }
  public MultiMapAreaConfigT UnPack() {
    var _o = new MultiMapAreaConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MultiMapAreaConfigT _o) {
    _o.Id = this.Id;
    _o.Block = this.Block;
    _o.MultiMapList = new List<int>();
    for (var _j = 0; _j < this.MultiMapListLength; ++_j) {_o.MultiMapList.Add(this.MultiMapList(_j));}
    _o.MultiMapRangeList = new List<WWParser.Defs.IntArrayT>();
    for (var _j = 0; _j < this.MultiMapRangeListLength; ++_j) {_o.MultiMapRangeList.Add(this.MultiMapRangeList(_j).HasValue ? this.MultiMapRangeList(_j).Value.UnPack() : null);}
    _o.MapConfigId = this.MapConfigId;
    _o.GravityFlip = this.GravityFlip;
  }
  public static Offset<WWParser.Defs.MultiMapAreaConfig> Pack(FlatBufferBuilder builder, MultiMapAreaConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MultiMapAreaConfig>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _block = _o.Block == null ? default(StringOffset) : builder.CreateString(_o.Block);
    var _multi_map_list = default(VectorOffset);
    if (_o.MultiMapList != null) {
      var __multi_map_list = _o.MultiMapList.ToArray();
      _multi_map_list = CreateMultiMapListVector(builder, __multi_map_list);
    }
    var _multi_map_range_list = default(VectorOffset);
    if (_o.MultiMapRangeList != null) {
      var __multi_map_range_list = new Offset<WWParser.Defs.IntArray>[_o.MultiMapRangeList.Count];
      for (var _j = 0; _j < __multi_map_range_list.Length; ++_j) { __multi_map_range_list[_j] = WWParser.Defs.IntArray.Pack(builder, _o.MultiMapRangeList[_j]); }
      _multi_map_range_list = CreateMultiMapRangeListVector(builder, __multi_map_range_list);
    }
    return CreateMultiMapAreaConfig(
      builder,
      _id,
      _block,
      _multi_map_list,
      _multi_map_range_list,
      _o.MapConfigId,
      _o.GravityFlip);
  }
}

public class MultiMapAreaConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("block")]
  public string Block { get; set; }
  [Newtonsoft.Json.JsonProperty("multi_map_list")]
  public List<int> MultiMapList { get; set; }
  [Newtonsoft.Json.JsonProperty("multi_map_range_list")]
  public List<WWParser.Defs.IntArrayT> MultiMapRangeList { get; set; }
  [Newtonsoft.Json.JsonProperty("map_config_id")]
  public int MapConfigId { get; set; }
  [Newtonsoft.Json.JsonProperty("gravity_flip")]
  public int GravityFlip { get; set; }

  public MultiMapAreaConfigT() {
    this.Id = null;
    this.Block = null;
    this.MultiMapList = null;
    this.MultiMapRangeList = null;
    this.MapConfigId = 8;
    this.GravityFlip = 1;
  }
}


static public class MultiMapAreaConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*Block*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*MultiMapList*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*MultiMapRangeList*/, WWParser.Defs.IntArrayVerify.Verify, false)
      && verifier.VerifyField(tablePos, 12 /*MapConfigId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*GravityFlip*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
