// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RegressBase : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RegressBase GetRootAsRegressBase(ByteBuffer _bb) { return GetRootAsRegressBase(_bb, new RegressBase()); }
  public static RegressBase GetRootAsRegressBase(ByteBuffer _bb, RegressBase obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RegressBase __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EntryType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ArgId(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ArgIdLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetArgIdBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetArgIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetArgIdArray() { return __p.__vector_as_array<int>(8); }
  public int GachaId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(12); }
  public string SubTitle { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSubTitleBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetSubTitleBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetSubTitleArray() { return __p.__vector_as_array<byte>(14); }
  public string BgPathf { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgPathfBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetBgPathfBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetBgPathfArray() { return __p.__vector_as_array<byte>(16); }
  public string BgPath { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgPathBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetBgPathBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetBgPathArray() { return __p.__vector_as_array<byte>(18); }
  public string Description { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(20); }
  public int RewardPreview { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.RegressBase> CreateRegressBase(FlatBufferBuilder builder,
      int id = 0,
      int entry_type = 0,
      VectorOffset arg_idOffset = default(VectorOffset),
      int gacha_id = 0,
      StringOffset titleOffset = default(StringOffset),
      StringOffset sub_titleOffset = default(StringOffset),
      StringOffset bg_pathfOffset = default(StringOffset),
      StringOffset bg_pathOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      int reward_preview = 0) {
    builder.StartTable(10);
    RegressBase.AddRewardPreview(builder, reward_preview);
    RegressBase.AddDescription(builder, descriptionOffset);
    RegressBase.AddBgPath(builder, bg_pathOffset);
    RegressBase.AddBgPathf(builder, bg_pathfOffset);
    RegressBase.AddSubTitle(builder, sub_titleOffset);
    RegressBase.AddTitle(builder, titleOffset);
    RegressBase.AddGachaId(builder, gacha_id);
    RegressBase.AddArgId(builder, arg_idOffset);
    RegressBase.AddEntryType(builder, entry_type);
    RegressBase.AddId(builder, id);
    return RegressBase.EndRegressBase(builder);
  }

  public static void StartRegressBase(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddEntryType(FlatBufferBuilder builder, int entryType) { builder.AddInt(1, entryType, 0); }
  public static void AddArgId(FlatBufferBuilder builder, VectorOffset argIdOffset) { builder.AddOffset(2, argIdOffset.Value, 0); }
  public static VectorOffset CreateArgIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateArgIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArgIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArgIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartArgIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGachaId(FlatBufferBuilder builder, int gachaId) { builder.AddInt(3, gachaId, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(4, titleOffset.Value, 0); }
  public static void AddSubTitle(FlatBufferBuilder builder, StringOffset subTitleOffset) { builder.AddOffset(5, subTitleOffset.Value, 0); }
  public static void AddBgPathf(FlatBufferBuilder builder, StringOffset bgPathfOffset) { builder.AddOffset(6, bgPathfOffset.Value, 0); }
  public static void AddBgPath(FlatBufferBuilder builder, StringOffset bgPathOffset) { builder.AddOffset(7, bgPathOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(8, descriptionOffset.Value, 0); }
  public static void AddRewardPreview(FlatBufferBuilder builder, int rewardPreview) { builder.AddInt(9, rewardPreview, 0); }
  public static Offset<WWParser.Defs.RegressBase> EndRegressBase(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RegressBase>(o);
  }
  public RegressBaseT UnPack() {
    var _o = new RegressBaseT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RegressBaseT _o) {
    _o.Id = this.Id;
    _o.EntryType = this.EntryType;
    _o.ArgId = new List<int>();
    for (var _j = 0; _j < this.ArgIdLength; ++_j) {_o.ArgId.Add(this.ArgId(_j));}
    _o.GachaId = this.GachaId;
    _o.Title = this.Title;
    _o.SubTitle = this.SubTitle;
    _o.BgPathf = this.BgPathf;
    _o.BgPath = this.BgPath;
    _o.Description = this.Description;
    _o.RewardPreview = this.RewardPreview;
  }
  public static Offset<WWParser.Defs.RegressBase> Pack(FlatBufferBuilder builder, RegressBaseT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RegressBase>);
    var _arg_id = default(VectorOffset);
    if (_o.ArgId != null) {
      var __arg_id = _o.ArgId.ToArray();
      _arg_id = CreateArgIdVector(builder, __arg_id);
    }
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _sub_title = _o.SubTitle == null ? default(StringOffset) : builder.CreateString(_o.SubTitle);
    var _bg_pathf = _o.BgPathf == null ? default(StringOffset) : builder.CreateString(_o.BgPathf);
    var _bg_path = _o.BgPath == null ? default(StringOffset) : builder.CreateString(_o.BgPath);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    return CreateRegressBase(
      builder,
      _o.Id,
      _o.EntryType,
      _arg_id,
      _o.GachaId,
      _title,
      _sub_title,
      _bg_pathf,
      _bg_path,
      _description,
      _o.RewardPreview);
  }
}

public class RegressBaseT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("entry_type")]
  public int EntryType { get; set; }
  [Newtonsoft.Json.JsonProperty("arg_id")]
  public List<int> ArgId { get; set; }
  [Newtonsoft.Json.JsonProperty("gacha_id")]
  public int GachaId { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("sub_title")]
  public string SubTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("bg_pathf")]
  public string BgPathf { get; set; }
  [Newtonsoft.Json.JsonProperty("bg_path")]
  public string BgPath { get; set; }
  [Newtonsoft.Json.JsonProperty("description")]
  public string Description { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_preview")]
  public int RewardPreview { get; set; }

  public RegressBaseT() {
    this.Id = 0;
    this.EntryType = 0;
    this.ArgId = null;
    this.GachaId = 0;
    this.Title = null;
    this.SubTitle = null;
    this.BgPathf = null;
    this.BgPath = null;
    this.Description = null;
    this.RewardPreview = 0;
  }
}


static public class RegressBaseVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*EntryType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*ArgId*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 10 /*GachaId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*Title*/, false)
      && verifier.VerifyString(tablePos, 14 /*SubTitle*/, false)
      && verifier.VerifyString(tablePos, 16 /*BgPathf*/, false)
      && verifier.VerifyString(tablePos, 18 /*BgPath*/, false)
      && verifier.VerifyString(tablePos, 20 /*Description*/, false)
      && verifier.VerifyField(tablePos, 22 /*RewardPreview*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
