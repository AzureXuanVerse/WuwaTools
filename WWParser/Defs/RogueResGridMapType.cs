// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueResGridMapType : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueResGridMapType GetRootAsRogueResGridMapType(ByteBuffer _bb) { return GetRootAsRogueResGridMapType(_bb, new RogueResGridMapType()); }
  public static RogueResGridMapType GetRootAsRogueResGridMapType(ByteBuffer _bb, RogueResGridMapType obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueResGridMapType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MapType { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetMapTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetMapTypeArray() { return __p.__vector_as_array<byte>(6); }
  public WWParser.Defs.DicStringInt? GroundPath(int j) { int o = __p.__offset(8); return o != 0 ? (WWParser.Defs.DicStringInt?)(new WWParser.Defs.DicStringInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int GroundPathLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicStringInt? DecorationPath(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.DicStringInt?)(new WWParser.Defs.DicStringInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DecorationPathLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ExtraPathList(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExtraPathListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int ExtraOffsetList(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ExtraOffsetListLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetExtraOffsetListBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetExtraOffsetListBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetExtraOffsetListArray() { return __p.__vector_as_array<int>(14); }

  public static Offset<WWParser.Defs.RogueResGridMapType> CreateRogueResGridMapType(FlatBufferBuilder builder,
      int id = 0,
      StringOffset map_typeOffset = default(StringOffset),
      VectorOffset ground_pathOffset = default(VectorOffset),
      VectorOffset decoration_pathOffset = default(VectorOffset),
      VectorOffset extra_path_listOffset = default(VectorOffset),
      VectorOffset extra_offset_listOffset = default(VectorOffset)) {
    builder.StartTable(6);
    RogueResGridMapType.AddExtraOffsetList(builder, extra_offset_listOffset);
    RogueResGridMapType.AddExtraPathList(builder, extra_path_listOffset);
    RogueResGridMapType.AddDecorationPath(builder, decoration_pathOffset);
    RogueResGridMapType.AddGroundPath(builder, ground_pathOffset);
    RogueResGridMapType.AddMapType(builder, map_typeOffset);
    RogueResGridMapType.AddId(builder, id);
    return RogueResGridMapType.EndRogueResGridMapType(builder);
  }

  public static void StartRogueResGridMapType(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMapType(FlatBufferBuilder builder, StringOffset mapTypeOffset) { builder.AddOffset(1, mapTypeOffset.Value, 0); }
  public static void AddGroundPath(FlatBufferBuilder builder, VectorOffset groundPathOffset) { builder.AddOffset(2, groundPathOffset.Value, 0); }
  public static VectorOffset CreateGroundPathVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGroundPathVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGroundPathVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicStringInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGroundPathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicStringInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGroundPathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDecorationPath(FlatBufferBuilder builder, VectorOffset decorationPathOffset) { builder.AddOffset(3, decorationPathOffset.Value, 0); }
  public static VectorOffset CreateDecorationPathVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDecorationPathVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDecorationPathVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicStringInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDecorationPathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicStringInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDecorationPathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExtraPathList(FlatBufferBuilder builder, VectorOffset extraPathListOffset) { builder.AddOffset(4, extraPathListOffset.Value, 0); }
  public static VectorOffset CreateExtraPathListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExtraPathListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraPathListVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraPathListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtraPathListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExtraOffsetList(FlatBufferBuilder builder, VectorOffset extraOffsetListOffset) { builder.AddOffset(5, extraOffsetListOffset.Value, 0); }
  public static VectorOffset CreateExtraOffsetListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateExtraOffsetListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraOffsetListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraOffsetListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtraOffsetListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.RogueResGridMapType> EndRogueResGridMapType(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueResGridMapType>(o);
  }
  public RogueResGridMapTypeT UnPack() {
    var _o = new RogueResGridMapTypeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueResGridMapTypeT _o) {
    _o.Id = this.Id;
    _o.MapType = this.MapType;
    _o.GroundPath = new List<WWParser.Defs.DicStringIntT>();
    for (var _j = 0; _j < this.GroundPathLength; ++_j) {_o.GroundPath.Add(this.GroundPath(_j).HasValue ? this.GroundPath(_j).Value.UnPack() : null);}
    _o.DecorationPath = new List<WWParser.Defs.DicStringIntT>();
    for (var _j = 0; _j < this.DecorationPathLength; ++_j) {_o.DecorationPath.Add(this.DecorationPath(_j).HasValue ? this.DecorationPath(_j).Value.UnPack() : null);}
    _o.ExtraPathList = new List<string>();
    for (var _j = 0; _j < this.ExtraPathListLength; ++_j) {_o.ExtraPathList.Add(this.ExtraPathList(_j));}
    _o.ExtraOffsetList = new List<int>();
    for (var _j = 0; _j < this.ExtraOffsetListLength; ++_j) {_o.ExtraOffsetList.Add(this.ExtraOffsetList(_j));}
  }
  public static Offset<WWParser.Defs.RogueResGridMapType> Pack(FlatBufferBuilder builder, RogueResGridMapTypeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueResGridMapType>);
    var _map_type = _o.MapType == null ? default(StringOffset) : builder.CreateString(_o.MapType);
    var _ground_path = default(VectorOffset);
    if (_o.GroundPath != null) {
      var __ground_path = new Offset<WWParser.Defs.DicStringInt>[_o.GroundPath.Count];
      for (var _j = 0; _j < __ground_path.Length; ++_j) { __ground_path[_j] = WWParser.Defs.DicStringInt.Pack(builder, _o.GroundPath[_j]); }
      _ground_path = CreateGroundPathVector(builder, __ground_path);
    }
    var _decoration_path = default(VectorOffset);
    if (_o.DecorationPath != null) {
      var __decoration_path = new Offset<WWParser.Defs.DicStringInt>[_o.DecorationPath.Count];
      for (var _j = 0; _j < __decoration_path.Length; ++_j) { __decoration_path[_j] = WWParser.Defs.DicStringInt.Pack(builder, _o.DecorationPath[_j]); }
      _decoration_path = CreateDecorationPathVector(builder, __decoration_path);
    }
    var _extra_path_list = default(VectorOffset);
    if (_o.ExtraPathList != null) {
      var __extra_path_list = new StringOffset[_o.ExtraPathList.Count];
      for (var _j = 0; _j < __extra_path_list.Length; ++_j) { __extra_path_list[_j] = builder.CreateString(_o.ExtraPathList[_j]); }
      _extra_path_list = CreateExtraPathListVector(builder, __extra_path_list);
    }
    var _extra_offset_list = default(VectorOffset);
    if (_o.ExtraOffsetList != null) {
      var __extra_offset_list = _o.ExtraOffsetList.ToArray();
      _extra_offset_list = CreateExtraOffsetListVector(builder, __extra_offset_list);
    }
    return CreateRogueResGridMapType(
      builder,
      _o.Id,
      _map_type,
      _ground_path,
      _decoration_path,
      _extra_path_list,
      _extra_offset_list);
  }
}

public class RogueResGridMapTypeT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("map_type")]
  public string MapType { get; set; }
  [Newtonsoft.Json.JsonProperty("ground_path")]
  public List<WWParser.Defs.DicStringIntT> GroundPath { get; set; }
  [Newtonsoft.Json.JsonProperty("decoration_path")]
  public List<WWParser.Defs.DicStringIntT> DecorationPath { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_path_list")]
  public List<string> ExtraPathList { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_offset_list")]
  public List<int> ExtraOffsetList { get; set; }

  public RogueResGridMapTypeT() {
    this.Id = 0;
    this.MapType = null;
    this.GroundPath = null;
    this.DecorationPath = null;
    this.ExtraPathList = null;
    this.ExtraOffsetList = null;
  }
}


static public class RogueResGridMapTypeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*MapType*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*GroundPath*/, WWParser.Defs.DicStringIntVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*DecorationPath*/, WWParser.Defs.DicStringIntVerify.Verify, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*ExtraPathList*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*ExtraOffsetList*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
