// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GachaTextureInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GachaTextureInfo GetRootAsGachaTextureInfo(ByteBuffer _bb) { return GetRootAsGachaTextureInfo(_bb, new GachaTextureInfo()); }
  public static GachaTextureInfo GetRootAsGachaTextureInfo(ByteBuffer _bb, GachaTextureInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GachaTextureInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string GachaMainViewTexture { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGachaMainViewTextureBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetGachaMainViewTextureBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetGachaMainViewTextureArray() { return __p.__vector_as_array<byte>(6); }
  public string GachaResultViewTexture { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGachaResultViewTextureBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetGachaResultViewTextureBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetGachaResultViewTextureArray() { return __p.__vector_as_array<byte>(8); }
  public int ShowSequence { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BindPoint { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBindPointBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetBindPointBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetBindPointArray() { return __p.__vector_as_array<byte>(12); }
  public int IdArray(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int IdArrayLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetIdArrayBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetIdArrayBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetIdArrayArray() { return __p.__vector_as_array<int>(14); }
  public int TrialId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.GachaTextureInfo> CreateGachaTextureInfo(FlatBufferBuilder builder,
      int id = 0,
      StringOffset gacha_main_view_textureOffset = default(StringOffset),
      StringOffset gacha_result_view_textureOffset = default(StringOffset),
      int show_sequence = 0,
      StringOffset bind_pointOffset = default(StringOffset),
      VectorOffset id_arrayOffset = default(VectorOffset),
      int trial_id = 0) {
    builder.StartTable(7);
    GachaTextureInfo.AddTrialId(builder, trial_id);
    GachaTextureInfo.AddIdArray(builder, id_arrayOffset);
    GachaTextureInfo.AddBindPoint(builder, bind_pointOffset);
    GachaTextureInfo.AddShowSequence(builder, show_sequence);
    GachaTextureInfo.AddGachaResultViewTexture(builder, gacha_result_view_textureOffset);
    GachaTextureInfo.AddGachaMainViewTexture(builder, gacha_main_view_textureOffset);
    GachaTextureInfo.AddId(builder, id);
    return GachaTextureInfo.EndGachaTextureInfo(builder);
  }

  public static void StartGachaTextureInfo(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddGachaMainViewTexture(FlatBufferBuilder builder, StringOffset gachaMainViewTextureOffset) { builder.AddOffset(1, gachaMainViewTextureOffset.Value, 0); }
  public static void AddGachaResultViewTexture(FlatBufferBuilder builder, StringOffset gachaResultViewTextureOffset) { builder.AddOffset(2, gachaResultViewTextureOffset.Value, 0); }
  public static void AddShowSequence(FlatBufferBuilder builder, int showSequence) { builder.AddInt(3, showSequence, 0); }
  public static void AddBindPoint(FlatBufferBuilder builder, StringOffset bindPointOffset) { builder.AddOffset(4, bindPointOffset.Value, 0); }
  public static void AddIdArray(FlatBufferBuilder builder, VectorOffset idArrayOffset) { builder.AddOffset(5, idArrayOffset.Value, 0); }
  public static VectorOffset CreateIdArrayVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIdArrayVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIdArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTrialId(FlatBufferBuilder builder, int trialId) { builder.AddInt(6, trialId, 0); }
  public static Offset<WWParser.Defs.GachaTextureInfo> EndGachaTextureInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.GachaTextureInfo>(o);
  }
  public GachaTextureInfoT UnPack() {
    var _o = new GachaTextureInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GachaTextureInfoT _o) {
    _o.Id = this.Id;
    _o.GachaMainViewTexture = this.GachaMainViewTexture;
    _o.GachaResultViewTexture = this.GachaResultViewTexture;
    _o.ShowSequence = this.ShowSequence;
    _o.BindPoint = this.BindPoint;
    _o.IdArray = new List<int>();
    for (var _j = 0; _j < this.IdArrayLength; ++_j) {_o.IdArray.Add(this.IdArray(_j));}
    _o.TrialId = this.TrialId;
  }
  public static Offset<WWParser.Defs.GachaTextureInfo> Pack(FlatBufferBuilder builder, GachaTextureInfoT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.GachaTextureInfo>);
    var _gacha_main_view_texture = _o.GachaMainViewTexture == null ? default(StringOffset) : builder.CreateString(_o.GachaMainViewTexture);
    var _gacha_result_view_texture = _o.GachaResultViewTexture == null ? default(StringOffset) : builder.CreateString(_o.GachaResultViewTexture);
    var _bind_point = _o.BindPoint == null ? default(StringOffset) : builder.CreateString(_o.BindPoint);
    var _id_array = default(VectorOffset);
    if (_o.IdArray != null) {
      var __id_array = _o.IdArray.ToArray();
      _id_array = CreateIdArrayVector(builder, __id_array);
    }
    return CreateGachaTextureInfo(
      builder,
      _o.Id,
      _gacha_main_view_texture,
      _gacha_result_view_texture,
      _o.ShowSequence,
      _bind_point,
      _id_array,
      _o.TrialId);
  }
}

public class GachaTextureInfoT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("gacha_main_view_texture")]
  public string GachaMainViewTexture { get; set; }
  [Newtonsoft.Json.JsonProperty("gacha_result_view_texture")]
  public string GachaResultViewTexture { get; set; }
  [Newtonsoft.Json.JsonProperty("show_sequence")]
  public int ShowSequence { get; set; }
  [Newtonsoft.Json.JsonProperty("bind_point")]
  public string BindPoint { get; set; }
  [Newtonsoft.Json.JsonProperty("id_array")]
  public List<int> IdArray { get; set; }
  [Newtonsoft.Json.JsonProperty("trial_id")]
  public int TrialId { get; set; }

  public GachaTextureInfoT() {
    this.Id = 0;
    this.GachaMainViewTexture = null;
    this.GachaResultViewTexture = null;
    this.ShowSequence = 0;
    this.BindPoint = null;
    this.IdArray = null;
    this.TrialId = 0;
  }
}


static public class GachaTextureInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*GachaMainViewTexture*/, false)
      && verifier.VerifyString(tablePos, 8 /*GachaResultViewTexture*/, false)
      && verifier.VerifyField(tablePos, 10 /*ShowSequence*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*BindPoint*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*IdArray*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 16 /*TrialId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
