// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LoadingLevelArea : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static LoadingLevelArea GetRootAsLoadingLevelArea(ByteBuffer _bb) { return GetRootAsLoadingLevelArea(_bb, new LoadingLevelArea()); }
  public static LoadingLevelArea GetRootAsLoadingLevelArea(ByteBuffer _bb, LoadingLevelArea obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LoadingLevelArea __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LevelRange(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LevelRangeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLevelRangeBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetLevelRangeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetLevelRangeArray() { return __p.__vector_as_array<int>(6); }
  public int AreaId(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AreaIdLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAreaIdBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetAreaIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetAreaIdArray() { return __p.__vector_as_array<int>(8); }
  public int MapId(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MapIdLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetMapIdBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetMapIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetMapIdArray() { return __p.__vector_as_array<int>(10); }
  public int ConditionGroup { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsLimitShow { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int BeginTime { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EndTime { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.LoadingLevelArea> CreateLoadingLevelArea(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset level_rangeOffset = default(VectorOffset),
      VectorOffset area_idOffset = default(VectorOffset),
      VectorOffset map_idOffset = default(VectorOffset),
      int condition_group = 0,
      bool is_limit_show = false,
      int begin_time = 0,
      int end_time = 0,
      int activity_id = 0,
      int type = 0) {
    builder.StartTable(10);
    LoadingLevelArea.AddType(builder, type);
    LoadingLevelArea.AddActivityId(builder, activity_id);
    LoadingLevelArea.AddEndTime(builder, end_time);
    LoadingLevelArea.AddBeginTime(builder, begin_time);
    LoadingLevelArea.AddConditionGroup(builder, condition_group);
    LoadingLevelArea.AddMapId(builder, map_idOffset);
    LoadingLevelArea.AddAreaId(builder, area_idOffset);
    LoadingLevelArea.AddLevelRange(builder, level_rangeOffset);
    LoadingLevelArea.AddId(builder, id);
    LoadingLevelArea.AddIsLimitShow(builder, is_limit_show);
    return LoadingLevelArea.EndLoadingLevelArea(builder);
  }

  public static void StartLoadingLevelArea(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddLevelRange(FlatBufferBuilder builder, VectorOffset levelRangeOffset) { builder.AddOffset(1, levelRangeOffset.Value, 0); }
  public static VectorOffset CreateLevelRangeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLevelRangeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLevelRangeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLevelRangeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLevelRangeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAreaId(FlatBufferBuilder builder, VectorOffset areaIdOffset) { builder.AddOffset(2, areaIdOffset.Value, 0); }
  public static VectorOffset CreateAreaIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAreaIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAreaIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAreaIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAreaIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMapId(FlatBufferBuilder builder, VectorOffset mapIdOffset) { builder.AddOffset(3, mapIdOffset.Value, 0); }
  public static VectorOffset CreateMapIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMapIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMapIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMapIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMapIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConditionGroup(FlatBufferBuilder builder, int conditionGroup) { builder.AddInt(4, conditionGroup, 0); }
  public static void AddIsLimitShow(FlatBufferBuilder builder, bool isLimitShow) { builder.AddBool(5, isLimitShow, false); }
  public static void AddBeginTime(FlatBufferBuilder builder, int beginTime) { builder.AddInt(6, beginTime, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, int endTime) { builder.AddInt(7, endTime, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(8, activityId, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(9, type, 0); }
  public static Offset<WWParser.Defs.LoadingLevelArea> EndLoadingLevelArea(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.LoadingLevelArea>(o);
  }
  public LoadingLevelAreaT UnPack() {
    var _o = new LoadingLevelAreaT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LoadingLevelAreaT _o) {
    _o.Id = this.Id;
    _o.LevelRange = new List<int>();
    for (var _j = 0; _j < this.LevelRangeLength; ++_j) {_o.LevelRange.Add(this.LevelRange(_j));}
    _o.AreaId = new List<int>();
    for (var _j = 0; _j < this.AreaIdLength; ++_j) {_o.AreaId.Add(this.AreaId(_j));}
    _o.MapId = new List<int>();
    for (var _j = 0; _j < this.MapIdLength; ++_j) {_o.MapId.Add(this.MapId(_j));}
    _o.ConditionGroup = this.ConditionGroup;
    _o.IsLimitShow = this.IsLimitShow;
    _o.BeginTime = this.BeginTime;
    _o.EndTime = this.EndTime;
    _o.ActivityId = this.ActivityId;
    _o.Type = this.Type;
  }
  public static Offset<WWParser.Defs.LoadingLevelArea> Pack(FlatBufferBuilder builder, LoadingLevelAreaT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.LoadingLevelArea>);
    var _level_range = default(VectorOffset);
    if (_o.LevelRange != null) {
      var __level_range = _o.LevelRange.ToArray();
      _level_range = CreateLevelRangeVector(builder, __level_range);
    }
    var _area_id = default(VectorOffset);
    if (_o.AreaId != null) {
      var __area_id = _o.AreaId.ToArray();
      _area_id = CreateAreaIdVector(builder, __area_id);
    }
    var _map_id = default(VectorOffset);
    if (_o.MapId != null) {
      var __map_id = _o.MapId.ToArray();
      _map_id = CreateMapIdVector(builder, __map_id);
    }
    return CreateLoadingLevelArea(
      builder,
      _o.Id,
      _level_range,
      _area_id,
      _map_id,
      _o.ConditionGroup,
      _o.IsLimitShow,
      _o.BeginTime,
      _o.EndTime,
      _o.ActivityId,
      _o.Type);
  }
}

public class LoadingLevelAreaT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("level_range")]
  public List<int> LevelRange { get; set; }
  [Newtonsoft.Json.JsonProperty("area_id")]
  public List<int> AreaId { get; set; }
  [Newtonsoft.Json.JsonProperty("map_id")]
  public List<int> MapId { get; set; }
  [Newtonsoft.Json.JsonProperty("condition_group")]
  public int ConditionGroup { get; set; }
  [Newtonsoft.Json.JsonProperty("is_limit_show")]
  public bool IsLimitShow { get; set; }
  [Newtonsoft.Json.JsonProperty("begin_time")]
  public int BeginTime { get; set; }
  [Newtonsoft.Json.JsonProperty("end_time")]
  public int EndTime { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }

  public LoadingLevelAreaT() {
    this.Id = 0;
    this.LevelRange = null;
    this.AreaId = null;
    this.MapId = null;
    this.ConditionGroup = 0;
    this.IsLimitShow = false;
    this.BeginTime = 0;
    this.EndTime = 0;
    this.ActivityId = 0;
    this.Type = 0;
  }
}


static public class LoadingLevelAreaVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*LevelRange*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*AreaId*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*MapId*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 12 /*ConditionGroup*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*IsLimitShow*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*BeginTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*EndTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
