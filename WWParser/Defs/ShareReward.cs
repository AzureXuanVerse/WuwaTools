// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ShareReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ShareReward GetRootAsShareReward(ByteBuffer _bb) { return GetRootAsShareReward(_bb, new ShareReward()); }
  public static ShareReward GetRootAsShareReward(ByteBuffer _bb, ShareReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ShareReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShareType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? ShareReward_(int j) { int o = __p.__offset(8); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ShareReward_Length { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int UpdateType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.ShareReward> CreateShareReward(FlatBufferBuilder builder,
      int id = 0,
      int share_type = 0,
      VectorOffset share_rewardOffset = default(VectorOffset),
      int update_type = 0) {
    builder.StartTable(4);
    ShareReward.AddUpdateType(builder, update_type);
    ShareReward.AddShareReward(builder, share_rewardOffset);
    ShareReward.AddShareType(builder, share_type);
    ShareReward.AddId(builder, id);
    return ShareReward.EndShareReward(builder);
  }

  public static void StartShareReward(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddShareType(FlatBufferBuilder builder, int shareType) { builder.AddInt(1, shareType, 0); }
  public static void AddShareReward(FlatBufferBuilder builder, VectorOffset shareRewardOffset) { builder.AddOffset(2, shareRewardOffset.Value, 0); }
  public static VectorOffset CreateShareRewardVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateShareRewardVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShareRewardVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShareRewardVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShareRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUpdateType(FlatBufferBuilder builder, int updateType) { builder.AddInt(3, updateType, 0); }
  public static Offset<WWParser.Defs.ShareReward> EndShareReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ShareReward>(o);
  }
  public ShareRewardT UnPack() {
    var _o = new ShareRewardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ShareRewardT _o) {
    _o.Id = this.Id;
    _o.ShareType = this.ShareType;
    _o.ShareReward_ = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.ShareReward_Length; ++_j) {_o.ShareReward_.Add(this.ShareReward_(_j).HasValue ? this.ShareReward_(_j).Value.UnPack() : null);}
    _o.UpdateType = this.UpdateType;
  }
  public static Offset<WWParser.Defs.ShareReward> Pack(FlatBufferBuilder builder, ShareRewardT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ShareReward>);
    var _share_reward = default(VectorOffset);
    if (_o.ShareReward_ != null) {
      var __share_reward = new Offset<WWParser.Defs.DicIntInt>[_o.ShareReward_.Count];
      for (var _j = 0; _j < __share_reward.Length; ++_j) { __share_reward[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.ShareReward_[_j]); }
      _share_reward = CreateShareRewardVector(builder, __share_reward);
    }
    return CreateShareReward(
      builder,
      _o.Id,
      _o.ShareType,
      _share_reward,
      _o.UpdateType);
  }
}

public class ShareRewardT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("share_type")]
  public int ShareType { get; set; }
  [Newtonsoft.Json.JsonProperty("share_reward")]
  public List<WWParser.Defs.DicIntIntT> ShareReward_ { get; set; }
  [Newtonsoft.Json.JsonProperty("update_type")]
  public int UpdateType { get; set; }

  public ShareRewardT() {
    this.Id = 0;
    this.ShareType = 0;
    this.ShareReward_ = null;
    this.UpdateType = 0;
  }
}


static public class ShareRewardVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ShareType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*ShareReward*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 10 /*UpdateType*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
