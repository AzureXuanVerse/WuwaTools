// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PhotoMemoryTopic : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PhotoMemoryTopic GetRootAsPhotoMemoryTopic(ByteBuffer _bb) { return GetRootAsPhotoMemoryTopic(_bb, new PhotoMemoryTopic()); }
  public static PhotoMemoryTopic GetRootAsPhotoMemoryTopic(ByteBuffer _bb, PhotoMemoryTopic obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PhotoMemoryTopic __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Rank { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BgResourceLight { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgResourceLightBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetBgResourceLightBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetBgResourceLightArray() { return __p.__vector_as_array<byte>(8); }
  public string BgResource { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgResourceBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetBgResourceBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetBgResourceArray() { return __p.__vector_as_array<byte>(10); }
  public string TopicTexture { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTopicTextureBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTopicTextureBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTopicTextureArray() { return __p.__vector_as_array<byte>(12); }
  public string Title { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(14); }
  public int ClueId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConditionGroupId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.PhotoMemoryTopic> CreatePhotoMemoryTopic(FlatBufferBuilder builder,
      int id = 0,
      int rank = 0,
      StringOffset bg_resource_lightOffset = default(StringOffset),
      StringOffset bg_resourceOffset = default(StringOffset),
      StringOffset topic_textureOffset = default(StringOffset),
      StringOffset titleOffset = default(StringOffset),
      int clue_id = 0,
      int condition_group_id = 0) {
    builder.StartTable(8);
    PhotoMemoryTopic.AddConditionGroupId(builder, condition_group_id);
    PhotoMemoryTopic.AddClueId(builder, clue_id);
    PhotoMemoryTopic.AddTitle(builder, titleOffset);
    PhotoMemoryTopic.AddTopicTexture(builder, topic_textureOffset);
    PhotoMemoryTopic.AddBgResource(builder, bg_resourceOffset);
    PhotoMemoryTopic.AddBgResourceLight(builder, bg_resource_lightOffset);
    PhotoMemoryTopic.AddRank(builder, rank);
    PhotoMemoryTopic.AddId(builder, id);
    return PhotoMemoryTopic.EndPhotoMemoryTopic(builder);
  }

  public static void StartPhotoMemoryTopic(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddRank(FlatBufferBuilder builder, int rank) { builder.AddInt(1, rank, 0); }
  public static void AddBgResourceLight(FlatBufferBuilder builder, StringOffset bgResourceLightOffset) { builder.AddOffset(2, bgResourceLightOffset.Value, 0); }
  public static void AddBgResource(FlatBufferBuilder builder, StringOffset bgResourceOffset) { builder.AddOffset(3, bgResourceOffset.Value, 0); }
  public static void AddTopicTexture(FlatBufferBuilder builder, StringOffset topicTextureOffset) { builder.AddOffset(4, topicTextureOffset.Value, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(5, titleOffset.Value, 0); }
  public static void AddClueId(FlatBufferBuilder builder, int clueId) { builder.AddInt(6, clueId, 0); }
  public static void AddConditionGroupId(FlatBufferBuilder builder, int conditionGroupId) { builder.AddInt(7, conditionGroupId, 0); }
  public static Offset<WWParser.Defs.PhotoMemoryTopic> EndPhotoMemoryTopic(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PhotoMemoryTopic>(o);
  }
  public PhotoMemoryTopicT UnPack() {
    var _o = new PhotoMemoryTopicT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PhotoMemoryTopicT _o) {
    _o.Id = this.Id;
    _o.Rank = this.Rank;
    _o.BgResourceLight = this.BgResourceLight;
    _o.BgResource = this.BgResource;
    _o.TopicTexture = this.TopicTexture;
    _o.Title = this.Title;
    _o.ClueId = this.ClueId;
    _o.ConditionGroupId = this.ConditionGroupId;
  }
  public static Offset<WWParser.Defs.PhotoMemoryTopic> Pack(FlatBufferBuilder builder, PhotoMemoryTopicT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PhotoMemoryTopic>);
    var _bg_resource_light = _o.BgResourceLight == null ? default(StringOffset) : builder.CreateString(_o.BgResourceLight);
    var _bg_resource = _o.BgResource == null ? default(StringOffset) : builder.CreateString(_o.BgResource);
    var _topic_texture = _o.TopicTexture == null ? default(StringOffset) : builder.CreateString(_o.TopicTexture);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    return CreatePhotoMemoryTopic(
      builder,
      _o.Id,
      _o.Rank,
      _bg_resource_light,
      _bg_resource,
      _topic_texture,
      _title,
      _o.ClueId,
      _o.ConditionGroupId);
  }
}

public class PhotoMemoryTopicT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("rank")]
  public int Rank { get; set; }
  [Newtonsoft.Json.JsonProperty("bg_resource_light")]
  public string BgResourceLight { get; set; }
  [Newtonsoft.Json.JsonProperty("bg_resource")]
  public string BgResource { get; set; }
  [Newtonsoft.Json.JsonProperty("topic_texture")]
  public string TopicTexture { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("clue_id")]
  public int ClueId { get; set; }
  [Newtonsoft.Json.JsonProperty("condition_group_id")]
  public int ConditionGroupId { get; set; }

  public PhotoMemoryTopicT() {
    this.Id = 0;
    this.Rank = 0;
    this.BgResourceLight = null;
    this.BgResource = null;
    this.TopicTexture = null;
    this.Title = null;
    this.ClueId = 0;
    this.ConditionGroupId = 0;
  }
}


static public class PhotoMemoryTopicVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Rank*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*BgResourceLight*/, false)
      && verifier.VerifyString(tablePos, 10 /*BgResource*/, false)
      && verifier.VerifyString(tablePos, 12 /*TopicTexture*/, false)
      && verifier.VerifyString(tablePos, 14 /*Title*/, false)
      && verifier.VerifyField(tablePos, 16 /*ClueId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*ConditionGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
