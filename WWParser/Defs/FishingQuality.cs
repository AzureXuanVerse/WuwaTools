// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FishingQuality : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FishingQuality GetRootAsFishingQuality(ByteBuffer _bb) { return GetRootAsFishingQuality(_bb, new FishingQuality()); }
  public static FishingQuality GetRootAsFishingQuality(ByteBuffer _bb, FishingQuality obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FishingQuality __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TxtColor { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTxtColorBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTxtColorBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTxtColorArray() { return __p.__vector_as_array<byte>(6); }
  public string TexBg { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTexBgBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTexBgBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTexBgArray() { return __p.__vector_as_array<byte>(8); }
  public string GridColor { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGridColorBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetGridColorBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetGridColorArray() { return __p.__vector_as_array<byte>(10); }
  public string GridSprite { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGridSpriteBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetGridSpriteBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetGridSpriteArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<WWParser.Defs.FishingQuality> CreateFishingQuality(FlatBufferBuilder builder,
      int id = 0,
      StringOffset txt_colorOffset = default(StringOffset),
      StringOffset tex_bgOffset = default(StringOffset),
      StringOffset grid_colorOffset = default(StringOffset),
      StringOffset grid_spriteOffset = default(StringOffset)) {
    builder.StartTable(5);
    FishingQuality.AddGridSprite(builder, grid_spriteOffset);
    FishingQuality.AddGridColor(builder, grid_colorOffset);
    FishingQuality.AddTexBg(builder, tex_bgOffset);
    FishingQuality.AddTxtColor(builder, txt_colorOffset);
    FishingQuality.AddId(builder, id);
    return FishingQuality.EndFishingQuality(builder);
  }

  public static void StartFishingQuality(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTxtColor(FlatBufferBuilder builder, StringOffset txtColorOffset) { builder.AddOffset(1, txtColorOffset.Value, 0); }
  public static void AddTexBg(FlatBufferBuilder builder, StringOffset texBgOffset) { builder.AddOffset(2, texBgOffset.Value, 0); }
  public static void AddGridColor(FlatBufferBuilder builder, StringOffset gridColorOffset) { builder.AddOffset(3, gridColorOffset.Value, 0); }
  public static void AddGridSprite(FlatBufferBuilder builder, StringOffset gridSpriteOffset) { builder.AddOffset(4, gridSpriteOffset.Value, 0); }
  public static Offset<WWParser.Defs.FishingQuality> EndFishingQuality(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FishingQuality>(o);
  }
  public FishingQualityT UnPack() {
    var _o = new FishingQualityT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FishingQualityT _o) {
    _o.Id = this.Id;
    _o.TxtColor = this.TxtColor;
    _o.TexBg = this.TexBg;
    _o.GridColor = this.GridColor;
    _o.GridSprite = this.GridSprite;
  }
  public static Offset<WWParser.Defs.FishingQuality> Pack(FlatBufferBuilder builder, FishingQualityT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FishingQuality>);
    var _txt_color = _o.TxtColor == null ? default(StringOffset) : builder.CreateString(_o.TxtColor);
    var _tex_bg = _o.TexBg == null ? default(StringOffset) : builder.CreateString(_o.TexBg);
    var _grid_color = _o.GridColor == null ? default(StringOffset) : builder.CreateString(_o.GridColor);
    var _grid_sprite = _o.GridSprite == null ? default(StringOffset) : builder.CreateString(_o.GridSprite);
    return CreateFishingQuality(
      builder,
      _o.Id,
      _txt_color,
      _tex_bg,
      _grid_color,
      _grid_sprite);
  }
}

public class FishingQualityT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("txt_color")]
  public string TxtColor { get; set; }
  [Newtonsoft.Json.JsonProperty("tex_bg")]
  public string TexBg { get; set; }
  [Newtonsoft.Json.JsonProperty("grid_color")]
  public string GridColor { get; set; }
  [Newtonsoft.Json.JsonProperty("grid_sprite")]
  public string GridSprite { get; set; }

  public FishingQualityT() {
    this.Id = 0;
    this.TxtColor = null;
    this.TexBg = null;
    this.GridColor = null;
    this.GridSprite = null;
  }
}


static public class FishingQualityVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*TxtColor*/, false)
      && verifier.VerifyString(tablePos, 8 /*TexBg*/, false)
      && verifier.VerifyString(tablePos, 10 /*GridColor*/, false)
      && verifier.VerifyString(tablePos, 12 /*GridSprite*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
