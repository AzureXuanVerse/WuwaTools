// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DreamLinkWorldRun : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DreamLinkWorldRun GetRootAsDreamLinkWorldRun(ByteBuffer _bb) { return GetRootAsDreamLinkWorldRun(_bb, new DreamLinkWorldRun()); }
  public static DreamLinkWorldRun GetRootAsDreamLinkWorldRun(ByteBuffer _bb, DreamLinkWorldRun obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DreamLinkWorldRun __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MarkId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MarkRange { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConditionGroupId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(14); }
  public int RewardId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.DreamLinkWorldRun> CreateDreamLinkWorldRun(FlatBufferBuilder builder,
      int id = 0,
      int activity_id = 0,
      int mark_id = 0,
      int mark_range = 0,
      int condition_group_id = 0,
      StringOffset titleOffset = default(StringOffset),
      int reward_id = 0) {
    builder.StartTable(7);
    DreamLinkWorldRun.AddRewardId(builder, reward_id);
    DreamLinkWorldRun.AddTitle(builder, titleOffset);
    DreamLinkWorldRun.AddConditionGroupId(builder, condition_group_id);
    DreamLinkWorldRun.AddMarkRange(builder, mark_range);
    DreamLinkWorldRun.AddMarkId(builder, mark_id);
    DreamLinkWorldRun.AddActivityId(builder, activity_id);
    DreamLinkWorldRun.AddId(builder, id);
    return DreamLinkWorldRun.EndDreamLinkWorldRun(builder);
  }

  public static void StartDreamLinkWorldRun(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddMarkId(FlatBufferBuilder builder, int markId) { builder.AddInt(2, markId, 0); }
  public static void AddMarkRange(FlatBufferBuilder builder, int markRange) { builder.AddInt(3, markRange, 0); }
  public static void AddConditionGroupId(FlatBufferBuilder builder, int conditionGroupId) { builder.AddInt(4, conditionGroupId, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(5, titleOffset.Value, 0); }
  public static void AddRewardId(FlatBufferBuilder builder, int rewardId) { builder.AddInt(6, rewardId, 0); }
  public static Offset<WWParser.Defs.DreamLinkWorldRun> EndDreamLinkWorldRun(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DreamLinkWorldRun>(o);
  }
  public DreamLinkWorldRunT UnPack() {
    var _o = new DreamLinkWorldRunT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DreamLinkWorldRunT _o) {
    _o.Id = this.Id;
    _o.ActivityId = this.ActivityId;
    _o.MarkId = this.MarkId;
    _o.MarkRange = this.MarkRange;
    _o.ConditionGroupId = this.ConditionGroupId;
    _o.Title = this.Title;
    _o.RewardId = this.RewardId;
  }
  public static Offset<WWParser.Defs.DreamLinkWorldRun> Pack(FlatBufferBuilder builder, DreamLinkWorldRunT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DreamLinkWorldRun>);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    return CreateDreamLinkWorldRun(
      builder,
      _o.Id,
      _o.ActivityId,
      _o.MarkId,
      _o.MarkRange,
      _o.ConditionGroupId,
      _title,
      _o.RewardId);
  }
}

public class DreamLinkWorldRunT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_id")]
  public int MarkId { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_range")]
  public int MarkRange { get; set; }
  [Newtonsoft.Json.JsonProperty("condition_group_id")]
  public int ConditionGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_id")]
  public int RewardId { get; set; }

  public DreamLinkWorldRunT() {
    this.Id = 0;
    this.ActivityId = 0;
    this.MarkId = 0;
    this.MarkRange = 0;
    this.ConditionGroupId = 0;
    this.Title = null;
    this.RewardId = 0;
  }
}


static public class DreamLinkWorldRunVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*MarkId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*MarkRange*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*ConditionGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*Title*/, false)
      && verifier.VerifyField(tablePos, 16 /*RewardId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
