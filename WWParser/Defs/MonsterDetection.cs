// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MonsterDetection : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MonsterDetection GetRootAsMonsterDetection(ByteBuffer _bb) { return GetRootAsMonsterDetection(_bb, new MonsterDetection()); }
  public static MonsterDetection GetRootAsMonsterDetection(ByteBuffer _bb, MonsterDetection obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MonsterDetection __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BlueprintType { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBlueprintTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetBlueprintTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetBlueprintTypeArray() { return __p.__vector_as_array<byte>(6); }
  public int MarkId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public int ShowReward { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EntityConfigId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DangerType { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TypeDescription2 { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string AttributesDescriptionLock { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributesDescriptionLockBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetAttributesDescriptionLockBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetAttributesDescriptionLockArray() { return __p.__vector_as_array<byte>(20); }
  public string AttributesDescriptionUnlock { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributesDescriptionUnlockBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetAttributesDescriptionUnlockBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetAttributesDescriptionUnlockArray() { return __p.__vector_as_array<byte>(22); }
  public string BigIcon { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBigIconBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetBigIconBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetBigIconArray() { return __p.__vector_as_array<byte>(24); }
  public string Icon { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(26); }
  public string TemporaryIconUnLock { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTemporaryIconUnLockBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetTemporaryIconUnLockBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetTemporaryIconUnLockArray() { return __p.__vector_as_array<byte>(28); }
  public string TemporaryIconlock { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTemporaryIconlockBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetTemporaryIconlockBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetTemporaryIconlockArray() { return __p.__vector_as_array<byte>(30); }
  public int BeginTimeStamp { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LockCon { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MonsterInfoId { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.MonsterDetection> CreateMonsterDetection(FlatBufferBuilder builder,
      int id = 0,
      StringOffset blueprint_typeOffset = default(StringOffset),
      int mark_id = 0,
      StringOffset nameOffset = default(StringOffset),
      int show_reward = 0,
      int entity_config_id = 0,
      int danger_type = 0,
      int type_description2 = 0,
      StringOffset attributes_description_lockOffset = default(StringOffset),
      StringOffset attributes_description_unlockOffset = default(StringOffset),
      StringOffset big_iconOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset temporary_icon_un_lockOffset = default(StringOffset),
      StringOffset temporary_iconlockOffset = default(StringOffset),
      int begin_time_stamp = 0,
      int lock_con = 0,
      int monster_info_id = 0) {
    builder.StartTable(17);
    MonsterDetection.AddMonsterInfoId(builder, monster_info_id);
    MonsterDetection.AddLockCon(builder, lock_con);
    MonsterDetection.AddBeginTimeStamp(builder, begin_time_stamp);
    MonsterDetection.AddTemporaryIconlock(builder, temporary_iconlockOffset);
    MonsterDetection.AddTemporaryIconUnLock(builder, temporary_icon_un_lockOffset);
    MonsterDetection.AddIcon(builder, iconOffset);
    MonsterDetection.AddBigIcon(builder, big_iconOffset);
    MonsterDetection.AddAttributesDescriptionUnlock(builder, attributes_description_unlockOffset);
    MonsterDetection.AddAttributesDescriptionLock(builder, attributes_description_lockOffset);
    MonsterDetection.AddTypeDescription2(builder, type_description2);
    MonsterDetection.AddDangerType(builder, danger_type);
    MonsterDetection.AddEntityConfigId(builder, entity_config_id);
    MonsterDetection.AddShowReward(builder, show_reward);
    MonsterDetection.AddName(builder, nameOffset);
    MonsterDetection.AddMarkId(builder, mark_id);
    MonsterDetection.AddBlueprintType(builder, blueprint_typeOffset);
    MonsterDetection.AddId(builder, id);
    return MonsterDetection.EndMonsterDetection(builder);
  }

  public static void StartMonsterDetection(FlatBufferBuilder builder) { builder.StartTable(17); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddBlueprintType(FlatBufferBuilder builder, StringOffset blueprintTypeOffset) { builder.AddOffset(1, blueprintTypeOffset.Value, 0); }
  public static void AddMarkId(FlatBufferBuilder builder, int markId) { builder.AddInt(2, markId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddShowReward(FlatBufferBuilder builder, int showReward) { builder.AddInt(4, showReward, 0); }
  public static void AddEntityConfigId(FlatBufferBuilder builder, int entityConfigId) { builder.AddInt(5, entityConfigId, 0); }
  public static void AddDangerType(FlatBufferBuilder builder, int dangerType) { builder.AddInt(6, dangerType, 0); }
  public static void AddTypeDescription2(FlatBufferBuilder builder, int typeDescription2) { builder.AddInt(7, typeDescription2, 0); }
  public static void AddAttributesDescriptionLock(FlatBufferBuilder builder, StringOffset attributesDescriptionLockOffset) { builder.AddOffset(8, attributesDescriptionLockOffset.Value, 0); }
  public static void AddAttributesDescriptionUnlock(FlatBufferBuilder builder, StringOffset attributesDescriptionUnlockOffset) { builder.AddOffset(9, attributesDescriptionUnlockOffset.Value, 0); }
  public static void AddBigIcon(FlatBufferBuilder builder, StringOffset bigIconOffset) { builder.AddOffset(10, bigIconOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(11, iconOffset.Value, 0); }
  public static void AddTemporaryIconUnLock(FlatBufferBuilder builder, StringOffset temporaryIconUnLockOffset) { builder.AddOffset(12, temporaryIconUnLockOffset.Value, 0); }
  public static void AddTemporaryIconlock(FlatBufferBuilder builder, StringOffset temporaryIconlockOffset) { builder.AddOffset(13, temporaryIconlockOffset.Value, 0); }
  public static void AddBeginTimeStamp(FlatBufferBuilder builder, int beginTimeStamp) { builder.AddInt(14, beginTimeStamp, 0); }
  public static void AddLockCon(FlatBufferBuilder builder, int lockCon) { builder.AddInt(15, lockCon, 0); }
  public static void AddMonsterInfoId(FlatBufferBuilder builder, int monsterInfoId) { builder.AddInt(16, monsterInfoId, 0); }
  public static Offset<WWParser.Defs.MonsterDetection> EndMonsterDetection(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MonsterDetection>(o);
  }
  public MonsterDetectionT UnPack() {
    var _o = new MonsterDetectionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MonsterDetectionT _o) {
    _o.Id = this.Id;
    _o.BlueprintType = this.BlueprintType;
    _o.MarkId = this.MarkId;
    _o.Name = this.Name;
    _o.ShowReward = this.ShowReward;
    _o.EntityConfigId = this.EntityConfigId;
    _o.DangerType = this.DangerType;
    _o.TypeDescription2 = this.TypeDescription2;
    _o.AttributesDescriptionLock = this.AttributesDescriptionLock;
    _o.AttributesDescriptionUnlock = this.AttributesDescriptionUnlock;
    _o.BigIcon = this.BigIcon;
    _o.Icon = this.Icon;
    _o.TemporaryIconUnLock = this.TemporaryIconUnLock;
    _o.TemporaryIconlock = this.TemporaryIconlock;
    _o.BeginTimeStamp = this.BeginTimeStamp;
    _o.LockCon = this.LockCon;
    _o.MonsterInfoId = this.MonsterInfoId;
  }
  public static Offset<WWParser.Defs.MonsterDetection> Pack(FlatBufferBuilder builder, MonsterDetectionT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MonsterDetection>);
    var _blueprint_type = _o.BlueprintType == null ? default(StringOffset) : builder.CreateString(_o.BlueprintType);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _attributes_description_lock = _o.AttributesDescriptionLock == null ? default(StringOffset) : builder.CreateString(_o.AttributesDescriptionLock);
    var _attributes_description_unlock = _o.AttributesDescriptionUnlock == null ? default(StringOffset) : builder.CreateString(_o.AttributesDescriptionUnlock);
    var _big_icon = _o.BigIcon == null ? default(StringOffset) : builder.CreateString(_o.BigIcon);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _temporary_icon_un_lock = _o.TemporaryIconUnLock == null ? default(StringOffset) : builder.CreateString(_o.TemporaryIconUnLock);
    var _temporary_iconlock = _o.TemporaryIconlock == null ? default(StringOffset) : builder.CreateString(_o.TemporaryIconlock);
    return CreateMonsterDetection(
      builder,
      _o.Id,
      _blueprint_type,
      _o.MarkId,
      _name,
      _o.ShowReward,
      _o.EntityConfigId,
      _o.DangerType,
      _o.TypeDescription2,
      _attributes_description_lock,
      _attributes_description_unlock,
      _big_icon,
      _icon,
      _temporary_icon_un_lock,
      _temporary_iconlock,
      _o.BeginTimeStamp,
      _o.LockCon,
      _o.MonsterInfoId);
  }
}

public class MonsterDetectionT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("blueprint_type")]
  public string BlueprintType { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_id")]
  public int MarkId { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("show_reward")]
  public int ShowReward { get; set; }
  [Newtonsoft.Json.JsonProperty("entity_config_id")]
  public int EntityConfigId { get; set; }
  [Newtonsoft.Json.JsonProperty("danger_type")]
  public int DangerType { get; set; }
  [Newtonsoft.Json.JsonProperty("type_description2")]
  public int TypeDescription2 { get; set; }
  [Newtonsoft.Json.JsonProperty("attributes_description_lock")]
  public string AttributesDescriptionLock { get; set; }
  [Newtonsoft.Json.JsonProperty("attributes_description_unlock")]
  public string AttributesDescriptionUnlock { get; set; }
  [Newtonsoft.Json.JsonProperty("big_icon")]
  public string BigIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("temporary_icon_un_lock")]
  public string TemporaryIconUnLock { get; set; }
  [Newtonsoft.Json.JsonProperty("temporary_iconlock")]
  public string TemporaryIconlock { get; set; }
  [Newtonsoft.Json.JsonProperty("begin_time_stamp")]
  public int BeginTimeStamp { get; set; }
  [Newtonsoft.Json.JsonProperty("lock_con")]
  public int LockCon { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_info_id")]
  public int MonsterInfoId { get; set; }

  public MonsterDetectionT() {
    this.Id = 0;
    this.BlueprintType = null;
    this.MarkId = 0;
    this.Name = null;
    this.ShowReward = 0;
    this.EntityConfigId = 0;
    this.DangerType = 0;
    this.TypeDescription2 = 0;
    this.AttributesDescriptionLock = null;
    this.AttributesDescriptionUnlock = null;
    this.BigIcon = null;
    this.Icon = null;
    this.TemporaryIconUnLock = null;
    this.TemporaryIconlock = null;
    this.BeginTimeStamp = 0;
    this.LockCon = 0;
    this.MonsterInfoId = 0;
  }
}


static public class MonsterDetectionVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*BlueprintType*/, false)
      && verifier.VerifyField(tablePos, 8 /*MarkId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Name*/, false)
      && verifier.VerifyField(tablePos, 12 /*ShowReward*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*EntityConfigId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*DangerType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*TypeDescription2*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*AttributesDescriptionLock*/, false)
      && verifier.VerifyString(tablePos, 22 /*AttributesDescriptionUnlock*/, false)
      && verifier.VerifyString(tablePos, 24 /*BigIcon*/, false)
      && verifier.VerifyString(tablePos, 26 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 28 /*TemporaryIconUnLock*/, false)
      && verifier.VerifyString(tablePos, 30 /*TemporaryIconlock*/, false)
      && verifier.VerifyField(tablePos, 32 /*BeginTimeStamp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*LockCon*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*MonsterInfoId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
