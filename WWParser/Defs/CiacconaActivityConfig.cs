// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CiacconaActivityConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CiacconaActivityConfig GetRootAsCiacconaActivityConfig(ByteBuffer _bb) { return GetRootAsCiacconaActivityConfig(_bb, new CiacconaActivityConfig()); }
  public static CiacconaActivityConfig GetRootAsCiacconaActivityConfig(ByteBuffer _bb, CiacconaActivityConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CiacconaActivityConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Slots(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SlotsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSlotsBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetSlotsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetSlotsArray() { return __p.__vector_as_array<int>(6); }
  public int InspirationInitValue { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InspirationMaxValue { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InspirationRecoverSec { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int LimitRewardDuration { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int State1unlockCondition { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int State2unlockCondition { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RecommendQuestId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string RecommendQuestTips { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRecommendQuestTipsBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetRecommendQuestTipsBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetRecommendQuestTipsArray() { return __p.__vector_as_array<byte>(22); }

  public static Offset<WWParser.Defs.CiacconaActivityConfig> CreateCiacconaActivityConfig(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset slotsOffset = default(VectorOffset),
      int inspiration_init_value = 0,
      int inspiration_max_value = 0,
      int inspiration_recover_sec = 1,
      int limit_reward_duration = 0,
      int state1unlock_condition = 0,
      int state2unlock_condition = 0,
      int recommend_quest_id = 0,
      StringOffset recommend_quest_tipsOffset = default(StringOffset)) {
    builder.StartTable(10);
    CiacconaActivityConfig.AddRecommendQuestTips(builder, recommend_quest_tipsOffset);
    CiacconaActivityConfig.AddRecommendQuestId(builder, recommend_quest_id);
    CiacconaActivityConfig.AddState2unlockCondition(builder, state2unlock_condition);
    CiacconaActivityConfig.AddState1unlockCondition(builder, state1unlock_condition);
    CiacconaActivityConfig.AddLimitRewardDuration(builder, limit_reward_duration);
    CiacconaActivityConfig.AddInspirationRecoverSec(builder, inspiration_recover_sec);
    CiacconaActivityConfig.AddInspirationMaxValue(builder, inspiration_max_value);
    CiacconaActivityConfig.AddInspirationInitValue(builder, inspiration_init_value);
    CiacconaActivityConfig.AddSlots(builder, slotsOffset);
    CiacconaActivityConfig.AddId(builder, id);
    return CiacconaActivityConfig.EndCiacconaActivityConfig(builder);
  }

  public static void StartCiacconaActivityConfig(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddSlots(FlatBufferBuilder builder, VectorOffset slotsOffset) { builder.AddOffset(1, slotsOffset.Value, 0); }
  public static VectorOffset CreateSlotsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSlotsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSlotsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSlotsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSlotsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInspirationInitValue(FlatBufferBuilder builder, int inspirationInitValue) { builder.AddInt(2, inspirationInitValue, 0); }
  public static void AddInspirationMaxValue(FlatBufferBuilder builder, int inspirationMaxValue) { builder.AddInt(3, inspirationMaxValue, 0); }
  public static void AddInspirationRecoverSec(FlatBufferBuilder builder, int inspirationRecoverSec) { builder.AddInt(4, inspirationRecoverSec, 1); }
  public static void AddLimitRewardDuration(FlatBufferBuilder builder, int limitRewardDuration) { builder.AddInt(5, limitRewardDuration, 0); }
  public static void AddState1unlockCondition(FlatBufferBuilder builder, int state1unlockCondition) { builder.AddInt(6, state1unlockCondition, 0); }
  public static void AddState2unlockCondition(FlatBufferBuilder builder, int state2unlockCondition) { builder.AddInt(7, state2unlockCondition, 0); }
  public static void AddRecommendQuestId(FlatBufferBuilder builder, int recommendQuestId) { builder.AddInt(8, recommendQuestId, 0); }
  public static void AddRecommendQuestTips(FlatBufferBuilder builder, StringOffset recommendQuestTipsOffset) { builder.AddOffset(9, recommendQuestTipsOffset.Value, 0); }
  public static Offset<WWParser.Defs.CiacconaActivityConfig> EndCiacconaActivityConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.CiacconaActivityConfig>(o);
  }
  public CiacconaActivityConfigT UnPack() {
    var _o = new CiacconaActivityConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CiacconaActivityConfigT _o) {
    _o.Id = this.Id;
    _o.Slots = new List<int>();
    for (var _j = 0; _j < this.SlotsLength; ++_j) {_o.Slots.Add(this.Slots(_j));}
    _o.InspirationInitValue = this.InspirationInitValue;
    _o.InspirationMaxValue = this.InspirationMaxValue;
    _o.InspirationRecoverSec = this.InspirationRecoverSec;
    _o.LimitRewardDuration = this.LimitRewardDuration;
    _o.State1unlockCondition = this.State1unlockCondition;
    _o.State2unlockCondition = this.State2unlockCondition;
    _o.RecommendQuestId = this.RecommendQuestId;
    _o.RecommendQuestTips = this.RecommendQuestTips;
  }
  public static Offset<WWParser.Defs.CiacconaActivityConfig> Pack(FlatBufferBuilder builder, CiacconaActivityConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.CiacconaActivityConfig>);
    var _slots = default(VectorOffset);
    if (_o.Slots != null) {
      var __slots = _o.Slots.ToArray();
      _slots = CreateSlotsVector(builder, __slots);
    }
    var _recommend_quest_tips = _o.RecommendQuestTips == null ? default(StringOffset) : builder.CreateString(_o.RecommendQuestTips);
    return CreateCiacconaActivityConfig(
      builder,
      _o.Id,
      _slots,
      _o.InspirationInitValue,
      _o.InspirationMaxValue,
      _o.InspirationRecoverSec,
      _o.LimitRewardDuration,
      _o.State1unlockCondition,
      _o.State2unlockCondition,
      _o.RecommendQuestId,
      _recommend_quest_tips);
  }
}

public class CiacconaActivityConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("slots")]
  public List<int> Slots { get; set; }
  [Newtonsoft.Json.JsonProperty("inspiration_init_value")]
  public int InspirationInitValue { get; set; }
  [Newtonsoft.Json.JsonProperty("inspiration_max_value")]
  public int InspirationMaxValue { get; set; }
  [Newtonsoft.Json.JsonProperty("inspiration_recover_sec")]
  public int InspirationRecoverSec { get; set; }
  [Newtonsoft.Json.JsonProperty("limit_reward_duration")]
  public int LimitRewardDuration { get; set; }
  [Newtonsoft.Json.JsonProperty("state1unlock_condition")]
  public int State1unlockCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("state2unlock_condition")]
  public int State2unlockCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("recommend_quest_id")]
  public int RecommendQuestId { get; set; }
  [Newtonsoft.Json.JsonProperty("recommend_quest_tips")]
  public string RecommendQuestTips { get; set; }

  public CiacconaActivityConfigT() {
    this.Id = 0;
    this.Slots = null;
    this.InspirationInitValue = 0;
    this.InspirationMaxValue = 0;
    this.InspirationRecoverSec = 1;
    this.LimitRewardDuration = 0;
    this.State1unlockCondition = 0;
    this.State2unlockCondition = 0;
    this.RecommendQuestId = 0;
    this.RecommendQuestTips = null;
  }
}


static public class CiacconaActivityConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Slots*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 8 /*InspirationInitValue*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*InspirationMaxValue*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*InspirationRecoverSec*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*LimitRewardDuration*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*State1unlockCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*State2unlockCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*RecommendQuestId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*RecommendQuestTips*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
