// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ExecutionConf : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ExecutionConf GetRootAsExecutionConf(ByteBuffer _bb) { return GetRootAsExecutionConf(_bb, new ExecutionConf()); }
  public static ExecutionConf GetRootAsExecutionConf(ByteBuffer _bb, ExecutionConf obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ExecutionConf __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExecutionRoleId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExecutionSkillId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string LimitExecutionTags(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LimitExecutionTagsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.ExecutionConf> CreateExecutionConf(FlatBufferBuilder builder,
      int id = 0,
      int execution_role_id = 0,
      int execution_skill_id = 0,
      VectorOffset limit_execution_tagsOffset = default(VectorOffset)) {
    builder.StartTable(4);
    ExecutionConf.AddLimitExecutionTags(builder, limit_execution_tagsOffset);
    ExecutionConf.AddExecutionSkillId(builder, execution_skill_id);
    ExecutionConf.AddExecutionRoleId(builder, execution_role_id);
    ExecutionConf.AddId(builder, id);
    return ExecutionConf.EndExecutionConf(builder);
  }

  public static void StartExecutionConf(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddExecutionRoleId(FlatBufferBuilder builder, int executionRoleId) { builder.AddInt(1, executionRoleId, 0); }
  public static void AddExecutionSkillId(FlatBufferBuilder builder, int executionSkillId) { builder.AddInt(2, executionSkillId, 0); }
  public static void AddLimitExecutionTags(FlatBufferBuilder builder, VectorOffset limitExecutionTagsOffset) { builder.AddOffset(3, limitExecutionTagsOffset.Value, 0); }
  public static VectorOffset CreateLimitExecutionTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLimitExecutionTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitExecutionTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitExecutionTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLimitExecutionTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.ExecutionConf> EndExecutionConf(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ExecutionConf>(o);
  }
  public ExecutionConfT UnPack() {
    var _o = new ExecutionConfT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ExecutionConfT _o) {
    _o.Id = this.Id;
    _o.ExecutionRoleId = this.ExecutionRoleId;
    _o.ExecutionSkillId = this.ExecutionSkillId;
    _o.LimitExecutionTags = new List<string>();
    for (var _j = 0; _j < this.LimitExecutionTagsLength; ++_j) {_o.LimitExecutionTags.Add(this.LimitExecutionTags(_j));}
  }
  public static Offset<WWParser.Defs.ExecutionConf> Pack(FlatBufferBuilder builder, ExecutionConfT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ExecutionConf>);
    var _limit_execution_tags = default(VectorOffset);
    if (_o.LimitExecutionTags != null) {
      var __limit_execution_tags = new StringOffset[_o.LimitExecutionTags.Count];
      for (var _j = 0; _j < __limit_execution_tags.Length; ++_j) { __limit_execution_tags[_j] = builder.CreateString(_o.LimitExecutionTags[_j]); }
      _limit_execution_tags = CreateLimitExecutionTagsVector(builder, __limit_execution_tags);
    }
    return CreateExecutionConf(
      builder,
      _o.Id,
      _o.ExecutionRoleId,
      _o.ExecutionSkillId,
      _limit_execution_tags);
  }
}

public class ExecutionConfT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("execution_role_id")]
  public int ExecutionRoleId { get; set; }
  [Newtonsoft.Json.JsonProperty("execution_skill_id")]
  public int ExecutionSkillId { get; set; }
  [Newtonsoft.Json.JsonProperty("limit_execution_tags")]
  public List<string> LimitExecutionTags { get; set; }

  public ExecutionConfT() {
    this.Id = 0;
    this.ExecutionRoleId = 0;
    this.ExecutionSkillId = 0;
    this.LimitExecutionTags = null;
  }
}


static public class ExecutionConfVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ExecutionRoleId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ExecutionSkillId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*LimitExecutionTags*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
