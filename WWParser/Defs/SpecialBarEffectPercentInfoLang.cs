// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SpecialBarEffectPercentInfoLang : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SpecialBarEffectPercentInfoLang GetRootAsSpecialBarEffectPercentInfoLang(ByteBuffer _bb) { return GetRootAsSpecialBarEffectPercentInfoLang(_bb, new SpecialBarEffectPercentInfoLang()); }
  public static SpecialBarEffectPercentInfoLang GetRootAsSpecialBarEffectPercentInfoLang(ByteBuffer _bb, SpecialBarEffectPercentInfoLang obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SpecialBarEffectPercentInfoLang __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MinPercent { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxPercent { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float MinValue { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MaxValue { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int FloatParameterName { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.SpecialBarEffectPercentInfoLang> CreateSpecialBarEffectPercentInfoLang(FlatBufferBuilder builder,
      int min_percent = 0,
      int max_percent = 0,
      float min_value = 0.0f,
      float max_value = 0.0f,
      int float_parameter_name = 0) {
    builder.StartTable(5);
    SpecialBarEffectPercentInfoLang.AddFloatParameterName(builder, float_parameter_name);
    SpecialBarEffectPercentInfoLang.AddMaxValue(builder, max_value);
    SpecialBarEffectPercentInfoLang.AddMinValue(builder, min_value);
    SpecialBarEffectPercentInfoLang.AddMaxPercent(builder, max_percent);
    SpecialBarEffectPercentInfoLang.AddMinPercent(builder, min_percent);
    return SpecialBarEffectPercentInfoLang.EndSpecialBarEffectPercentInfoLang(builder);
  }

  public static void StartSpecialBarEffectPercentInfoLang(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddMinPercent(FlatBufferBuilder builder, int minPercent) { builder.AddInt(0, minPercent, 0); }
  public static void AddMaxPercent(FlatBufferBuilder builder, int maxPercent) { builder.AddInt(1, maxPercent, 0); }
  public static void AddMinValue(FlatBufferBuilder builder, float minValue) { builder.AddFloat(2, minValue, 0.0f); }
  public static void AddMaxValue(FlatBufferBuilder builder, float maxValue) { builder.AddFloat(3, maxValue, 0.0f); }
  public static void AddFloatParameterName(FlatBufferBuilder builder, int floatParameterName) { builder.AddInt(4, floatParameterName, 0); }
  public static Offset<WWParser.Defs.SpecialBarEffectPercentInfoLang> EndSpecialBarEffectPercentInfoLang(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SpecialBarEffectPercentInfoLang>(o);
  }
  public SpecialBarEffectPercentInfoLangT UnPack() {
    var _o = new SpecialBarEffectPercentInfoLangT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SpecialBarEffectPercentInfoLangT _o) {
    _o.MinPercent = this.MinPercent;
    _o.MaxPercent = this.MaxPercent;
    _o.MinValue = this.MinValue;
    _o.MaxValue = this.MaxValue;
    _o.FloatParameterName = this.FloatParameterName;
  }
  public static Offset<WWParser.Defs.SpecialBarEffectPercentInfoLang> Pack(FlatBufferBuilder builder, SpecialBarEffectPercentInfoLangT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SpecialBarEffectPercentInfoLang>);
    return CreateSpecialBarEffectPercentInfoLang(
      builder,
      _o.MinPercent,
      _o.MaxPercent,
      _o.MinValue,
      _o.MaxValue,
      _o.FloatParameterName);
  }
}

public class SpecialBarEffectPercentInfoLangT
{
  [Newtonsoft.Json.JsonProperty("min_percent")]
  public int MinPercent { get; set; }
  [Newtonsoft.Json.JsonProperty("max_percent")]
  public int MaxPercent { get; set; }
  [Newtonsoft.Json.JsonProperty("min_value")]
  public float MinValue { get; set; }
  [Newtonsoft.Json.JsonProperty("max_value")]
  public float MaxValue { get; set; }
  [Newtonsoft.Json.JsonProperty("float_parameter_name")]
  public int FloatParameterName { get; set; }

  public SpecialBarEffectPercentInfoLangT() {
    this.MinPercent = 0;
    this.MaxPercent = 0;
    this.MinValue = 0.0f;
    this.MaxValue = 0.0f;
    this.FloatParameterName = 0;
  }
}


static public class SpecialBarEffectPercentInfoLangVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*MinPercent*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MaxPercent*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*MinValue*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*MaxValue*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*FloatParameterName*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
