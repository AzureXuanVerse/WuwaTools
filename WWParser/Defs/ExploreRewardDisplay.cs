// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ExploreRewardDisplay : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ExploreRewardDisplay GetRootAsExploreRewardDisplay(ByteBuffer _bb) { return GetRootAsExploreRewardDisplay(_bb, new ExploreRewardDisplay()); }
  public static ExploreRewardDisplay GetRootAsExploreRewardDisplay(ByteBuffer _bb, ExploreRewardDisplay obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ExploreRewardDisplay __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(6); }
  public string TitleHexColor { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleHexColorBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTitleHexColorBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTitleHexColorArray() { return __p.__vector_as_array<byte>(8); }
  public string TitleIconPath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleIconPathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTitleIconPathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTitleIconPathArray() { return __p.__vector_as_array<byte>(10); }
  public string TitleIconHexColor { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleIconHexColorBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTitleIconHexColorBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTitleIconHexColorArray() { return __p.__vector_as_array<byte>(12); }
  public bool IsRecordVisible { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsItemVisible { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsExploreProgressVisible { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ExploreBarTipsTextId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExploreBarTipsTextIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetExploreBarTipsTextIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetExploreBarTipsTextIdArray() { return __p.__vector_as_array<byte>(20); }
  public bool IsDescription { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Description { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(24); }
  public bool IsSuccess { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string AudioId { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAudioIdBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetAudioIdBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetAudioIdArray() { return __p.__vector_as_array<byte>(28); }

  public static Offset<WWParser.Defs.ExploreRewardDisplay> CreateExploreRewardDisplay(FlatBufferBuilder builder,
      int id = 0,
      StringOffset titleOffset = default(StringOffset),
      StringOffset title_hex_colorOffset = default(StringOffset),
      StringOffset title_icon_pathOffset = default(StringOffset),
      StringOffset title_icon_hex_colorOffset = default(StringOffset),
      bool is_record_visible = false,
      bool is_item_visible = false,
      bool is_explore_progress_visible = false,
      StringOffset explore_bar_tips_text_idOffset = default(StringOffset),
      bool is_description = false,
      StringOffset descriptionOffset = default(StringOffset),
      bool is_success = false,
      StringOffset audio_idOffset = default(StringOffset)) {
    builder.StartTable(13);
    ExploreRewardDisplay.AddAudioId(builder, audio_idOffset);
    ExploreRewardDisplay.AddDescription(builder, descriptionOffset);
    ExploreRewardDisplay.AddExploreBarTipsTextId(builder, explore_bar_tips_text_idOffset);
    ExploreRewardDisplay.AddTitleIconHexColor(builder, title_icon_hex_colorOffset);
    ExploreRewardDisplay.AddTitleIconPath(builder, title_icon_pathOffset);
    ExploreRewardDisplay.AddTitleHexColor(builder, title_hex_colorOffset);
    ExploreRewardDisplay.AddTitle(builder, titleOffset);
    ExploreRewardDisplay.AddId(builder, id);
    ExploreRewardDisplay.AddIsSuccess(builder, is_success);
    ExploreRewardDisplay.AddIsDescription(builder, is_description);
    ExploreRewardDisplay.AddIsExploreProgressVisible(builder, is_explore_progress_visible);
    ExploreRewardDisplay.AddIsItemVisible(builder, is_item_visible);
    ExploreRewardDisplay.AddIsRecordVisible(builder, is_record_visible);
    return ExploreRewardDisplay.EndExploreRewardDisplay(builder);
  }

  public static void StartExploreRewardDisplay(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(1, titleOffset.Value, 0); }
  public static void AddTitleHexColor(FlatBufferBuilder builder, StringOffset titleHexColorOffset) { builder.AddOffset(2, titleHexColorOffset.Value, 0); }
  public static void AddTitleIconPath(FlatBufferBuilder builder, StringOffset titleIconPathOffset) { builder.AddOffset(3, titleIconPathOffset.Value, 0); }
  public static void AddTitleIconHexColor(FlatBufferBuilder builder, StringOffset titleIconHexColorOffset) { builder.AddOffset(4, titleIconHexColorOffset.Value, 0); }
  public static void AddIsRecordVisible(FlatBufferBuilder builder, bool isRecordVisible) { builder.AddBool(5, isRecordVisible, false); }
  public static void AddIsItemVisible(FlatBufferBuilder builder, bool isItemVisible) { builder.AddBool(6, isItemVisible, false); }
  public static void AddIsExploreProgressVisible(FlatBufferBuilder builder, bool isExploreProgressVisible) { builder.AddBool(7, isExploreProgressVisible, false); }
  public static void AddExploreBarTipsTextId(FlatBufferBuilder builder, StringOffset exploreBarTipsTextIdOffset) { builder.AddOffset(8, exploreBarTipsTextIdOffset.Value, 0); }
  public static void AddIsDescription(FlatBufferBuilder builder, bool isDescription) { builder.AddBool(9, isDescription, false); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(10, descriptionOffset.Value, 0); }
  public static void AddIsSuccess(FlatBufferBuilder builder, bool isSuccess) { builder.AddBool(11, isSuccess, false); }
  public static void AddAudioId(FlatBufferBuilder builder, StringOffset audioIdOffset) { builder.AddOffset(12, audioIdOffset.Value, 0); }
  public static Offset<WWParser.Defs.ExploreRewardDisplay> EndExploreRewardDisplay(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ExploreRewardDisplay>(o);
  }
  public ExploreRewardDisplayT UnPack() {
    var _o = new ExploreRewardDisplayT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ExploreRewardDisplayT _o) {
    _o.Id = this.Id;
    _o.Title = this.Title;
    _o.TitleHexColor = this.TitleHexColor;
    _o.TitleIconPath = this.TitleIconPath;
    _o.TitleIconHexColor = this.TitleIconHexColor;
    _o.IsRecordVisible = this.IsRecordVisible;
    _o.IsItemVisible = this.IsItemVisible;
    _o.IsExploreProgressVisible = this.IsExploreProgressVisible;
    _o.ExploreBarTipsTextId = this.ExploreBarTipsTextId;
    _o.IsDescription = this.IsDescription;
    _o.Description = this.Description;
    _o.IsSuccess = this.IsSuccess;
    _o.AudioId = this.AudioId;
  }
  public static Offset<WWParser.Defs.ExploreRewardDisplay> Pack(FlatBufferBuilder builder, ExploreRewardDisplayT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ExploreRewardDisplay>);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _title_hex_color = _o.TitleHexColor == null ? default(StringOffset) : builder.CreateString(_o.TitleHexColor);
    var _title_icon_path = _o.TitleIconPath == null ? default(StringOffset) : builder.CreateString(_o.TitleIconPath);
    var _title_icon_hex_color = _o.TitleIconHexColor == null ? default(StringOffset) : builder.CreateString(_o.TitleIconHexColor);
    var _explore_bar_tips_text_id = _o.ExploreBarTipsTextId == null ? default(StringOffset) : builder.CreateString(_o.ExploreBarTipsTextId);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _audio_id = _o.AudioId == null ? default(StringOffset) : builder.CreateString(_o.AudioId);
    return CreateExploreRewardDisplay(
      builder,
      _o.Id,
      _title,
      _title_hex_color,
      _title_icon_path,
      _title_icon_hex_color,
      _o.IsRecordVisible,
      _o.IsItemVisible,
      _o.IsExploreProgressVisible,
      _explore_bar_tips_text_id,
      _o.IsDescription,
      _description,
      _o.IsSuccess,
      _audio_id);
  }
}

public class ExploreRewardDisplayT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("title_hex_color")]
  public string TitleHexColor { get; set; }
  [Newtonsoft.Json.JsonProperty("title_icon_path")]
  public string TitleIconPath { get; set; }
  [Newtonsoft.Json.JsonProperty("title_icon_hex_color")]
  public string TitleIconHexColor { get; set; }
  [Newtonsoft.Json.JsonProperty("is_record_visible")]
  public bool IsRecordVisible { get; set; }
  [Newtonsoft.Json.JsonProperty("is_item_visible")]
  public bool IsItemVisible { get; set; }
  [Newtonsoft.Json.JsonProperty("is_explore_progress_visible")]
  public bool IsExploreProgressVisible { get; set; }
  [Newtonsoft.Json.JsonProperty("explore_bar_tips_text_id")]
  public string ExploreBarTipsTextId { get; set; }
  [Newtonsoft.Json.JsonProperty("is_description")]
  public bool IsDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("description")]
  public string Description { get; set; }
  [Newtonsoft.Json.JsonProperty("is_success")]
  public bool IsSuccess { get; set; }
  [Newtonsoft.Json.JsonProperty("audio_id")]
  public string AudioId { get; set; }

  public ExploreRewardDisplayT() {
    this.Id = 0;
    this.Title = null;
    this.TitleHexColor = null;
    this.TitleIconPath = null;
    this.TitleIconHexColor = null;
    this.IsRecordVisible = false;
    this.IsItemVisible = false;
    this.IsExploreProgressVisible = false;
    this.ExploreBarTipsTextId = null;
    this.IsDescription = false;
    this.Description = null;
    this.IsSuccess = false;
    this.AudioId = null;
  }
}


static public class ExploreRewardDisplayVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Title*/, false)
      && verifier.VerifyString(tablePos, 8 /*TitleHexColor*/, false)
      && verifier.VerifyString(tablePos, 10 /*TitleIconPath*/, false)
      && verifier.VerifyString(tablePos, 12 /*TitleIconHexColor*/, false)
      && verifier.VerifyField(tablePos, 14 /*IsRecordVisible*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*IsItemVisible*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*IsExploreProgressVisible*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 20 /*ExploreBarTipsTextId*/, false)
      && verifier.VerifyField(tablePos, 22 /*IsDescription*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 24 /*Description*/, false)
      && verifier.VerifyField(tablePos, 26 /*IsSuccess*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 28 /*AudioId*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
