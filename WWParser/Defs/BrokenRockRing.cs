// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BrokenRockRing : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BrokenRockRing GetRootAsBrokenRockRing(ByteBuffer _bb) { return GetRootAsBrokenRockRing(_bb, new BrokenRockRing()); }
  public static BrokenRockRing GetRootAsBrokenRockRing(ByteBuffer _bb, BrokenRockRing obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BrokenRockRing __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.IntArray? InvalidBox(int j) { int o = __p.__offset(6); return o != 0 ? (WWParser.Defs.IntArray?)(new WWParser.Defs.IntArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int InvalidBoxLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int RandomBox(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RandomBoxLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRandomBoxBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetRandomBoxBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetRandomBoxArray() { return __p.__vector_as_array<int>(8); }
  public int PerfectBox { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public WWParser.Defs.DicIntInt? BonusRate(int j) { int o = __p.__offset(12); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BonusRateLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int GoodScore { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)10; } }
  public int PerfectScore { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)30; } }
  public int BonusScore { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)10; } }
  public WWParser.Defs.DicIntInt? Speed(int j) { int o = __p.__offset(20); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SpeedLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int ColdTime { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)500; } }
  public int MultiBoxGroup { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int Offset(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OffsetLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetOffsetBytes() { return __p.__vector_as_span<int>(26, 4); }
#else
  public ArraySegment<byte>? GetOffsetBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public int[] GetOffsetArray() { return __p.__vector_as_array<int>(26); }
  public bool IsAnticlockwise { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.BrokenRockRing> CreateBrokenRockRing(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset invalid_boxOffset = default(VectorOffset),
      VectorOffset random_boxOffset = default(VectorOffset),
      int perfect_box = 1,
      VectorOffset bonus_rateOffset = default(VectorOffset),
      int good_score = 10,
      int perfect_score = 30,
      int bonus_score = 10,
      VectorOffset speedOffset = default(VectorOffset),
      int cold_time = 500,
      int multi_box_group = 1,
      VectorOffset offsetOffset = default(VectorOffset),
      bool is_anticlockwise = false) {
    builder.StartTable(13);
    BrokenRockRing.AddOffset(builder, offsetOffset);
    BrokenRockRing.AddMultiBoxGroup(builder, multi_box_group);
    BrokenRockRing.AddColdTime(builder, cold_time);
    BrokenRockRing.AddSpeed(builder, speedOffset);
    BrokenRockRing.AddBonusScore(builder, bonus_score);
    BrokenRockRing.AddPerfectScore(builder, perfect_score);
    BrokenRockRing.AddGoodScore(builder, good_score);
    BrokenRockRing.AddBonusRate(builder, bonus_rateOffset);
    BrokenRockRing.AddPerfectBox(builder, perfect_box);
    BrokenRockRing.AddRandomBox(builder, random_boxOffset);
    BrokenRockRing.AddInvalidBox(builder, invalid_boxOffset);
    BrokenRockRing.AddId(builder, id);
    BrokenRockRing.AddIsAnticlockwise(builder, is_anticlockwise);
    return BrokenRockRing.EndBrokenRockRing(builder);
  }

  public static void StartBrokenRockRing(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddInvalidBox(FlatBufferBuilder builder, VectorOffset invalidBoxOffset) { builder.AddOffset(1, invalidBoxOffset.Value, 0); }
  public static VectorOffset CreateInvalidBoxVector(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInvalidBoxVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInvalidBoxVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.IntArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInvalidBoxVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.IntArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInvalidBoxVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRandomBox(FlatBufferBuilder builder, VectorOffset randomBoxOffset) { builder.AddOffset(2, randomBoxOffset.Value, 0); }
  public static VectorOffset CreateRandomBoxVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRandomBoxVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRandomBoxVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRandomBoxVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRandomBoxVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPerfectBox(FlatBufferBuilder builder, int perfectBox) { builder.AddInt(3, perfectBox, 1); }
  public static void AddBonusRate(FlatBufferBuilder builder, VectorOffset bonusRateOffset) { builder.AddOffset(4, bonusRateOffset.Value, 0); }
  public static VectorOffset CreateBonusRateVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBonusRateVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusRateVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonusRateVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBonusRateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGoodScore(FlatBufferBuilder builder, int goodScore) { builder.AddInt(5, goodScore, 10); }
  public static void AddPerfectScore(FlatBufferBuilder builder, int perfectScore) { builder.AddInt(6, perfectScore, 30); }
  public static void AddBonusScore(FlatBufferBuilder builder, int bonusScore) { builder.AddInt(7, bonusScore, 10); }
  public static void AddSpeed(FlatBufferBuilder builder, VectorOffset speedOffset) { builder.AddOffset(8, speedOffset.Value, 0); }
  public static VectorOffset CreateSpeedVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSpeedVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpeedVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpeedVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpeedVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddColdTime(FlatBufferBuilder builder, int coldTime) { builder.AddInt(9, coldTime, 500); }
  public static void AddMultiBoxGroup(FlatBufferBuilder builder, int multiBoxGroup) { builder.AddInt(10, multiBoxGroup, 1); }
  public static void AddOffset(FlatBufferBuilder builder, VectorOffset offsetOffset) { builder.AddOffset(11, offsetOffset.Value, 0); }
  public static VectorOffset CreateOffsetVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOffsetVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOffsetVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOffsetVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOffsetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsAnticlockwise(FlatBufferBuilder builder, bool isAnticlockwise) { builder.AddBool(12, isAnticlockwise, false); }
  public static Offset<WWParser.Defs.BrokenRockRing> EndBrokenRockRing(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BrokenRockRing>(o);
  }
  public BrokenRockRingT UnPack() {
    var _o = new BrokenRockRingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BrokenRockRingT _o) {
    _o.Id = this.Id;
    _o.InvalidBox = new List<WWParser.Defs.IntArrayT>();
    for (var _j = 0; _j < this.InvalidBoxLength; ++_j) {_o.InvalidBox.Add(this.InvalidBox(_j).HasValue ? this.InvalidBox(_j).Value.UnPack() : null);}
    _o.RandomBox = new List<int>();
    for (var _j = 0; _j < this.RandomBoxLength; ++_j) {_o.RandomBox.Add(this.RandomBox(_j));}
    _o.PerfectBox = this.PerfectBox;
    _o.BonusRate = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.BonusRateLength; ++_j) {_o.BonusRate.Add(this.BonusRate(_j).HasValue ? this.BonusRate(_j).Value.UnPack() : null);}
    _o.GoodScore = this.GoodScore;
    _o.PerfectScore = this.PerfectScore;
    _o.BonusScore = this.BonusScore;
    _o.Speed = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.SpeedLength; ++_j) {_o.Speed.Add(this.Speed(_j).HasValue ? this.Speed(_j).Value.UnPack() : null);}
    _o.ColdTime = this.ColdTime;
    _o.MultiBoxGroup = this.MultiBoxGroup;
    _o.Offset = new List<int>();
    for (var _j = 0; _j < this.OffsetLength; ++_j) {_o.Offset.Add(this.Offset(_j));}
    _o.IsAnticlockwise = this.IsAnticlockwise;
  }
  public static Offset<WWParser.Defs.BrokenRockRing> Pack(FlatBufferBuilder builder, BrokenRockRingT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BrokenRockRing>);
    var _invalid_box = default(VectorOffset);
    if (_o.InvalidBox != null) {
      var __invalid_box = new Offset<WWParser.Defs.IntArray>[_o.InvalidBox.Count];
      for (var _j = 0; _j < __invalid_box.Length; ++_j) { __invalid_box[_j] = WWParser.Defs.IntArray.Pack(builder, _o.InvalidBox[_j]); }
      _invalid_box = CreateInvalidBoxVector(builder, __invalid_box);
    }
    var _random_box = default(VectorOffset);
    if (_o.RandomBox != null) {
      var __random_box = _o.RandomBox.ToArray();
      _random_box = CreateRandomBoxVector(builder, __random_box);
    }
    var _bonus_rate = default(VectorOffset);
    if (_o.BonusRate != null) {
      var __bonus_rate = new Offset<WWParser.Defs.DicIntInt>[_o.BonusRate.Count];
      for (var _j = 0; _j < __bonus_rate.Length; ++_j) { __bonus_rate[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.BonusRate[_j]); }
      _bonus_rate = CreateBonusRateVector(builder, __bonus_rate);
    }
    var _speed = default(VectorOffset);
    if (_o.Speed != null) {
      var __speed = new Offset<WWParser.Defs.DicIntInt>[_o.Speed.Count];
      for (var _j = 0; _j < __speed.Length; ++_j) { __speed[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.Speed[_j]); }
      _speed = CreateSpeedVector(builder, __speed);
    }
    var _offset = default(VectorOffset);
    if (_o.Offset != null) {
      var __offset = _o.Offset.ToArray();
      _offset = CreateOffsetVector(builder, __offset);
    }
    return CreateBrokenRockRing(
      builder,
      _o.Id,
      _invalid_box,
      _random_box,
      _o.PerfectBox,
      _bonus_rate,
      _o.GoodScore,
      _o.PerfectScore,
      _o.BonusScore,
      _speed,
      _o.ColdTime,
      _o.MultiBoxGroup,
      _offset,
      _o.IsAnticlockwise);
  }
}

public class BrokenRockRingT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("invalid_box")]
  public List<WWParser.Defs.IntArrayT> InvalidBox { get; set; }
  [Newtonsoft.Json.JsonProperty("random_box")]
  public List<int> RandomBox { get; set; }
  [Newtonsoft.Json.JsonProperty("perfect_box")]
  public int PerfectBox { get; set; }
  [Newtonsoft.Json.JsonProperty("bonus_rate")]
  public List<WWParser.Defs.DicIntIntT> BonusRate { get; set; }
  [Newtonsoft.Json.JsonProperty("good_score")]
  public int GoodScore { get; set; }
  [Newtonsoft.Json.JsonProperty("perfect_score")]
  public int PerfectScore { get; set; }
  [Newtonsoft.Json.JsonProperty("bonus_score")]
  public int BonusScore { get; set; }
  [Newtonsoft.Json.JsonProperty("speed")]
  public List<WWParser.Defs.DicIntIntT> Speed { get; set; }
  [Newtonsoft.Json.JsonProperty("cold_time")]
  public int ColdTime { get; set; }
  [Newtonsoft.Json.JsonProperty("multi_box_group")]
  public int MultiBoxGroup { get; set; }
  [Newtonsoft.Json.JsonProperty("offset")]
  public List<int> Offset { get; set; }
  [Newtonsoft.Json.JsonProperty("is_anticlockwise")]
  public bool IsAnticlockwise { get; set; }

  public BrokenRockRingT() {
    this.Id = 0;
    this.InvalidBox = null;
    this.RandomBox = null;
    this.PerfectBox = 1;
    this.BonusRate = null;
    this.GoodScore = 10;
    this.PerfectScore = 30;
    this.BonusScore = 10;
    this.Speed = null;
    this.ColdTime = 500;
    this.MultiBoxGroup = 1;
    this.Offset = null;
    this.IsAnticlockwise = false;
  }
}


static public class BrokenRockRingVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*InvalidBox*/, WWParser.Defs.IntArrayVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*RandomBox*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 10 /*PerfectBox*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 12 /*BonusRate*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 14 /*GoodScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*PerfectScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*BonusScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 20 /*Speed*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 22 /*ColdTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*MultiBoxGroup*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*Offset*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 28 /*IsAnticlockwise*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
