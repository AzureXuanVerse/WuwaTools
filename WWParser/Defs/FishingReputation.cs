// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FishingReputation : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FishingReputation GetRootAsFishingReputation(ByteBuffer _bb) { return GetRootAsFishingReputation(_bb, new FishingReputation()); }
  public static FishingReputation GetRootAsFishingReputation(ByteBuffer _bb, FishingReputation obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FishingReputation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Level { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Exp { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SailRating { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSailRatingBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSailRatingBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSailRatingArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<WWParser.Defs.FishingReputation> CreateFishingReputation(FlatBufferBuilder builder,
      int level = 0,
      int exp = 0,
      StringOffset sail_ratingOffset = default(StringOffset)) {
    builder.StartTable(3);
    FishingReputation.AddSailRating(builder, sail_ratingOffset);
    FishingReputation.AddExp(builder, exp);
    FishingReputation.AddLevel(builder, level);
    return FishingReputation.EndFishingReputation(builder);
  }

  public static void StartFishingReputation(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(0, level, 0); }
  public static void AddExp(FlatBufferBuilder builder, int exp) { builder.AddInt(1, exp, 0); }
  public static void AddSailRating(FlatBufferBuilder builder, StringOffset sailRatingOffset) { builder.AddOffset(2, sailRatingOffset.Value, 0); }
  public static Offset<WWParser.Defs.FishingReputation> EndFishingReputation(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FishingReputation>(o);
  }
  public FishingReputationT UnPack() {
    var _o = new FishingReputationT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FishingReputationT _o) {
    _o.Level = this.Level;
    _o.Exp = this.Exp;
    _o.SailRating = this.SailRating;
  }
  public static Offset<WWParser.Defs.FishingReputation> Pack(FlatBufferBuilder builder, FishingReputationT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FishingReputation>);
    var _sail_rating = _o.SailRating == null ? default(StringOffset) : builder.CreateString(_o.SailRating);
    return CreateFishingReputation(
      builder,
      _o.Level,
      _o.Exp,
      _sail_rating);
  }
}

public class FishingReputationT
{
  [Newtonsoft.Json.JsonProperty("level")]
  public int Level { get; set; }
  [Newtonsoft.Json.JsonProperty("exp")]
  public int Exp { get; set; }
  [Newtonsoft.Json.JsonProperty("sail_rating")]
  public string SailRating { get; set; }

  public FishingReputationT() {
    this.Level = 0;
    this.Exp = 0;
    this.SailRating = null;
  }
}


static public class FishingReputationVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Exp*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*SailRating*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
