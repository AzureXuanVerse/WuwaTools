// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueResGridExplore : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueResGridExplore GetRootAsRogueResGridExplore(ByteBuffer _bb) { return GetRootAsRogueResGridExplore(_bb, new RogueResGridExplore()); }
  public static RogueResGridExplore GetRootAsRogueResGridExplore(ByteBuffer _bb, RogueResGridExplore obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueResGridExplore __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string FinishCountType(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FinishCountTypeLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string CountTypea(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CountTypeaLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Desca(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DescaLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int CountTypeb(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CountTypebLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCountTypebBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetCountTypebBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetCountTypebArray() { return __p.__vector_as_array<int>(14); }
  public string Descb(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DescbLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntInt? ScoreMap(int j) { int o = __p.__offset(18); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ScoreMapLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntInt? RankMap(int j) { int o = __p.__offset(20); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RankMapLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntInt? DropMap(int j) { int o = __p.__offset(22); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DropMapLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.RogueResGridExplore> CreateRogueResGridExplore(FlatBufferBuilder builder,
      int id = 0,
      int inst_id = 0,
      VectorOffset finish_count_typeOffset = default(VectorOffset),
      VectorOffset count_typeaOffset = default(VectorOffset),
      VectorOffset descaOffset = default(VectorOffset),
      VectorOffset count_typebOffset = default(VectorOffset),
      VectorOffset descbOffset = default(VectorOffset),
      VectorOffset score_mapOffset = default(VectorOffset),
      VectorOffset rank_mapOffset = default(VectorOffset),
      VectorOffset drop_mapOffset = default(VectorOffset)) {
    builder.StartTable(10);
    RogueResGridExplore.AddDropMap(builder, drop_mapOffset);
    RogueResGridExplore.AddRankMap(builder, rank_mapOffset);
    RogueResGridExplore.AddScoreMap(builder, score_mapOffset);
    RogueResGridExplore.AddDescb(builder, descbOffset);
    RogueResGridExplore.AddCountTypeb(builder, count_typebOffset);
    RogueResGridExplore.AddDesca(builder, descaOffset);
    RogueResGridExplore.AddCountTypea(builder, count_typeaOffset);
    RogueResGridExplore.AddFinishCountType(builder, finish_count_typeOffset);
    RogueResGridExplore.AddInstId(builder, inst_id);
    RogueResGridExplore.AddId(builder, id);
    return RogueResGridExplore.EndRogueResGridExplore(builder);
  }

  public static void StartRogueResGridExplore(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddInstId(FlatBufferBuilder builder, int instId) { builder.AddInt(1, instId, 0); }
  public static void AddFinishCountType(FlatBufferBuilder builder, VectorOffset finishCountTypeOffset) { builder.AddOffset(2, finishCountTypeOffset.Value, 0); }
  public static VectorOffset CreateFinishCountTypeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFinishCountTypeVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFinishCountTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFinishCountTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFinishCountTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCountTypea(FlatBufferBuilder builder, VectorOffset countTypeaOffset) { builder.AddOffset(3, countTypeaOffset.Value, 0); }
  public static VectorOffset CreateCountTypeaVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCountTypeaVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCountTypeaVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCountTypeaVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCountTypeaVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDesca(FlatBufferBuilder builder, VectorOffset descaOffset) { builder.AddOffset(4, descaOffset.Value, 0); }
  public static VectorOffset CreateDescaVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDescaVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDescaVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDescaVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDescaVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCountTypeb(FlatBufferBuilder builder, VectorOffset countTypebOffset) { builder.AddOffset(5, countTypebOffset.Value, 0); }
  public static VectorOffset CreateCountTypebVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCountTypebVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCountTypebVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCountTypebVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCountTypebVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescb(FlatBufferBuilder builder, VectorOffset descbOffset) { builder.AddOffset(6, descbOffset.Value, 0); }
  public static VectorOffset CreateDescbVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDescbVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDescbVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDescbVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDescbVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddScoreMap(FlatBufferBuilder builder, VectorOffset scoreMapOffset) { builder.AddOffset(7, scoreMapOffset.Value, 0); }
  public static VectorOffset CreateScoreMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateScoreMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateScoreMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateScoreMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartScoreMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRankMap(FlatBufferBuilder builder, VectorOffset rankMapOffset) { builder.AddOffset(8, rankMapOffset.Value, 0); }
  public static VectorOffset CreateRankMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRankMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRankMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRankMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRankMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDropMap(FlatBufferBuilder builder, VectorOffset dropMapOffset) { builder.AddOffset(9, dropMapOffset.Value, 0); }
  public static VectorOffset CreateDropMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDropMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDropMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDropMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDropMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.RogueResGridExplore> EndRogueResGridExplore(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueResGridExplore>(o);
  }
  public RogueResGridExploreT UnPack() {
    var _o = new RogueResGridExploreT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueResGridExploreT _o) {
    _o.Id = this.Id;
    _o.InstId = this.InstId;
    _o.FinishCountType = new List<string>();
    for (var _j = 0; _j < this.FinishCountTypeLength; ++_j) {_o.FinishCountType.Add(this.FinishCountType(_j));}
    _o.CountTypea = new List<string>();
    for (var _j = 0; _j < this.CountTypeaLength; ++_j) {_o.CountTypea.Add(this.CountTypea(_j));}
    _o.Desca = new List<string>();
    for (var _j = 0; _j < this.DescaLength; ++_j) {_o.Desca.Add(this.Desca(_j));}
    _o.CountTypeb = new List<int>();
    for (var _j = 0; _j < this.CountTypebLength; ++_j) {_o.CountTypeb.Add(this.CountTypeb(_j));}
    _o.Descb = new List<string>();
    for (var _j = 0; _j < this.DescbLength; ++_j) {_o.Descb.Add(this.Descb(_j));}
    _o.ScoreMap = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.ScoreMapLength; ++_j) {_o.ScoreMap.Add(this.ScoreMap(_j).HasValue ? this.ScoreMap(_j).Value.UnPack() : null);}
    _o.RankMap = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.RankMapLength; ++_j) {_o.RankMap.Add(this.RankMap(_j).HasValue ? this.RankMap(_j).Value.UnPack() : null);}
    _o.DropMap = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.DropMapLength; ++_j) {_o.DropMap.Add(this.DropMap(_j).HasValue ? this.DropMap(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.RogueResGridExplore> Pack(FlatBufferBuilder builder, RogueResGridExploreT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueResGridExplore>);
    var _finish_count_type = default(VectorOffset);
    if (_o.FinishCountType != null) {
      var __finish_count_type = new StringOffset[_o.FinishCountType.Count];
      for (var _j = 0; _j < __finish_count_type.Length; ++_j) { __finish_count_type[_j] = builder.CreateString(_o.FinishCountType[_j]); }
      _finish_count_type = CreateFinishCountTypeVector(builder, __finish_count_type);
    }
    var _count_typea = default(VectorOffset);
    if (_o.CountTypea != null) {
      var __count_typea = new StringOffset[_o.CountTypea.Count];
      for (var _j = 0; _j < __count_typea.Length; ++_j) { __count_typea[_j] = builder.CreateString(_o.CountTypea[_j]); }
      _count_typea = CreateCountTypeaVector(builder, __count_typea);
    }
    var _desca = default(VectorOffset);
    if (_o.Desca != null) {
      var __desca = new StringOffset[_o.Desca.Count];
      for (var _j = 0; _j < __desca.Length; ++_j) { __desca[_j] = builder.CreateString(_o.Desca[_j]); }
      _desca = CreateDescaVector(builder, __desca);
    }
    var _count_typeb = default(VectorOffset);
    if (_o.CountTypeb != null) {
      var __count_typeb = _o.CountTypeb.ToArray();
      _count_typeb = CreateCountTypebVector(builder, __count_typeb);
    }
    var _descb = default(VectorOffset);
    if (_o.Descb != null) {
      var __descb = new StringOffset[_o.Descb.Count];
      for (var _j = 0; _j < __descb.Length; ++_j) { __descb[_j] = builder.CreateString(_o.Descb[_j]); }
      _descb = CreateDescbVector(builder, __descb);
    }
    var _score_map = default(VectorOffset);
    if (_o.ScoreMap != null) {
      var __score_map = new Offset<WWParser.Defs.DicIntInt>[_o.ScoreMap.Count];
      for (var _j = 0; _j < __score_map.Length; ++_j) { __score_map[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.ScoreMap[_j]); }
      _score_map = CreateScoreMapVector(builder, __score_map);
    }
    var _rank_map = default(VectorOffset);
    if (_o.RankMap != null) {
      var __rank_map = new Offset<WWParser.Defs.DicIntInt>[_o.RankMap.Count];
      for (var _j = 0; _j < __rank_map.Length; ++_j) { __rank_map[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.RankMap[_j]); }
      _rank_map = CreateRankMapVector(builder, __rank_map);
    }
    var _drop_map = default(VectorOffset);
    if (_o.DropMap != null) {
      var __drop_map = new Offset<WWParser.Defs.DicIntInt>[_o.DropMap.Count];
      for (var _j = 0; _j < __drop_map.Length; ++_j) { __drop_map[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.DropMap[_j]); }
      _drop_map = CreateDropMapVector(builder, __drop_map);
    }
    return CreateRogueResGridExplore(
      builder,
      _o.Id,
      _o.InstId,
      _finish_count_type,
      _count_typea,
      _desca,
      _count_typeb,
      _descb,
      _score_map,
      _rank_map,
      _drop_map);
  }
}

public class RogueResGridExploreT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("inst_id")]
  public int InstId { get; set; }
  [Newtonsoft.Json.JsonProperty("finish_count_type")]
  public List<string> FinishCountType { get; set; }
  [Newtonsoft.Json.JsonProperty("count_typea")]
  public List<string> CountTypea { get; set; }
  [Newtonsoft.Json.JsonProperty("desca")]
  public List<string> Desca { get; set; }
  [Newtonsoft.Json.JsonProperty("count_typeb")]
  public List<int> CountTypeb { get; set; }
  [Newtonsoft.Json.JsonProperty("descb")]
  public List<string> Descb { get; set; }
  [Newtonsoft.Json.JsonProperty("score_map")]
  public List<WWParser.Defs.DicIntIntT> ScoreMap { get; set; }
  [Newtonsoft.Json.JsonProperty("rank_map")]
  public List<WWParser.Defs.DicIntIntT> RankMap { get; set; }
  [Newtonsoft.Json.JsonProperty("drop_map")]
  public List<WWParser.Defs.DicIntIntT> DropMap { get; set; }

  public RogueResGridExploreT() {
    this.Id = 0;
    this.InstId = 0;
    this.FinishCountType = null;
    this.CountTypea = null;
    this.Desca = null;
    this.CountTypeb = null;
    this.Descb = null;
    this.ScoreMap = null;
    this.RankMap = null;
    this.DropMap = null;
  }
}


static public class RogueResGridExploreVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*InstId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*FinishCountType*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*CountTypea*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*Desca*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*CountTypeb*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 16 /*Descb*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 18 /*ScoreMap*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 20 /*RankMap*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 22 /*DropMap*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
