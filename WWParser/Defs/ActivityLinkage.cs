// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ActivityLinkage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ActivityLinkage GetRootAsActivityLinkage(ByteBuffer _bb) { return GetRootAsActivityLinkage(_bb, new ActivityLinkage()); }
  public static ActivityLinkage GetRootAsActivityLinkage(ByteBuffer _bb, ActivityLinkage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ActivityLinkage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Index { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TabName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTabNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTabNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTabNameArray() { return __p.__vector_as_array<byte>(10); }
  public bool Show { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public WWParser.Defs.DicIntInt? Reward(int j) { int o = __p.__offset(14); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RewardLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Rank { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BgImage { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgImageBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetBgImageBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetBgImageArray() { return __p.__vector_as_array<byte>(18); }
  public string SmallImage { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSmallImageBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetSmallImageBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetSmallImageArray() { return __p.__vector_as_array<byte>(20); }

  public static Offset<WWParser.Defs.ActivityLinkage> CreateActivityLinkage(FlatBufferBuilder builder,
      int id = 0,
      int activity_id = 0,
      int index = 0,
      StringOffset tab_nameOffset = default(StringOffset),
      bool show = false,
      VectorOffset rewardOffset = default(VectorOffset),
      int rank = 0,
      StringOffset bg_imageOffset = default(StringOffset),
      StringOffset small_imageOffset = default(StringOffset)) {
    builder.StartTable(9);
    ActivityLinkage.AddSmallImage(builder, small_imageOffset);
    ActivityLinkage.AddBgImage(builder, bg_imageOffset);
    ActivityLinkage.AddRank(builder, rank);
    ActivityLinkage.AddReward(builder, rewardOffset);
    ActivityLinkage.AddTabName(builder, tab_nameOffset);
    ActivityLinkage.AddIndex(builder, index);
    ActivityLinkage.AddActivityId(builder, activity_id);
    ActivityLinkage.AddId(builder, id);
    ActivityLinkage.AddShow(builder, show);
    return ActivityLinkage.EndActivityLinkage(builder);
  }

  public static void StartActivityLinkage(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddIndex(FlatBufferBuilder builder, int index) { builder.AddInt(2, index, 0); }
  public static void AddTabName(FlatBufferBuilder builder, StringOffset tabNameOffset) { builder.AddOffset(3, tabNameOffset.Value, 0); }
  public static void AddShow(FlatBufferBuilder builder, bool show) { builder.AddBool(4, show, false); }
  public static void AddReward(FlatBufferBuilder builder, VectorOffset rewardOffset) { builder.AddOffset(5, rewardOffset.Value, 0); }
  public static VectorOffset CreateRewardVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRewardVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRank(FlatBufferBuilder builder, int rank) { builder.AddInt(6, rank, 0); }
  public static void AddBgImage(FlatBufferBuilder builder, StringOffset bgImageOffset) { builder.AddOffset(7, bgImageOffset.Value, 0); }
  public static void AddSmallImage(FlatBufferBuilder builder, StringOffset smallImageOffset) { builder.AddOffset(8, smallImageOffset.Value, 0); }
  public static Offset<WWParser.Defs.ActivityLinkage> EndActivityLinkage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ActivityLinkage>(o);
  }
  public ActivityLinkageT UnPack() {
    var _o = new ActivityLinkageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ActivityLinkageT _o) {
    _o.Id = this.Id;
    _o.ActivityId = this.ActivityId;
    _o.Index = this.Index;
    _o.TabName = this.TabName;
    _o.Show = this.Show;
    _o.Reward = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.RewardLength; ++_j) {_o.Reward.Add(this.Reward(_j).HasValue ? this.Reward(_j).Value.UnPack() : null);}
    _o.Rank = this.Rank;
    _o.BgImage = this.BgImage;
    _o.SmallImage = this.SmallImage;
  }
  public static Offset<WWParser.Defs.ActivityLinkage> Pack(FlatBufferBuilder builder, ActivityLinkageT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ActivityLinkage>);
    var _tab_name = _o.TabName == null ? default(StringOffset) : builder.CreateString(_o.TabName);
    var _reward = default(VectorOffset);
    if (_o.Reward != null) {
      var __reward = new Offset<WWParser.Defs.DicIntInt>[_o.Reward.Count];
      for (var _j = 0; _j < __reward.Length; ++_j) { __reward[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.Reward[_j]); }
      _reward = CreateRewardVector(builder, __reward);
    }
    var _bg_image = _o.BgImage == null ? default(StringOffset) : builder.CreateString(_o.BgImage);
    var _small_image = _o.SmallImage == null ? default(StringOffset) : builder.CreateString(_o.SmallImage);
    return CreateActivityLinkage(
      builder,
      _o.Id,
      _o.ActivityId,
      _o.Index,
      _tab_name,
      _o.Show,
      _reward,
      _o.Rank,
      _bg_image,
      _small_image);
  }
}

public class ActivityLinkageT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("index")]
  public int Index { get; set; }
  [Newtonsoft.Json.JsonProperty("tab_name")]
  public string TabName { get; set; }
  [Newtonsoft.Json.JsonProperty("show")]
  public bool Show { get; set; }
  [Newtonsoft.Json.JsonProperty("reward")]
  public List<WWParser.Defs.DicIntIntT> Reward { get; set; }
  [Newtonsoft.Json.JsonProperty("rank")]
  public int Rank { get; set; }
  [Newtonsoft.Json.JsonProperty("bg_image")]
  public string BgImage { get; set; }
  [Newtonsoft.Json.JsonProperty("small_image")]
  public string SmallImage { get; set; }

  public ActivityLinkageT() {
    this.Id = 0;
    this.ActivityId = 0;
    this.Index = 0;
    this.TabName = null;
    this.Show = false;
    this.Reward = null;
    this.Rank = 0;
    this.BgImage = null;
    this.SmallImage = null;
  }
}


static public class ActivityLinkageVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Index*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*TabName*/, false)
      && verifier.VerifyField(tablePos, 12 /*Show*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfTables(tablePos, 14 /*Reward*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 16 /*Rank*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*BgImage*/, false)
      && verifier.VerifyString(tablePos, 20 /*SmallImage*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
