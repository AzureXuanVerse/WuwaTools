// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Flow : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Flow GetRootAsFlow(ByteBuffer _bb) { return GetRootAsFlow(_bb, new Flow()); }
  public static Flow GetRootAsFlow(ByteBuffer _bb, Flow obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Flow __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public int DungeonId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int States(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int StatesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetStatesBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetStatesBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetStatesArray() { return __p.__vector_as_array<int>(8); }

  public static Offset<WWParser.Defs.Flow> CreateFlow(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      int dungeon_id = 0,
      VectorOffset statesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    Flow.AddStates(builder, statesOffset);
    Flow.AddDungeonId(builder, dungeon_id);
    Flow.AddId(builder, idOffset);
    return Flow.EndFlow(builder);
  }

  public static void StartFlow(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddDungeonId(FlatBufferBuilder builder, int dungeonId) { builder.AddInt(1, dungeonId, 0); }
  public static void AddStates(FlatBufferBuilder builder, VectorOffset statesOffset) { builder.AddOffset(2, statesOffset.Value, 0); }
  public static VectorOffset CreateStatesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStatesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatesVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.Flow> EndFlow(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Flow>(o);
  }
  public FlowT UnPack() {
    var _o = new FlowT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FlowT _o) {
    _o.Id = this.Id;
    _o.DungeonId = this.DungeonId;
    _o.States = new List<int>();
    for (var _j = 0; _j < this.StatesLength; ++_j) {_o.States.Add(this.States(_j));}
  }
  public static Offset<WWParser.Defs.Flow> Pack(FlatBufferBuilder builder, FlowT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Flow>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _states = default(VectorOffset);
    if (_o.States != null) {
      var __states = _o.States.ToArray();
      _states = CreateStatesVector(builder, __states);
    }
    return CreateFlow(
      builder,
      _id,
      _o.DungeonId,
      _states);
  }
}

public class FlowT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("dungeon_id")]
  public int DungeonId { get; set; }
  [Newtonsoft.Json.JsonProperty("states")]
  public List<int> States { get; set; }

  public FlowT() {
    this.Id = null;
    this.DungeonId = 0;
    this.States = null;
  }
}


static public class FlowVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyField(tablePos, 6 /*DungeonId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*States*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
