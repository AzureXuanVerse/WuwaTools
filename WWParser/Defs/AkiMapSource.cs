// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AkiMapSource : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AkiMapSource GetRootAsAkiMapSource(ByteBuffer _bb) { return GetRootAsAkiMapSource(_bb, new AkiMapSource()); }
  public static AkiMapSource GetRootAsAkiMapSource(ByteBuffer _bb, AkiMapSource obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AkiMapSource __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MapId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PakRule { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MapPath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapPathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMapPathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMapPathArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<WWParser.Defs.AkiMapSource> CreateAkiMapSource(FlatBufferBuilder builder,
      int map_id = 0,
      int pak_rule = 0,
      StringOffset map_pathOffset = default(StringOffset)) {
    builder.StartTable(3);
    AkiMapSource.AddMapPath(builder, map_pathOffset);
    AkiMapSource.AddPakRule(builder, pak_rule);
    AkiMapSource.AddMapId(builder, map_id);
    return AkiMapSource.EndAkiMapSource(builder);
  }

  public static void StartAkiMapSource(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddMapId(FlatBufferBuilder builder, int mapId) { builder.AddInt(0, mapId, 0); }
  public static void AddPakRule(FlatBufferBuilder builder, int pakRule) { builder.AddInt(1, pakRule, 0); }
  public static void AddMapPath(FlatBufferBuilder builder, StringOffset mapPathOffset) { builder.AddOffset(2, mapPathOffset.Value, 0); }
  public static Offset<WWParser.Defs.AkiMapSource> EndAkiMapSource(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AkiMapSource>(o);
  }
  public AkiMapSourceT UnPack() {
    var _o = new AkiMapSourceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AkiMapSourceT _o) {
    _o.MapId = this.MapId;
    _o.PakRule = this.PakRule;
    _o.MapPath = this.MapPath;
  }
  public static Offset<WWParser.Defs.AkiMapSource> Pack(FlatBufferBuilder builder, AkiMapSourceT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AkiMapSource>);
    var _map_path = _o.MapPath == null ? default(StringOffset) : builder.CreateString(_o.MapPath);
    return CreateAkiMapSource(
      builder,
      _o.MapId,
      _o.PakRule,
      _map_path);
  }
}

public class AkiMapSourceT
{
  [Newtonsoft.Json.JsonProperty("map_id")]
  public int MapId { get; set; }
  [Newtonsoft.Json.JsonProperty("pak_rule")]
  public int PakRule { get; set; }
  [Newtonsoft.Json.JsonProperty("map_path")]
  public string MapPath { get; set; }

  public AkiMapSourceT() {
    this.MapId = 0;
    this.PakRule = 0;
    this.MapPath = null;
  }
}


static public class AkiMapSourceVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*MapId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*PakRule*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*MapPath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
