// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RacingBetsGroupMatch : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RacingBetsGroupMatch GetRootAsRacingBetsGroupMatch(ByteBuffer _bb) { return GetRootAsRacingBetsGroupMatch(_bb, new RacingBetsGroupMatch()); }
  public static RacingBetsGroupMatch GetRootAsRacingBetsGroupMatch(ByteBuffer _bb, RacingBetsGroupMatch obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RacingBetsGroupMatch __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SeasonId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SortId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(12); }
  public int LegMatches(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LegMatchesLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLegMatchesBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetLegMatchesBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetLegMatchesArray() { return __p.__vector_as_array<int>(14); }
  public int DangoList(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DangoListLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDangoListBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetDangoListBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetDangoListArray() { return __p.__vector_as_array<int>(16); }
  public int AdvancedDangoCount { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NextMatchId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.RacingBetsGroupMatch> CreateRacingBetsGroupMatch(FlatBufferBuilder builder,
      int id = 0,
      int season_id = 0,
      int type = 0,
      int sort_id = 0,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset leg_matchesOffset = default(VectorOffset),
      VectorOffset dango_listOffset = default(VectorOffset),
      int advanced_dango_count = 0,
      int next_match_id = 0) {
    builder.StartTable(9);
    RacingBetsGroupMatch.AddNextMatchId(builder, next_match_id);
    RacingBetsGroupMatch.AddAdvancedDangoCount(builder, advanced_dango_count);
    RacingBetsGroupMatch.AddDangoList(builder, dango_listOffset);
    RacingBetsGroupMatch.AddLegMatches(builder, leg_matchesOffset);
    RacingBetsGroupMatch.AddName(builder, nameOffset);
    RacingBetsGroupMatch.AddSortId(builder, sort_id);
    RacingBetsGroupMatch.AddType(builder, type);
    RacingBetsGroupMatch.AddSeasonId(builder, season_id);
    RacingBetsGroupMatch.AddId(builder, id);
    return RacingBetsGroupMatch.EndRacingBetsGroupMatch(builder);
  }

  public static void StartRacingBetsGroupMatch(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddSeasonId(FlatBufferBuilder builder, int seasonId) { builder.AddInt(1, seasonId, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(2, type, 0); }
  public static void AddSortId(FlatBufferBuilder builder, int sortId) { builder.AddInt(3, sortId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(4, nameOffset.Value, 0); }
  public static void AddLegMatches(FlatBufferBuilder builder, VectorOffset legMatchesOffset) { builder.AddOffset(5, legMatchesOffset.Value, 0); }
  public static VectorOffset CreateLegMatchesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLegMatchesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLegMatchesVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLegMatchesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLegMatchesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDangoList(FlatBufferBuilder builder, VectorOffset dangoListOffset) { builder.AddOffset(6, dangoListOffset.Value, 0); }
  public static VectorOffset CreateDangoListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDangoListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDangoListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDangoListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDangoListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAdvancedDangoCount(FlatBufferBuilder builder, int advancedDangoCount) { builder.AddInt(7, advancedDangoCount, 0); }
  public static void AddNextMatchId(FlatBufferBuilder builder, int nextMatchId) { builder.AddInt(8, nextMatchId, 0); }
  public static Offset<WWParser.Defs.RacingBetsGroupMatch> EndRacingBetsGroupMatch(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RacingBetsGroupMatch>(o);
  }
  public RacingBetsGroupMatchT UnPack() {
    var _o = new RacingBetsGroupMatchT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RacingBetsGroupMatchT _o) {
    _o.Id = this.Id;
    _o.SeasonId = this.SeasonId;
    _o.Type = this.Type;
    _o.SortId = this.SortId;
    _o.Name = this.Name;
    _o.LegMatches = new List<int>();
    for (var _j = 0; _j < this.LegMatchesLength; ++_j) {_o.LegMatches.Add(this.LegMatches(_j));}
    _o.DangoList = new List<int>();
    for (var _j = 0; _j < this.DangoListLength; ++_j) {_o.DangoList.Add(this.DangoList(_j));}
    _o.AdvancedDangoCount = this.AdvancedDangoCount;
    _o.NextMatchId = this.NextMatchId;
  }
  public static Offset<WWParser.Defs.RacingBetsGroupMatch> Pack(FlatBufferBuilder builder, RacingBetsGroupMatchT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RacingBetsGroupMatch>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _leg_matches = default(VectorOffset);
    if (_o.LegMatches != null) {
      var __leg_matches = _o.LegMatches.ToArray();
      _leg_matches = CreateLegMatchesVector(builder, __leg_matches);
    }
    var _dango_list = default(VectorOffset);
    if (_o.DangoList != null) {
      var __dango_list = _o.DangoList.ToArray();
      _dango_list = CreateDangoListVector(builder, __dango_list);
    }
    return CreateRacingBetsGroupMatch(
      builder,
      _o.Id,
      _o.SeasonId,
      _o.Type,
      _o.SortId,
      _name,
      _leg_matches,
      _dango_list,
      _o.AdvancedDangoCount,
      _o.NextMatchId);
  }
}

public class RacingBetsGroupMatchT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("season_id")]
  public int SeasonId { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_id")]
  public int SortId { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("leg_matches")]
  public List<int> LegMatches { get; set; }
  [Newtonsoft.Json.JsonProperty("dango_list")]
  public List<int> DangoList { get; set; }
  [Newtonsoft.Json.JsonProperty("advanced_dango_count")]
  public int AdvancedDangoCount { get; set; }
  [Newtonsoft.Json.JsonProperty("next_match_id")]
  public int NextMatchId { get; set; }

  public RacingBetsGroupMatchT() {
    this.Id = 0;
    this.SeasonId = 0;
    this.Type = 0;
    this.SortId = 0;
    this.Name = null;
    this.LegMatches = null;
    this.DangoList = null;
    this.AdvancedDangoCount = 0;
    this.NextMatchId = 0;
  }
}


static public class RacingBetsGroupMatchVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SeasonId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*SortId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*Name*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*LegMatches*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*DangoList*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 18 /*AdvancedDangoCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*NextMatchId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
