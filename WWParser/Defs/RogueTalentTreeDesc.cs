// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueTalentTreeDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueTalentTreeDesc GetRootAsRogueTalentTreeDesc(ByteBuffer _bb) { return GetRootAsRogueTalentTreeDesc(_bb, new RogueTalentTreeDesc()); }
  public static RogueTalentTreeDesc GetRootAsRogueTalentTreeDesc(ByteBuffer _bb, RogueTalentTreeDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueTalentTreeDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BaseDesc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBaseDescBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetBaseDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetBaseDescArray() { return __p.__vector_as_array<byte>(6); }
  public WWParser.Defs.IntArray? Args(int j) { int o = __p.__offset(8); return o != 0 ? (WWParser.Defs.IntArray?)(new WWParser.Defs.IntArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ArgsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string TalentIcon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTalentIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTalentIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTalentIconArray() { return __p.__vector_as_array<byte>(10); }
  public string TalentName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTalentNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTalentNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTalentNameArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<WWParser.Defs.RogueTalentTreeDesc> CreateRogueTalentTreeDesc(FlatBufferBuilder builder,
      int id = 0,
      StringOffset base_descOffset = default(StringOffset),
      VectorOffset argsOffset = default(VectorOffset),
      StringOffset talent_iconOffset = default(StringOffset),
      StringOffset talent_nameOffset = default(StringOffset)) {
    builder.StartTable(5);
    RogueTalentTreeDesc.AddTalentName(builder, talent_nameOffset);
    RogueTalentTreeDesc.AddTalentIcon(builder, talent_iconOffset);
    RogueTalentTreeDesc.AddArgs(builder, argsOffset);
    RogueTalentTreeDesc.AddBaseDesc(builder, base_descOffset);
    RogueTalentTreeDesc.AddId(builder, id);
    return RogueTalentTreeDesc.EndRogueTalentTreeDesc(builder);
  }

  public static void StartRogueTalentTreeDesc(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddBaseDesc(FlatBufferBuilder builder, StringOffset baseDescOffset) { builder.AddOffset(1, baseDescOffset.Value, 0); }
  public static void AddArgs(FlatBufferBuilder builder, VectorOffset argsOffset) { builder.AddOffset(2, argsOffset.Value, 0); }
  public static VectorOffset CreateArgsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateArgsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArgsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.IntArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArgsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.IntArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartArgsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTalentIcon(FlatBufferBuilder builder, StringOffset talentIconOffset) { builder.AddOffset(3, talentIconOffset.Value, 0); }
  public static void AddTalentName(FlatBufferBuilder builder, StringOffset talentNameOffset) { builder.AddOffset(4, talentNameOffset.Value, 0); }
  public static Offset<WWParser.Defs.RogueTalentTreeDesc> EndRogueTalentTreeDesc(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueTalentTreeDesc>(o);
  }
  public RogueTalentTreeDescT UnPack() {
    var _o = new RogueTalentTreeDescT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueTalentTreeDescT _o) {
    _o.Id = this.Id;
    _o.BaseDesc = this.BaseDesc;
    _o.Args = new List<WWParser.Defs.IntArrayT>();
    for (var _j = 0; _j < this.ArgsLength; ++_j) {_o.Args.Add(this.Args(_j).HasValue ? this.Args(_j).Value.UnPack() : null);}
    _o.TalentIcon = this.TalentIcon;
    _o.TalentName = this.TalentName;
  }
  public static Offset<WWParser.Defs.RogueTalentTreeDesc> Pack(FlatBufferBuilder builder, RogueTalentTreeDescT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueTalentTreeDesc>);
    var _base_desc = _o.BaseDesc == null ? default(StringOffset) : builder.CreateString(_o.BaseDesc);
    var _args = default(VectorOffset);
    if (_o.Args != null) {
      var __args = new Offset<WWParser.Defs.IntArray>[_o.Args.Count];
      for (var _j = 0; _j < __args.Length; ++_j) { __args[_j] = WWParser.Defs.IntArray.Pack(builder, _o.Args[_j]); }
      _args = CreateArgsVector(builder, __args);
    }
    var _talent_icon = _o.TalentIcon == null ? default(StringOffset) : builder.CreateString(_o.TalentIcon);
    var _talent_name = _o.TalentName == null ? default(StringOffset) : builder.CreateString(_o.TalentName);
    return CreateRogueTalentTreeDesc(
      builder,
      _o.Id,
      _base_desc,
      _args,
      _talent_icon,
      _talent_name);
  }
}

public class RogueTalentTreeDescT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("base_desc")]
  public string BaseDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("args")]
  public List<WWParser.Defs.IntArrayT> Args { get; set; }
  [Newtonsoft.Json.JsonProperty("talent_icon")]
  public string TalentIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("talent_name")]
  public string TalentName { get; set; }

  public RogueTalentTreeDescT() {
    this.Id = 0;
    this.BaseDesc = null;
    this.Args = null;
    this.TalentIcon = null;
    this.TalentName = null;
  }
}


static public class RogueTalentTreeDescVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*BaseDesc*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*Args*/, WWParser.Defs.IntArrayVerify.Verify, false)
      && verifier.VerifyString(tablePos, 10 /*TalentIcon*/, false)
      && verifier.VerifyString(tablePos, 12 /*TalentName*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
