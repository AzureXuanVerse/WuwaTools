// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ActionMapping : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ActionMapping GetRootAsActionMapping(ByteBuffer _bb) { return GetRootAsActionMapping(_bb, new ActionMapping()); }
  public static ActionMapping GetRootAsActionMapping(ByteBuffer _bb, ActionMapping obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ActionMapping __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ActionName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActionNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetActionNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetActionNameArray() { return __p.__vector_as_array<byte>(6); }
  public int ActionType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string PcKeys(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PcKeysLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string FrancePcKeys(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FrancePcKeysLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string GamepadKeys(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int GamepadKeysLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string MobileIconPath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMobileIconPathBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetMobileIconPathBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetMobileIconPathArray() { return __p.__vector_as_array<byte>(16); }
  public string DisplayName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDisplayNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetDisplayNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetDisplayNameArray() { return __p.__vector_as_array<byte>(18); }
  public bool IsIdleAction { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int KeyboardVersion { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GamepadVersion { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.ActionMapping> CreateActionMapping(FlatBufferBuilder builder,
      int id = 0,
      StringOffset action_nameOffset = default(StringOffset),
      int action_type = 0,
      VectorOffset pc_keysOffset = default(VectorOffset),
      VectorOffset france_pc_keysOffset = default(VectorOffset),
      VectorOffset gamepad_keysOffset = default(VectorOffset),
      StringOffset mobile_icon_pathOffset = default(StringOffset),
      StringOffset display_nameOffset = default(StringOffset),
      bool is_idle_action = false,
      int keyboard_version = 0,
      int gamepad_version = 0) {
    builder.StartTable(11);
    ActionMapping.AddGamepadVersion(builder, gamepad_version);
    ActionMapping.AddKeyboardVersion(builder, keyboard_version);
    ActionMapping.AddDisplayName(builder, display_nameOffset);
    ActionMapping.AddMobileIconPath(builder, mobile_icon_pathOffset);
    ActionMapping.AddGamepadKeys(builder, gamepad_keysOffset);
    ActionMapping.AddFrancePcKeys(builder, france_pc_keysOffset);
    ActionMapping.AddPcKeys(builder, pc_keysOffset);
    ActionMapping.AddActionType(builder, action_type);
    ActionMapping.AddActionName(builder, action_nameOffset);
    ActionMapping.AddId(builder, id);
    ActionMapping.AddIsIdleAction(builder, is_idle_action);
    return ActionMapping.EndActionMapping(builder);
  }

  public static void StartActionMapping(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActionName(FlatBufferBuilder builder, StringOffset actionNameOffset) { builder.AddOffset(1, actionNameOffset.Value, 0); }
  public static void AddActionType(FlatBufferBuilder builder, int actionType) { builder.AddInt(2, actionType, 0); }
  public static void AddPcKeys(FlatBufferBuilder builder, VectorOffset pcKeysOffset) { builder.AddOffset(3, pcKeysOffset.Value, 0); }
  public static VectorOffset CreatePcKeysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePcKeysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePcKeysVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePcKeysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPcKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFrancePcKeys(FlatBufferBuilder builder, VectorOffset francePcKeysOffset) { builder.AddOffset(4, francePcKeysOffset.Value, 0); }
  public static VectorOffset CreateFrancePcKeysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFrancePcKeysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFrancePcKeysVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFrancePcKeysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFrancePcKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGamepadKeys(FlatBufferBuilder builder, VectorOffset gamepadKeysOffset) { builder.AddOffset(5, gamepadKeysOffset.Value, 0); }
  public static VectorOffset CreateGamepadKeysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGamepadKeysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGamepadKeysVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGamepadKeysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGamepadKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMobileIconPath(FlatBufferBuilder builder, StringOffset mobileIconPathOffset) { builder.AddOffset(6, mobileIconPathOffset.Value, 0); }
  public static void AddDisplayName(FlatBufferBuilder builder, StringOffset displayNameOffset) { builder.AddOffset(7, displayNameOffset.Value, 0); }
  public static void AddIsIdleAction(FlatBufferBuilder builder, bool isIdleAction) { builder.AddBool(8, isIdleAction, false); }
  public static void AddKeyboardVersion(FlatBufferBuilder builder, int keyboardVersion) { builder.AddInt(9, keyboardVersion, 0); }
  public static void AddGamepadVersion(FlatBufferBuilder builder, int gamepadVersion) { builder.AddInt(10, gamepadVersion, 0); }
  public static Offset<WWParser.Defs.ActionMapping> EndActionMapping(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ActionMapping>(o);
  }
  public ActionMappingT UnPack() {
    var _o = new ActionMappingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ActionMappingT _o) {
    _o.Id = this.Id;
    _o.ActionName = this.ActionName;
    _o.ActionType = this.ActionType;
    _o.PcKeys = new List<string>();
    for (var _j = 0; _j < this.PcKeysLength; ++_j) {_o.PcKeys.Add(this.PcKeys(_j));}
    _o.FrancePcKeys = new List<string>();
    for (var _j = 0; _j < this.FrancePcKeysLength; ++_j) {_o.FrancePcKeys.Add(this.FrancePcKeys(_j));}
    _o.GamepadKeys = new List<string>();
    for (var _j = 0; _j < this.GamepadKeysLength; ++_j) {_o.GamepadKeys.Add(this.GamepadKeys(_j));}
    _o.MobileIconPath = this.MobileIconPath;
    _o.DisplayName = this.DisplayName;
    _o.IsIdleAction = this.IsIdleAction;
    _o.KeyboardVersion = this.KeyboardVersion;
    _o.GamepadVersion = this.GamepadVersion;
  }
  public static Offset<WWParser.Defs.ActionMapping> Pack(FlatBufferBuilder builder, ActionMappingT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ActionMapping>);
    var _action_name = _o.ActionName == null ? default(StringOffset) : builder.CreateString(_o.ActionName);
    var _pc_keys = default(VectorOffset);
    if (_o.PcKeys != null) {
      var __pc_keys = new StringOffset[_o.PcKeys.Count];
      for (var _j = 0; _j < __pc_keys.Length; ++_j) { __pc_keys[_j] = builder.CreateString(_o.PcKeys[_j]); }
      _pc_keys = CreatePcKeysVector(builder, __pc_keys);
    }
    var _france_pc_keys = default(VectorOffset);
    if (_o.FrancePcKeys != null) {
      var __france_pc_keys = new StringOffset[_o.FrancePcKeys.Count];
      for (var _j = 0; _j < __france_pc_keys.Length; ++_j) { __france_pc_keys[_j] = builder.CreateString(_o.FrancePcKeys[_j]); }
      _france_pc_keys = CreateFrancePcKeysVector(builder, __france_pc_keys);
    }
    var _gamepad_keys = default(VectorOffset);
    if (_o.GamepadKeys != null) {
      var __gamepad_keys = new StringOffset[_o.GamepadKeys.Count];
      for (var _j = 0; _j < __gamepad_keys.Length; ++_j) { __gamepad_keys[_j] = builder.CreateString(_o.GamepadKeys[_j]); }
      _gamepad_keys = CreateGamepadKeysVector(builder, __gamepad_keys);
    }
    var _mobile_icon_path = _o.MobileIconPath == null ? default(StringOffset) : builder.CreateString(_o.MobileIconPath);
    var _display_name = _o.DisplayName == null ? default(StringOffset) : builder.CreateString(_o.DisplayName);
    return CreateActionMapping(
      builder,
      _o.Id,
      _action_name,
      _o.ActionType,
      _pc_keys,
      _france_pc_keys,
      _gamepad_keys,
      _mobile_icon_path,
      _display_name,
      _o.IsIdleAction,
      _o.KeyboardVersion,
      _o.GamepadVersion);
  }
}

public class ActionMappingT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("action_name")]
  public string ActionName { get; set; }
  [Newtonsoft.Json.JsonProperty("action_type")]
  public int ActionType { get; set; }
  [Newtonsoft.Json.JsonProperty("pc_keys")]
  public List<string> PcKeys { get; set; }
  [Newtonsoft.Json.JsonProperty("france_pc_keys")]
  public List<string> FrancePcKeys { get; set; }
  [Newtonsoft.Json.JsonProperty("gamepad_keys")]
  public List<string> GamepadKeys { get; set; }
  [Newtonsoft.Json.JsonProperty("mobile_icon_path")]
  public string MobileIconPath { get; set; }
  [Newtonsoft.Json.JsonProperty("display_name")]
  public string DisplayName { get; set; }
  [Newtonsoft.Json.JsonProperty("is_idle_action")]
  public bool IsIdleAction { get; set; }
  [Newtonsoft.Json.JsonProperty("keyboard_version")]
  public int KeyboardVersion { get; set; }
  [Newtonsoft.Json.JsonProperty("gamepad_version")]
  public int GamepadVersion { get; set; }

  public ActionMappingT() {
    this.Id = 0;
    this.ActionName = null;
    this.ActionType = 0;
    this.PcKeys = null;
    this.FrancePcKeys = null;
    this.GamepadKeys = null;
    this.MobileIconPath = null;
    this.DisplayName = null;
    this.IsIdleAction = false;
    this.KeyboardVersion = 0;
    this.GamepadVersion = 0;
  }
}


static public class ActionMappingVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*ActionName*/, false)
      && verifier.VerifyField(tablePos, 8 /*ActionType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*PcKeys*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*FrancePcKeys*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*GamepadKeys*/, false)
      && verifier.VerifyString(tablePos, 16 /*MobileIconPath*/, false)
      && verifier.VerifyString(tablePos, 18 /*DisplayName*/, false)
      && verifier.VerifyField(tablePos, 20 /*IsIdleAction*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*KeyboardVersion*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*GamepadVersion*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
