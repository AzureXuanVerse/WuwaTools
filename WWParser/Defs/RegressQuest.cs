// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RegressQuest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RegressQuest GetRootAsRegressQuest(ByteBuffer _bb) { return GetRootAsRegressQuest(_bb, new RegressQuest()); }
  public static RegressQuest GetRootAsRegressQuest(ByteBuffer _bb, RegressQuest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RegressQuest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TaskType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)2; } }
  public string TargetName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTargetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTargetNameArray() { return __p.__vector_as_array<byte>(8); }
  public int TaskSubType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AccessPathId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TargetReward { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ProgressType { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Grade { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }

  public static Offset<WWParser.Defs.RegressQuest> CreateRegressQuest(FlatBufferBuilder builder,
      int id = 0,
      int task_type = 2,
      StringOffset target_nameOffset = default(StringOffset),
      int task_sub_type = 0,
      int access_path_id = 0,
      int target_reward = 0,
      int progress_type = 0,
      int grade = 1) {
    builder.StartTable(8);
    RegressQuest.AddGrade(builder, grade);
    RegressQuest.AddProgressType(builder, progress_type);
    RegressQuest.AddTargetReward(builder, target_reward);
    RegressQuest.AddAccessPathId(builder, access_path_id);
    RegressQuest.AddTaskSubType(builder, task_sub_type);
    RegressQuest.AddTargetName(builder, target_nameOffset);
    RegressQuest.AddTaskType(builder, task_type);
    RegressQuest.AddId(builder, id);
    return RegressQuest.EndRegressQuest(builder);
  }

  public static void StartRegressQuest(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTaskType(FlatBufferBuilder builder, int taskType) { builder.AddInt(1, taskType, 2); }
  public static void AddTargetName(FlatBufferBuilder builder, StringOffset targetNameOffset) { builder.AddOffset(2, targetNameOffset.Value, 0); }
  public static void AddTaskSubType(FlatBufferBuilder builder, int taskSubType) { builder.AddInt(3, taskSubType, 0); }
  public static void AddAccessPathId(FlatBufferBuilder builder, int accessPathId) { builder.AddInt(4, accessPathId, 0); }
  public static void AddTargetReward(FlatBufferBuilder builder, int targetReward) { builder.AddInt(5, targetReward, 0); }
  public static void AddProgressType(FlatBufferBuilder builder, int progressType) { builder.AddInt(6, progressType, 0); }
  public static void AddGrade(FlatBufferBuilder builder, int grade) { builder.AddInt(7, grade, 1); }
  public static Offset<WWParser.Defs.RegressQuest> EndRegressQuest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RegressQuest>(o);
  }
  public RegressQuestT UnPack() {
    var _o = new RegressQuestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RegressQuestT _o) {
    _o.Id = this.Id;
    _o.TaskType = this.TaskType;
    _o.TargetName = this.TargetName;
    _o.TaskSubType = this.TaskSubType;
    _o.AccessPathId = this.AccessPathId;
    _o.TargetReward = this.TargetReward;
    _o.ProgressType = this.ProgressType;
    _o.Grade = this.Grade;
  }
  public static Offset<WWParser.Defs.RegressQuest> Pack(FlatBufferBuilder builder, RegressQuestT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RegressQuest>);
    var _target_name = _o.TargetName == null ? default(StringOffset) : builder.CreateString(_o.TargetName);
    return CreateRegressQuest(
      builder,
      _o.Id,
      _o.TaskType,
      _target_name,
      _o.TaskSubType,
      _o.AccessPathId,
      _o.TargetReward,
      _o.ProgressType,
      _o.Grade);
  }
}

public class RegressQuestT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("task_type")]
  public int TaskType { get; set; }
  [Newtonsoft.Json.JsonProperty("target_name")]
  public string TargetName { get; set; }
  [Newtonsoft.Json.JsonProperty("task_sub_type")]
  public int TaskSubType { get; set; }
  [Newtonsoft.Json.JsonProperty("access_path_id")]
  public int AccessPathId { get; set; }
  [Newtonsoft.Json.JsonProperty("target_reward")]
  public int TargetReward { get; set; }
  [Newtonsoft.Json.JsonProperty("progress_type")]
  public int ProgressType { get; set; }
  [Newtonsoft.Json.JsonProperty("grade")]
  public int Grade { get; set; }

  public RegressQuestT() {
    this.Id = 0;
    this.TaskType = 2;
    this.TargetName = null;
    this.TaskSubType = 0;
    this.AccessPathId = 0;
    this.TargetReward = 0;
    this.ProgressType = 0;
    this.Grade = 1;
  }
}


static public class RegressQuestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*TaskType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*TargetName*/, false)
      && verifier.VerifyField(tablePos, 10 /*TaskSubType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*AccessPathId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*TargetReward*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*ProgressType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Grade*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
