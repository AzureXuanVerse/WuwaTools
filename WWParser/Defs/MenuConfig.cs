// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MenuConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MenuConfig GetRootAsMenuConfig(ByteBuffer _bb) { return GetRootAsMenuConfig(_bb, new MenuConfig()); }
  public static MenuConfig GetRootAsMenuConfig(ByteBuffer _bb, MenuConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MenuConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FunctionId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float SliderDefault { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int OptionsDefault { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MainType { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SubName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSubNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetSubNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetSubNameArray() { return __p.__vector_as_array<byte>(14); }
  public int SubType { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SubSort { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SubImage { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSubImageBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetSubImageBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetSubImageArray() { return __p.__vector_as_array<byte>(20); }
  public string Name { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(22); }
  public int Platform { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Device { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDeviceBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetDeviceBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetDeviceArray() { return __p.__vector_as_array<byte>(26); }
  public int FunctionSort { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string FunctionImage { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFunctionImageBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetFunctionImageBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetFunctionImageArray() { return __p.__vector_as_array<byte>(30); }
  public int SetType { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float SliderRange(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int SliderRangeLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetSliderRangeBytes() { return __p.__vector_as_span<float>(34, 4); }
#else
  public ArraySegment<byte>? GetSliderRangeBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public float[] GetSliderRangeArray() { return __p.__vector_as_array<float>(34); }
  public float SliderRangeDisplay(int j) { int o = __p.__offset(36); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int SliderRangeDisplayLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetSliderRangeDisplayBytes() { return __p.__vector_as_span<float>(36, 4); }
#else
  public ArraySegment<byte>? GetSliderRangeDisplayBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public float[] GetSliderRangeDisplayArray() { return __p.__vector_as_array<float>(36); }
  public int Digits { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string OptionsName(int j) { int o = __p.__offset(40); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int OptionsNameLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int OptionsValue(int j) { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OptionsValueLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetOptionsValueBytes() { return __p.__vector_as_span<int>(42, 4); }
#else
  public ArraySegment<byte>? GetOptionsValueBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public int[] GetOptionsValueArray() { return __p.__vector_as_array<int>(42); }
  public string KeyMap { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyMapBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetKeyMapBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetKeyMapArray() { return __p.__vector_as_array<byte>(44); }
  public string ButtonText { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetButtonTextBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetButtonTextBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetButtonTextArray() { return __p.__vector_as_array<byte>(46); }
  public string OpenView { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpenViewBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetOpenViewBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetOpenViewArray() { return __p.__vector_as_array<byte>(48); }
  public int RelationFunction(int j) { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RelationFunctionLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRelationFunctionBytes() { return __p.__vector_as_span<int>(50, 4); }
#else
  public ArraySegment<byte>? GetRelationFunctionBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public int[] GetRelationFunctionArray() { return __p.__vector_as_array<int>(50); }
  public int DisableValue(int j) { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DisableValueLength { get { int o = __p.__offset(52); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDisableValueBytes() { return __p.__vector_as_span<int>(52, 4); }
#else
  public ArraySegment<byte>? GetDisableValueBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public int[] GetDisableValueArray() { return __p.__vector_as_array<int>(52); }
  public int DisableFunction(int j) { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DisableFunctionLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDisableFunctionBytes() { return __p.__vector_as_span<int>(54, 4); }
#else
  public ArraySegment<byte>? GetDisableFunctionBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public int[] GetDisableFunctionArray() { return __p.__vector_as_array<int>(54); }
  public int AffectedValue(int j) { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AffectedValueLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAffectedValueBytes() { return __p.__vector_as_span<int>(56, 4); }
#else
  public ArraySegment<byte>? GetAffectedValueBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public int[] GetAffectedValueArray() { return __p.__vector_as_array<int>(56); }
  public WWParser.Defs.DicIntInt? AffectedFunction(int j) { int o = __p.__offset(58); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AffectedFunctionLength { get { int o = __p.__offset(58); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntString? ValueTipsMap(int j) { int o = __p.__offset(60); return o != 0 ? (WWParser.Defs.DicIntString?)(new WWParser.Defs.DicIntString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ValueTipsMapLength { get { int o = __p.__offset(60); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntInt? ClickedTipsMap(int j) { int o = __p.__offset(62); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ClickedTipsMapLength { get { int o = __p.__offset(62); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ClickedTips { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClickedTipsBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetClickedTipsBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetClickedTipsArray() { return __p.__vector_as_array<byte>(64); }
  public bool BlockOnIosCheckServer { get { int o = __p.__offset(66); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string DetailText { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDetailTextBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetDetailTextBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetDetailTextArray() { return __p.__vector_as_array<byte>(68); }
  public int ConditionGroup { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Ps5hide { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.MenuConfig> CreateMenuConfig(FlatBufferBuilder builder,
      int id = 0,
      int function_id = 0,
      float slider_default = 0.0f,
      int options_default = 0,
      int main_type = 0,
      StringOffset sub_nameOffset = default(StringOffset),
      int sub_type = 0,
      int sub_sort = 0,
      StringOffset sub_imageOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      int platform = 0,
      StringOffset deviceOffset = default(StringOffset),
      int function_sort = 0,
      StringOffset function_imageOffset = default(StringOffset),
      int set_type = 0,
      VectorOffset slider_rangeOffset = default(VectorOffset),
      VectorOffset slider_range_displayOffset = default(VectorOffset),
      int digits = 0,
      VectorOffset options_nameOffset = default(VectorOffset),
      VectorOffset options_valueOffset = default(VectorOffset),
      StringOffset key_mapOffset = default(StringOffset),
      StringOffset button_textOffset = default(StringOffset),
      StringOffset open_viewOffset = default(StringOffset),
      VectorOffset relation_functionOffset = default(VectorOffset),
      VectorOffset disable_valueOffset = default(VectorOffset),
      VectorOffset disable_functionOffset = default(VectorOffset),
      VectorOffset affected_valueOffset = default(VectorOffset),
      VectorOffset affected_functionOffset = default(VectorOffset),
      VectorOffset value_tips_mapOffset = default(VectorOffset),
      VectorOffset clicked_tips_mapOffset = default(VectorOffset),
      StringOffset clicked_tipsOffset = default(StringOffset),
      bool block_on_ios_check_server = false,
      StringOffset detail_textOffset = default(StringOffset),
      int condition_group = 0,
      int ps5hide = 0) {
    builder.StartTable(35);
    MenuConfig.AddPs5hide(builder, ps5hide);
    MenuConfig.AddConditionGroup(builder, condition_group);
    MenuConfig.AddDetailText(builder, detail_textOffset);
    MenuConfig.AddClickedTips(builder, clicked_tipsOffset);
    MenuConfig.AddClickedTipsMap(builder, clicked_tips_mapOffset);
    MenuConfig.AddValueTipsMap(builder, value_tips_mapOffset);
    MenuConfig.AddAffectedFunction(builder, affected_functionOffset);
    MenuConfig.AddAffectedValue(builder, affected_valueOffset);
    MenuConfig.AddDisableFunction(builder, disable_functionOffset);
    MenuConfig.AddDisableValue(builder, disable_valueOffset);
    MenuConfig.AddRelationFunction(builder, relation_functionOffset);
    MenuConfig.AddOpenView(builder, open_viewOffset);
    MenuConfig.AddButtonText(builder, button_textOffset);
    MenuConfig.AddKeyMap(builder, key_mapOffset);
    MenuConfig.AddOptionsValue(builder, options_valueOffset);
    MenuConfig.AddOptionsName(builder, options_nameOffset);
    MenuConfig.AddDigits(builder, digits);
    MenuConfig.AddSliderRangeDisplay(builder, slider_range_displayOffset);
    MenuConfig.AddSliderRange(builder, slider_rangeOffset);
    MenuConfig.AddSetType(builder, set_type);
    MenuConfig.AddFunctionImage(builder, function_imageOffset);
    MenuConfig.AddFunctionSort(builder, function_sort);
    MenuConfig.AddDevice(builder, deviceOffset);
    MenuConfig.AddPlatform(builder, platform);
    MenuConfig.AddName(builder, nameOffset);
    MenuConfig.AddSubImage(builder, sub_imageOffset);
    MenuConfig.AddSubSort(builder, sub_sort);
    MenuConfig.AddSubType(builder, sub_type);
    MenuConfig.AddSubName(builder, sub_nameOffset);
    MenuConfig.AddMainType(builder, main_type);
    MenuConfig.AddOptionsDefault(builder, options_default);
    MenuConfig.AddSliderDefault(builder, slider_default);
    MenuConfig.AddFunctionId(builder, function_id);
    MenuConfig.AddId(builder, id);
    MenuConfig.AddBlockOnIosCheckServer(builder, block_on_ios_check_server);
    return MenuConfig.EndMenuConfig(builder);
  }

  public static void StartMenuConfig(FlatBufferBuilder builder) { builder.StartTable(35); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddFunctionId(FlatBufferBuilder builder, int functionId) { builder.AddInt(1, functionId, 0); }
  public static void AddSliderDefault(FlatBufferBuilder builder, float sliderDefault) { builder.AddFloat(2, sliderDefault, 0.0f); }
  public static void AddOptionsDefault(FlatBufferBuilder builder, int optionsDefault) { builder.AddInt(3, optionsDefault, 0); }
  public static void AddMainType(FlatBufferBuilder builder, int mainType) { builder.AddInt(4, mainType, 0); }
  public static void AddSubName(FlatBufferBuilder builder, StringOffset subNameOffset) { builder.AddOffset(5, subNameOffset.Value, 0); }
  public static void AddSubType(FlatBufferBuilder builder, int subType) { builder.AddInt(6, subType, 0); }
  public static void AddSubSort(FlatBufferBuilder builder, int subSort) { builder.AddInt(7, subSort, 0); }
  public static void AddSubImage(FlatBufferBuilder builder, StringOffset subImageOffset) { builder.AddOffset(8, subImageOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(9, nameOffset.Value, 0); }
  public static void AddPlatform(FlatBufferBuilder builder, int platform) { builder.AddInt(10, platform, 0); }
  public static void AddDevice(FlatBufferBuilder builder, StringOffset deviceOffset) { builder.AddOffset(11, deviceOffset.Value, 0); }
  public static void AddFunctionSort(FlatBufferBuilder builder, int functionSort) { builder.AddInt(12, functionSort, 0); }
  public static void AddFunctionImage(FlatBufferBuilder builder, StringOffset functionImageOffset) { builder.AddOffset(13, functionImageOffset.Value, 0); }
  public static void AddSetType(FlatBufferBuilder builder, int setType) { builder.AddInt(14, setType, 0); }
  public static void AddSliderRange(FlatBufferBuilder builder, VectorOffset sliderRangeOffset) { builder.AddOffset(15, sliderRangeOffset.Value, 0); }
  public static VectorOffset CreateSliderRangeVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSliderRangeVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSliderRangeVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSliderRangeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSliderRangeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSliderRangeDisplay(FlatBufferBuilder builder, VectorOffset sliderRangeDisplayOffset) { builder.AddOffset(16, sliderRangeDisplayOffset.Value, 0); }
  public static VectorOffset CreateSliderRangeDisplayVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSliderRangeDisplayVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSliderRangeDisplayVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSliderRangeDisplayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSliderRangeDisplayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDigits(FlatBufferBuilder builder, int digits) { builder.AddInt(17, digits, 0); }
  public static void AddOptionsName(FlatBufferBuilder builder, VectorOffset optionsNameOffset) { builder.AddOffset(18, optionsNameOffset.Value, 0); }
  public static VectorOffset CreateOptionsNameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOptionsNameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOptionsNameVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOptionsNameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOptionsNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOptionsValue(FlatBufferBuilder builder, VectorOffset optionsValueOffset) { builder.AddOffset(19, optionsValueOffset.Value, 0); }
  public static VectorOffset CreateOptionsValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOptionsValueVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOptionsValueVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOptionsValueVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOptionsValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddKeyMap(FlatBufferBuilder builder, StringOffset keyMapOffset) { builder.AddOffset(20, keyMapOffset.Value, 0); }
  public static void AddButtonText(FlatBufferBuilder builder, StringOffset buttonTextOffset) { builder.AddOffset(21, buttonTextOffset.Value, 0); }
  public static void AddOpenView(FlatBufferBuilder builder, StringOffset openViewOffset) { builder.AddOffset(22, openViewOffset.Value, 0); }
  public static void AddRelationFunction(FlatBufferBuilder builder, VectorOffset relationFunctionOffset) { builder.AddOffset(23, relationFunctionOffset.Value, 0); }
  public static VectorOffset CreateRelationFunctionVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRelationFunctionVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelationFunctionVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelationFunctionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRelationFunctionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDisableValue(FlatBufferBuilder builder, VectorOffset disableValueOffset) { builder.AddOffset(24, disableValueOffset.Value, 0); }
  public static VectorOffset CreateDisableValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDisableValueVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDisableValueVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDisableValueVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDisableValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDisableFunction(FlatBufferBuilder builder, VectorOffset disableFunctionOffset) { builder.AddOffset(25, disableFunctionOffset.Value, 0); }
  public static VectorOffset CreateDisableFunctionVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDisableFunctionVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDisableFunctionVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDisableFunctionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDisableFunctionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAffectedValue(FlatBufferBuilder builder, VectorOffset affectedValueOffset) { builder.AddOffset(26, affectedValueOffset.Value, 0); }
  public static VectorOffset CreateAffectedValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAffectedValueVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAffectedValueVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAffectedValueVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAffectedValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAffectedFunction(FlatBufferBuilder builder, VectorOffset affectedFunctionOffset) { builder.AddOffset(27, affectedFunctionOffset.Value, 0); }
  public static VectorOffset CreateAffectedFunctionVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAffectedFunctionVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAffectedFunctionVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAffectedFunctionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAffectedFunctionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddValueTipsMap(FlatBufferBuilder builder, VectorOffset valueTipsMapOffset) { builder.AddOffset(28, valueTipsMapOffset.Value, 0); }
  public static VectorOffset CreateValueTipsMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateValueTipsMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValueTipsMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValueTipsMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartValueTipsMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddClickedTipsMap(FlatBufferBuilder builder, VectorOffset clickedTipsMapOffset) { builder.AddOffset(29, clickedTipsMapOffset.Value, 0); }
  public static VectorOffset CreateClickedTipsMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateClickedTipsMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClickedTipsMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClickedTipsMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartClickedTipsMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddClickedTips(FlatBufferBuilder builder, StringOffset clickedTipsOffset) { builder.AddOffset(30, clickedTipsOffset.Value, 0); }
  public static void AddBlockOnIosCheckServer(FlatBufferBuilder builder, bool blockOnIosCheckServer) { builder.AddBool(31, blockOnIosCheckServer, false); }
  public static void AddDetailText(FlatBufferBuilder builder, StringOffset detailTextOffset) { builder.AddOffset(32, detailTextOffset.Value, 0); }
  public static void AddConditionGroup(FlatBufferBuilder builder, int conditionGroup) { builder.AddInt(33, conditionGroup, 0); }
  public static void AddPs5hide(FlatBufferBuilder builder, int ps5hide) { builder.AddInt(34, ps5hide, 0); }
  public static Offset<WWParser.Defs.MenuConfig> EndMenuConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MenuConfig>(o);
  }
  public MenuConfigT UnPack() {
    var _o = new MenuConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MenuConfigT _o) {
    _o.Id = this.Id;
    _o.FunctionId = this.FunctionId;
    _o.SliderDefault = this.SliderDefault;
    _o.OptionsDefault = this.OptionsDefault;
    _o.MainType = this.MainType;
    _o.SubName = this.SubName;
    _o.SubType = this.SubType;
    _o.SubSort = this.SubSort;
    _o.SubImage = this.SubImage;
    _o.Name = this.Name;
    _o.Platform = this.Platform;
    _o.Device = this.Device;
    _o.FunctionSort = this.FunctionSort;
    _o.FunctionImage = this.FunctionImage;
    _o.SetType = this.SetType;
    _o.SliderRange = new List<float>();
    for (var _j = 0; _j < this.SliderRangeLength; ++_j) {_o.SliderRange.Add(this.SliderRange(_j));}
    _o.SliderRangeDisplay = new List<float>();
    for (var _j = 0; _j < this.SliderRangeDisplayLength; ++_j) {_o.SliderRangeDisplay.Add(this.SliderRangeDisplay(_j));}
    _o.Digits = this.Digits;
    _o.OptionsName = new List<string>();
    for (var _j = 0; _j < this.OptionsNameLength; ++_j) {_o.OptionsName.Add(this.OptionsName(_j));}
    _o.OptionsValue = new List<int>();
    for (var _j = 0; _j < this.OptionsValueLength; ++_j) {_o.OptionsValue.Add(this.OptionsValue(_j));}
    _o.KeyMap = this.KeyMap;
    _o.ButtonText = this.ButtonText;
    _o.OpenView = this.OpenView;
    _o.RelationFunction = new List<int>();
    for (var _j = 0; _j < this.RelationFunctionLength; ++_j) {_o.RelationFunction.Add(this.RelationFunction(_j));}
    _o.DisableValue = new List<int>();
    for (var _j = 0; _j < this.DisableValueLength; ++_j) {_o.DisableValue.Add(this.DisableValue(_j));}
    _o.DisableFunction = new List<int>();
    for (var _j = 0; _j < this.DisableFunctionLength; ++_j) {_o.DisableFunction.Add(this.DisableFunction(_j));}
    _o.AffectedValue = new List<int>();
    for (var _j = 0; _j < this.AffectedValueLength; ++_j) {_o.AffectedValue.Add(this.AffectedValue(_j));}
    _o.AffectedFunction = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.AffectedFunctionLength; ++_j) {_o.AffectedFunction.Add(this.AffectedFunction(_j).HasValue ? this.AffectedFunction(_j).Value.UnPack() : null);}
    _o.ValueTipsMap = new List<WWParser.Defs.DicIntStringT>();
    for (var _j = 0; _j < this.ValueTipsMapLength; ++_j) {_o.ValueTipsMap.Add(this.ValueTipsMap(_j).HasValue ? this.ValueTipsMap(_j).Value.UnPack() : null);}
    _o.ClickedTipsMap = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.ClickedTipsMapLength; ++_j) {_o.ClickedTipsMap.Add(this.ClickedTipsMap(_j).HasValue ? this.ClickedTipsMap(_j).Value.UnPack() : null);}
    _o.ClickedTips = this.ClickedTips;
    _o.BlockOnIosCheckServer = this.BlockOnIosCheckServer;
    _o.DetailText = this.DetailText;
    _o.ConditionGroup = this.ConditionGroup;
    _o.Ps5hide = this.Ps5hide;
  }
  public static Offset<WWParser.Defs.MenuConfig> Pack(FlatBufferBuilder builder, MenuConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MenuConfig>);
    var _sub_name = _o.SubName == null ? default(StringOffset) : builder.CreateString(_o.SubName);
    var _sub_image = _o.SubImage == null ? default(StringOffset) : builder.CreateString(_o.SubImage);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _device = _o.Device == null ? default(StringOffset) : builder.CreateString(_o.Device);
    var _function_image = _o.FunctionImage == null ? default(StringOffset) : builder.CreateString(_o.FunctionImage);
    var _slider_range = default(VectorOffset);
    if (_o.SliderRange != null) {
      var __slider_range = _o.SliderRange.ToArray();
      _slider_range = CreateSliderRangeVector(builder, __slider_range);
    }
    var _slider_range_display = default(VectorOffset);
    if (_o.SliderRangeDisplay != null) {
      var __slider_range_display = _o.SliderRangeDisplay.ToArray();
      _slider_range_display = CreateSliderRangeDisplayVector(builder, __slider_range_display);
    }
    var _options_name = default(VectorOffset);
    if (_o.OptionsName != null) {
      var __options_name = new StringOffset[_o.OptionsName.Count];
      for (var _j = 0; _j < __options_name.Length; ++_j) { __options_name[_j] = builder.CreateString(_o.OptionsName[_j]); }
      _options_name = CreateOptionsNameVector(builder, __options_name);
    }
    var _options_value = default(VectorOffset);
    if (_o.OptionsValue != null) {
      var __options_value = _o.OptionsValue.ToArray();
      _options_value = CreateOptionsValueVector(builder, __options_value);
    }
    var _key_map = _o.KeyMap == null ? default(StringOffset) : builder.CreateString(_o.KeyMap);
    var _button_text = _o.ButtonText == null ? default(StringOffset) : builder.CreateString(_o.ButtonText);
    var _open_view = _o.OpenView == null ? default(StringOffset) : builder.CreateString(_o.OpenView);
    var _relation_function = default(VectorOffset);
    if (_o.RelationFunction != null) {
      var __relation_function = _o.RelationFunction.ToArray();
      _relation_function = CreateRelationFunctionVector(builder, __relation_function);
    }
    var _disable_value = default(VectorOffset);
    if (_o.DisableValue != null) {
      var __disable_value = _o.DisableValue.ToArray();
      _disable_value = CreateDisableValueVector(builder, __disable_value);
    }
    var _disable_function = default(VectorOffset);
    if (_o.DisableFunction != null) {
      var __disable_function = _o.DisableFunction.ToArray();
      _disable_function = CreateDisableFunctionVector(builder, __disable_function);
    }
    var _affected_value = default(VectorOffset);
    if (_o.AffectedValue != null) {
      var __affected_value = _o.AffectedValue.ToArray();
      _affected_value = CreateAffectedValueVector(builder, __affected_value);
    }
    var _affected_function = default(VectorOffset);
    if (_o.AffectedFunction != null) {
      var __affected_function = new Offset<WWParser.Defs.DicIntInt>[_o.AffectedFunction.Count];
      for (var _j = 0; _j < __affected_function.Length; ++_j) { __affected_function[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.AffectedFunction[_j]); }
      _affected_function = CreateAffectedFunctionVector(builder, __affected_function);
    }
    var _value_tips_map = default(VectorOffset);
    if (_o.ValueTipsMap != null) {
      var __value_tips_map = new Offset<WWParser.Defs.DicIntString>[_o.ValueTipsMap.Count];
      for (var _j = 0; _j < __value_tips_map.Length; ++_j) { __value_tips_map[_j] = WWParser.Defs.DicIntString.Pack(builder, _o.ValueTipsMap[_j]); }
      _value_tips_map = CreateValueTipsMapVector(builder, __value_tips_map);
    }
    var _clicked_tips_map = default(VectorOffset);
    if (_o.ClickedTipsMap != null) {
      var __clicked_tips_map = new Offset<WWParser.Defs.DicIntInt>[_o.ClickedTipsMap.Count];
      for (var _j = 0; _j < __clicked_tips_map.Length; ++_j) { __clicked_tips_map[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.ClickedTipsMap[_j]); }
      _clicked_tips_map = CreateClickedTipsMapVector(builder, __clicked_tips_map);
    }
    var _clicked_tips = _o.ClickedTips == null ? default(StringOffset) : builder.CreateString(_o.ClickedTips);
    var _detail_text = _o.DetailText == null ? default(StringOffset) : builder.CreateString(_o.DetailText);
    return CreateMenuConfig(
      builder,
      _o.Id,
      _o.FunctionId,
      _o.SliderDefault,
      _o.OptionsDefault,
      _o.MainType,
      _sub_name,
      _o.SubType,
      _o.SubSort,
      _sub_image,
      _name,
      _o.Platform,
      _device,
      _o.FunctionSort,
      _function_image,
      _o.SetType,
      _slider_range,
      _slider_range_display,
      _o.Digits,
      _options_name,
      _options_value,
      _key_map,
      _button_text,
      _open_view,
      _relation_function,
      _disable_value,
      _disable_function,
      _affected_value,
      _affected_function,
      _value_tips_map,
      _clicked_tips_map,
      _clicked_tips,
      _o.BlockOnIosCheckServer,
      _detail_text,
      _o.ConditionGroup,
      _o.Ps5hide);
  }
}

public class MenuConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("function_id")]
  public int FunctionId { get; set; }
  [Newtonsoft.Json.JsonProperty("slider_default")]
  public float SliderDefault { get; set; }
  [Newtonsoft.Json.JsonProperty("options_default")]
  public int OptionsDefault { get; set; }
  [Newtonsoft.Json.JsonProperty("main_type")]
  public int MainType { get; set; }
  [Newtonsoft.Json.JsonProperty("sub_name")]
  public string SubName { get; set; }
  [Newtonsoft.Json.JsonProperty("sub_type")]
  public int SubType { get; set; }
  [Newtonsoft.Json.JsonProperty("sub_sort")]
  public int SubSort { get; set; }
  [Newtonsoft.Json.JsonProperty("sub_image")]
  public string SubImage { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("platform")]
  public int Platform { get; set; }
  [Newtonsoft.Json.JsonProperty("device")]
  public string Device { get; set; }
  [Newtonsoft.Json.JsonProperty("function_sort")]
  public int FunctionSort { get; set; }
  [Newtonsoft.Json.JsonProperty("function_image")]
  public string FunctionImage { get; set; }
  [Newtonsoft.Json.JsonProperty("set_type")]
  public int SetType { get; set; }
  [Newtonsoft.Json.JsonProperty("slider_range")]
  public List<float> SliderRange { get; set; }
  [Newtonsoft.Json.JsonProperty("slider_range_display")]
  public List<float> SliderRangeDisplay { get; set; }
  [Newtonsoft.Json.JsonProperty("digits")]
  public int Digits { get; set; }
  [Newtonsoft.Json.JsonProperty("options_name")]
  public List<string> OptionsName { get; set; }
  [Newtonsoft.Json.JsonProperty("options_value")]
  public List<int> OptionsValue { get; set; }
  [Newtonsoft.Json.JsonProperty("key_map")]
  public string KeyMap { get; set; }
  [Newtonsoft.Json.JsonProperty("button_text")]
  public string ButtonText { get; set; }
  [Newtonsoft.Json.JsonProperty("open_view")]
  public string OpenView { get; set; }
  [Newtonsoft.Json.JsonProperty("relation_function")]
  public List<int> RelationFunction { get; set; }
  [Newtonsoft.Json.JsonProperty("disable_value")]
  public List<int> DisableValue { get; set; }
  [Newtonsoft.Json.JsonProperty("disable_function")]
  public List<int> DisableFunction { get; set; }
  [Newtonsoft.Json.JsonProperty("affected_value")]
  public List<int> AffectedValue { get; set; }
  [Newtonsoft.Json.JsonProperty("affected_function")]
  public List<WWParser.Defs.DicIntIntT> AffectedFunction { get; set; }
  [Newtonsoft.Json.JsonProperty("value_tips_map")]
  public List<WWParser.Defs.DicIntStringT> ValueTipsMap { get; set; }
  [Newtonsoft.Json.JsonProperty("clicked_tips_map")]
  public List<WWParser.Defs.DicIntIntT> ClickedTipsMap { get; set; }
  [Newtonsoft.Json.JsonProperty("clicked_tips")]
  public string ClickedTips { get; set; }
  [Newtonsoft.Json.JsonProperty("block_on_ios_check_server")]
  public bool BlockOnIosCheckServer { get; set; }
  [Newtonsoft.Json.JsonProperty("detail_text")]
  public string DetailText { get; set; }
  [Newtonsoft.Json.JsonProperty("condition_group")]
  public int ConditionGroup { get; set; }
  [Newtonsoft.Json.JsonProperty("ps5hide")]
  public int Ps5hide { get; set; }

  public MenuConfigT() {
    this.Id = 0;
    this.FunctionId = 0;
    this.SliderDefault = 0.0f;
    this.OptionsDefault = 0;
    this.MainType = 0;
    this.SubName = null;
    this.SubType = 0;
    this.SubSort = 0;
    this.SubImage = null;
    this.Name = null;
    this.Platform = 0;
    this.Device = null;
    this.FunctionSort = 0;
    this.FunctionImage = null;
    this.SetType = 0;
    this.SliderRange = null;
    this.SliderRangeDisplay = null;
    this.Digits = 0;
    this.OptionsName = null;
    this.OptionsValue = null;
    this.KeyMap = null;
    this.ButtonText = null;
    this.OpenView = null;
    this.RelationFunction = null;
    this.DisableValue = null;
    this.DisableFunction = null;
    this.AffectedValue = null;
    this.AffectedFunction = null;
    this.ValueTipsMap = null;
    this.ClickedTipsMap = null;
    this.ClickedTips = null;
    this.BlockOnIosCheckServer = false;
    this.DetailText = null;
    this.ConditionGroup = 0;
    this.Ps5hide = 0;
  }
}


static public class MenuConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*FunctionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*SliderDefault*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*OptionsDefault*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*MainType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*SubName*/, false)
      && verifier.VerifyField(tablePos, 16 /*SubType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*SubSort*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*SubImage*/, false)
      && verifier.VerifyString(tablePos, 22 /*Name*/, false)
      && verifier.VerifyField(tablePos, 24 /*Platform*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 26 /*Device*/, false)
      && verifier.VerifyField(tablePos, 28 /*FunctionSort*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 30 /*FunctionImage*/, false)
      && verifier.VerifyField(tablePos, 32 /*SetType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 34 /*SliderRange*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 36 /*SliderRangeDisplay*/, 4 /*float*/, false)
      && verifier.VerifyField(tablePos, 38 /*Digits*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 40 /*OptionsName*/, false)
      && verifier.VerifyVectorOfData(tablePos, 42 /*OptionsValue*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 44 /*KeyMap*/, false)
      && verifier.VerifyString(tablePos, 46 /*ButtonText*/, false)
      && verifier.VerifyString(tablePos, 48 /*OpenView*/, false)
      && verifier.VerifyVectorOfData(tablePos, 50 /*RelationFunction*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 52 /*DisableValue*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 54 /*DisableFunction*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 56 /*AffectedValue*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 58 /*AffectedFunction*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 60 /*ValueTipsMap*/, WWParser.Defs.DicIntStringVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 62 /*ClickedTipsMap*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyString(tablePos, 64 /*ClickedTips*/, false)
      && verifier.VerifyField(tablePos, 66 /*BlockOnIosCheckServer*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 68 /*DetailText*/, false)
      && verifier.VerifyField(tablePos, 70 /*ConditionGroup*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 72 /*Ps5hide*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
