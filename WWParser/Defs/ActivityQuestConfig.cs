// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ActivityQuestConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ActivityQuestConfig GetRootAsActivityQuestConfig(ByteBuffer _bb) { return GetRootAsActivityQuestConfig(_bb, new ActivityQuestConfig()); }
  public static ActivityQuestConfig GetRootAsActivityQuestConfig(ByteBuffer _bb, ActivityQuestConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ActivityQuestConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QuestId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConditionId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int OpenDay { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsDisplay { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.ActivityQuestConfig> CreateActivityQuestConfig(FlatBufferBuilder builder,
      int id = 0,
      int quest_id = 0,
      int activity_id = 0,
      int condition_id = 0,
      int open_day = 0,
      bool is_display = false) {
    builder.StartTable(6);
    ActivityQuestConfig.AddOpenDay(builder, open_day);
    ActivityQuestConfig.AddConditionId(builder, condition_id);
    ActivityQuestConfig.AddActivityId(builder, activity_id);
    ActivityQuestConfig.AddQuestId(builder, quest_id);
    ActivityQuestConfig.AddId(builder, id);
    ActivityQuestConfig.AddIsDisplay(builder, is_display);
    return ActivityQuestConfig.EndActivityQuestConfig(builder);
  }

  public static void StartActivityQuestConfig(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddQuestId(FlatBufferBuilder builder, int questId) { builder.AddInt(1, questId, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(2, activityId, 0); }
  public static void AddConditionId(FlatBufferBuilder builder, int conditionId) { builder.AddInt(3, conditionId, 0); }
  public static void AddOpenDay(FlatBufferBuilder builder, int openDay) { builder.AddInt(4, openDay, 0); }
  public static void AddIsDisplay(FlatBufferBuilder builder, bool isDisplay) { builder.AddBool(5, isDisplay, false); }
  public static Offset<WWParser.Defs.ActivityQuestConfig> EndActivityQuestConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ActivityQuestConfig>(o);
  }
  public ActivityQuestConfigT UnPack() {
    var _o = new ActivityQuestConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ActivityQuestConfigT _o) {
    _o.Id = this.Id;
    _o.QuestId = this.QuestId;
    _o.ActivityId = this.ActivityId;
    _o.ConditionId = this.ConditionId;
    _o.OpenDay = this.OpenDay;
    _o.IsDisplay = this.IsDisplay;
  }
  public static Offset<WWParser.Defs.ActivityQuestConfig> Pack(FlatBufferBuilder builder, ActivityQuestConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ActivityQuestConfig>);
    return CreateActivityQuestConfig(
      builder,
      _o.Id,
      _o.QuestId,
      _o.ActivityId,
      _o.ConditionId,
      _o.OpenDay,
      _o.IsDisplay);
  }
}

public class ActivityQuestConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("quest_id")]
  public int QuestId { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("condition_id")]
  public int ConditionId { get; set; }
  [Newtonsoft.Json.JsonProperty("open_day")]
  public int OpenDay { get; set; }
  [Newtonsoft.Json.JsonProperty("is_display")]
  public bool IsDisplay { get; set; }

  public ActivityQuestConfigT() {
    this.Id = 0;
    this.QuestId = 0;
    this.ActivityId = 0;
    this.ConditionId = 0;
    this.OpenDay = 0;
    this.IsDisplay = false;
  }
}


static public class ActivityQuestConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*QuestId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ConditionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*OpenDay*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*IsDisplay*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
