// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PlotGuest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PlotGuest GetRootAsPlotGuest(ByteBuffer _bb) { return GetRootAsPlotGuest(_bb, new PlotGuest()); }
  public static PlotGuest GetRootAsPlotGuest(ByteBuffer _bb, PlotGuest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlotGuest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int GuestId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string HeadIconPath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHeadIconPathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetHeadIconPathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetHeadIconPathArray() { return __p.__vector_as_array<byte>(6); }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public int SpeakerId(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SpeakerIdLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSpeakerIdBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetSpeakerIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetSpeakerIdArray() { return __p.__vector_as_array<int>(10); }

  public static Offset<WWParser.Defs.PlotGuest> CreatePlotGuest(FlatBufferBuilder builder,
      int guest_id = 0,
      StringOffset head_icon_pathOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      VectorOffset speaker_idOffset = default(VectorOffset)) {
    builder.StartTable(4);
    PlotGuest.AddSpeakerId(builder, speaker_idOffset);
    PlotGuest.AddName(builder, nameOffset);
    PlotGuest.AddHeadIconPath(builder, head_icon_pathOffset);
    PlotGuest.AddGuestId(builder, guest_id);
    return PlotGuest.EndPlotGuest(builder);
  }

  public static void StartPlotGuest(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddGuestId(FlatBufferBuilder builder, int guestId) { builder.AddInt(0, guestId, 0); }
  public static void AddHeadIconPath(FlatBufferBuilder builder, StringOffset headIconPathOffset) { builder.AddOffset(1, headIconPathOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddSpeakerId(FlatBufferBuilder builder, VectorOffset speakerIdOffset) { builder.AddOffset(3, speakerIdOffset.Value, 0); }
  public static VectorOffset CreateSpeakerIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSpeakerIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpeakerIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpeakerIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpeakerIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.PlotGuest> EndPlotGuest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PlotGuest>(o);
  }
  public PlotGuestT UnPack() {
    var _o = new PlotGuestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlotGuestT _o) {
    _o.GuestId = this.GuestId;
    _o.HeadIconPath = this.HeadIconPath;
    _o.Name = this.Name;
    _o.SpeakerId = new List<int>();
    for (var _j = 0; _j < this.SpeakerIdLength; ++_j) {_o.SpeakerId.Add(this.SpeakerId(_j));}
  }
  public static Offset<WWParser.Defs.PlotGuest> Pack(FlatBufferBuilder builder, PlotGuestT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PlotGuest>);
    var _head_icon_path = _o.HeadIconPath == null ? default(StringOffset) : builder.CreateString(_o.HeadIconPath);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _speaker_id = default(VectorOffset);
    if (_o.SpeakerId != null) {
      var __speaker_id = _o.SpeakerId.ToArray();
      _speaker_id = CreateSpeakerIdVector(builder, __speaker_id);
    }
    return CreatePlotGuest(
      builder,
      _o.GuestId,
      _head_icon_path,
      _name,
      _speaker_id);
  }
}

public class PlotGuestT
{
  [Newtonsoft.Json.JsonProperty("guest_id")]
  public int GuestId { get; set; }
  [Newtonsoft.Json.JsonProperty("head_icon_path")]
  public string HeadIconPath { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("speaker_id")]
  public List<int> SpeakerId { get; set; }

  public PlotGuestT() {
    this.GuestId = 0;
    this.HeadIconPath = null;
    this.Name = null;
    this.SpeakerId = null;
  }
}


static public class PlotGuestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*GuestId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*HeadIconPath*/, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*SpeakerId*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
