// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct StringArray : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static StringArray GetRootAsStringArray(ByteBuffer _bb) { return GetRootAsStringArray(_bb, new StringArray()); }
  public static StringArray GetRootAsStringArray(ByteBuffer _bb, StringArray obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StringArray __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ArrayString(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ArrayStringLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.StringArray> CreateStringArray(FlatBufferBuilder builder,
      VectorOffset array_stringOffset = default(VectorOffset)) {
    builder.StartTable(1);
    StringArray.AddArrayString(builder, array_stringOffset);
    return StringArray.EndStringArray(builder);
  }

  public static void StartStringArray(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddArrayString(FlatBufferBuilder builder, VectorOffset arrayStringOffset) { builder.AddOffset(0, arrayStringOffset.Value, 0); }
  public static VectorOffset CreateArrayStringVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateArrayStringVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArrayStringVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArrayStringVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartArrayStringVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.StringArray> EndStringArray(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.StringArray>(o);
  }
  public StringArrayT UnPack() {
    var _o = new StringArrayT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StringArrayT _o) {
    _o.ArrayString = new List<string>();
    for (var _j = 0; _j < this.ArrayStringLength; ++_j) {_o.ArrayString.Add(this.ArrayString(_j));}
  }
  public static Offset<WWParser.Defs.StringArray> Pack(FlatBufferBuilder builder, StringArrayT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.StringArray>);
    var _array_string = default(VectorOffset);
    if (_o.ArrayString != null) {
      var __array_string = new StringOffset[_o.ArrayString.Count];
      for (var _j = 0; _j < __array_string.Length; ++_j) { __array_string[_j] = builder.CreateString(_o.ArrayString[_j]); }
      _array_string = CreateArrayStringVector(builder, __array_string);
    }
    return CreateStringArray(
      builder,
      _array_string);
  }
}

public class StringArrayT
{
  [Newtonsoft.Json.JsonProperty("array_string")]
  public List<string> ArrayString { get; set; }

  public StringArrayT() {
    this.ArrayString = null;
  }
}


static public class StringArrayVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfStrings(tablePos, 4 /*ArrayString*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
