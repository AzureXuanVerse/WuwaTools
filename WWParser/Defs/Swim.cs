// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Swim : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Swim GetRootAsSwim(ByteBuffer _bb) { return GetRootAsSwim(_bb, new Swim()); }
  public static Swim GetRootAsSwim(ByteBuffer _bb, Swim obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Swim __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public float SprintZOffsetRate { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.2f; } }
  public float SprintZOffsetSpeed { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)100.0f; } }

  public static Offset<WWParser.Defs.Swim> CreateSwim(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      float sprint_z_offset_rate = 0.2f,
      float sprint_z_offset_speed = 100.0f) {
    builder.StartTable(3);
    Swim.AddSprintZOffsetSpeed(builder, sprint_z_offset_speed);
    Swim.AddSprintZOffsetRate(builder, sprint_z_offset_rate);
    Swim.AddId(builder, idOffset);
    return Swim.EndSwim(builder);
  }

  public static void StartSwim(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddSprintZOffsetRate(FlatBufferBuilder builder, float sprintZOffsetRate) { builder.AddFloat(1, sprintZOffsetRate, 0.2f); }
  public static void AddSprintZOffsetSpeed(FlatBufferBuilder builder, float sprintZOffsetSpeed) { builder.AddFloat(2, sprintZOffsetSpeed, 100.0f); }
  public static Offset<WWParser.Defs.Swim> EndSwim(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Swim>(o);
  }
  public SwimT UnPack() {
    var _o = new SwimT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SwimT _o) {
    _o.Id = this.Id;
    _o.SprintZOffsetRate = this.SprintZOffsetRate;
    _o.SprintZOffsetSpeed = this.SprintZOffsetSpeed;
  }
  public static Offset<WWParser.Defs.Swim> Pack(FlatBufferBuilder builder, SwimT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Swim>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    return CreateSwim(
      builder,
      _id,
      _o.SprintZOffsetRate,
      _o.SprintZOffsetSpeed);
  }
}

public class SwimT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("sprint_z_offset_rate")]
  public float SprintZOffsetRate { get; set; }
  [Newtonsoft.Json.JsonProperty("sprint_z_offset_speed")]
  public float SprintZOffsetSpeed { get; set; }

  public SwimT() {
    this.Id = null;
    this.SprintZOffsetRate = 0.2f;
    this.SprintZOffsetSpeed = 100.0f;
  }
}


static public class SwimVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyField(tablePos, 6 /*SprintZOffsetRate*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*SprintZOffsetSpeed*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
