// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CombinationAxis : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CombinationAxis GetRootAsCombinationAxis(ByteBuffer _bb) { return GetRootAsCombinationAxis(_bb, new CombinationAxis()); }
  public static CombinationAxis GetRootAsCombinationAxis(ByteBuffer _bb, CombinationAxis obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CombinationAxis __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string AxisName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAxisNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetAxisNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetAxisNameArray() { return __p.__vector_as_array<byte>(6); }
  public int AxisType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicStringString? PcKeyMap(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.DicStringString?)(new WWParser.Defs.DicStringString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PcKeyMapLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicStringString? GamepadKeyMap(int j) { int o = __p.__offset(12); return o != 0 ? (WWParser.Defs.DicStringString?)(new WWParser.Defs.DicStringString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int GamepadKeyMapLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicStringFloat? SecondaryKeyScaleMap(int j) { int o = __p.__offset(14); return o != 0 ? (WWParser.Defs.DicStringFloat?)(new WWParser.Defs.DicStringFloat()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SecondaryKeyScaleMapLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string MobileIconPath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMobileIconPathBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetMobileIconPathBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetMobileIconPathArray() { return __p.__vector_as_array<byte>(16); }
  public string DisplayName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDisplayNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetDisplayNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetDisplayNameArray() { return __p.__vector_as_array<byte>(18); }
  public int KeyboardVersion { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GamepadVersion { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.CombinationAxis> CreateCombinationAxis(FlatBufferBuilder builder,
      int id = 0,
      StringOffset axis_nameOffset = default(StringOffset),
      int axis_type = 0,
      VectorOffset pc_key_mapOffset = default(VectorOffset),
      VectorOffset gamepad_key_mapOffset = default(VectorOffset),
      VectorOffset secondary_key_scale_mapOffset = default(VectorOffset),
      StringOffset mobile_icon_pathOffset = default(StringOffset),
      StringOffset display_nameOffset = default(StringOffset),
      int keyboard_version = 0,
      int gamepad_version = 0) {
    builder.StartTable(10);
    CombinationAxis.AddGamepadVersion(builder, gamepad_version);
    CombinationAxis.AddKeyboardVersion(builder, keyboard_version);
    CombinationAxis.AddDisplayName(builder, display_nameOffset);
    CombinationAxis.AddMobileIconPath(builder, mobile_icon_pathOffset);
    CombinationAxis.AddSecondaryKeyScaleMap(builder, secondary_key_scale_mapOffset);
    CombinationAxis.AddGamepadKeyMap(builder, gamepad_key_mapOffset);
    CombinationAxis.AddPcKeyMap(builder, pc_key_mapOffset);
    CombinationAxis.AddAxisType(builder, axis_type);
    CombinationAxis.AddAxisName(builder, axis_nameOffset);
    CombinationAxis.AddId(builder, id);
    return CombinationAxis.EndCombinationAxis(builder);
  }

  public static void StartCombinationAxis(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddAxisName(FlatBufferBuilder builder, StringOffset axisNameOffset) { builder.AddOffset(1, axisNameOffset.Value, 0); }
  public static void AddAxisType(FlatBufferBuilder builder, int axisType) { builder.AddInt(2, axisType, 0); }
  public static void AddPcKeyMap(FlatBufferBuilder builder, VectorOffset pcKeyMapOffset) { builder.AddOffset(3, pcKeyMapOffset.Value, 0); }
  public static VectorOffset CreatePcKeyMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePcKeyMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePcKeyMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicStringString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePcKeyMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicStringString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPcKeyMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGamepadKeyMap(FlatBufferBuilder builder, VectorOffset gamepadKeyMapOffset) { builder.AddOffset(4, gamepadKeyMapOffset.Value, 0); }
  public static VectorOffset CreateGamepadKeyMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGamepadKeyMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGamepadKeyMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicStringString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGamepadKeyMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicStringString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGamepadKeyMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSecondaryKeyScaleMap(FlatBufferBuilder builder, VectorOffset secondaryKeyScaleMapOffset) { builder.AddOffset(5, secondaryKeyScaleMapOffset.Value, 0); }
  public static VectorOffset CreateSecondaryKeyScaleMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringFloat>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSecondaryKeyScaleMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringFloat>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSecondaryKeyScaleMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicStringFloat>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSecondaryKeyScaleMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicStringFloat>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSecondaryKeyScaleMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMobileIconPath(FlatBufferBuilder builder, StringOffset mobileIconPathOffset) { builder.AddOffset(6, mobileIconPathOffset.Value, 0); }
  public static void AddDisplayName(FlatBufferBuilder builder, StringOffset displayNameOffset) { builder.AddOffset(7, displayNameOffset.Value, 0); }
  public static void AddKeyboardVersion(FlatBufferBuilder builder, int keyboardVersion) { builder.AddInt(8, keyboardVersion, 0); }
  public static void AddGamepadVersion(FlatBufferBuilder builder, int gamepadVersion) { builder.AddInt(9, gamepadVersion, 0); }
  public static Offset<WWParser.Defs.CombinationAxis> EndCombinationAxis(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.CombinationAxis>(o);
  }
  public CombinationAxisT UnPack() {
    var _o = new CombinationAxisT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CombinationAxisT _o) {
    _o.Id = this.Id;
    _o.AxisName = this.AxisName;
    _o.AxisType = this.AxisType;
    _o.PcKeyMap = new List<WWParser.Defs.DicStringStringT>();
    for (var _j = 0; _j < this.PcKeyMapLength; ++_j) {_o.PcKeyMap.Add(this.PcKeyMap(_j).HasValue ? this.PcKeyMap(_j).Value.UnPack() : null);}
    _o.GamepadKeyMap = new List<WWParser.Defs.DicStringStringT>();
    for (var _j = 0; _j < this.GamepadKeyMapLength; ++_j) {_o.GamepadKeyMap.Add(this.GamepadKeyMap(_j).HasValue ? this.GamepadKeyMap(_j).Value.UnPack() : null);}
    _o.SecondaryKeyScaleMap = new List<WWParser.Defs.DicStringFloatT>();
    for (var _j = 0; _j < this.SecondaryKeyScaleMapLength; ++_j) {_o.SecondaryKeyScaleMap.Add(this.SecondaryKeyScaleMap(_j).HasValue ? this.SecondaryKeyScaleMap(_j).Value.UnPack() : null);}
    _o.MobileIconPath = this.MobileIconPath;
    _o.DisplayName = this.DisplayName;
    _o.KeyboardVersion = this.KeyboardVersion;
    _o.GamepadVersion = this.GamepadVersion;
  }
  public static Offset<WWParser.Defs.CombinationAxis> Pack(FlatBufferBuilder builder, CombinationAxisT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.CombinationAxis>);
    var _axis_name = _o.AxisName == null ? default(StringOffset) : builder.CreateString(_o.AxisName);
    var _pc_key_map = default(VectorOffset);
    if (_o.PcKeyMap != null) {
      var __pc_key_map = new Offset<WWParser.Defs.DicStringString>[_o.PcKeyMap.Count];
      for (var _j = 0; _j < __pc_key_map.Length; ++_j) { __pc_key_map[_j] = WWParser.Defs.DicStringString.Pack(builder, _o.PcKeyMap[_j]); }
      _pc_key_map = CreatePcKeyMapVector(builder, __pc_key_map);
    }
    var _gamepad_key_map = default(VectorOffset);
    if (_o.GamepadKeyMap != null) {
      var __gamepad_key_map = new Offset<WWParser.Defs.DicStringString>[_o.GamepadKeyMap.Count];
      for (var _j = 0; _j < __gamepad_key_map.Length; ++_j) { __gamepad_key_map[_j] = WWParser.Defs.DicStringString.Pack(builder, _o.GamepadKeyMap[_j]); }
      _gamepad_key_map = CreateGamepadKeyMapVector(builder, __gamepad_key_map);
    }
    var _secondary_key_scale_map = default(VectorOffset);
    if (_o.SecondaryKeyScaleMap != null) {
      var __secondary_key_scale_map = new Offset<WWParser.Defs.DicStringFloat>[_o.SecondaryKeyScaleMap.Count];
      for (var _j = 0; _j < __secondary_key_scale_map.Length; ++_j) { __secondary_key_scale_map[_j] = WWParser.Defs.DicStringFloat.Pack(builder, _o.SecondaryKeyScaleMap[_j]); }
      _secondary_key_scale_map = CreateSecondaryKeyScaleMapVector(builder, __secondary_key_scale_map);
    }
    var _mobile_icon_path = _o.MobileIconPath == null ? default(StringOffset) : builder.CreateString(_o.MobileIconPath);
    var _display_name = _o.DisplayName == null ? default(StringOffset) : builder.CreateString(_o.DisplayName);
    return CreateCombinationAxis(
      builder,
      _o.Id,
      _axis_name,
      _o.AxisType,
      _pc_key_map,
      _gamepad_key_map,
      _secondary_key_scale_map,
      _mobile_icon_path,
      _display_name,
      _o.KeyboardVersion,
      _o.GamepadVersion);
  }
}

public class CombinationAxisT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("axis_name")]
  public string AxisName { get; set; }
  [Newtonsoft.Json.JsonProperty("axis_type")]
  public int AxisType { get; set; }
  [Newtonsoft.Json.JsonProperty("pc_key_map")]
  public List<WWParser.Defs.DicStringStringT> PcKeyMap { get; set; }
  [Newtonsoft.Json.JsonProperty("gamepad_key_map")]
  public List<WWParser.Defs.DicStringStringT> GamepadKeyMap { get; set; }
  [Newtonsoft.Json.JsonProperty("secondary_key_scale_map")]
  public List<WWParser.Defs.DicStringFloatT> SecondaryKeyScaleMap { get; set; }
  [Newtonsoft.Json.JsonProperty("mobile_icon_path")]
  public string MobileIconPath { get; set; }
  [Newtonsoft.Json.JsonProperty("display_name")]
  public string DisplayName { get; set; }
  [Newtonsoft.Json.JsonProperty("keyboard_version")]
  public int KeyboardVersion { get; set; }
  [Newtonsoft.Json.JsonProperty("gamepad_version")]
  public int GamepadVersion { get; set; }

  public CombinationAxisT() {
    this.Id = 0;
    this.AxisName = null;
    this.AxisType = 0;
    this.PcKeyMap = null;
    this.GamepadKeyMap = null;
    this.SecondaryKeyScaleMap = null;
    this.MobileIconPath = null;
    this.DisplayName = null;
    this.KeyboardVersion = 0;
    this.GamepadVersion = 0;
  }
}


static public class CombinationAxisVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*AxisName*/, false)
      && verifier.VerifyField(tablePos, 8 /*AxisType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*PcKeyMap*/, WWParser.Defs.DicStringStringVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 12 /*GamepadKeyMap*/, WWParser.Defs.DicStringStringVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 14 /*SecondaryKeyScaleMap*/, WWParser.Defs.DicStringFloatVerify.Verify, false)
      && verifier.VerifyString(tablePos, 16 /*MobileIconPath*/, false)
      && verifier.VerifyString(tablePos, 18 /*DisplayName*/, false)
      && verifier.VerifyField(tablePos, 20 /*KeyboardVersion*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*GamepadVersion*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
