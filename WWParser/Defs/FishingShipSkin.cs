// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FishingShipSkin : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FishingShipSkin GetRootAsFishingShipSkin(ByteBuffer _bb) { return GetRootAsFishingShipSkin(_bb, new FishingShipSkin()); }
  public static FishingShipSkin GetRootAsFishingShipSkin(ByteBuffer _bb, FishingShipSkin obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FishingShipSkin __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string IconTexture { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconTextureBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIconTextureBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIconTextureArray() { return __p.__vector_as_array<byte>(8); }
  public string BigTexture { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBigTextureBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetBigTextureBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetBigTextureArray() { return __p.__vector_as_array<byte>(10); }
  public string DesText { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDesTextBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDesTextBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDesTextArray() { return __p.__vector_as_array<byte>(12); }
  public string LockText { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLockTextBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetLockTextBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetLockTextArray() { return __p.__vector_as_array<byte>(14); }
  public string Mesh { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMeshBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetMeshBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetMeshArray() { return __p.__vector_as_array<byte>(16); }
  public int TemplateId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TechLevel { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TechEffect { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.FishingShipSkin> CreateFishingShipSkin(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset icon_textureOffset = default(StringOffset),
      StringOffset big_textureOffset = default(StringOffset),
      StringOffset des_textOffset = default(StringOffset),
      StringOffset lock_textOffset = default(StringOffset),
      StringOffset meshOffset = default(StringOffset),
      int template_id = 0,
      int tech_level = 0,
      int tech_effect = 0) {
    builder.StartTable(10);
    FishingShipSkin.AddTechEffect(builder, tech_effect);
    FishingShipSkin.AddTechLevel(builder, tech_level);
    FishingShipSkin.AddTemplateId(builder, template_id);
    FishingShipSkin.AddMesh(builder, meshOffset);
    FishingShipSkin.AddLockText(builder, lock_textOffset);
    FishingShipSkin.AddDesText(builder, des_textOffset);
    FishingShipSkin.AddBigTexture(builder, big_textureOffset);
    FishingShipSkin.AddIconTexture(builder, icon_textureOffset);
    FishingShipSkin.AddName(builder, nameOffset);
    FishingShipSkin.AddId(builder, id);
    return FishingShipSkin.EndFishingShipSkin(builder);
  }

  public static void StartFishingShipSkin(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddIconTexture(FlatBufferBuilder builder, StringOffset iconTextureOffset) { builder.AddOffset(2, iconTextureOffset.Value, 0); }
  public static void AddBigTexture(FlatBufferBuilder builder, StringOffset bigTextureOffset) { builder.AddOffset(3, bigTextureOffset.Value, 0); }
  public static void AddDesText(FlatBufferBuilder builder, StringOffset desTextOffset) { builder.AddOffset(4, desTextOffset.Value, 0); }
  public static void AddLockText(FlatBufferBuilder builder, StringOffset lockTextOffset) { builder.AddOffset(5, lockTextOffset.Value, 0); }
  public static void AddMesh(FlatBufferBuilder builder, StringOffset meshOffset) { builder.AddOffset(6, meshOffset.Value, 0); }
  public static void AddTemplateId(FlatBufferBuilder builder, int templateId) { builder.AddInt(7, templateId, 0); }
  public static void AddTechLevel(FlatBufferBuilder builder, int techLevel) { builder.AddInt(8, techLevel, 0); }
  public static void AddTechEffect(FlatBufferBuilder builder, int techEffect) { builder.AddInt(9, techEffect, 0); }
  public static Offset<WWParser.Defs.FishingShipSkin> EndFishingShipSkin(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FishingShipSkin>(o);
  }
  public FishingShipSkinT UnPack() {
    var _o = new FishingShipSkinT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FishingShipSkinT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.IconTexture = this.IconTexture;
    _o.BigTexture = this.BigTexture;
    _o.DesText = this.DesText;
    _o.LockText = this.LockText;
    _o.Mesh = this.Mesh;
    _o.TemplateId = this.TemplateId;
    _o.TechLevel = this.TechLevel;
    _o.TechEffect = this.TechEffect;
  }
  public static Offset<WWParser.Defs.FishingShipSkin> Pack(FlatBufferBuilder builder, FishingShipSkinT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FishingShipSkin>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _icon_texture = _o.IconTexture == null ? default(StringOffset) : builder.CreateString(_o.IconTexture);
    var _big_texture = _o.BigTexture == null ? default(StringOffset) : builder.CreateString(_o.BigTexture);
    var _des_text = _o.DesText == null ? default(StringOffset) : builder.CreateString(_o.DesText);
    var _lock_text = _o.LockText == null ? default(StringOffset) : builder.CreateString(_o.LockText);
    var _mesh = _o.Mesh == null ? default(StringOffset) : builder.CreateString(_o.Mesh);
    return CreateFishingShipSkin(
      builder,
      _o.Id,
      _name,
      _icon_texture,
      _big_texture,
      _des_text,
      _lock_text,
      _mesh,
      _o.TemplateId,
      _o.TechLevel,
      _o.TechEffect);
  }
}

public class FishingShipSkinT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_texture")]
  public string IconTexture { get; set; }
  [Newtonsoft.Json.JsonProperty("big_texture")]
  public string BigTexture { get; set; }
  [Newtonsoft.Json.JsonProperty("des_text")]
  public string DesText { get; set; }
  [Newtonsoft.Json.JsonProperty("lock_text")]
  public string LockText { get; set; }
  [Newtonsoft.Json.JsonProperty("mesh")]
  public string Mesh { get; set; }
  [Newtonsoft.Json.JsonProperty("template_id")]
  public int TemplateId { get; set; }
  [Newtonsoft.Json.JsonProperty("tech_level")]
  public int TechLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("tech_effect")]
  public int TechEffect { get; set; }

  public FishingShipSkinT() {
    this.Id = 0;
    this.Name = null;
    this.IconTexture = null;
    this.BigTexture = null;
    this.DesText = null;
    this.LockText = null;
    this.Mesh = null;
    this.TemplateId = 0;
    this.TechLevel = 0;
    this.TechEffect = 0;
  }
}


static public class FishingShipSkinVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyString(tablePos, 8 /*IconTexture*/, false)
      && verifier.VerifyString(tablePos, 10 /*BigTexture*/, false)
      && verifier.VerifyString(tablePos, 12 /*DesText*/, false)
      && verifier.VerifyString(tablePos, 14 /*LockText*/, false)
      && verifier.VerifyString(tablePos, 16 /*Mesh*/, false)
      && verifier.VerifyField(tablePos, 18 /*TemplateId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*TechLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*TechEffect*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
