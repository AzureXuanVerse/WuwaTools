// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SettleFlag : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SettleFlag GetRootAsSettleFlag(ByteBuffer _bb) { return GetRootAsSettleFlag(_bb, new SettleFlag()); }
  public static SettleFlag GetRootAsSettleFlag(ByteBuffer _bb, SettleFlag obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SettleFlag __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Priority { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(8); }
  public string Content { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetContentBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetContentArray() { return __p.__vector_as_array<byte>(10); }
  public int Args { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }

  public static Offset<WWParser.Defs.SettleFlag> CreateSettleFlag(FlatBufferBuilder builder,
      int id = 0,
      int priority = 0,
      StringOffset titleOffset = default(StringOffset),
      StringOffset contentOffset = default(StringOffset),
      int args = -1) {
    builder.StartTable(5);
    SettleFlag.AddArgs(builder, args);
    SettleFlag.AddContent(builder, contentOffset);
    SettleFlag.AddTitle(builder, titleOffset);
    SettleFlag.AddPriority(builder, priority);
    SettleFlag.AddId(builder, id);
    return SettleFlag.EndSettleFlag(builder);
  }

  public static void StartSettleFlag(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(1, priority, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(2, titleOffset.Value, 0); }
  public static void AddContent(FlatBufferBuilder builder, StringOffset contentOffset) { builder.AddOffset(3, contentOffset.Value, 0); }
  public static void AddArgs(FlatBufferBuilder builder, int args) { builder.AddInt(4, args, -1); }
  public static Offset<WWParser.Defs.SettleFlag> EndSettleFlag(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SettleFlag>(o);
  }
  public SettleFlagT UnPack() {
    var _o = new SettleFlagT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SettleFlagT _o) {
    _o.Id = this.Id;
    _o.Priority = this.Priority;
    _o.Title = this.Title;
    _o.Content = this.Content;
    _o.Args = this.Args;
  }
  public static Offset<WWParser.Defs.SettleFlag> Pack(FlatBufferBuilder builder, SettleFlagT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SettleFlag>);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _content = _o.Content == null ? default(StringOffset) : builder.CreateString(_o.Content);
    return CreateSettleFlag(
      builder,
      _o.Id,
      _o.Priority,
      _title,
      _content,
      _o.Args);
  }
}

public class SettleFlagT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("priority")]
  public int Priority { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("content")]
  public string Content { get; set; }
  [Newtonsoft.Json.JsonProperty("args")]
  public int Args { get; set; }

  public SettleFlagT() {
    this.Id = 0;
    this.Priority = 0;
    this.Title = null;
    this.Content = null;
    this.Args = -1;
  }
}


static public class SettleFlagVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Priority*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Title*/, false)
      && verifier.VerifyString(tablePos, 10 /*Content*/, false)
      && verifier.VerifyField(tablePos, 12 /*Args*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
