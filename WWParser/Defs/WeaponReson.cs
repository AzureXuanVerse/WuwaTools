// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct WeaponReson : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static WeaponReson GetRootAsWeaponReson(ByteBuffer _bb) { return GetRootAsWeaponReson(_bb, new WeaponReson()); }
  public static WeaponReson GetRootAsWeaponReson(ByteBuffer _bb, WeaponReson obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WeaponReson __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ResonId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public double Effect(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int EffectLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetEffectBytes() { return __p.__vector_as_span<double>(12, 8); }
#else
  public ArraySegment<byte>? GetEffectBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public double[] GetEffectArray() { return __p.__vector_as_array<double>(12); }
  public int Consume { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GoldConsume { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AlternativeConsume(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AlternativeConsumeLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAlternativeConsumeBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetAlternativeConsumeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetAlternativeConsumeArray() { return __p.__vector_as_array<int>(18); }

  public static Offset<WWParser.Defs.WeaponReson> CreateWeaponReson(FlatBufferBuilder builder,
      int id = 0,
      int reson_id = 0,
      int level = 0,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset effectOffset = default(VectorOffset),
      int consume = 0,
      int gold_consume = 0,
      VectorOffset alternative_consumeOffset = default(VectorOffset)) {
    builder.StartTable(8);
    WeaponReson.AddAlternativeConsume(builder, alternative_consumeOffset);
    WeaponReson.AddGoldConsume(builder, gold_consume);
    WeaponReson.AddConsume(builder, consume);
    WeaponReson.AddEffect(builder, effectOffset);
    WeaponReson.AddName(builder, nameOffset);
    WeaponReson.AddLevel(builder, level);
    WeaponReson.AddResonId(builder, reson_id);
    WeaponReson.AddId(builder, id);
    return WeaponReson.EndWeaponReson(builder);
  }

  public static void StartWeaponReson(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddResonId(FlatBufferBuilder builder, int resonId) { builder.AddInt(1, resonId, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(2, level, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddEffect(FlatBufferBuilder builder, VectorOffset effectOffset) { builder.AddOffset(4, effectOffset.Value, 0); }
  public static VectorOffset CreateEffectVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEffectVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEffectVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEffectVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEffectVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddConsume(FlatBufferBuilder builder, int consume) { builder.AddInt(5, consume, 0); }
  public static void AddGoldConsume(FlatBufferBuilder builder, int goldConsume) { builder.AddInt(6, goldConsume, 0); }
  public static void AddAlternativeConsume(FlatBufferBuilder builder, VectorOffset alternativeConsumeOffset) { builder.AddOffset(7, alternativeConsumeOffset.Value, 0); }
  public static VectorOffset CreateAlternativeConsumeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAlternativeConsumeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAlternativeConsumeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAlternativeConsumeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAlternativeConsumeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.WeaponReson> EndWeaponReson(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.WeaponReson>(o);
  }
  public WeaponResonT UnPack() {
    var _o = new WeaponResonT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WeaponResonT _o) {
    _o.Id = this.Id;
    _o.ResonId = this.ResonId;
    _o.Level = this.Level;
    _o.Name = this.Name;
    _o.Effect = new List<double>();
    for (var _j = 0; _j < this.EffectLength; ++_j) {_o.Effect.Add(this.Effect(_j));}
    _o.Consume = this.Consume;
    _o.GoldConsume = this.GoldConsume;
    _o.AlternativeConsume = new List<int>();
    for (var _j = 0; _j < this.AlternativeConsumeLength; ++_j) {_o.AlternativeConsume.Add(this.AlternativeConsume(_j));}
  }
  public static Offset<WWParser.Defs.WeaponReson> Pack(FlatBufferBuilder builder, WeaponResonT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.WeaponReson>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _effect = default(VectorOffset);
    if (_o.Effect != null) {
      var __effect = _o.Effect.ToArray();
      _effect = CreateEffectVector(builder, __effect);
    }
    var _alternative_consume = default(VectorOffset);
    if (_o.AlternativeConsume != null) {
      var __alternative_consume = _o.AlternativeConsume.ToArray();
      _alternative_consume = CreateAlternativeConsumeVector(builder, __alternative_consume);
    }
    return CreateWeaponReson(
      builder,
      _o.Id,
      _o.ResonId,
      _o.Level,
      _name,
      _effect,
      _o.Consume,
      _o.GoldConsume,
      _alternative_consume);
  }
}

public class WeaponResonT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("reson_id")]
  public int ResonId { get; set; }
  [Newtonsoft.Json.JsonProperty("level")]
  public int Level { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("effect")]
  public List<double> Effect { get; set; }
  [Newtonsoft.Json.JsonProperty("consume")]
  public int Consume { get; set; }
  [Newtonsoft.Json.JsonProperty("gold_consume")]
  public int GoldConsume { get; set; }
  [Newtonsoft.Json.JsonProperty("alternative_consume")]
  public List<int> AlternativeConsume { get; set; }

  public WeaponResonT() {
    this.Id = 0;
    this.ResonId = 0;
    this.Level = 0;
    this.Name = null;
    this.Effect = null;
    this.Consume = 0;
    this.GoldConsume = 0;
    this.AlternativeConsume = null;
  }
}


static public class WeaponResonVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ResonId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Name*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*Effect*/, 8 /*double*/, false)
      && verifier.VerifyField(tablePos, 14 /*Consume*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*GoldConsume*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*AlternativeConsume*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
