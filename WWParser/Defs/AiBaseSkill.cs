// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiBaseSkill : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AiBaseSkill GetRootAsAiBaseSkill(ByteBuffer _bb) { return GetRootAsAiBaseSkill(_bb, new AiBaseSkill()); }
  public static AiBaseSkill GetRootAsAiBaseSkill(ByteBuffer _bb, AiBaseSkill obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiBaseSkill __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.IntArray? RandomSkills(int j) { int o = __p.__offset(6); return o != 0 ? (WWParser.Defs.IntArray?)(new WWParser.Defs.IntArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RandomSkillsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.AiBaseSkill> CreateAiBaseSkill(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset random_skillsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    AiBaseSkill.AddRandomSkills(builder, random_skillsOffset);
    AiBaseSkill.AddId(builder, id);
    return AiBaseSkill.EndAiBaseSkill(builder);
  }

  public static void StartAiBaseSkill(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddRandomSkills(FlatBufferBuilder builder, VectorOffset randomSkillsOffset) { builder.AddOffset(1, randomSkillsOffset.Value, 0); }
  public static VectorOffset CreateRandomSkillsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRandomSkillsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRandomSkillsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.IntArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRandomSkillsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.IntArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRandomSkillsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.AiBaseSkill> EndAiBaseSkill(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AiBaseSkill>(o);
  }
  public AiBaseSkillT UnPack() {
    var _o = new AiBaseSkillT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AiBaseSkillT _o) {
    _o.Id = this.Id;
    _o.RandomSkills = new List<WWParser.Defs.IntArrayT>();
    for (var _j = 0; _j < this.RandomSkillsLength; ++_j) {_o.RandomSkills.Add(this.RandomSkills(_j).HasValue ? this.RandomSkills(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.AiBaseSkill> Pack(FlatBufferBuilder builder, AiBaseSkillT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AiBaseSkill>);
    var _random_skills = default(VectorOffset);
    if (_o.RandomSkills != null) {
      var __random_skills = new Offset<WWParser.Defs.IntArray>[_o.RandomSkills.Count];
      for (var _j = 0; _j < __random_skills.Length; ++_j) { __random_skills[_j] = WWParser.Defs.IntArray.Pack(builder, _o.RandomSkills[_j]); }
      _random_skills = CreateRandomSkillsVector(builder, __random_skills);
    }
    return CreateAiBaseSkill(
      builder,
      _o.Id,
      _random_skills);
  }
}

public class AiBaseSkillT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("random_skills")]
  public List<WWParser.Defs.IntArrayT> RandomSkills { get; set; }

  public AiBaseSkillT() {
    this.Id = 0;
    this.RandomSkills = null;
  }
}


static public class AiBaseSkillVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*RandomSkills*/, WWParser.Defs.IntArrayVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
