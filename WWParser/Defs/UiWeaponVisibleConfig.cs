// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct UiWeaponVisibleConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static UiWeaponVisibleConfig GetRootAsUiWeaponVisibleConfig(ByteBuffer _bb) { return GetRootAsUiWeaponVisibleConfig(_bb, new UiWeaponVisibleConfig()); }
  public static UiWeaponVisibleConfig GetRootAsUiWeaponVisibleConfig(ByteBuffer _bb, UiWeaponVisibleConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UiWeaponVisibleConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool VisibleList(int j) { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(__p.__vector(o) + j * 1) : false; }
  public int VisibleListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<bool> GetVisibleListBytes() { return __p.__vector_as_span<bool>(6, 1); }
#else
  public ArraySegment<byte>? GetVisibleListBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public bool[] GetVisibleListArray() { return __p.__vector_as_array<bool>(6); }

  public static Offset<WWParser.Defs.UiWeaponVisibleConfig> CreateUiWeaponVisibleConfig(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset visible_listOffset = default(VectorOffset)) {
    builder.StartTable(2);
    UiWeaponVisibleConfig.AddVisibleList(builder, visible_listOffset);
    UiWeaponVisibleConfig.AddId(builder, id);
    return UiWeaponVisibleConfig.EndUiWeaponVisibleConfig(builder);
  }

  public static void StartUiWeaponVisibleConfig(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddVisibleList(FlatBufferBuilder builder, VectorOffset visibleListOffset) { builder.AddOffset(1, visibleListOffset.Value, 0); }
  public static VectorOffset CreateVisibleListVector(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddBool(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateVisibleListVectorBlock(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVisibleListVectorBlock(FlatBufferBuilder builder, ArraySegment<bool> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVisibleListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<bool>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVisibleListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<WWParser.Defs.UiWeaponVisibleConfig> EndUiWeaponVisibleConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.UiWeaponVisibleConfig>(o);
  }
  public UiWeaponVisibleConfigT UnPack() {
    var _o = new UiWeaponVisibleConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(UiWeaponVisibleConfigT _o) {
    _o.Id = this.Id;
    _o.VisibleList = new List<bool>();
    for (var _j = 0; _j < this.VisibleListLength; ++_j) {_o.VisibleList.Add(this.VisibleList(_j));}
  }
  public static Offset<WWParser.Defs.UiWeaponVisibleConfig> Pack(FlatBufferBuilder builder, UiWeaponVisibleConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.UiWeaponVisibleConfig>);
    var _visible_list = default(VectorOffset);
    if (_o.VisibleList != null) {
      var __visible_list = _o.VisibleList.ToArray();
      _visible_list = CreateVisibleListVector(builder, __visible_list);
    }
    return CreateUiWeaponVisibleConfig(
      builder,
      _o.Id,
      _visible_list);
  }
}

public class UiWeaponVisibleConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("visible_list")]
  public List<bool> VisibleList { get; set; }

  public UiWeaponVisibleConfigT() {
    this.Id = 0;
    this.VisibleList = null;
  }
}


static public class UiWeaponVisibleConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*VisibleList*/, 1 /*bool*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
