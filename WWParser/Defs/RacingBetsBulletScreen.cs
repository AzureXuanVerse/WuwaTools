// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RacingBetsBulletScreen : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RacingBetsBulletScreen GetRootAsRacingBetsBulletScreen(ByteBuffer _bb) { return GetRootAsRacingBetsBulletScreen(_bb, new RacingBetsBulletScreen()); }
  public static RacingBetsBulletScreen GetRootAsRacingBetsBulletScreen(ByteBuffer _bb, RacingBetsBulletScreen obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RacingBetsBulletScreen __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SeasonId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DangoId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Icon { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(12); }
  public string Name { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<WWParser.Defs.RacingBetsBulletScreen> CreateRacingBetsBulletScreen(FlatBufferBuilder builder,
      int id = 0,
      int season_id = 0,
      int type = 0,
      int dango_id = 0,
      StringOffset iconOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset)) {
    builder.StartTable(6);
    RacingBetsBulletScreen.AddName(builder, nameOffset);
    RacingBetsBulletScreen.AddIcon(builder, iconOffset);
    RacingBetsBulletScreen.AddDangoId(builder, dango_id);
    RacingBetsBulletScreen.AddType(builder, type);
    RacingBetsBulletScreen.AddSeasonId(builder, season_id);
    RacingBetsBulletScreen.AddId(builder, id);
    return RacingBetsBulletScreen.EndRacingBetsBulletScreen(builder);
  }

  public static void StartRacingBetsBulletScreen(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddSeasonId(FlatBufferBuilder builder, int seasonId) { builder.AddInt(1, seasonId, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(2, type, 0); }
  public static void AddDangoId(FlatBufferBuilder builder, int dangoId) { builder.AddInt(3, dangoId, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(4, iconOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(5, nameOffset.Value, 0); }
  public static Offset<WWParser.Defs.RacingBetsBulletScreen> EndRacingBetsBulletScreen(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RacingBetsBulletScreen>(o);
  }
  public RacingBetsBulletScreenT UnPack() {
    var _o = new RacingBetsBulletScreenT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RacingBetsBulletScreenT _o) {
    _o.Id = this.Id;
    _o.SeasonId = this.SeasonId;
    _o.Type = this.Type;
    _o.DangoId = this.DangoId;
    _o.Icon = this.Icon;
    _o.Name = this.Name;
  }
  public static Offset<WWParser.Defs.RacingBetsBulletScreen> Pack(FlatBufferBuilder builder, RacingBetsBulletScreenT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RacingBetsBulletScreen>);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateRacingBetsBulletScreen(
      builder,
      _o.Id,
      _o.SeasonId,
      _o.Type,
      _o.DangoId,
      _icon,
      _name);
  }
}

public class RacingBetsBulletScreenT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("season_id")]
  public int SeasonId { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("dango_id")]
  public int DangoId { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }

  public RacingBetsBulletScreenT() {
    this.Id = 0;
    this.SeasonId = 0;
    this.Type = 0;
    this.DangoId = 0;
    this.Icon = null;
    this.Name = null;
  }
}


static public class RacingBetsBulletScreenVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SeasonId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*DangoId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 14 /*Name*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
