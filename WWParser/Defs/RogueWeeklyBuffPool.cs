// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueWeeklyBuffPool : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueWeeklyBuffPool GetRootAsRogueWeeklyBuffPool(ByteBuffer _bb) { return GetRootAsRogueWeeklyBuffPool(_bb, new RogueWeeklyBuffPool()); }
  public static RogueWeeklyBuffPool GetRootAsRogueWeeklyBuffPool(ByteBuffer _bb, RogueWeeklyBuffPool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueWeeklyBuffPool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public double BuffId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public int PerIds(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PerIdsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPerIdsBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetPerIdsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetPerIdsArray() { return __p.__vector_as_array<int>(8); }
  public int Quality { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)3; } }
  public string BuffIcon { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffIconBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetBuffIconBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetBuffIconArray() { return __p.__vector_as_array<byte>(12); }
  public string BuffDesc { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffDescBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetBuffDescBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetBuffDescArray() { return __p.__vector_as_array<byte>(14); }
  public string BuffDescParam(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BuffDescParamLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string BuffDescSimple { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffDescSimpleBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetBuffDescSimpleBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetBuffDescSimpleArray() { return __p.__vector_as_array<byte>(18); }
  public string BuffName { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffNameBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetBuffNameBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetBuffNameArray() { return __p.__vector_as_array<byte>(20); }

  public static Offset<WWParser.Defs.RogueWeeklyBuffPool> CreateRogueWeeklyBuffPool(FlatBufferBuilder builder,
      int id = 0,
      double buff_id = 0.0,
      VectorOffset per_idsOffset = default(VectorOffset),
      int quality = 3,
      StringOffset buff_iconOffset = default(StringOffset),
      StringOffset buff_descOffset = default(StringOffset),
      VectorOffset buff_desc_paramOffset = default(VectorOffset),
      StringOffset buff_desc_simpleOffset = default(StringOffset),
      StringOffset buff_nameOffset = default(StringOffset)) {
    builder.StartTable(9);
    RogueWeeklyBuffPool.AddBuffId(builder, buff_id);
    RogueWeeklyBuffPool.AddBuffName(builder, buff_nameOffset);
    RogueWeeklyBuffPool.AddBuffDescSimple(builder, buff_desc_simpleOffset);
    RogueWeeklyBuffPool.AddBuffDescParam(builder, buff_desc_paramOffset);
    RogueWeeklyBuffPool.AddBuffDesc(builder, buff_descOffset);
    RogueWeeklyBuffPool.AddBuffIcon(builder, buff_iconOffset);
    RogueWeeklyBuffPool.AddQuality(builder, quality);
    RogueWeeklyBuffPool.AddPerIds(builder, per_idsOffset);
    RogueWeeklyBuffPool.AddId(builder, id);
    return RogueWeeklyBuffPool.EndRogueWeeklyBuffPool(builder);
  }

  public static void StartRogueWeeklyBuffPool(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddBuffId(FlatBufferBuilder builder, double buffId) { builder.AddDouble(1, buffId, 0.0); }
  public static void AddPerIds(FlatBufferBuilder builder, VectorOffset perIdsOffset) { builder.AddOffset(2, perIdsOffset.Value, 0); }
  public static VectorOffset CreatePerIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePerIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePerIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePerIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPerIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddQuality(FlatBufferBuilder builder, int quality) { builder.AddInt(3, quality, 3); }
  public static void AddBuffIcon(FlatBufferBuilder builder, StringOffset buffIconOffset) { builder.AddOffset(4, buffIconOffset.Value, 0); }
  public static void AddBuffDesc(FlatBufferBuilder builder, StringOffset buffDescOffset) { builder.AddOffset(5, buffDescOffset.Value, 0); }
  public static void AddBuffDescParam(FlatBufferBuilder builder, VectorOffset buffDescParamOffset) { builder.AddOffset(6, buffDescParamOffset.Value, 0); }
  public static VectorOffset CreateBuffDescParamVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBuffDescParamVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffDescParamVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffDescParamVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffDescParamVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffDescSimple(FlatBufferBuilder builder, StringOffset buffDescSimpleOffset) { builder.AddOffset(7, buffDescSimpleOffset.Value, 0); }
  public static void AddBuffName(FlatBufferBuilder builder, StringOffset buffNameOffset) { builder.AddOffset(8, buffNameOffset.Value, 0); }
  public static Offset<WWParser.Defs.RogueWeeklyBuffPool> EndRogueWeeklyBuffPool(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueWeeklyBuffPool>(o);
  }
  public RogueWeeklyBuffPoolT UnPack() {
    var _o = new RogueWeeklyBuffPoolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueWeeklyBuffPoolT _o) {
    _o.Id = this.Id;
    _o.BuffId = this.BuffId;
    _o.PerIds = new List<int>();
    for (var _j = 0; _j < this.PerIdsLength; ++_j) {_o.PerIds.Add(this.PerIds(_j));}
    _o.Quality = this.Quality;
    _o.BuffIcon = this.BuffIcon;
    _o.BuffDesc = this.BuffDesc;
    _o.BuffDescParam = new List<string>();
    for (var _j = 0; _j < this.BuffDescParamLength; ++_j) {_o.BuffDescParam.Add(this.BuffDescParam(_j));}
    _o.BuffDescSimple = this.BuffDescSimple;
    _o.BuffName = this.BuffName;
  }
  public static Offset<WWParser.Defs.RogueWeeklyBuffPool> Pack(FlatBufferBuilder builder, RogueWeeklyBuffPoolT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueWeeklyBuffPool>);
    var _per_ids = default(VectorOffset);
    if (_o.PerIds != null) {
      var __per_ids = _o.PerIds.ToArray();
      _per_ids = CreatePerIdsVector(builder, __per_ids);
    }
    var _buff_icon = _o.BuffIcon == null ? default(StringOffset) : builder.CreateString(_o.BuffIcon);
    var _buff_desc = _o.BuffDesc == null ? default(StringOffset) : builder.CreateString(_o.BuffDesc);
    var _buff_desc_param = default(VectorOffset);
    if (_o.BuffDescParam != null) {
      var __buff_desc_param = new StringOffset[_o.BuffDescParam.Count];
      for (var _j = 0; _j < __buff_desc_param.Length; ++_j) { __buff_desc_param[_j] = builder.CreateString(_o.BuffDescParam[_j]); }
      _buff_desc_param = CreateBuffDescParamVector(builder, __buff_desc_param);
    }
    var _buff_desc_simple = _o.BuffDescSimple == null ? default(StringOffset) : builder.CreateString(_o.BuffDescSimple);
    var _buff_name = _o.BuffName == null ? default(StringOffset) : builder.CreateString(_o.BuffName);
    return CreateRogueWeeklyBuffPool(
      builder,
      _o.Id,
      _o.BuffId,
      _per_ids,
      _o.Quality,
      _buff_icon,
      _buff_desc,
      _buff_desc_param,
      _buff_desc_simple,
      _buff_name);
  }
}

public class RogueWeeklyBuffPoolT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_id")]
  public double BuffId { get; set; }
  [Newtonsoft.Json.JsonProperty("per_ids")]
  public List<int> PerIds { get; set; }
  [Newtonsoft.Json.JsonProperty("quality")]
  public int Quality { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_icon")]
  public string BuffIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_desc")]
  public string BuffDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_desc_param")]
  public List<string> BuffDescParam { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_desc_simple")]
  public string BuffDescSimple { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_name")]
  public string BuffName { get; set; }

  public RogueWeeklyBuffPoolT() {
    this.Id = 0;
    this.BuffId = 0.0;
    this.PerIds = null;
    this.Quality = 3;
    this.BuffIcon = null;
    this.BuffDesc = null;
    this.BuffDescParam = null;
    this.BuffDescSimple = null;
    this.BuffName = null;
  }
}


static public class RogueWeeklyBuffPoolVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*BuffId*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*PerIds*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 10 /*Quality*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*BuffIcon*/, false)
      && verifier.VerifyString(tablePos, 14 /*BuffDesc*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 16 /*BuffDescParam*/, false)
      && verifier.VerifyString(tablePos, 18 /*BuffDescSimple*/, false)
      && verifier.VerifyString(tablePos, 20 /*BuffName*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
