// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FormationProperty : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FormationProperty GetRootAsFormationProperty(ByteBuffer _bb) { return GetRootAsFormationProperty(_bb, new FormationProperty()); }
  public static FormationProperty GetRootAsFormationProperty(ByteBuffer _bb, FormationProperty obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FormationProperty __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InitValue { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InitRecoveryRate { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-500; } }
  public int InitMax { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)10000; } }
  public string MarkTag(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MarkTagLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ResistTag(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ResistTagLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.FloatRange? TriggerRange1 { get { int o = __p.__offset(16); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int TriggerType1 { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TriggerEffect1 { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public double TriggerEffectParams1(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int TriggerEffectParams1Length { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetTriggerEffectParams1Bytes() { return __p.__vector_as_span<double>(22, 8); }
#else
  public ArraySegment<byte>? GetTriggerEffectParams1Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public double[] GetTriggerEffectParams1Array() { return __p.__vector_as_array<double>(22); }
  public WWParser.Defs.FloatRange? TriggerRange2 { get { int o = __p.__offset(24); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int TriggerType2 { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TriggerEffect2 { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public double TriggerEffectParams2(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int TriggerEffectParams2Length { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetTriggerEffectParams2Bytes() { return __p.__vector_as_span<double>(30, 8); }
#else
  public ArraySegment<byte>? GetTriggerEffectParams2Bytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public double[] GetTriggerEffectParams2Array() { return __p.__vector_as_array<double>(30); }
  public WWParser.Defs.FloatRange? TriggerRange3 { get { int o = __p.__offset(32); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int TriggerType3 { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TriggerEffect3 { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public double TriggerEffectParams3(int j) { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int TriggerEffectParams3Length { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetTriggerEffectParams3Bytes() { return __p.__vector_as_span<double>(38, 8); }
#else
  public ArraySegment<byte>? GetTriggerEffectParams3Bytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public double[] GetTriggerEffectParams3Array() { return __p.__vector_as_array<double>(38); }
  public int Condition { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PropertyIndex { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.FormationProperty> CreateFormationProperty(FlatBufferBuilder builder,
      int id = 0,
      int init_value = 0,
      int init_recovery_rate = -500,
      int init_max = 10000,
      VectorOffset mark_tagOffset = default(VectorOffset),
      VectorOffset resist_tagOffset = default(VectorOffset),
      Offset<WWParser.Defs.FloatRange> trigger_range1Offset = default(Offset<WWParser.Defs.FloatRange>),
      int trigger_type1 = 0,
      int trigger_effect1 = 0,
      VectorOffset trigger_effect_params1Offset = default(VectorOffset),
      Offset<WWParser.Defs.FloatRange> trigger_range2Offset = default(Offset<WWParser.Defs.FloatRange>),
      int trigger_type2 = 0,
      int trigger_effect2 = 0,
      VectorOffset trigger_effect_params2Offset = default(VectorOffset),
      Offset<WWParser.Defs.FloatRange> trigger_range3Offset = default(Offset<WWParser.Defs.FloatRange>),
      int trigger_type3 = 0,
      int trigger_effect3 = 0,
      VectorOffset trigger_effect_params3Offset = default(VectorOffset),
      int condition = 0,
      int property_index = 0) {
    builder.StartTable(20);
    FormationProperty.AddPropertyIndex(builder, property_index);
    FormationProperty.AddCondition(builder, condition);
    FormationProperty.AddTriggerEffectParams3(builder, trigger_effect_params3Offset);
    FormationProperty.AddTriggerEffect3(builder, trigger_effect3);
    FormationProperty.AddTriggerType3(builder, trigger_type3);
    FormationProperty.AddTriggerRange3(builder, trigger_range3Offset);
    FormationProperty.AddTriggerEffectParams2(builder, trigger_effect_params2Offset);
    FormationProperty.AddTriggerEffect2(builder, trigger_effect2);
    FormationProperty.AddTriggerType2(builder, trigger_type2);
    FormationProperty.AddTriggerRange2(builder, trigger_range2Offset);
    FormationProperty.AddTriggerEffectParams1(builder, trigger_effect_params1Offset);
    FormationProperty.AddTriggerEffect1(builder, trigger_effect1);
    FormationProperty.AddTriggerType1(builder, trigger_type1);
    FormationProperty.AddTriggerRange1(builder, trigger_range1Offset);
    FormationProperty.AddResistTag(builder, resist_tagOffset);
    FormationProperty.AddMarkTag(builder, mark_tagOffset);
    FormationProperty.AddInitMax(builder, init_max);
    FormationProperty.AddInitRecoveryRate(builder, init_recovery_rate);
    FormationProperty.AddInitValue(builder, init_value);
    FormationProperty.AddId(builder, id);
    return FormationProperty.EndFormationProperty(builder);
  }

  public static void StartFormationProperty(FlatBufferBuilder builder) { builder.StartTable(20); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddInitValue(FlatBufferBuilder builder, int initValue) { builder.AddInt(1, initValue, 0); }
  public static void AddInitRecoveryRate(FlatBufferBuilder builder, int initRecoveryRate) { builder.AddInt(2, initRecoveryRate, -500); }
  public static void AddInitMax(FlatBufferBuilder builder, int initMax) { builder.AddInt(3, initMax, 10000); }
  public static void AddMarkTag(FlatBufferBuilder builder, VectorOffset markTagOffset) { builder.AddOffset(4, markTagOffset.Value, 0); }
  public static VectorOffset CreateMarkTagVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMarkTagVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMarkTagVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMarkTagVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMarkTagVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddResistTag(FlatBufferBuilder builder, VectorOffset resistTagOffset) { builder.AddOffset(5, resistTagOffset.Value, 0); }
  public static VectorOffset CreateResistTagVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateResistTagVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateResistTagVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateResistTagVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartResistTagVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTriggerRange1(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> triggerRange1Offset) { builder.AddOffset(6, triggerRange1Offset.Value, 0); }
  public static void AddTriggerType1(FlatBufferBuilder builder, int triggerType1) { builder.AddInt(7, triggerType1, 0); }
  public static void AddTriggerEffect1(FlatBufferBuilder builder, int triggerEffect1) { builder.AddInt(8, triggerEffect1, 0); }
  public static void AddTriggerEffectParams1(FlatBufferBuilder builder, VectorOffset triggerEffectParams1Offset) { builder.AddOffset(9, triggerEffectParams1Offset.Value, 0); }
  public static VectorOffset CreateTriggerEffectParams1Vector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTriggerEffectParams1VectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTriggerEffectParams1VectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTriggerEffectParams1VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTriggerEffectParams1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddTriggerRange2(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> triggerRange2Offset) { builder.AddOffset(10, triggerRange2Offset.Value, 0); }
  public static void AddTriggerType2(FlatBufferBuilder builder, int triggerType2) { builder.AddInt(11, triggerType2, 0); }
  public static void AddTriggerEffect2(FlatBufferBuilder builder, int triggerEffect2) { builder.AddInt(12, triggerEffect2, 0); }
  public static void AddTriggerEffectParams2(FlatBufferBuilder builder, VectorOffset triggerEffectParams2Offset) { builder.AddOffset(13, triggerEffectParams2Offset.Value, 0); }
  public static VectorOffset CreateTriggerEffectParams2Vector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTriggerEffectParams2VectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTriggerEffectParams2VectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTriggerEffectParams2VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTriggerEffectParams2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddTriggerRange3(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> triggerRange3Offset) { builder.AddOffset(14, triggerRange3Offset.Value, 0); }
  public static void AddTriggerType3(FlatBufferBuilder builder, int triggerType3) { builder.AddInt(15, triggerType3, 0); }
  public static void AddTriggerEffect3(FlatBufferBuilder builder, int triggerEffect3) { builder.AddInt(16, triggerEffect3, 0); }
  public static void AddTriggerEffectParams3(FlatBufferBuilder builder, VectorOffset triggerEffectParams3Offset) { builder.AddOffset(17, triggerEffectParams3Offset.Value, 0); }
  public static VectorOffset CreateTriggerEffectParams3Vector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTriggerEffectParams3VectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTriggerEffectParams3VectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTriggerEffectParams3VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTriggerEffectParams3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddCondition(FlatBufferBuilder builder, int condition) { builder.AddInt(18, condition, 0); }
  public static void AddPropertyIndex(FlatBufferBuilder builder, int propertyIndex) { builder.AddInt(19, propertyIndex, 0); }
  public static Offset<WWParser.Defs.FormationProperty> EndFormationProperty(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FormationProperty>(o);
  }
  public FormationPropertyT UnPack() {
    var _o = new FormationPropertyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FormationPropertyT _o) {
    _o.Id = this.Id;
    _o.InitValue = this.InitValue;
    _o.InitRecoveryRate = this.InitRecoveryRate;
    _o.InitMax = this.InitMax;
    _o.MarkTag = new List<string>();
    for (var _j = 0; _j < this.MarkTagLength; ++_j) {_o.MarkTag.Add(this.MarkTag(_j));}
    _o.ResistTag = new List<string>();
    for (var _j = 0; _j < this.ResistTagLength; ++_j) {_o.ResistTag.Add(this.ResistTag(_j));}
    _o.TriggerRange1 = this.TriggerRange1.HasValue ? this.TriggerRange1.Value.UnPack() : null;
    _o.TriggerType1 = this.TriggerType1;
    _o.TriggerEffect1 = this.TriggerEffect1;
    _o.TriggerEffectParams1 = new List<double>();
    for (var _j = 0; _j < this.TriggerEffectParams1Length; ++_j) {_o.TriggerEffectParams1.Add(this.TriggerEffectParams1(_j));}
    _o.TriggerRange2 = this.TriggerRange2.HasValue ? this.TriggerRange2.Value.UnPack() : null;
    _o.TriggerType2 = this.TriggerType2;
    _o.TriggerEffect2 = this.TriggerEffect2;
    _o.TriggerEffectParams2 = new List<double>();
    for (var _j = 0; _j < this.TriggerEffectParams2Length; ++_j) {_o.TriggerEffectParams2.Add(this.TriggerEffectParams2(_j));}
    _o.TriggerRange3 = this.TriggerRange3.HasValue ? this.TriggerRange3.Value.UnPack() : null;
    _o.TriggerType3 = this.TriggerType3;
    _o.TriggerEffect3 = this.TriggerEffect3;
    _o.TriggerEffectParams3 = new List<double>();
    for (var _j = 0; _j < this.TriggerEffectParams3Length; ++_j) {_o.TriggerEffectParams3.Add(this.TriggerEffectParams3(_j));}
    _o.Condition = this.Condition;
    _o.PropertyIndex = this.PropertyIndex;
  }
  public static Offset<WWParser.Defs.FormationProperty> Pack(FlatBufferBuilder builder, FormationPropertyT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FormationProperty>);
    var _mark_tag = default(VectorOffset);
    if (_o.MarkTag != null) {
      var __mark_tag = new StringOffset[_o.MarkTag.Count];
      for (var _j = 0; _j < __mark_tag.Length; ++_j) { __mark_tag[_j] = builder.CreateString(_o.MarkTag[_j]); }
      _mark_tag = CreateMarkTagVector(builder, __mark_tag);
    }
    var _resist_tag = default(VectorOffset);
    if (_o.ResistTag != null) {
      var __resist_tag = new StringOffset[_o.ResistTag.Count];
      for (var _j = 0; _j < __resist_tag.Length; ++_j) { __resist_tag[_j] = builder.CreateString(_o.ResistTag[_j]); }
      _resist_tag = CreateResistTagVector(builder, __resist_tag);
    }
    var _trigger_range1 = _o.TriggerRange1 == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.TriggerRange1);
    var _trigger_effect_params1 = default(VectorOffset);
    if (_o.TriggerEffectParams1 != null) {
      var __trigger_effect_params1 = _o.TriggerEffectParams1.ToArray();
      _trigger_effect_params1 = CreateTriggerEffectParams1Vector(builder, __trigger_effect_params1);
    }
    var _trigger_range2 = _o.TriggerRange2 == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.TriggerRange2);
    var _trigger_effect_params2 = default(VectorOffset);
    if (_o.TriggerEffectParams2 != null) {
      var __trigger_effect_params2 = _o.TriggerEffectParams2.ToArray();
      _trigger_effect_params2 = CreateTriggerEffectParams2Vector(builder, __trigger_effect_params2);
    }
    var _trigger_range3 = _o.TriggerRange3 == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.TriggerRange3);
    var _trigger_effect_params3 = default(VectorOffset);
    if (_o.TriggerEffectParams3 != null) {
      var __trigger_effect_params3 = _o.TriggerEffectParams3.ToArray();
      _trigger_effect_params3 = CreateTriggerEffectParams3Vector(builder, __trigger_effect_params3);
    }
    return CreateFormationProperty(
      builder,
      _o.Id,
      _o.InitValue,
      _o.InitRecoveryRate,
      _o.InitMax,
      _mark_tag,
      _resist_tag,
      _trigger_range1,
      _o.TriggerType1,
      _o.TriggerEffect1,
      _trigger_effect_params1,
      _trigger_range2,
      _o.TriggerType2,
      _o.TriggerEffect2,
      _trigger_effect_params2,
      _trigger_range3,
      _o.TriggerType3,
      _o.TriggerEffect3,
      _trigger_effect_params3,
      _o.Condition,
      _o.PropertyIndex);
  }
}

public class FormationPropertyT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("init_value")]
  public int InitValue { get; set; }
  [Newtonsoft.Json.JsonProperty("init_recovery_rate")]
  public int InitRecoveryRate { get; set; }
  [Newtonsoft.Json.JsonProperty("init_max")]
  public int InitMax { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_tag")]
  public List<string> MarkTag { get; set; }
  [Newtonsoft.Json.JsonProperty("resist_tag")]
  public List<string> ResistTag { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_range1")]
  public WWParser.Defs.FloatRangeT TriggerRange1 { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_type1")]
  public int TriggerType1 { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_effect1")]
  public int TriggerEffect1 { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_effect_params1")]
  public List<double> TriggerEffectParams1 { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_range2")]
  public WWParser.Defs.FloatRangeT TriggerRange2 { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_type2")]
  public int TriggerType2 { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_effect2")]
  public int TriggerEffect2 { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_effect_params2")]
  public List<double> TriggerEffectParams2 { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_range3")]
  public WWParser.Defs.FloatRangeT TriggerRange3 { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_type3")]
  public int TriggerType3 { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_effect3")]
  public int TriggerEffect3 { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_effect_params3")]
  public List<double> TriggerEffectParams3 { get; set; }
  [Newtonsoft.Json.JsonProperty("condition")]
  public int Condition { get; set; }
  [Newtonsoft.Json.JsonProperty("property_index")]
  public int PropertyIndex { get; set; }

  public FormationPropertyT() {
    this.Id = 0;
    this.InitValue = 0;
    this.InitRecoveryRate = -500;
    this.InitMax = 10000;
    this.MarkTag = null;
    this.ResistTag = null;
    this.TriggerRange1 = null;
    this.TriggerType1 = 0;
    this.TriggerEffect1 = 0;
    this.TriggerEffectParams1 = null;
    this.TriggerRange2 = null;
    this.TriggerType2 = 0;
    this.TriggerEffect2 = 0;
    this.TriggerEffectParams2 = null;
    this.TriggerRange3 = null;
    this.TriggerType3 = 0;
    this.TriggerEffect3 = 0;
    this.TriggerEffectParams3 = null;
    this.Condition = 0;
    this.PropertyIndex = 0;
  }
}


static public class FormationPropertyVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*InitValue*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*InitRecoveryRate*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*InitMax*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*MarkTag*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*ResistTag*/, false)
      && verifier.VerifyTable(tablePos, 16 /*TriggerRange1*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyField(tablePos, 18 /*TriggerType1*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*TriggerEffect1*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*TriggerEffectParams1*/, 8 /*double*/, false)
      && verifier.VerifyTable(tablePos, 24 /*TriggerRange2*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyField(tablePos, 26 /*TriggerType2*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*TriggerEffect2*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 30 /*TriggerEffectParams2*/, 8 /*double*/, false)
      && verifier.VerifyTable(tablePos, 32 /*TriggerRange3*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyField(tablePos, 34 /*TriggerType3*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*TriggerEffect3*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 38 /*TriggerEffectParams3*/, 8 /*double*/, false)
      && verifier.VerifyField(tablePos, 40 /*Condition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*PropertyIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
