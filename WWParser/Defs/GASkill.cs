// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GASkill : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GASkill GetRootAsGASkill(ByteBuffer _bb) { return GetRootAsGASkill(_bb, new GASkill()); }
  public static GASkill GetRootAsGASkill(ByteBuffer _bb, GASkill obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GASkill __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConfigId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MontageId(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MontageIdLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetMontageIdBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetMontageIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetMontageIdArray() { return __p.__vector_as_array<int>(10); }

  public static Offset<WWParser.Defs.GASkill> CreateGASkill(FlatBufferBuilder builder,
      int id = 0,
      int config_id = 0,
      int skill_id = 0,
      VectorOffset montage_idOffset = default(VectorOffset)) {
    builder.StartTable(4);
    GASkill.AddMontageId(builder, montage_idOffset);
    GASkill.AddSkillId(builder, skill_id);
    GASkill.AddConfigId(builder, config_id);
    GASkill.AddId(builder, id);
    return GASkill.EndGASkill(builder);
  }

  public static void StartGASkill(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddConfigId(FlatBufferBuilder builder, int configId) { builder.AddInt(1, configId, 0); }
  public static void AddSkillId(FlatBufferBuilder builder, int skillId) { builder.AddInt(2, skillId, 0); }
  public static void AddMontageId(FlatBufferBuilder builder, VectorOffset montageIdOffset) { builder.AddOffset(3, montageIdOffset.Value, 0); }
  public static VectorOffset CreateMontageIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMontageIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMontageIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMontageIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMontageIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.GASkill> EndGASkill(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.GASkill>(o);
  }
  public GASkillT UnPack() {
    var _o = new GASkillT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GASkillT _o) {
    _o.Id = this.Id;
    _o.ConfigId = this.ConfigId;
    _o.SkillId = this.SkillId;
    _o.MontageId = new List<int>();
    for (var _j = 0; _j < this.MontageIdLength; ++_j) {_o.MontageId.Add(this.MontageId(_j));}
  }
  public static Offset<WWParser.Defs.GASkill> Pack(FlatBufferBuilder builder, GASkillT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.GASkill>);
    var _montage_id = default(VectorOffset);
    if (_o.MontageId != null) {
      var __montage_id = _o.MontageId.ToArray();
      _montage_id = CreateMontageIdVector(builder, __montage_id);
    }
    return CreateGASkill(
      builder,
      _o.Id,
      _o.ConfigId,
      _o.SkillId,
      _montage_id);
  }
}

public class GASkillT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("config_id")]
  public int ConfigId { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_id")]
  public int SkillId { get; set; }
  [Newtonsoft.Json.JsonProperty("montage_id")]
  public List<int> MontageId { get; set; }

  public GASkillT() {
    this.Id = 0;
    this.ConfigId = 0;
    this.SkillId = 0;
    this.MontageId = null;
  }
}


static public class GASkillVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ConfigId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*SkillId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*MontageId*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
