// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TimeOfDay : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TimeOfDay GetRootAsTimeOfDay(ByteBuffer _bb) { return GetRootAsTimeOfDay(_bb, new TimeOfDay()); }
  public static TimeOfDay GetRootAsTimeOfDay(ByteBuffer _bb, TimeOfDay obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TimeOfDay __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InitTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Rate { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? StateSpan(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int StateSpanLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int A { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int V { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BanTag(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BanTagLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntString? TimePreset(int j) { int o = __p.__offset(18); return o != 0 ? (WWParser.Defs.DicIntString?)(new WWParser.Defs.DicIntString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TimePresetLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.TimeOfDay> CreateTimeOfDay(FlatBufferBuilder builder,
      int id = 0,
      int init_time = 0,
      int rate = 0,
      VectorOffset state_spanOffset = default(VectorOffset),
      int a = 0,
      int v = 0,
      VectorOffset ban_tagOffset = default(VectorOffset),
      VectorOffset time_presetOffset = default(VectorOffset)) {
    builder.StartTable(8);
    TimeOfDay.AddTimePreset(builder, time_presetOffset);
    TimeOfDay.AddBanTag(builder, ban_tagOffset);
    TimeOfDay.AddV(builder, v);
    TimeOfDay.AddA(builder, a);
    TimeOfDay.AddStateSpan(builder, state_spanOffset);
    TimeOfDay.AddRate(builder, rate);
    TimeOfDay.AddInitTime(builder, init_time);
    TimeOfDay.AddId(builder, id);
    return TimeOfDay.EndTimeOfDay(builder);
  }

  public static void StartTimeOfDay(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddInitTime(FlatBufferBuilder builder, int initTime) { builder.AddInt(1, initTime, 0); }
  public static void AddRate(FlatBufferBuilder builder, int rate) { builder.AddInt(2, rate, 0); }
  public static void AddStateSpan(FlatBufferBuilder builder, VectorOffset stateSpanOffset) { builder.AddOffset(3, stateSpanOffset.Value, 0); }
  public static VectorOffset CreateStateSpanVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStateSpanVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStateSpanVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStateSpanVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStateSpanVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddA(FlatBufferBuilder builder, int a) { builder.AddInt(4, a, 0); }
  public static void AddV(FlatBufferBuilder builder, int v) { builder.AddInt(5, v, 0); }
  public static void AddBanTag(FlatBufferBuilder builder, VectorOffset banTagOffset) { builder.AddOffset(6, banTagOffset.Value, 0); }
  public static VectorOffset CreateBanTagVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBanTagVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBanTagVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBanTagVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBanTagVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTimePreset(FlatBufferBuilder builder, VectorOffset timePresetOffset) { builder.AddOffset(7, timePresetOffset.Value, 0); }
  public static VectorOffset CreateTimePresetVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTimePresetVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTimePresetVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTimePresetVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTimePresetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.TimeOfDay> EndTimeOfDay(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.TimeOfDay>(o);
  }
  public TimeOfDayT UnPack() {
    var _o = new TimeOfDayT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TimeOfDayT _o) {
    _o.Id = this.Id;
    _o.InitTime = this.InitTime;
    _o.Rate = this.Rate;
    _o.StateSpan = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.StateSpanLength; ++_j) {_o.StateSpan.Add(this.StateSpan(_j).HasValue ? this.StateSpan(_j).Value.UnPack() : null);}
    _o.A = this.A;
    _o.V = this.V;
    _o.BanTag = new List<string>();
    for (var _j = 0; _j < this.BanTagLength; ++_j) {_o.BanTag.Add(this.BanTag(_j));}
    _o.TimePreset = new List<WWParser.Defs.DicIntStringT>();
    for (var _j = 0; _j < this.TimePresetLength; ++_j) {_o.TimePreset.Add(this.TimePreset(_j).HasValue ? this.TimePreset(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.TimeOfDay> Pack(FlatBufferBuilder builder, TimeOfDayT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.TimeOfDay>);
    var _state_span = default(VectorOffset);
    if (_o.StateSpan != null) {
      var __state_span = new Offset<WWParser.Defs.DicIntInt>[_o.StateSpan.Count];
      for (var _j = 0; _j < __state_span.Length; ++_j) { __state_span[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.StateSpan[_j]); }
      _state_span = CreateStateSpanVector(builder, __state_span);
    }
    var _ban_tag = default(VectorOffset);
    if (_o.BanTag != null) {
      var __ban_tag = new StringOffset[_o.BanTag.Count];
      for (var _j = 0; _j < __ban_tag.Length; ++_j) { __ban_tag[_j] = builder.CreateString(_o.BanTag[_j]); }
      _ban_tag = CreateBanTagVector(builder, __ban_tag);
    }
    var _time_preset = default(VectorOffset);
    if (_o.TimePreset != null) {
      var __time_preset = new Offset<WWParser.Defs.DicIntString>[_o.TimePreset.Count];
      for (var _j = 0; _j < __time_preset.Length; ++_j) { __time_preset[_j] = WWParser.Defs.DicIntString.Pack(builder, _o.TimePreset[_j]); }
      _time_preset = CreateTimePresetVector(builder, __time_preset);
    }
    return CreateTimeOfDay(
      builder,
      _o.Id,
      _o.InitTime,
      _o.Rate,
      _state_span,
      _o.A,
      _o.V,
      _ban_tag,
      _time_preset);
  }
}

public class TimeOfDayT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("init_time")]
  public int InitTime { get; set; }
  [Newtonsoft.Json.JsonProperty("rate")]
  public int Rate { get; set; }
  [Newtonsoft.Json.JsonProperty("state_span")]
  public List<WWParser.Defs.DicIntIntT> StateSpan { get; set; }
  [Newtonsoft.Json.JsonProperty("a")]
  public int A { get; set; }
  [Newtonsoft.Json.JsonProperty("v")]
  public int V { get; set; }
  [Newtonsoft.Json.JsonProperty("ban_tag")]
  public List<string> BanTag { get; set; }
  [Newtonsoft.Json.JsonProperty("time_preset")]
  public List<WWParser.Defs.DicIntStringT> TimePreset { get; set; }

  public TimeOfDayT() {
    this.Id = 0;
    this.InitTime = 0;
    this.Rate = 0;
    this.StateSpan = null;
    this.A = 0;
    this.V = 0;
    this.BanTag = null;
    this.TimePreset = null;
  }
}


static public class TimeOfDayVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*InitTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Rate*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*StateSpan*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 12 /*A*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*V*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 16 /*BanTag*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 18 /*TimePreset*/, WWParser.Defs.DicIntStringVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
