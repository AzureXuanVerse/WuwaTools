// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Condition : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Condition GetRootAsCondition(ByteBuffer _bb) { return GetRootAsCondition(_bb, new Condition()); }
  public static Condition GetRootAsCondition(ByteBuffer _bb, Condition obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Condition __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Type { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(6); }
  public int NeedNum { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public WWParser.Defs.DicStringString? LimitParams(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.DicStringString?)(new WWParser.Defs.DicStringString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int LimitParamsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicStringString? LimitParamsOpe(int j) { int o = __p.__offset(12); return o != 0 ? (WWParser.Defs.DicStringString?)(new WWParser.Defs.DicStringString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int LimitParamsOpeLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool IsClient { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Description { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(16); }
  public int AccessId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.Condition> CreateCondition(FlatBufferBuilder builder,
      int id = 0,
      StringOffset typeOffset = default(StringOffset),
      int need_num = 1,
      VectorOffset limit_paramsOffset = default(VectorOffset),
      VectorOffset limit_params_opeOffset = default(VectorOffset),
      bool is_client = false,
      StringOffset descriptionOffset = default(StringOffset),
      int access_id = 0) {
    builder.StartTable(8);
    Condition.AddAccessId(builder, access_id);
    Condition.AddDescription(builder, descriptionOffset);
    Condition.AddLimitParamsOpe(builder, limit_params_opeOffset);
    Condition.AddLimitParams(builder, limit_paramsOffset);
    Condition.AddNeedNum(builder, need_num);
    Condition.AddType(builder, typeOffset);
    Condition.AddId(builder, id);
    Condition.AddIsClient(builder, is_client);
    return Condition.EndCondition(builder);
  }

  public static void StartCondition(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static void AddNeedNum(FlatBufferBuilder builder, int needNum) { builder.AddInt(2, needNum, 1); }
  public static void AddLimitParams(FlatBufferBuilder builder, VectorOffset limitParamsOffset) { builder.AddOffset(3, limitParamsOffset.Value, 0); }
  public static VectorOffset CreateLimitParamsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLimitParamsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitParamsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicStringString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitParamsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicStringString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLimitParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLimitParamsOpe(FlatBufferBuilder builder, VectorOffset limitParamsOpeOffset) { builder.AddOffset(4, limitParamsOpeOffset.Value, 0); }
  public static VectorOffset CreateLimitParamsOpeVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLimitParamsOpeVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitParamsOpeVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicStringString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitParamsOpeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicStringString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLimitParamsOpeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsClient(FlatBufferBuilder builder, bool isClient) { builder.AddBool(5, isClient, false); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(6, descriptionOffset.Value, 0); }
  public static void AddAccessId(FlatBufferBuilder builder, int accessId) { builder.AddInt(7, accessId, 0); }
  public static Offset<WWParser.Defs.Condition> EndCondition(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Condition>(o);
  }
  public ConditionT UnPack() {
    var _o = new ConditionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConditionT _o) {
    _o.Id = this.Id;
    _o.Type = this.Type;
    _o.NeedNum = this.NeedNum;
    _o.LimitParams = new List<WWParser.Defs.DicStringStringT>();
    for (var _j = 0; _j < this.LimitParamsLength; ++_j) {_o.LimitParams.Add(this.LimitParams(_j).HasValue ? this.LimitParams(_j).Value.UnPack() : null);}
    _o.LimitParamsOpe = new List<WWParser.Defs.DicStringStringT>();
    for (var _j = 0; _j < this.LimitParamsOpeLength; ++_j) {_o.LimitParamsOpe.Add(this.LimitParamsOpe(_j).HasValue ? this.LimitParamsOpe(_j).Value.UnPack() : null);}
    _o.IsClient = this.IsClient;
    _o.Description = this.Description;
    _o.AccessId = this.AccessId;
  }
  public static Offset<WWParser.Defs.Condition> Pack(FlatBufferBuilder builder, ConditionT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Condition>);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _limit_params = default(VectorOffset);
    if (_o.LimitParams != null) {
      var __limit_params = new Offset<WWParser.Defs.DicStringString>[_o.LimitParams.Count];
      for (var _j = 0; _j < __limit_params.Length; ++_j) { __limit_params[_j] = WWParser.Defs.DicStringString.Pack(builder, _o.LimitParams[_j]); }
      _limit_params = CreateLimitParamsVector(builder, __limit_params);
    }
    var _limit_params_ope = default(VectorOffset);
    if (_o.LimitParamsOpe != null) {
      var __limit_params_ope = new Offset<WWParser.Defs.DicStringString>[_o.LimitParamsOpe.Count];
      for (var _j = 0; _j < __limit_params_ope.Length; ++_j) { __limit_params_ope[_j] = WWParser.Defs.DicStringString.Pack(builder, _o.LimitParamsOpe[_j]); }
      _limit_params_ope = CreateLimitParamsOpeVector(builder, __limit_params_ope);
    }
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    return CreateCondition(
      builder,
      _o.Id,
      _type,
      _o.NeedNum,
      _limit_params,
      _limit_params_ope,
      _o.IsClient,
      _description,
      _o.AccessId);
  }
}

public class ConditionT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public string Type { get; set; }
  [Newtonsoft.Json.JsonProperty("need_num")]
  public int NeedNum { get; set; }
  [Newtonsoft.Json.JsonProperty("limit_params")]
  public List<WWParser.Defs.DicStringStringT> LimitParams { get; set; }
  [Newtonsoft.Json.JsonProperty("limit_params_ope")]
  public List<WWParser.Defs.DicStringStringT> LimitParamsOpe { get; set; }
  [Newtonsoft.Json.JsonProperty("is_client")]
  public bool IsClient { get; set; }
  [Newtonsoft.Json.JsonProperty("description")]
  public string Description { get; set; }
  [Newtonsoft.Json.JsonProperty("access_id")]
  public int AccessId { get; set; }

  public ConditionT() {
    this.Id = 0;
    this.Type = null;
    this.NeedNum = 1;
    this.LimitParams = null;
    this.LimitParamsOpe = null;
    this.IsClient = false;
    this.Description = null;
    this.AccessId = 0;
  }
}


static public class ConditionVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Type*/, false)
      && verifier.VerifyField(tablePos, 8 /*NeedNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*LimitParams*/, WWParser.Defs.DicStringStringVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 12 /*LimitParamsOpe*/, WWParser.Defs.DicStringStringVerify.Verify, false)
      && verifier.VerifyField(tablePos, 14 /*IsClient*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 16 /*Description*/, false)
      && verifier.VerifyField(tablePos, 18 /*AccessId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
