// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BossRushTaskTab : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BossRushTaskTab GetRootAsBossRushTaskTab(ByteBuffer _bb) { return GetRootAsBossRushTaskTab(_bb, new BossRushTaskTab()); }
  public static BossRushTaskTab GetRootAsBossRushTaskTab(ByteBuffer _bb, BossRushTaskTab obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BossRushTaskTab __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TabId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Texture { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextureBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTextureBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTextureArray() { return __p.__vector_as_array<byte>(8); }
  public string TabTitle { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTabTitleBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTabTitleBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTabTitleArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<WWParser.Defs.BossRushTaskTab> CreateBossRushTaskTab(FlatBufferBuilder builder,
      int tab_id = 0,
      int activity_id = 0,
      StringOffset textureOffset = default(StringOffset),
      StringOffset tab_titleOffset = default(StringOffset)) {
    builder.StartTable(4);
    BossRushTaskTab.AddTabTitle(builder, tab_titleOffset);
    BossRushTaskTab.AddTexture(builder, textureOffset);
    BossRushTaskTab.AddActivityId(builder, activity_id);
    BossRushTaskTab.AddTabId(builder, tab_id);
    return BossRushTaskTab.EndBossRushTaskTab(builder);
  }

  public static void StartBossRushTaskTab(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddTabId(FlatBufferBuilder builder, int tabId) { builder.AddInt(0, tabId, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddTexture(FlatBufferBuilder builder, StringOffset textureOffset) { builder.AddOffset(2, textureOffset.Value, 0); }
  public static void AddTabTitle(FlatBufferBuilder builder, StringOffset tabTitleOffset) { builder.AddOffset(3, tabTitleOffset.Value, 0); }
  public static Offset<WWParser.Defs.BossRushTaskTab> EndBossRushTaskTab(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BossRushTaskTab>(o);
  }
  public BossRushTaskTabT UnPack() {
    var _o = new BossRushTaskTabT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BossRushTaskTabT _o) {
    _o.TabId = this.TabId;
    _o.ActivityId = this.ActivityId;
    _o.Texture = this.Texture;
    _o.TabTitle = this.TabTitle;
  }
  public static Offset<WWParser.Defs.BossRushTaskTab> Pack(FlatBufferBuilder builder, BossRushTaskTabT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BossRushTaskTab>);
    var _texture = _o.Texture == null ? default(StringOffset) : builder.CreateString(_o.Texture);
    var _tab_title = _o.TabTitle == null ? default(StringOffset) : builder.CreateString(_o.TabTitle);
    return CreateBossRushTaskTab(
      builder,
      _o.TabId,
      _o.ActivityId,
      _texture,
      _tab_title);
  }
}

public class BossRushTaskTabT
{
  [Newtonsoft.Json.JsonProperty("tab_id")]
  public int TabId { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("texture")]
  public string Texture { get; set; }
  [Newtonsoft.Json.JsonProperty("tab_title")]
  public string TabTitle { get; set; }

  public BossRushTaskTabT() {
    this.TabId = 0;
    this.ActivityId = 0;
    this.Texture = null;
    this.TabTitle = null;
  }
}


static public class BossRushTaskTabVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TabId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Texture*/, false)
      && verifier.VerifyString(tablePos, 10 /*TabTitle*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
