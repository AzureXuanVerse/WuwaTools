// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct QuestMainType : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static QuestMainType GetRootAsQuestMainType(ByteBuffer _bb) { return GetRootAsQuestMainType(_bb, new QuestMainType()); }
  public static QuestMainType GetRootAsQuestMainType(ByteBuffer _bb, QuestMainType obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public QuestMainType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MainTypeName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMainTypeNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetMainTypeNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetMainTypeNameArray() { return __p.__vector_as_array<byte>(6); }
  public string QuestTabIcon { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQuestTabIconBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetQuestTabIconBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetQuestTabIconArray() { return __p.__vector_as_array<byte>(8); }
  public string QuestTypeTitleIcon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQuestTypeTitleIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetQuestTypeTitleIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetQuestTypeTitleIconArray() { return __p.__vector_as_array<byte>(10); }
  public string QuestChapterBg { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQuestChapterBgBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetQuestChapterBgBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetQuestChapterBgArray() { return __p.__vector_as_array<byte>(12); }
  public int TrackIconId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)2; } }
  public string TypeColor { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeColorBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTypeColorBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTypeColorArray() { return __p.__vector_as_array<byte>(16); }
  public int SortValue { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool AutoHideTrack { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int NewQuestTipTime { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)2; } }
  public int QuestUpdateTipsTime { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)2; } }

  public static Offset<WWParser.Defs.QuestMainType> CreateQuestMainType(FlatBufferBuilder builder,
      int id = 0,
      StringOffset main_type_nameOffset = default(StringOffset),
      StringOffset quest_tab_iconOffset = default(StringOffset),
      StringOffset quest_type_title_iconOffset = default(StringOffset),
      StringOffset quest_chapter_bgOffset = default(StringOffset),
      int track_icon_id = 2,
      StringOffset type_colorOffset = default(StringOffset),
      int sort_value = 0,
      bool auto_hide_track = false,
      int new_quest_tip_time = 2,
      int quest_update_tips_time = 2) {
    builder.StartTable(11);
    QuestMainType.AddQuestUpdateTipsTime(builder, quest_update_tips_time);
    QuestMainType.AddNewQuestTipTime(builder, new_quest_tip_time);
    QuestMainType.AddSortValue(builder, sort_value);
    QuestMainType.AddTypeColor(builder, type_colorOffset);
    QuestMainType.AddTrackIconId(builder, track_icon_id);
    QuestMainType.AddQuestChapterBg(builder, quest_chapter_bgOffset);
    QuestMainType.AddQuestTypeTitleIcon(builder, quest_type_title_iconOffset);
    QuestMainType.AddQuestTabIcon(builder, quest_tab_iconOffset);
    QuestMainType.AddMainTypeName(builder, main_type_nameOffset);
    QuestMainType.AddId(builder, id);
    QuestMainType.AddAutoHideTrack(builder, auto_hide_track);
    return QuestMainType.EndQuestMainType(builder);
  }

  public static void StartQuestMainType(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMainTypeName(FlatBufferBuilder builder, StringOffset mainTypeNameOffset) { builder.AddOffset(1, mainTypeNameOffset.Value, 0); }
  public static void AddQuestTabIcon(FlatBufferBuilder builder, StringOffset questTabIconOffset) { builder.AddOffset(2, questTabIconOffset.Value, 0); }
  public static void AddQuestTypeTitleIcon(FlatBufferBuilder builder, StringOffset questTypeTitleIconOffset) { builder.AddOffset(3, questTypeTitleIconOffset.Value, 0); }
  public static void AddQuestChapterBg(FlatBufferBuilder builder, StringOffset questChapterBgOffset) { builder.AddOffset(4, questChapterBgOffset.Value, 0); }
  public static void AddTrackIconId(FlatBufferBuilder builder, int trackIconId) { builder.AddInt(5, trackIconId, 2); }
  public static void AddTypeColor(FlatBufferBuilder builder, StringOffset typeColorOffset) { builder.AddOffset(6, typeColorOffset.Value, 0); }
  public static void AddSortValue(FlatBufferBuilder builder, int sortValue) { builder.AddInt(7, sortValue, 0); }
  public static void AddAutoHideTrack(FlatBufferBuilder builder, bool autoHideTrack) { builder.AddBool(8, autoHideTrack, false); }
  public static void AddNewQuestTipTime(FlatBufferBuilder builder, int newQuestTipTime) { builder.AddInt(9, newQuestTipTime, 2); }
  public static void AddQuestUpdateTipsTime(FlatBufferBuilder builder, int questUpdateTipsTime) { builder.AddInt(10, questUpdateTipsTime, 2); }
  public static Offset<WWParser.Defs.QuestMainType> EndQuestMainType(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.QuestMainType>(o);
  }
  public QuestMainTypeT UnPack() {
    var _o = new QuestMainTypeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QuestMainTypeT _o) {
    _o.Id = this.Id;
    _o.MainTypeName = this.MainTypeName;
    _o.QuestTabIcon = this.QuestTabIcon;
    _o.QuestTypeTitleIcon = this.QuestTypeTitleIcon;
    _o.QuestChapterBg = this.QuestChapterBg;
    _o.TrackIconId = this.TrackIconId;
    _o.TypeColor = this.TypeColor;
    _o.SortValue = this.SortValue;
    _o.AutoHideTrack = this.AutoHideTrack;
    _o.NewQuestTipTime = this.NewQuestTipTime;
    _o.QuestUpdateTipsTime = this.QuestUpdateTipsTime;
  }
  public static Offset<WWParser.Defs.QuestMainType> Pack(FlatBufferBuilder builder, QuestMainTypeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.QuestMainType>);
    var _main_type_name = _o.MainTypeName == null ? default(StringOffset) : builder.CreateString(_o.MainTypeName);
    var _quest_tab_icon = _o.QuestTabIcon == null ? default(StringOffset) : builder.CreateString(_o.QuestTabIcon);
    var _quest_type_title_icon = _o.QuestTypeTitleIcon == null ? default(StringOffset) : builder.CreateString(_o.QuestTypeTitleIcon);
    var _quest_chapter_bg = _o.QuestChapterBg == null ? default(StringOffset) : builder.CreateString(_o.QuestChapterBg);
    var _type_color = _o.TypeColor == null ? default(StringOffset) : builder.CreateString(_o.TypeColor);
    return CreateQuestMainType(
      builder,
      _o.Id,
      _main_type_name,
      _quest_tab_icon,
      _quest_type_title_icon,
      _quest_chapter_bg,
      _o.TrackIconId,
      _type_color,
      _o.SortValue,
      _o.AutoHideTrack,
      _o.NewQuestTipTime,
      _o.QuestUpdateTipsTime);
  }
}

public class QuestMainTypeT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("main_type_name")]
  public string MainTypeName { get; set; }
  [Newtonsoft.Json.JsonProperty("quest_tab_icon")]
  public string QuestTabIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("quest_type_title_icon")]
  public string QuestTypeTitleIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("quest_chapter_bg")]
  public string QuestChapterBg { get; set; }
  [Newtonsoft.Json.JsonProperty("track_icon_id")]
  public int TrackIconId { get; set; }
  [Newtonsoft.Json.JsonProperty("type_color")]
  public string TypeColor { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_value")]
  public int SortValue { get; set; }
  [Newtonsoft.Json.JsonProperty("auto_hide_track")]
  public bool AutoHideTrack { get; set; }
  [Newtonsoft.Json.JsonProperty("new_quest_tip_time")]
  public int NewQuestTipTime { get; set; }
  [Newtonsoft.Json.JsonProperty("quest_update_tips_time")]
  public int QuestUpdateTipsTime { get; set; }

  public QuestMainTypeT() {
    this.Id = 0;
    this.MainTypeName = null;
    this.QuestTabIcon = null;
    this.QuestTypeTitleIcon = null;
    this.QuestChapterBg = null;
    this.TrackIconId = 2;
    this.TypeColor = null;
    this.SortValue = 0;
    this.AutoHideTrack = false;
    this.NewQuestTipTime = 2;
    this.QuestUpdateTipsTime = 2;
  }
}


static public class QuestMainTypeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*MainTypeName*/, false)
      && verifier.VerifyString(tablePos, 8 /*QuestTabIcon*/, false)
      && verifier.VerifyString(tablePos, 10 /*QuestTypeTitleIcon*/, false)
      && verifier.VerifyString(tablePos, 12 /*QuestChapterBg*/, false)
      && verifier.VerifyField(tablePos, 14 /*TrackIconId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*TypeColor*/, false)
      && verifier.VerifyField(tablePos, 18 /*SortValue*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*AutoHideTrack*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*NewQuestTipTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*QuestUpdateTipsTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
