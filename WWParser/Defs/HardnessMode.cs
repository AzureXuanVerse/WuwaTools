// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct HardnessMode : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static HardnessMode GetRootAsHardnessMode(ByteBuffer _bb) { return GetRootAsHardnessMode(_bb, new HardnessMode()); }
  public static HardnessMode GetRootAsHardnessMode(ByteBuffer _bb, HardnessMode obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HardnessMode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float ReductionData(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ReductionDataLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetReductionDataBytes() { return __p.__vector_as_span<float>(6, 4); }
#else
  public ArraySegment<byte>? GetReductionDataBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public float[] GetReductionDataArray() { return __p.__vector_as_array<float>(6); }
  public float AttackTypeData(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int AttackTypeDataLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetAttackTypeDataBytes() { return __p.__vector_as_span<float>(8, 4); }
#else
  public ArraySegment<byte>? GetAttackTypeDataBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public float[] GetAttackTypeDataArray() { return __p.__vector_as_array<float>(8); }
  public float CorrectData(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int CorrectDataLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetCorrectDataBytes() { return __p.__vector_as_span<float>(10, 4); }
#else
  public ArraySegment<byte>? GetCorrectDataBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public float[] GetCorrectDataArray() { return __p.__vector_as_array<float>(10); }
  public float WeaponReduction(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int WeaponReductionLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetWeaponReductionBytes() { return __p.__vector_as_span<float>(12, 4); }
#else
  public ArraySegment<byte>? GetWeaponReductionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public float[] GetWeaponReductionArray() { return __p.__vector_as_array<float>(12); }
  public float SkillTypeParam(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int SkillTypeParamLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetSkillTypeParamBytes() { return __p.__vector_as_span<float>(14, 4); }
#else
  public ArraySegment<byte>? GetSkillTypeParamBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public float[] GetSkillTypeParamArray() { return __p.__vector_as_array<float>(14); }
  public int Percent { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.HardnessMode> CreateHardnessMode(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset reduction_dataOffset = default(VectorOffset),
      VectorOffset attack_type_dataOffset = default(VectorOffset),
      VectorOffset correct_dataOffset = default(VectorOffset),
      VectorOffset weapon_reductionOffset = default(VectorOffset),
      VectorOffset skill_type_paramOffset = default(VectorOffset),
      int percent = 0) {
    builder.StartTable(7);
    HardnessMode.AddPercent(builder, percent);
    HardnessMode.AddSkillTypeParam(builder, skill_type_paramOffset);
    HardnessMode.AddWeaponReduction(builder, weapon_reductionOffset);
    HardnessMode.AddCorrectData(builder, correct_dataOffset);
    HardnessMode.AddAttackTypeData(builder, attack_type_dataOffset);
    HardnessMode.AddReductionData(builder, reduction_dataOffset);
    HardnessMode.AddId(builder, id);
    return HardnessMode.EndHardnessMode(builder);
  }

  public static void StartHardnessMode(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddReductionData(FlatBufferBuilder builder, VectorOffset reductionDataOffset) { builder.AddOffset(1, reductionDataOffset.Value, 0); }
  public static VectorOffset CreateReductionDataVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateReductionDataVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReductionDataVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReductionDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartReductionDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAttackTypeData(FlatBufferBuilder builder, VectorOffset attackTypeDataOffset) { builder.AddOffset(2, attackTypeDataOffset.Value, 0); }
  public static VectorOffset CreateAttackTypeDataVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAttackTypeDataVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttackTypeDataVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttackTypeDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAttackTypeDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCorrectData(FlatBufferBuilder builder, VectorOffset correctDataOffset) { builder.AddOffset(3, correctDataOffset.Value, 0); }
  public static VectorOffset CreateCorrectDataVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCorrectDataVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCorrectDataVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCorrectDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCorrectDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWeaponReduction(FlatBufferBuilder builder, VectorOffset weaponReductionOffset) { builder.AddOffset(4, weaponReductionOffset.Value, 0); }
  public static VectorOffset CreateWeaponReductionVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateWeaponReductionVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponReductionVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponReductionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartWeaponReductionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSkillTypeParam(FlatBufferBuilder builder, VectorOffset skillTypeParamOffset) { builder.AddOffset(5, skillTypeParamOffset.Value, 0); }
  public static VectorOffset CreateSkillTypeParamVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSkillTypeParamVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillTypeParamVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillTypeParamVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSkillTypeParamVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPercent(FlatBufferBuilder builder, int percent) { builder.AddInt(6, percent, 0); }
  public static Offset<WWParser.Defs.HardnessMode> EndHardnessMode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.HardnessMode>(o);
  }
  public HardnessModeT UnPack() {
    var _o = new HardnessModeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HardnessModeT _o) {
    _o.Id = this.Id;
    _o.ReductionData = new List<float>();
    for (var _j = 0; _j < this.ReductionDataLength; ++_j) {_o.ReductionData.Add(this.ReductionData(_j));}
    _o.AttackTypeData = new List<float>();
    for (var _j = 0; _j < this.AttackTypeDataLength; ++_j) {_o.AttackTypeData.Add(this.AttackTypeData(_j));}
    _o.CorrectData = new List<float>();
    for (var _j = 0; _j < this.CorrectDataLength; ++_j) {_o.CorrectData.Add(this.CorrectData(_j));}
    _o.WeaponReduction = new List<float>();
    for (var _j = 0; _j < this.WeaponReductionLength; ++_j) {_o.WeaponReduction.Add(this.WeaponReduction(_j));}
    _o.SkillTypeParam = new List<float>();
    for (var _j = 0; _j < this.SkillTypeParamLength; ++_j) {_o.SkillTypeParam.Add(this.SkillTypeParam(_j));}
    _o.Percent = this.Percent;
  }
  public static Offset<WWParser.Defs.HardnessMode> Pack(FlatBufferBuilder builder, HardnessModeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.HardnessMode>);
    var _reduction_data = default(VectorOffset);
    if (_o.ReductionData != null) {
      var __reduction_data = _o.ReductionData.ToArray();
      _reduction_data = CreateReductionDataVector(builder, __reduction_data);
    }
    var _attack_type_data = default(VectorOffset);
    if (_o.AttackTypeData != null) {
      var __attack_type_data = _o.AttackTypeData.ToArray();
      _attack_type_data = CreateAttackTypeDataVector(builder, __attack_type_data);
    }
    var _correct_data = default(VectorOffset);
    if (_o.CorrectData != null) {
      var __correct_data = _o.CorrectData.ToArray();
      _correct_data = CreateCorrectDataVector(builder, __correct_data);
    }
    var _weapon_reduction = default(VectorOffset);
    if (_o.WeaponReduction != null) {
      var __weapon_reduction = _o.WeaponReduction.ToArray();
      _weapon_reduction = CreateWeaponReductionVector(builder, __weapon_reduction);
    }
    var _skill_type_param = default(VectorOffset);
    if (_o.SkillTypeParam != null) {
      var __skill_type_param = _o.SkillTypeParam.ToArray();
      _skill_type_param = CreateSkillTypeParamVector(builder, __skill_type_param);
    }
    return CreateHardnessMode(
      builder,
      _o.Id,
      _reduction_data,
      _attack_type_data,
      _correct_data,
      _weapon_reduction,
      _skill_type_param,
      _o.Percent);
  }
}

public class HardnessModeT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("reduction_data")]
  public List<float> ReductionData { get; set; }
  [Newtonsoft.Json.JsonProperty("attack_type_data")]
  public List<float> AttackTypeData { get; set; }
  [Newtonsoft.Json.JsonProperty("correct_data")]
  public List<float> CorrectData { get; set; }
  [Newtonsoft.Json.JsonProperty("weapon_reduction")]
  public List<float> WeaponReduction { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_type_param")]
  public List<float> SkillTypeParam { get; set; }
  [Newtonsoft.Json.JsonProperty("percent")]
  public int Percent { get; set; }

  public HardnessModeT() {
    this.Id = 0;
    this.ReductionData = null;
    this.AttackTypeData = null;
    this.CorrectData = null;
    this.WeaponReduction = null;
    this.SkillTypeParam = null;
    this.Percent = 0;
  }
}


static public class HardnessModeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*ReductionData*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*AttackTypeData*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*CorrectData*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*WeaponReduction*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*SkillTypeParam*/, 4 /*float*/, false)
      && verifier.VerifyField(tablePos, 16 /*Percent*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
