// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PhantomHandBook : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PhantomHandBook GetRootAsPhantomHandBook(ByteBuffer _bb) { return GetRootAsPhantomHandBook(_bb, new PhantomHandBook()); }
  public static PhantomHandBook GetRootAsPhantomHandBook(ByteBuffer _bb, PhantomHandBook obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PhantomHandBook __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string TypeDescrtption { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeDescrtptionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTypeDescrtptionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTypeDescrtptionArray() { return __p.__vector_as_array<byte>(8); }
  public string Intensity { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIntensityBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIntensityBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIntensityArray() { return __p.__vector_as_array<byte>(10); }
  public string Place { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlaceBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetPlaceBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetPlaceArray() { return __p.__vector_as_array<byte>(12); }
  public string Title1 { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitle1Bytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTitle1Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTitle1Array() { return __p.__vector_as_array<byte>(14); }
  public string Descrtption1 { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescrtption1Bytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetDescrtption1Bytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetDescrtption1Array() { return __p.__vector_as_array<byte>(16); }
  public string Title2 { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitle2Bytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTitle2Bytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTitle2Array() { return __p.__vector_as_array<byte>(18); }
  public string Descrtption2 { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescrtption2Bytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetDescrtption2Bytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetDescrtption2Array() { return __p.__vector_as_array<byte>(20); }
  public float Scale(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ScaleLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetScaleBytes() { return __p.__vector_as_span<float>(22, 4); }
#else
  public ArraySegment<byte>? GetScaleBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public float[] GetScaleArray() { return __p.__vector_as_array<float>(22); }
  public float Position(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int PositionLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetPositionBytes() { return __p.__vector_as_span<float>(24, 4); }
#else
  public ArraySegment<byte>? GetPositionBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public float[] GetPositionArray() { return __p.__vector_as_array<float>(24); }
  public float Rotator(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int RotatorLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetRotatorBytes() { return __p.__vector_as_span<float>(26, 4); }
#else
  public ArraySegment<byte>? GetRotatorBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public float[] GetRotatorArray() { return __p.__vector_as_array<float>(26); }

  public static Offset<WWParser.Defs.PhantomHandBook> CreatePhantomHandBook(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset type_descrtptionOffset = default(StringOffset),
      StringOffset intensityOffset = default(StringOffset),
      StringOffset placeOffset = default(StringOffset),
      StringOffset title1Offset = default(StringOffset),
      StringOffset descrtption1Offset = default(StringOffset),
      StringOffset title2Offset = default(StringOffset),
      StringOffset descrtption2Offset = default(StringOffset),
      VectorOffset scaleOffset = default(VectorOffset),
      VectorOffset positionOffset = default(VectorOffset),
      VectorOffset rotatorOffset = default(VectorOffset)) {
    builder.StartTable(12);
    PhantomHandBook.AddRotator(builder, rotatorOffset);
    PhantomHandBook.AddPosition(builder, positionOffset);
    PhantomHandBook.AddScale(builder, scaleOffset);
    PhantomHandBook.AddDescrtption2(builder, descrtption2Offset);
    PhantomHandBook.AddTitle2(builder, title2Offset);
    PhantomHandBook.AddDescrtption1(builder, descrtption1Offset);
    PhantomHandBook.AddTitle1(builder, title1Offset);
    PhantomHandBook.AddPlace(builder, placeOffset);
    PhantomHandBook.AddIntensity(builder, intensityOffset);
    PhantomHandBook.AddTypeDescrtption(builder, type_descrtptionOffset);
    PhantomHandBook.AddName(builder, nameOffset);
    PhantomHandBook.AddId(builder, id);
    return PhantomHandBook.EndPhantomHandBook(builder);
  }

  public static void StartPhantomHandBook(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddTypeDescrtption(FlatBufferBuilder builder, StringOffset typeDescrtptionOffset) { builder.AddOffset(2, typeDescrtptionOffset.Value, 0); }
  public static void AddIntensity(FlatBufferBuilder builder, StringOffset intensityOffset) { builder.AddOffset(3, intensityOffset.Value, 0); }
  public static void AddPlace(FlatBufferBuilder builder, StringOffset placeOffset) { builder.AddOffset(4, placeOffset.Value, 0); }
  public static void AddTitle1(FlatBufferBuilder builder, StringOffset title1Offset) { builder.AddOffset(5, title1Offset.Value, 0); }
  public static void AddDescrtption1(FlatBufferBuilder builder, StringOffset descrtption1Offset) { builder.AddOffset(6, descrtption1Offset.Value, 0); }
  public static void AddTitle2(FlatBufferBuilder builder, StringOffset title2Offset) { builder.AddOffset(7, title2Offset.Value, 0); }
  public static void AddDescrtption2(FlatBufferBuilder builder, StringOffset descrtption2Offset) { builder.AddOffset(8, descrtption2Offset.Value, 0); }
  public static void AddScale(FlatBufferBuilder builder, VectorOffset scaleOffset) { builder.AddOffset(9, scaleOffset.Value, 0); }
  public static VectorOffset CreateScaleVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateScaleVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateScaleVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateScaleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartScaleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPosition(FlatBufferBuilder builder, VectorOffset positionOffset) { builder.AddOffset(10, positionOffset.Value, 0); }
  public static VectorOffset CreatePositionVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePositionVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePositionVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePositionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPositionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRotator(FlatBufferBuilder builder, VectorOffset rotatorOffset) { builder.AddOffset(11, rotatorOffset.Value, 0); }
  public static VectorOffset CreateRotatorVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRotatorVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRotatorVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRotatorVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRotatorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.PhantomHandBook> EndPhantomHandBook(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PhantomHandBook>(o);
  }
  public PhantomHandBookT UnPack() {
    var _o = new PhantomHandBookT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PhantomHandBookT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.TypeDescrtption = this.TypeDescrtption;
    _o.Intensity = this.Intensity;
    _o.Place = this.Place;
    _o.Title1 = this.Title1;
    _o.Descrtption1 = this.Descrtption1;
    _o.Title2 = this.Title2;
    _o.Descrtption2 = this.Descrtption2;
    _o.Scale = new List<float>();
    for (var _j = 0; _j < this.ScaleLength; ++_j) {_o.Scale.Add(this.Scale(_j));}
    _o.Position = new List<float>();
    for (var _j = 0; _j < this.PositionLength; ++_j) {_o.Position.Add(this.Position(_j));}
    _o.Rotator = new List<float>();
    for (var _j = 0; _j < this.RotatorLength; ++_j) {_o.Rotator.Add(this.Rotator(_j));}
  }
  public static Offset<WWParser.Defs.PhantomHandBook> Pack(FlatBufferBuilder builder, PhantomHandBookT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PhantomHandBook>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _type_descrtption = _o.TypeDescrtption == null ? default(StringOffset) : builder.CreateString(_o.TypeDescrtption);
    var _intensity = _o.Intensity == null ? default(StringOffset) : builder.CreateString(_o.Intensity);
    var _place = _o.Place == null ? default(StringOffset) : builder.CreateString(_o.Place);
    var _title1 = _o.Title1 == null ? default(StringOffset) : builder.CreateString(_o.Title1);
    var _descrtption1 = _o.Descrtption1 == null ? default(StringOffset) : builder.CreateString(_o.Descrtption1);
    var _title2 = _o.Title2 == null ? default(StringOffset) : builder.CreateString(_o.Title2);
    var _descrtption2 = _o.Descrtption2 == null ? default(StringOffset) : builder.CreateString(_o.Descrtption2);
    var _scale = default(VectorOffset);
    if (_o.Scale != null) {
      var __scale = _o.Scale.ToArray();
      _scale = CreateScaleVector(builder, __scale);
    }
    var _position = default(VectorOffset);
    if (_o.Position != null) {
      var __position = _o.Position.ToArray();
      _position = CreatePositionVector(builder, __position);
    }
    var _rotator = default(VectorOffset);
    if (_o.Rotator != null) {
      var __rotator = _o.Rotator.ToArray();
      _rotator = CreateRotatorVector(builder, __rotator);
    }
    return CreatePhantomHandBook(
      builder,
      _o.Id,
      _name,
      _type_descrtption,
      _intensity,
      _place,
      _title1,
      _descrtption1,
      _title2,
      _descrtption2,
      _scale,
      _position,
      _rotator);
  }
}

public class PhantomHandBookT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("type_descrtption")]
  public string TypeDescrtption { get; set; }
  [Newtonsoft.Json.JsonProperty("intensity")]
  public string Intensity { get; set; }
  [Newtonsoft.Json.JsonProperty("place")]
  public string Place { get; set; }
  [Newtonsoft.Json.JsonProperty("title1")]
  public string Title1 { get; set; }
  [Newtonsoft.Json.JsonProperty("descrtption1")]
  public string Descrtption1 { get; set; }
  [Newtonsoft.Json.JsonProperty("title2")]
  public string Title2 { get; set; }
  [Newtonsoft.Json.JsonProperty("descrtption2")]
  public string Descrtption2 { get; set; }
  [Newtonsoft.Json.JsonProperty("scale")]
  public List<float> Scale { get; set; }
  [Newtonsoft.Json.JsonProperty("position")]
  public List<float> Position { get; set; }
  [Newtonsoft.Json.JsonProperty("rotator")]
  public List<float> Rotator { get; set; }

  public PhantomHandBookT() {
    this.Id = 0;
    this.Name = null;
    this.TypeDescrtption = null;
    this.Intensity = null;
    this.Place = null;
    this.Title1 = null;
    this.Descrtption1 = null;
    this.Title2 = null;
    this.Descrtption2 = null;
    this.Scale = null;
    this.Position = null;
    this.Rotator = null;
  }
}


static public class PhantomHandBookVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyString(tablePos, 8 /*TypeDescrtption*/, false)
      && verifier.VerifyString(tablePos, 10 /*Intensity*/, false)
      && verifier.VerifyString(tablePos, 12 /*Place*/, false)
      && verifier.VerifyString(tablePos, 14 /*Title1*/, false)
      && verifier.VerifyString(tablePos, 16 /*Descrtption1*/, false)
      && verifier.VerifyString(tablePos, 18 /*Title2*/, false)
      && verifier.VerifyString(tablePos, 20 /*Descrtption2*/, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*Scale*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 24 /*Position*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*Rotator*/, 4 /*float*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
