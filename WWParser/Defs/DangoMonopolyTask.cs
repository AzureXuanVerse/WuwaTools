// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DangoMonopolyTask : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DangoMonopolyTask GetRootAsDangoMonopolyTask(ByteBuffer _bb) { return GetRootAsDangoMonopolyTask(_bb, new DangoMonopolyTask()); }
  public static DangoMonopolyTask GetRootAsDangoMonopolyTask(ByteBuffer _bb, DangoMonopolyTask obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DangoMonopolyTask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TaskId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TaskGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Sort { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Source { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TaskType { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConditionGroupId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ProgressConditionId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemNum { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Desc { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(22); }
  public string Title { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<WWParser.Defs.DangoMonopolyTask> CreateDangoMonopolyTask(FlatBufferBuilder builder,
      int task_id = 0,
      int task_group_id = 0,
      int sort = 0,
      int source = 0,
      int task_type = 0,
      int condition_group_id = 0,
      int progress_condition_id = 0,
      int item_id = 0,
      int item_num = 0,
      StringOffset descOffset = default(StringOffset),
      StringOffset titleOffset = default(StringOffset)) {
    builder.StartTable(11);
    DangoMonopolyTask.AddTitle(builder, titleOffset);
    DangoMonopolyTask.AddDesc(builder, descOffset);
    DangoMonopolyTask.AddItemNum(builder, item_num);
    DangoMonopolyTask.AddItemId(builder, item_id);
    DangoMonopolyTask.AddProgressConditionId(builder, progress_condition_id);
    DangoMonopolyTask.AddConditionGroupId(builder, condition_group_id);
    DangoMonopolyTask.AddTaskType(builder, task_type);
    DangoMonopolyTask.AddSource(builder, source);
    DangoMonopolyTask.AddSort(builder, sort);
    DangoMonopolyTask.AddTaskGroupId(builder, task_group_id);
    DangoMonopolyTask.AddTaskId(builder, task_id);
    return DangoMonopolyTask.EndDangoMonopolyTask(builder);
  }

  public static void StartDangoMonopolyTask(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddTaskId(FlatBufferBuilder builder, int taskId) { builder.AddInt(0, taskId, 0); }
  public static void AddTaskGroupId(FlatBufferBuilder builder, int taskGroupId) { builder.AddInt(1, taskGroupId, 0); }
  public static void AddSort(FlatBufferBuilder builder, int sort) { builder.AddInt(2, sort, 0); }
  public static void AddSource(FlatBufferBuilder builder, int source) { builder.AddInt(3, source, 0); }
  public static void AddTaskType(FlatBufferBuilder builder, int taskType) { builder.AddInt(4, taskType, 0); }
  public static void AddConditionGroupId(FlatBufferBuilder builder, int conditionGroupId) { builder.AddInt(5, conditionGroupId, 0); }
  public static void AddProgressConditionId(FlatBufferBuilder builder, int progressConditionId) { builder.AddInt(6, progressConditionId, 0); }
  public static void AddItemId(FlatBufferBuilder builder, int itemId) { builder.AddInt(7, itemId, 0); }
  public static void AddItemNum(FlatBufferBuilder builder, int itemNum) { builder.AddInt(8, itemNum, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(9, descOffset.Value, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(10, titleOffset.Value, 0); }
  public static Offset<WWParser.Defs.DangoMonopolyTask> EndDangoMonopolyTask(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DangoMonopolyTask>(o);
  }
  public DangoMonopolyTaskT UnPack() {
    var _o = new DangoMonopolyTaskT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DangoMonopolyTaskT _o) {
    _o.TaskId = this.TaskId;
    _o.TaskGroupId = this.TaskGroupId;
    _o.Sort = this.Sort;
    _o.Source = this.Source;
    _o.TaskType = this.TaskType;
    _o.ConditionGroupId = this.ConditionGroupId;
    _o.ProgressConditionId = this.ProgressConditionId;
    _o.ItemId = this.ItemId;
    _o.ItemNum = this.ItemNum;
    _o.Desc = this.Desc;
    _o.Title = this.Title;
  }
  public static Offset<WWParser.Defs.DangoMonopolyTask> Pack(FlatBufferBuilder builder, DangoMonopolyTaskT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DangoMonopolyTask>);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    return CreateDangoMonopolyTask(
      builder,
      _o.TaskId,
      _o.TaskGroupId,
      _o.Sort,
      _o.Source,
      _o.TaskType,
      _o.ConditionGroupId,
      _o.ProgressConditionId,
      _o.ItemId,
      _o.ItemNum,
      _desc,
      _title);
  }
}

public class DangoMonopolyTaskT
{
  [Newtonsoft.Json.JsonProperty("task_id")]
  public int TaskId { get; set; }
  [Newtonsoft.Json.JsonProperty("task_group_id")]
  public int TaskGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("sort")]
  public int Sort { get; set; }
  [Newtonsoft.Json.JsonProperty("source")]
  public int Source { get; set; }
  [Newtonsoft.Json.JsonProperty("task_type")]
  public int TaskType { get; set; }
  [Newtonsoft.Json.JsonProperty("condition_group_id")]
  public int ConditionGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("progress_condition_id")]
  public int ProgressConditionId { get; set; }
  [Newtonsoft.Json.JsonProperty("item_id")]
  public int ItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("item_num")]
  public int ItemNum { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }

  public DangoMonopolyTaskT() {
    this.TaskId = 0;
    this.TaskGroupId = 0;
    this.Sort = 0;
    this.Source = 0;
    this.TaskType = 0;
    this.ConditionGroupId = 0;
    this.ProgressConditionId = 0;
    this.ItemId = 0;
    this.ItemNum = 0;
    this.Desc = null;
    this.Title = null;
  }
}


static public class DangoMonopolyTaskVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TaskId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*TaskGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Sort*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Source*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*TaskType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ConditionGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*ProgressConditionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*ItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*ItemNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*Desc*/, false)
      && verifier.VerifyString(tablePos, 24 /*Title*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
