// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiTeamAreaNew : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AiTeamAreaNew GetRootAsAiTeamAreaNew(ByteBuffer _bb) { return GetRootAsAiTeamAreaNew(_bb, new AiTeamAreaNew()); }
  public static AiTeamAreaNew GetRootAsAiTeamAreaNew(ByteBuffer _bb, AiTeamAreaNew obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiTeamAreaNew __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxCharacter { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public WWParser.Defs.FloatRange? ReactionTime { get { int o = __p.__offset(8); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float CharTypes(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int CharTypesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetCharTypesBytes() { return __p.__vector_as_span<float>(10, 4); }
#else
  public ArraySegment<byte>? GetCharTypesBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public float[] GetCharTypesArray() { return __p.__vector_as_array<float>(10); }
  public float AreaAngle { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)75.0f; } }
  public WWParser.Defs.FloatRange? AreaDistance { get { int o = __p.__offset(14); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int AttackWeightId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }

  public static Offset<WWParser.Defs.AiTeamAreaNew> CreateAiTeamAreaNew(FlatBufferBuilder builder,
      int id = 0,
      int max_character = 1,
      Offset<WWParser.Defs.FloatRange> reaction_timeOffset = default(Offset<WWParser.Defs.FloatRange>),
      VectorOffset char_typesOffset = default(VectorOffset),
      float area_angle = 75.0f,
      Offset<WWParser.Defs.FloatRange> area_distanceOffset = default(Offset<WWParser.Defs.FloatRange>),
      int attack_weight_id = 1) {
    builder.StartTable(7);
    AiTeamAreaNew.AddAttackWeightId(builder, attack_weight_id);
    AiTeamAreaNew.AddAreaDistance(builder, area_distanceOffset);
    AiTeamAreaNew.AddAreaAngle(builder, area_angle);
    AiTeamAreaNew.AddCharTypes(builder, char_typesOffset);
    AiTeamAreaNew.AddReactionTime(builder, reaction_timeOffset);
    AiTeamAreaNew.AddMaxCharacter(builder, max_character);
    AiTeamAreaNew.AddId(builder, id);
    return AiTeamAreaNew.EndAiTeamAreaNew(builder);
  }

  public static void StartAiTeamAreaNew(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMaxCharacter(FlatBufferBuilder builder, int maxCharacter) { builder.AddInt(1, maxCharacter, 1); }
  public static void AddReactionTime(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> reactionTimeOffset) { builder.AddOffset(2, reactionTimeOffset.Value, 0); }
  public static void AddCharTypes(FlatBufferBuilder builder, VectorOffset charTypesOffset) { builder.AddOffset(3, charTypesOffset.Value, 0); }
  public static VectorOffset CreateCharTypesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCharTypesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCharTypesVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCharTypesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCharTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAreaAngle(FlatBufferBuilder builder, float areaAngle) { builder.AddFloat(4, areaAngle, 75.0f); }
  public static void AddAreaDistance(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> areaDistanceOffset) { builder.AddOffset(5, areaDistanceOffset.Value, 0); }
  public static void AddAttackWeightId(FlatBufferBuilder builder, int attackWeightId) { builder.AddInt(6, attackWeightId, 1); }
  public static Offset<WWParser.Defs.AiTeamAreaNew> EndAiTeamAreaNew(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AiTeamAreaNew>(o);
  }
  public AiTeamAreaNewT UnPack() {
    var _o = new AiTeamAreaNewT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AiTeamAreaNewT _o) {
    _o.Id = this.Id;
    _o.MaxCharacter = this.MaxCharacter;
    _o.ReactionTime = this.ReactionTime.HasValue ? this.ReactionTime.Value.UnPack() : null;
    _o.CharTypes = new List<float>();
    for (var _j = 0; _j < this.CharTypesLength; ++_j) {_o.CharTypes.Add(this.CharTypes(_j));}
    _o.AreaAngle = this.AreaAngle;
    _o.AreaDistance = this.AreaDistance.HasValue ? this.AreaDistance.Value.UnPack() : null;
    _o.AttackWeightId = this.AttackWeightId;
  }
  public static Offset<WWParser.Defs.AiTeamAreaNew> Pack(FlatBufferBuilder builder, AiTeamAreaNewT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AiTeamAreaNew>);
    var _reaction_time = _o.ReactionTime == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.ReactionTime);
    var _char_types = default(VectorOffset);
    if (_o.CharTypes != null) {
      var __char_types = _o.CharTypes.ToArray();
      _char_types = CreateCharTypesVector(builder, __char_types);
    }
    var _area_distance = _o.AreaDistance == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.AreaDistance);
    return CreateAiTeamAreaNew(
      builder,
      _o.Id,
      _o.MaxCharacter,
      _reaction_time,
      _char_types,
      _o.AreaAngle,
      _area_distance,
      _o.AttackWeightId);
  }
}

public class AiTeamAreaNewT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("max_character")]
  public int MaxCharacter { get; set; }
  [Newtonsoft.Json.JsonProperty("reaction_time")]
  public WWParser.Defs.FloatRangeT ReactionTime { get; set; }
  [Newtonsoft.Json.JsonProperty("char_types")]
  public List<float> CharTypes { get; set; }
  [Newtonsoft.Json.JsonProperty("area_angle")]
  public float AreaAngle { get; set; }
  [Newtonsoft.Json.JsonProperty("area_distance")]
  public WWParser.Defs.FloatRangeT AreaDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("attack_weight_id")]
  public int AttackWeightId { get; set; }

  public AiTeamAreaNewT() {
    this.Id = 0;
    this.MaxCharacter = 1;
    this.ReactionTime = null;
    this.CharTypes = null;
    this.AreaAngle = 75.0f;
    this.AreaDistance = null;
    this.AttackWeightId = 1;
  }
}


static public class AiTeamAreaNewVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MaxCharacter*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 8 /*ReactionTime*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*CharTypes*/, 4 /*float*/, false)
      && verifier.VerifyField(tablePos, 12 /*AreaAngle*/, 4 /*float*/, 4, false)
      && verifier.VerifyTable(tablePos, 14 /*AreaDistance*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyField(tablePos, 16 /*AttackWeightId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
