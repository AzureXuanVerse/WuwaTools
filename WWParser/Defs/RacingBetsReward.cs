// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RacingBetsReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RacingBetsReward GetRootAsRacingBetsReward(ByteBuffer _bb) { return GetRootAsRacingBetsReward(_bb, new RacingBetsReward()); }
  public static RacingBetsReward GetRootAsRacingBetsReward(ByteBuffer _bb, RacingBetsReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RacingBetsReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SeasonId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Index { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string RewardName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRewardNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetRewardNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetRewardNameArray() { return __p.__vector_as_array<byte>(10); }
  public int ResetType { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardType { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? TargetReward(int j) { int o = __p.__offset(16); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TargetRewardLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.RacingBetsReward> CreateRacingBetsReward(FlatBufferBuilder builder,
      int id = 0,
      int season_id = 0,
      int index = 0,
      StringOffset reward_nameOffset = default(StringOffset),
      int reset_type = 0,
      int reward_type = 0,
      VectorOffset target_rewardOffset = default(VectorOffset)) {
    builder.StartTable(7);
    RacingBetsReward.AddTargetReward(builder, target_rewardOffset);
    RacingBetsReward.AddRewardType(builder, reward_type);
    RacingBetsReward.AddResetType(builder, reset_type);
    RacingBetsReward.AddRewardName(builder, reward_nameOffset);
    RacingBetsReward.AddIndex(builder, index);
    RacingBetsReward.AddSeasonId(builder, season_id);
    RacingBetsReward.AddId(builder, id);
    return RacingBetsReward.EndRacingBetsReward(builder);
  }

  public static void StartRacingBetsReward(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddSeasonId(FlatBufferBuilder builder, int seasonId) { builder.AddInt(1, seasonId, 0); }
  public static void AddIndex(FlatBufferBuilder builder, int index) { builder.AddInt(2, index, 0); }
  public static void AddRewardName(FlatBufferBuilder builder, StringOffset rewardNameOffset) { builder.AddOffset(3, rewardNameOffset.Value, 0); }
  public static void AddResetType(FlatBufferBuilder builder, int resetType) { builder.AddInt(4, resetType, 0); }
  public static void AddRewardType(FlatBufferBuilder builder, int rewardType) { builder.AddInt(5, rewardType, 0); }
  public static void AddTargetReward(FlatBufferBuilder builder, VectorOffset targetRewardOffset) { builder.AddOffset(6, targetRewardOffset.Value, 0); }
  public static VectorOffset CreateTargetRewardVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTargetRewardVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTargetRewardVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTargetRewardVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTargetRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.RacingBetsReward> EndRacingBetsReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RacingBetsReward>(o);
  }
  public RacingBetsRewardT UnPack() {
    var _o = new RacingBetsRewardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RacingBetsRewardT _o) {
    _o.Id = this.Id;
    _o.SeasonId = this.SeasonId;
    _o.Index = this.Index;
    _o.RewardName = this.RewardName;
    _o.ResetType = this.ResetType;
    _o.RewardType = this.RewardType;
    _o.TargetReward = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.TargetRewardLength; ++_j) {_o.TargetReward.Add(this.TargetReward(_j).HasValue ? this.TargetReward(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.RacingBetsReward> Pack(FlatBufferBuilder builder, RacingBetsRewardT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RacingBetsReward>);
    var _reward_name = _o.RewardName == null ? default(StringOffset) : builder.CreateString(_o.RewardName);
    var _target_reward = default(VectorOffset);
    if (_o.TargetReward != null) {
      var __target_reward = new Offset<WWParser.Defs.DicIntInt>[_o.TargetReward.Count];
      for (var _j = 0; _j < __target_reward.Length; ++_j) { __target_reward[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.TargetReward[_j]); }
      _target_reward = CreateTargetRewardVector(builder, __target_reward);
    }
    return CreateRacingBetsReward(
      builder,
      _o.Id,
      _o.SeasonId,
      _o.Index,
      _reward_name,
      _o.ResetType,
      _o.RewardType,
      _target_reward);
  }
}

public class RacingBetsRewardT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("season_id")]
  public int SeasonId { get; set; }
  [Newtonsoft.Json.JsonProperty("index")]
  public int Index { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_name")]
  public string RewardName { get; set; }
  [Newtonsoft.Json.JsonProperty("reset_type")]
  public int ResetType { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_type")]
  public int RewardType { get; set; }
  [Newtonsoft.Json.JsonProperty("target_reward")]
  public List<WWParser.Defs.DicIntIntT> TargetReward { get; set; }

  public RacingBetsRewardT() {
    this.Id = 0;
    this.SeasonId = 0;
    this.Index = 0;
    this.RewardName = null;
    this.ResetType = 0;
    this.RewardType = 0;
    this.TargetReward = null;
  }
}


static public class RacingBetsRewardVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SeasonId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Index*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*RewardName*/, false)
      && verifier.VerifyField(tablePos, 12 /*ResetType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*RewardType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 16 /*TargetReward*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
