// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RoleAudioRules : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RoleAudioRules GetRootAsRoleAudioRules(ByteBuffer _bb) { return GetRootAsRoleAudioRules(_bb, new RoleAudioRules()); }
  public static RoleAudioRules GetRootAsRoleAudioRules(ByteBuffer _bb, RoleAudioRules obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoleAudioRules __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TeamColdTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CharacterColdTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PostProbability { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.RoleAudioRules> CreateRoleAudioRules(FlatBufferBuilder builder,
      int id = 0,
      int team_cold_time = 0,
      int character_cold_time = 0,
      int post_probability = 0) {
    builder.StartTable(4);
    RoleAudioRules.AddPostProbability(builder, post_probability);
    RoleAudioRules.AddCharacterColdTime(builder, character_cold_time);
    RoleAudioRules.AddTeamColdTime(builder, team_cold_time);
    RoleAudioRules.AddId(builder, id);
    return RoleAudioRules.EndRoleAudioRules(builder);
  }

  public static void StartRoleAudioRules(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTeamColdTime(FlatBufferBuilder builder, int teamColdTime) { builder.AddInt(1, teamColdTime, 0); }
  public static void AddCharacterColdTime(FlatBufferBuilder builder, int characterColdTime) { builder.AddInt(2, characterColdTime, 0); }
  public static void AddPostProbability(FlatBufferBuilder builder, int postProbability) { builder.AddInt(3, postProbability, 0); }
  public static Offset<WWParser.Defs.RoleAudioRules> EndRoleAudioRules(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RoleAudioRules>(o);
  }
  public RoleAudioRulesT UnPack() {
    var _o = new RoleAudioRulesT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RoleAudioRulesT _o) {
    _o.Id = this.Id;
    _o.TeamColdTime = this.TeamColdTime;
    _o.CharacterColdTime = this.CharacterColdTime;
    _o.PostProbability = this.PostProbability;
  }
  public static Offset<WWParser.Defs.RoleAudioRules> Pack(FlatBufferBuilder builder, RoleAudioRulesT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RoleAudioRules>);
    return CreateRoleAudioRules(
      builder,
      _o.Id,
      _o.TeamColdTime,
      _o.CharacterColdTime,
      _o.PostProbability);
  }
}

public class RoleAudioRulesT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("team_cold_time")]
  public int TeamColdTime { get; set; }
  [Newtonsoft.Json.JsonProperty("character_cold_time")]
  public int CharacterColdTime { get; set; }
  [Newtonsoft.Json.JsonProperty("post_probability")]
  public int PostProbability { get; set; }

  public RoleAudioRulesT() {
    this.Id = 0;
    this.TeamColdTime = 0;
    this.CharacterColdTime = 0;
    this.PostProbability = 0;
  }
}


static public class RoleAudioRulesVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*TeamColdTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*CharacterColdTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*PostProbability*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
