// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MapBorder : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MapBorder GetRootAsMapBorder(ByteBuffer _bb) { return GetRootAsMapBorder(_bb, new MapBorder()); }
  public static MapBorder GetRootAsMapBorder(ByteBuffer _bb, MapBorder obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MapBorder __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int BorderId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstanceDungeonId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GravityFlip { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int InstanceDungeonIdMapType { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConditionId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string PrefabPath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabPathBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetPrefabPathBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetPrefabPathArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<WWParser.Defs.MapBorder> CreateMapBorder(FlatBufferBuilder builder,
      int border_id = 0,
      int map_id = 0,
      int instance_dungeon_id = 0,
      int gravity_flip = 1,
      int instance_dungeon_id_map_type = 0,
      int condition_id = 0,
      StringOffset prefab_pathOffset = default(StringOffset)) {
    builder.StartTable(7);
    MapBorder.AddPrefabPath(builder, prefab_pathOffset);
    MapBorder.AddConditionId(builder, condition_id);
    MapBorder.AddInstanceDungeonIdMapType(builder, instance_dungeon_id_map_type);
    MapBorder.AddGravityFlip(builder, gravity_flip);
    MapBorder.AddInstanceDungeonId(builder, instance_dungeon_id);
    MapBorder.AddMapId(builder, map_id);
    MapBorder.AddBorderId(builder, border_id);
    return MapBorder.EndMapBorder(builder);
  }

  public static void StartMapBorder(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddBorderId(FlatBufferBuilder builder, int borderId) { builder.AddInt(0, borderId, 0); }
  public static void AddMapId(FlatBufferBuilder builder, int mapId) { builder.AddInt(1, mapId, 0); }
  public static void AddInstanceDungeonId(FlatBufferBuilder builder, int instanceDungeonId) { builder.AddInt(2, instanceDungeonId, 0); }
  public static void AddGravityFlip(FlatBufferBuilder builder, int gravityFlip) { builder.AddInt(3, gravityFlip, 1); }
  public static void AddInstanceDungeonIdMapType(FlatBufferBuilder builder, int instanceDungeonIdMapType) { builder.AddInt(4, instanceDungeonIdMapType, 0); }
  public static void AddConditionId(FlatBufferBuilder builder, int conditionId) { builder.AddInt(5, conditionId, 0); }
  public static void AddPrefabPath(FlatBufferBuilder builder, StringOffset prefabPathOffset) { builder.AddOffset(6, prefabPathOffset.Value, 0); }
  public static Offset<WWParser.Defs.MapBorder> EndMapBorder(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MapBorder>(o);
  }
  public MapBorderT UnPack() {
    var _o = new MapBorderT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MapBorderT _o) {
    _o.BorderId = this.BorderId;
    _o.MapId = this.MapId;
    _o.InstanceDungeonId = this.InstanceDungeonId;
    _o.GravityFlip = this.GravityFlip;
    _o.InstanceDungeonIdMapType = this.InstanceDungeonIdMapType;
    _o.ConditionId = this.ConditionId;
    _o.PrefabPath = this.PrefabPath;
  }
  public static Offset<WWParser.Defs.MapBorder> Pack(FlatBufferBuilder builder, MapBorderT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MapBorder>);
    var _prefab_path = _o.PrefabPath == null ? default(StringOffset) : builder.CreateString(_o.PrefabPath);
    return CreateMapBorder(
      builder,
      _o.BorderId,
      _o.MapId,
      _o.InstanceDungeonId,
      _o.GravityFlip,
      _o.InstanceDungeonIdMapType,
      _o.ConditionId,
      _prefab_path);
  }
}

public class MapBorderT
{
  [Newtonsoft.Json.JsonProperty("border_id")]
  public int BorderId { get; set; }
  [Newtonsoft.Json.JsonProperty("map_id")]
  public int MapId { get; set; }
  [Newtonsoft.Json.JsonProperty("instance_dungeon_id")]
  public int InstanceDungeonId { get; set; }
  [Newtonsoft.Json.JsonProperty("gravity_flip")]
  public int GravityFlip { get; set; }
  [Newtonsoft.Json.JsonProperty("instance_dungeon_id_map_type")]
  public int InstanceDungeonIdMapType { get; set; }
  [Newtonsoft.Json.JsonProperty("condition_id")]
  public int ConditionId { get; set; }
  [Newtonsoft.Json.JsonProperty("prefab_path")]
  public string PrefabPath { get; set; }

  public MapBorderT() {
    this.BorderId = 0;
    this.MapId = 0;
    this.InstanceDungeonId = 0;
    this.GravityFlip = 1;
    this.InstanceDungeonIdMapType = 0;
    this.ConditionId = 0;
    this.PrefabPath = null;
  }
}


static public class MapBorderVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*BorderId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MapId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*InstanceDungeonId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*GravityFlip*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*InstanceDungeonIdMapType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ConditionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*PrefabPath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
