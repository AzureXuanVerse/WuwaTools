// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DangoMonopolyPropertyType : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DangoMonopolyPropertyType GetRootAsDangoMonopolyPropertyType(ByteBuffer _bb) { return GetRootAsDangoMonopolyPropertyType(_bb, new DangoMonopolyPropertyType()); }
  public static DangoMonopolyPropertyType GetRootAsDangoMonopolyPropertyType(ByteBuffer _bb, DangoMonopolyPropertyType obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DangoMonopolyPropertyType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PropertyType { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TriggerType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.DangoMonopolyPropertyType> CreateDangoMonopolyPropertyType(FlatBufferBuilder builder,
      int property_type = 0,
      int trigger_type = 0) {
    builder.StartTable(2);
    DangoMonopolyPropertyType.AddTriggerType(builder, trigger_type);
    DangoMonopolyPropertyType.AddPropertyType(builder, property_type);
    return DangoMonopolyPropertyType.EndDangoMonopolyPropertyType(builder);
  }

  public static void StartDangoMonopolyPropertyType(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPropertyType(FlatBufferBuilder builder, int propertyType) { builder.AddInt(0, propertyType, 0); }
  public static void AddTriggerType(FlatBufferBuilder builder, int triggerType) { builder.AddInt(1, triggerType, 0); }
  public static Offset<WWParser.Defs.DangoMonopolyPropertyType> EndDangoMonopolyPropertyType(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DangoMonopolyPropertyType>(o);
  }
  public DangoMonopolyPropertyTypeT UnPack() {
    var _o = new DangoMonopolyPropertyTypeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DangoMonopolyPropertyTypeT _o) {
    _o.PropertyType = this.PropertyType;
    _o.TriggerType = this.TriggerType;
  }
  public static Offset<WWParser.Defs.DangoMonopolyPropertyType> Pack(FlatBufferBuilder builder, DangoMonopolyPropertyTypeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DangoMonopolyPropertyType>);
    return CreateDangoMonopolyPropertyType(
      builder,
      _o.PropertyType,
      _o.TriggerType);
  }
}

public class DangoMonopolyPropertyTypeT
{
  [Newtonsoft.Json.JsonProperty("property_type")]
  public int PropertyType { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_type")]
  public int TriggerType { get; set; }

  public DangoMonopolyPropertyTypeT() {
    this.PropertyType = 0;
    this.TriggerType = 0;
  }
}


static public class DangoMonopolyPropertyTypeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PropertyType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*TriggerType*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
