// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueWhiteCat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueWhiteCat GetRootAsRogueWhiteCat(ByteBuffer _bb) { return GetRootAsRogueWhiteCat(_bb, new RogueWhiteCat()); }
  public static RogueWhiteCat GetRootAsRogueWhiteCat(ByteBuffer _bb, RogueWhiteCat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueWhiteCat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ScoreId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EnergyId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxEnergy { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Insts(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int InstsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetInstsBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetInstsBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetInstsArray() { return __p.__vector_as_array<int>(12); }
  public int BossRewards(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BossRewardsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBossRewardsBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetBossRewardsBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetBossRewardsArray() { return __p.__vector_as_array<int>(14); }
  public int LimitedTimeId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Rewards(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RewardsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRewardsBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetRewardsBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetRewardsArray() { return __p.__vector_as_array<int>(18); }
  public int FirstWhiteCatDungeonId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RepeatWhiteCatDungeonId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WhiteCatFirstOpenCondition { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FirstWhiteCatQuestId { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WhiteCatRepeatOpenCondition { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? OpenCondition(int j) { int o = __p.__offset(30); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OpenConditionLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int DreamLinkTeleportMarkId { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntString? TabText(int j) { int o = __p.__offset(34); return o != 0 ? (WWParser.Defs.DicIntString?)(new WWParser.Defs.DicIntString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TabTextLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntString? TabIcon(int j) { int o = __p.__offset(36); return o != 0 ? (WWParser.Defs.DicIntString?)(new WWParser.Defs.DicIntString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TabIconLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntString? BossTabText(int j) { int o = __p.__offset(38); return o != 0 ? (WWParser.Defs.DicIntString?)(new WWParser.Defs.DicIntString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BossTabTextLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string PlotRoleLinkAudio { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlotRoleLinkAudioBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetPlotRoleLinkAudioBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetPlotRoleLinkAudioArray() { return __p.__vector_as_array<byte>(40); }
  public int BossInstanceList(int j) { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BossInstanceListLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBossInstanceListBytes() { return __p.__vector_as_span<int>(42, 4); }
#else
  public ArraySegment<byte>? GetBossInstanceListBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public int[] GetBossInstanceListArray() { return __p.__vector_as_array<int>(42); }
  public int WeaponPreviewId { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DungeonBaseProgress { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DungeonMaxProgress { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntString? PreloadRoleIds(int j) { int o = __p.__offset(50); return o != 0 ? (WWParser.Defs.DicIntString?)(new WWParser.Defs.DicIntString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PreloadRoleIdsLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int PlotRoleLinkTeam(int j) { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PlotRoleLinkTeamLength { get { int o = __p.__offset(52); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPlotRoleLinkTeamBytes() { return __p.__vector_as_span<int>(52, 4); }
#else
  public ArraySegment<byte>? GetPlotRoleLinkTeamBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public int[] GetPlotRoleLinkTeamArray() { return __p.__vector_as_array<int>(52); }

  public static Offset<WWParser.Defs.RogueWhiteCat> CreateRogueWhiteCat(FlatBufferBuilder builder,
      int id = 0,
      int score_id = 0,
      int energy_id = 0,
      int max_energy = 0,
      VectorOffset instsOffset = default(VectorOffset),
      VectorOffset boss_rewardsOffset = default(VectorOffset),
      int limited_time_id = 0,
      VectorOffset rewardsOffset = default(VectorOffset),
      int first_white_cat_dungeon_id = 0,
      int repeat_white_cat_dungeon_id = 0,
      int white_cat_first_open_condition = 0,
      int first_white_cat_quest_id = 0,
      int white_cat_repeat_open_condition = 0,
      VectorOffset open_conditionOffset = default(VectorOffset),
      int dream_link_teleport_mark_id = 0,
      VectorOffset tab_textOffset = default(VectorOffset),
      VectorOffset tab_iconOffset = default(VectorOffset),
      VectorOffset boss_tab_textOffset = default(VectorOffset),
      StringOffset plot_role_link_audioOffset = default(StringOffset),
      VectorOffset boss_instance_listOffset = default(VectorOffset),
      int weapon_preview_id = 0,
      int dungeon_base_progress = 0,
      int dungeon_max_progress = 0,
      VectorOffset preload_role_idsOffset = default(VectorOffset),
      VectorOffset plot_role_link_teamOffset = default(VectorOffset)) {
    builder.StartTable(25);
    RogueWhiteCat.AddPlotRoleLinkTeam(builder, plot_role_link_teamOffset);
    RogueWhiteCat.AddPreloadRoleIds(builder, preload_role_idsOffset);
    RogueWhiteCat.AddDungeonMaxProgress(builder, dungeon_max_progress);
    RogueWhiteCat.AddDungeonBaseProgress(builder, dungeon_base_progress);
    RogueWhiteCat.AddWeaponPreviewId(builder, weapon_preview_id);
    RogueWhiteCat.AddBossInstanceList(builder, boss_instance_listOffset);
    RogueWhiteCat.AddPlotRoleLinkAudio(builder, plot_role_link_audioOffset);
    RogueWhiteCat.AddBossTabText(builder, boss_tab_textOffset);
    RogueWhiteCat.AddTabIcon(builder, tab_iconOffset);
    RogueWhiteCat.AddTabText(builder, tab_textOffset);
    RogueWhiteCat.AddDreamLinkTeleportMarkId(builder, dream_link_teleport_mark_id);
    RogueWhiteCat.AddOpenCondition(builder, open_conditionOffset);
    RogueWhiteCat.AddWhiteCatRepeatOpenCondition(builder, white_cat_repeat_open_condition);
    RogueWhiteCat.AddFirstWhiteCatQuestId(builder, first_white_cat_quest_id);
    RogueWhiteCat.AddWhiteCatFirstOpenCondition(builder, white_cat_first_open_condition);
    RogueWhiteCat.AddRepeatWhiteCatDungeonId(builder, repeat_white_cat_dungeon_id);
    RogueWhiteCat.AddFirstWhiteCatDungeonId(builder, first_white_cat_dungeon_id);
    RogueWhiteCat.AddRewards(builder, rewardsOffset);
    RogueWhiteCat.AddLimitedTimeId(builder, limited_time_id);
    RogueWhiteCat.AddBossRewards(builder, boss_rewardsOffset);
    RogueWhiteCat.AddInsts(builder, instsOffset);
    RogueWhiteCat.AddMaxEnergy(builder, max_energy);
    RogueWhiteCat.AddEnergyId(builder, energy_id);
    RogueWhiteCat.AddScoreId(builder, score_id);
    RogueWhiteCat.AddId(builder, id);
    return RogueWhiteCat.EndRogueWhiteCat(builder);
  }

  public static void StartRogueWhiteCat(FlatBufferBuilder builder) { builder.StartTable(25); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddScoreId(FlatBufferBuilder builder, int scoreId) { builder.AddInt(1, scoreId, 0); }
  public static void AddEnergyId(FlatBufferBuilder builder, int energyId) { builder.AddInt(2, energyId, 0); }
  public static void AddMaxEnergy(FlatBufferBuilder builder, int maxEnergy) { builder.AddInt(3, maxEnergy, 0); }
  public static void AddInsts(FlatBufferBuilder builder, VectorOffset instsOffset) { builder.AddOffset(4, instsOffset.Value, 0); }
  public static VectorOffset CreateInstsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInstsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInstsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInstsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInstsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBossRewards(FlatBufferBuilder builder, VectorOffset bossRewardsOffset) { builder.AddOffset(5, bossRewardsOffset.Value, 0); }
  public static VectorOffset CreateBossRewardsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBossRewardsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBossRewardsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBossRewardsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBossRewardsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLimitedTimeId(FlatBufferBuilder builder, int limitedTimeId) { builder.AddInt(6, limitedTimeId, 0); }
  public static void AddRewards(FlatBufferBuilder builder, VectorOffset rewardsOffset) { builder.AddOffset(7, rewardsOffset.Value, 0); }
  public static VectorOffset CreateRewardsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFirstWhiteCatDungeonId(FlatBufferBuilder builder, int firstWhiteCatDungeonId) { builder.AddInt(8, firstWhiteCatDungeonId, 0); }
  public static void AddRepeatWhiteCatDungeonId(FlatBufferBuilder builder, int repeatWhiteCatDungeonId) { builder.AddInt(9, repeatWhiteCatDungeonId, 0); }
  public static void AddWhiteCatFirstOpenCondition(FlatBufferBuilder builder, int whiteCatFirstOpenCondition) { builder.AddInt(10, whiteCatFirstOpenCondition, 0); }
  public static void AddFirstWhiteCatQuestId(FlatBufferBuilder builder, int firstWhiteCatQuestId) { builder.AddInt(11, firstWhiteCatQuestId, 0); }
  public static void AddWhiteCatRepeatOpenCondition(FlatBufferBuilder builder, int whiteCatRepeatOpenCondition) { builder.AddInt(12, whiteCatRepeatOpenCondition, 0); }
  public static void AddOpenCondition(FlatBufferBuilder builder, VectorOffset openConditionOffset) { builder.AddOffset(13, openConditionOffset.Value, 0); }
  public static VectorOffset CreateOpenConditionVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOpenConditionVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOpenConditionVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOpenConditionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOpenConditionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDreamLinkTeleportMarkId(FlatBufferBuilder builder, int dreamLinkTeleportMarkId) { builder.AddInt(14, dreamLinkTeleportMarkId, 0); }
  public static void AddTabText(FlatBufferBuilder builder, VectorOffset tabTextOffset) { builder.AddOffset(15, tabTextOffset.Value, 0); }
  public static VectorOffset CreateTabTextVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTabTextVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTabTextVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTabTextVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTabTextVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTabIcon(FlatBufferBuilder builder, VectorOffset tabIconOffset) { builder.AddOffset(16, tabIconOffset.Value, 0); }
  public static VectorOffset CreateTabIconVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTabIconVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTabIconVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTabIconVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTabIconVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBossTabText(FlatBufferBuilder builder, VectorOffset bossTabTextOffset) { builder.AddOffset(17, bossTabTextOffset.Value, 0); }
  public static VectorOffset CreateBossTabTextVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBossTabTextVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBossTabTextVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBossTabTextVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBossTabTextVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPlotRoleLinkAudio(FlatBufferBuilder builder, StringOffset plotRoleLinkAudioOffset) { builder.AddOffset(18, plotRoleLinkAudioOffset.Value, 0); }
  public static void AddBossInstanceList(FlatBufferBuilder builder, VectorOffset bossInstanceListOffset) { builder.AddOffset(19, bossInstanceListOffset.Value, 0); }
  public static VectorOffset CreateBossInstanceListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBossInstanceListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBossInstanceListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBossInstanceListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBossInstanceListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWeaponPreviewId(FlatBufferBuilder builder, int weaponPreviewId) { builder.AddInt(20, weaponPreviewId, 0); }
  public static void AddDungeonBaseProgress(FlatBufferBuilder builder, int dungeonBaseProgress) { builder.AddInt(21, dungeonBaseProgress, 0); }
  public static void AddDungeonMaxProgress(FlatBufferBuilder builder, int dungeonMaxProgress) { builder.AddInt(22, dungeonMaxProgress, 0); }
  public static void AddPreloadRoleIds(FlatBufferBuilder builder, VectorOffset preloadRoleIdsOffset) { builder.AddOffset(23, preloadRoleIdsOffset.Value, 0); }
  public static VectorOffset CreatePreloadRoleIdsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePreloadRoleIdsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePreloadRoleIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePreloadRoleIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPreloadRoleIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPlotRoleLinkTeam(FlatBufferBuilder builder, VectorOffset plotRoleLinkTeamOffset) { builder.AddOffset(24, plotRoleLinkTeamOffset.Value, 0); }
  public static VectorOffset CreatePlotRoleLinkTeamVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePlotRoleLinkTeamVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlotRoleLinkTeamVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlotRoleLinkTeamVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPlotRoleLinkTeamVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.RogueWhiteCat> EndRogueWhiteCat(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueWhiteCat>(o);
  }
  public RogueWhiteCatT UnPack() {
    var _o = new RogueWhiteCatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueWhiteCatT _o) {
    _o.Id = this.Id;
    _o.ScoreId = this.ScoreId;
    _o.EnergyId = this.EnergyId;
    _o.MaxEnergy = this.MaxEnergy;
    _o.Insts = new List<int>();
    for (var _j = 0; _j < this.InstsLength; ++_j) {_o.Insts.Add(this.Insts(_j));}
    _o.BossRewards = new List<int>();
    for (var _j = 0; _j < this.BossRewardsLength; ++_j) {_o.BossRewards.Add(this.BossRewards(_j));}
    _o.LimitedTimeId = this.LimitedTimeId;
    _o.Rewards = new List<int>();
    for (var _j = 0; _j < this.RewardsLength; ++_j) {_o.Rewards.Add(this.Rewards(_j));}
    _o.FirstWhiteCatDungeonId = this.FirstWhiteCatDungeonId;
    _o.RepeatWhiteCatDungeonId = this.RepeatWhiteCatDungeonId;
    _o.WhiteCatFirstOpenCondition = this.WhiteCatFirstOpenCondition;
    _o.FirstWhiteCatQuestId = this.FirstWhiteCatQuestId;
    _o.WhiteCatRepeatOpenCondition = this.WhiteCatRepeatOpenCondition;
    _o.OpenCondition = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.OpenConditionLength; ++_j) {_o.OpenCondition.Add(this.OpenCondition(_j).HasValue ? this.OpenCondition(_j).Value.UnPack() : null);}
    _o.DreamLinkTeleportMarkId = this.DreamLinkTeleportMarkId;
    _o.TabText = new List<WWParser.Defs.DicIntStringT>();
    for (var _j = 0; _j < this.TabTextLength; ++_j) {_o.TabText.Add(this.TabText(_j).HasValue ? this.TabText(_j).Value.UnPack() : null);}
    _o.TabIcon = new List<WWParser.Defs.DicIntStringT>();
    for (var _j = 0; _j < this.TabIconLength; ++_j) {_o.TabIcon.Add(this.TabIcon(_j).HasValue ? this.TabIcon(_j).Value.UnPack() : null);}
    _o.BossTabText = new List<WWParser.Defs.DicIntStringT>();
    for (var _j = 0; _j < this.BossTabTextLength; ++_j) {_o.BossTabText.Add(this.BossTabText(_j).HasValue ? this.BossTabText(_j).Value.UnPack() : null);}
    _o.PlotRoleLinkAudio = this.PlotRoleLinkAudio;
    _o.BossInstanceList = new List<int>();
    for (var _j = 0; _j < this.BossInstanceListLength; ++_j) {_o.BossInstanceList.Add(this.BossInstanceList(_j));}
    _o.WeaponPreviewId = this.WeaponPreviewId;
    _o.DungeonBaseProgress = this.DungeonBaseProgress;
    _o.DungeonMaxProgress = this.DungeonMaxProgress;
    _o.PreloadRoleIds = new List<WWParser.Defs.DicIntStringT>();
    for (var _j = 0; _j < this.PreloadRoleIdsLength; ++_j) {_o.PreloadRoleIds.Add(this.PreloadRoleIds(_j).HasValue ? this.PreloadRoleIds(_j).Value.UnPack() : null);}
    _o.PlotRoleLinkTeam = new List<int>();
    for (var _j = 0; _j < this.PlotRoleLinkTeamLength; ++_j) {_o.PlotRoleLinkTeam.Add(this.PlotRoleLinkTeam(_j));}
  }
  public static Offset<WWParser.Defs.RogueWhiteCat> Pack(FlatBufferBuilder builder, RogueWhiteCatT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueWhiteCat>);
    var _insts = default(VectorOffset);
    if (_o.Insts != null) {
      var __insts = _o.Insts.ToArray();
      _insts = CreateInstsVector(builder, __insts);
    }
    var _boss_rewards = default(VectorOffset);
    if (_o.BossRewards != null) {
      var __boss_rewards = _o.BossRewards.ToArray();
      _boss_rewards = CreateBossRewardsVector(builder, __boss_rewards);
    }
    var _rewards = default(VectorOffset);
    if (_o.Rewards != null) {
      var __rewards = _o.Rewards.ToArray();
      _rewards = CreateRewardsVector(builder, __rewards);
    }
    var _open_condition = default(VectorOffset);
    if (_o.OpenCondition != null) {
      var __open_condition = new Offset<WWParser.Defs.DicIntInt>[_o.OpenCondition.Count];
      for (var _j = 0; _j < __open_condition.Length; ++_j) { __open_condition[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.OpenCondition[_j]); }
      _open_condition = CreateOpenConditionVector(builder, __open_condition);
    }
    var _tab_text = default(VectorOffset);
    if (_o.TabText != null) {
      var __tab_text = new Offset<WWParser.Defs.DicIntString>[_o.TabText.Count];
      for (var _j = 0; _j < __tab_text.Length; ++_j) { __tab_text[_j] = WWParser.Defs.DicIntString.Pack(builder, _o.TabText[_j]); }
      _tab_text = CreateTabTextVector(builder, __tab_text);
    }
    var _tab_icon = default(VectorOffset);
    if (_o.TabIcon != null) {
      var __tab_icon = new Offset<WWParser.Defs.DicIntString>[_o.TabIcon.Count];
      for (var _j = 0; _j < __tab_icon.Length; ++_j) { __tab_icon[_j] = WWParser.Defs.DicIntString.Pack(builder, _o.TabIcon[_j]); }
      _tab_icon = CreateTabIconVector(builder, __tab_icon);
    }
    var _boss_tab_text = default(VectorOffset);
    if (_o.BossTabText != null) {
      var __boss_tab_text = new Offset<WWParser.Defs.DicIntString>[_o.BossTabText.Count];
      for (var _j = 0; _j < __boss_tab_text.Length; ++_j) { __boss_tab_text[_j] = WWParser.Defs.DicIntString.Pack(builder, _o.BossTabText[_j]); }
      _boss_tab_text = CreateBossTabTextVector(builder, __boss_tab_text);
    }
    var _plot_role_link_audio = _o.PlotRoleLinkAudio == null ? default(StringOffset) : builder.CreateString(_o.PlotRoleLinkAudio);
    var _boss_instance_list = default(VectorOffset);
    if (_o.BossInstanceList != null) {
      var __boss_instance_list = _o.BossInstanceList.ToArray();
      _boss_instance_list = CreateBossInstanceListVector(builder, __boss_instance_list);
    }
    var _preload_role_ids = default(VectorOffset);
    if (_o.PreloadRoleIds != null) {
      var __preload_role_ids = new Offset<WWParser.Defs.DicIntString>[_o.PreloadRoleIds.Count];
      for (var _j = 0; _j < __preload_role_ids.Length; ++_j) { __preload_role_ids[_j] = WWParser.Defs.DicIntString.Pack(builder, _o.PreloadRoleIds[_j]); }
      _preload_role_ids = CreatePreloadRoleIdsVector(builder, __preload_role_ids);
    }
    var _plot_role_link_team = default(VectorOffset);
    if (_o.PlotRoleLinkTeam != null) {
      var __plot_role_link_team = _o.PlotRoleLinkTeam.ToArray();
      _plot_role_link_team = CreatePlotRoleLinkTeamVector(builder, __plot_role_link_team);
    }
    return CreateRogueWhiteCat(
      builder,
      _o.Id,
      _o.ScoreId,
      _o.EnergyId,
      _o.MaxEnergy,
      _insts,
      _boss_rewards,
      _o.LimitedTimeId,
      _rewards,
      _o.FirstWhiteCatDungeonId,
      _o.RepeatWhiteCatDungeonId,
      _o.WhiteCatFirstOpenCondition,
      _o.FirstWhiteCatQuestId,
      _o.WhiteCatRepeatOpenCondition,
      _open_condition,
      _o.DreamLinkTeleportMarkId,
      _tab_text,
      _tab_icon,
      _boss_tab_text,
      _plot_role_link_audio,
      _boss_instance_list,
      _o.WeaponPreviewId,
      _o.DungeonBaseProgress,
      _o.DungeonMaxProgress,
      _preload_role_ids,
      _plot_role_link_team);
  }
}

public class RogueWhiteCatT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("score_id")]
  public int ScoreId { get; set; }
  [Newtonsoft.Json.JsonProperty("energy_id")]
  public int EnergyId { get; set; }
  [Newtonsoft.Json.JsonProperty("max_energy")]
  public int MaxEnergy { get; set; }
  [Newtonsoft.Json.JsonProperty("insts")]
  public List<int> Insts { get; set; }
  [Newtonsoft.Json.JsonProperty("boss_rewards")]
  public List<int> BossRewards { get; set; }
  [Newtonsoft.Json.JsonProperty("limited_time_id")]
  public int LimitedTimeId { get; set; }
  [Newtonsoft.Json.JsonProperty("rewards")]
  public List<int> Rewards { get; set; }
  [Newtonsoft.Json.JsonProperty("first_white_cat_dungeon_id")]
  public int FirstWhiteCatDungeonId { get; set; }
  [Newtonsoft.Json.JsonProperty("repeat_white_cat_dungeon_id")]
  public int RepeatWhiteCatDungeonId { get; set; }
  [Newtonsoft.Json.JsonProperty("white_cat_first_open_condition")]
  public int WhiteCatFirstOpenCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("first_white_cat_quest_id")]
  public int FirstWhiteCatQuestId { get; set; }
  [Newtonsoft.Json.JsonProperty("white_cat_repeat_open_condition")]
  public int WhiteCatRepeatOpenCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("open_condition")]
  public List<WWParser.Defs.DicIntIntT> OpenCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("dream_link_teleport_mark_id")]
  public int DreamLinkTeleportMarkId { get; set; }
  [Newtonsoft.Json.JsonProperty("tab_text")]
  public List<WWParser.Defs.DicIntStringT> TabText { get; set; }
  [Newtonsoft.Json.JsonProperty("tab_icon")]
  public List<WWParser.Defs.DicIntStringT> TabIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("boss_tab_text")]
  public List<WWParser.Defs.DicIntStringT> BossTabText { get; set; }
  [Newtonsoft.Json.JsonProperty("plot_role_link_audio")]
  public string PlotRoleLinkAudio { get; set; }
  [Newtonsoft.Json.JsonProperty("boss_instance_list")]
  public List<int> BossInstanceList { get; set; }
  [Newtonsoft.Json.JsonProperty("weapon_preview_id")]
  public int WeaponPreviewId { get; set; }
  [Newtonsoft.Json.JsonProperty("dungeon_base_progress")]
  public int DungeonBaseProgress { get; set; }
  [Newtonsoft.Json.JsonProperty("dungeon_max_progress")]
  public int DungeonMaxProgress { get; set; }
  [Newtonsoft.Json.JsonProperty("preload_role_ids")]
  public List<WWParser.Defs.DicIntStringT> PreloadRoleIds { get; set; }
  [Newtonsoft.Json.JsonProperty("plot_role_link_team")]
  public List<int> PlotRoleLinkTeam { get; set; }

  public RogueWhiteCatT() {
    this.Id = 0;
    this.ScoreId = 0;
    this.EnergyId = 0;
    this.MaxEnergy = 0;
    this.Insts = null;
    this.BossRewards = null;
    this.LimitedTimeId = 0;
    this.Rewards = null;
    this.FirstWhiteCatDungeonId = 0;
    this.RepeatWhiteCatDungeonId = 0;
    this.WhiteCatFirstOpenCondition = 0;
    this.FirstWhiteCatQuestId = 0;
    this.WhiteCatRepeatOpenCondition = 0;
    this.OpenCondition = null;
    this.DreamLinkTeleportMarkId = 0;
    this.TabText = null;
    this.TabIcon = null;
    this.BossTabText = null;
    this.PlotRoleLinkAudio = null;
    this.BossInstanceList = null;
    this.WeaponPreviewId = 0;
    this.DungeonBaseProgress = 0;
    this.DungeonMaxProgress = 0;
    this.PreloadRoleIds = null;
    this.PlotRoleLinkTeam = null;
  }
}


static public class RogueWhiteCatVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ScoreId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*EnergyId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*MaxEnergy*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*Insts*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*BossRewards*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 16 /*LimitedTimeId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*Rewards*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 20 /*FirstWhiteCatDungeonId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*RepeatWhiteCatDungeonId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*WhiteCatFirstOpenCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*FirstWhiteCatQuestId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*WhiteCatRepeatOpenCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 30 /*OpenCondition*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 32 /*DreamLinkTeleportMarkId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 34 /*TabText*/, WWParser.Defs.DicIntStringVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 36 /*TabIcon*/, WWParser.Defs.DicIntStringVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 38 /*BossTabText*/, WWParser.Defs.DicIntStringVerify.Verify, false)
      && verifier.VerifyString(tablePos, 40 /*PlotRoleLinkAudio*/, false)
      && verifier.VerifyVectorOfData(tablePos, 42 /*BossInstanceList*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 44 /*WeaponPreviewId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*DungeonBaseProgress*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*DungeonMaxProgress*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 50 /*PreloadRoleIds*/, WWParser.Defs.DicIntStringVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 52 /*PlotRoleLinkTeam*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
