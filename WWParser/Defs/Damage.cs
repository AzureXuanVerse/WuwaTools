// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Damage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Damage GetRootAsDamage(ByteBuffer _bb) { return GetRootAsDamage(_bb, new Damage()); }
  public static Damage GetRootAsDamage(ByteBuffer _bb, Damage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Damage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public int CalculateType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Element { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DamageTextType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public double PayloadId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public int Type { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SubType(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SubTypeLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSubTypeBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetSubTypeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetSubTypeArray() { return __p.__vector_as_array<int>(16); }
  public int SmashType { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int CureBaseValue(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CureBaseValueLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCureBaseValueBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetCureBaseValueBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetCureBaseValueArray() { return __p.__vector_as_array<int>(20); }
  public int RelatedProperty { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)7; } }
  public int RateLv(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RateLvLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRateLvBytes() { return __p.__vector_as_span<int>(24, 4); }
#else
  public ArraySegment<byte>? GetRateLvBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public int[] GetRateLvArray() { return __p.__vector_as_array<int>(24); }
  public int HardnessLv(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int HardnessLvLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetHardnessLvBytes() { return __p.__vector_as_span<int>(26, 4); }
#else
  public ArraySegment<byte>? GetHardnessLvBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public int[] GetHardnessLvArray() { return __p.__vector_as_array<int>(26); }
  public int ToughLv(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ToughLvLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetToughLvBytes() { return __p.__vector_as_span<int>(28, 4); }
#else
  public ArraySegment<byte>? GetToughLvBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public int[] GetToughLvArray() { return __p.__vector_as_array<int>(28); }
  public int Energy(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EnergyLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEnergyBytes() { return __p.__vector_as_span<int>(30, 4); }
#else
  public ArraySegment<byte>? GetEnergyBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public int[] GetEnergyArray() { return __p.__vector_as_array<int>(30); }
  public int SpecialEnergy1(int j) { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SpecialEnergy1Length { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSpecialEnergy1Bytes() { return __p.__vector_as_span<int>(32, 4); }
#else
  public ArraySegment<byte>? GetSpecialEnergy1Bytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public int[] GetSpecialEnergy1Array() { return __p.__vector_as_array<int>(32); }
  public int SpecialEnergy2(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SpecialEnergy2Length { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSpecialEnergy2Bytes() { return __p.__vector_as_span<int>(34, 4); }
#else
  public ArraySegment<byte>? GetSpecialEnergy2Bytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public int[] GetSpecialEnergy2Array() { return __p.__vector_as_array<int>(34); }
  public int SpecialEnergy3(int j) { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SpecialEnergy3Length { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSpecialEnergy3Bytes() { return __p.__vector_as_span<int>(36, 4); }
#else
  public ArraySegment<byte>? GetSpecialEnergy3Bytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public int[] GetSpecialEnergy3Array() { return __p.__vector_as_array<int>(36); }
  public int SpecialEnergy4(int j) { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SpecialEnergy4Length { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSpecialEnergy4Bytes() { return __p.__vector_as_span<int>(38, 4); }
#else
  public ArraySegment<byte>? GetSpecialEnergy4Bytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public int[] GetSpecialEnergy4Array() { return __p.__vector_as_array<int>(38); }
  public int SpecialEnergy5(int j) { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SpecialEnergy5Length { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSpecialEnergy5Bytes() { return __p.__vector_as_span<int>(40, 4); }
#else
  public ArraySegment<byte>? GetSpecialEnergy5Bytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public int[] GetSpecialEnergy5Array() { return __p.__vector_as_array<int>(40); }
  public int ElementPowerType { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ElementPower(int j) { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ElementPowerLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetElementPowerBytes() { return __p.__vector_as_span<int>(44, 4); }
#else
  public ArraySegment<byte>? GetElementPowerBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public int[] GetElementPowerArray() { return __p.__vector_as_array<int>(44); }
  public int FormulaType { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FormulaParam1(int j) { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FormulaParam1Length { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFormulaParam1Bytes() { return __p.__vector_as_span<int>(48, 4); }
#else
  public ArraySegment<byte>? GetFormulaParam1Bytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public int[] GetFormulaParam1Array() { return __p.__vector_as_array<int>(48); }
  public int FormulaParam2(int j) { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FormulaParam2Length { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFormulaParam2Bytes() { return __p.__vector_as_span<int>(50, 4); }
#else
  public ArraySegment<byte>? GetFormulaParam2Bytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public int[] GetFormulaParam2Array() { return __p.__vector_as_array<int>(50); }
  public int FormulaParam3(int j) { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FormulaParam3Length { get { int o = __p.__offset(52); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFormulaParam3Bytes() { return __p.__vector_as_span<int>(52, 4); }
#else
  public ArraySegment<byte>? GetFormulaParam3Bytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public int[] GetFormulaParam3Array() { return __p.__vector_as_array<int>(52); }
  public int FormulaParam4(int j) { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FormulaParam4Length { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFormulaParam4Bytes() { return __p.__vector_as_span<int>(54, 4); }
#else
  public ArraySegment<byte>? GetFormulaParam4Bytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public int[] GetFormulaParam4Array() { return __p.__vector_as_array<int>(54); }
  public int FormulaParam5(int j) { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FormulaParam5Length { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFormulaParam5Bytes() { return __p.__vector_as_span<int>(56, 4); }
#else
  public ArraySegment<byte>? GetFormulaParam5Bytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public int[] GetFormulaParam5Array() { return __p.__vector_as_array<int>(56); }
  public int FormulaParam6(int j) { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FormulaParam6Length { get { int o = __p.__offset(58); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFormulaParam6Bytes() { return __p.__vector_as_span<int>(58, 4); }
#else
  public ArraySegment<byte>? GetFormulaParam6Bytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public int[] GetFormulaParam6Array() { return __p.__vector_as_array<int>(58); }
  public int FormulaParam7(int j) { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FormulaParam7Length { get { int o = __p.__offset(60); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFormulaParam7Bytes() { return __p.__vector_as_span<int>(60, 4); }
#else
  public ArraySegment<byte>? GetFormulaParam7Bytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public int[] GetFormulaParam7Array() { return __p.__vector_as_array<int>(60); }
  public int FormulaParam8(int j) { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FormulaParam8Length { get { int o = __p.__offset(62); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFormulaParam8Bytes() { return __p.__vector_as_span<int>(62, 4); }
#else
  public ArraySegment<byte>? GetFormulaParam8Bytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public int[] GetFormulaParam8Array() { return __p.__vector_as_array<int>(62); }
  public int FormulaParam9(int j) { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FormulaParam9Length { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFormulaParam9Bytes() { return __p.__vector_as_span<int>(64, 4); }
#else
  public ArraySegment<byte>? GetFormulaParam9Bytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public int[] GetFormulaParam9Array() { return __p.__vector_as_array<int>(64); }
  public int FormulaParam10(int j) { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FormulaParam10Length { get { int o = __p.__offset(66); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFormulaParam10Bytes() { return __p.__vector_as_span<int>(66, 4); }
#else
  public ArraySegment<byte>? GetFormulaParam10Bytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public int[] GetFormulaParam10Array() { return __p.__vector_as_array<int>(66); }
  public int ImmuneType { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Percent0(int j) { int o = __p.__offset(70); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Percent0Length { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPercent0Bytes() { return __p.__vector_as_span<int>(70, 4); }
#else
  public ArraySegment<byte>? GetPercent0Bytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public int[] GetPercent0Array() { return __p.__vector_as_array<int>(70); }
  public int Percent1(int j) { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Percent1Length { get { int o = __p.__offset(72); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPercent1Bytes() { return __p.__vector_as_span<int>(72, 4); }
#else
  public ArraySegment<byte>? GetPercent1Bytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public int[] GetPercent1Array() { return __p.__vector_as_array<int>(72); }
  public int FluctuationLower(int j) { int o = __p.__offset(74); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FluctuationLowerLength { get { int o = __p.__offset(74); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFluctuationLowerBytes() { return __p.__vector_as_span<int>(74, 4); }
#else
  public ArraySegment<byte>? GetFluctuationLowerBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public int[] GetFluctuationLowerArray() { return __p.__vector_as_array<int>(74); }
  public int FluctuationUpper(int j) { int o = __p.__offset(76); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FluctuationUpperLength { get { int o = __p.__offset(76); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFluctuationUpperBytes() { return __p.__vector_as_span<int>(76, 4); }
#else
  public ArraySegment<byte>? GetFluctuationUpperBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public int[] GetFluctuationUpperArray() { return __p.__vector_as_array<int>(76); }

  public static Offset<WWParser.Defs.Damage> CreateDamage(FlatBufferBuilder builder,
      double id = 0.0,
      int calculate_type = 0,
      int element = 0,
      int damage_text_type = 0,
      double payload_id = 0.0,
      int type = 0,
      VectorOffset sub_typeOffset = default(VectorOffset),
      int smash_type = 1,
      VectorOffset cure_base_valueOffset = default(VectorOffset),
      int related_property = 7,
      VectorOffset rate_lvOffset = default(VectorOffset),
      VectorOffset hardness_lvOffset = default(VectorOffset),
      VectorOffset tough_lvOffset = default(VectorOffset),
      VectorOffset energyOffset = default(VectorOffset),
      VectorOffset special_energy1Offset = default(VectorOffset),
      VectorOffset special_energy2Offset = default(VectorOffset),
      VectorOffset special_energy3Offset = default(VectorOffset),
      VectorOffset special_energy4Offset = default(VectorOffset),
      VectorOffset special_energy5Offset = default(VectorOffset),
      int element_power_type = 0,
      VectorOffset element_powerOffset = default(VectorOffset),
      int formula_type = 0,
      VectorOffset formula_param1Offset = default(VectorOffset),
      VectorOffset formula_param2Offset = default(VectorOffset),
      VectorOffset formula_param3Offset = default(VectorOffset),
      VectorOffset formula_param4Offset = default(VectorOffset),
      VectorOffset formula_param5Offset = default(VectorOffset),
      VectorOffset formula_param6Offset = default(VectorOffset),
      VectorOffset formula_param7Offset = default(VectorOffset),
      VectorOffset formula_param8Offset = default(VectorOffset),
      VectorOffset formula_param9Offset = default(VectorOffset),
      VectorOffset formula_param10Offset = default(VectorOffset),
      int immune_type = 0,
      VectorOffset percent0Offset = default(VectorOffset),
      VectorOffset percent1Offset = default(VectorOffset),
      VectorOffset fluctuation_lowerOffset = default(VectorOffset),
      VectorOffset fluctuation_upperOffset = default(VectorOffset)) {
    builder.StartTable(37);
    Damage.AddPayloadId(builder, payload_id);
    Damage.AddId(builder, id);
    Damage.AddFluctuationUpper(builder, fluctuation_upperOffset);
    Damage.AddFluctuationLower(builder, fluctuation_lowerOffset);
    Damage.AddPercent1(builder, percent1Offset);
    Damage.AddPercent0(builder, percent0Offset);
    Damage.AddImmuneType(builder, immune_type);
    Damage.AddFormulaParam10(builder, formula_param10Offset);
    Damage.AddFormulaParam9(builder, formula_param9Offset);
    Damage.AddFormulaParam8(builder, formula_param8Offset);
    Damage.AddFormulaParam7(builder, formula_param7Offset);
    Damage.AddFormulaParam6(builder, formula_param6Offset);
    Damage.AddFormulaParam5(builder, formula_param5Offset);
    Damage.AddFormulaParam4(builder, formula_param4Offset);
    Damage.AddFormulaParam3(builder, formula_param3Offset);
    Damage.AddFormulaParam2(builder, formula_param2Offset);
    Damage.AddFormulaParam1(builder, formula_param1Offset);
    Damage.AddFormulaType(builder, formula_type);
    Damage.AddElementPower(builder, element_powerOffset);
    Damage.AddElementPowerType(builder, element_power_type);
    Damage.AddSpecialEnergy5(builder, special_energy5Offset);
    Damage.AddSpecialEnergy4(builder, special_energy4Offset);
    Damage.AddSpecialEnergy3(builder, special_energy3Offset);
    Damage.AddSpecialEnergy2(builder, special_energy2Offset);
    Damage.AddSpecialEnergy1(builder, special_energy1Offset);
    Damage.AddEnergy(builder, energyOffset);
    Damage.AddToughLv(builder, tough_lvOffset);
    Damage.AddHardnessLv(builder, hardness_lvOffset);
    Damage.AddRateLv(builder, rate_lvOffset);
    Damage.AddRelatedProperty(builder, related_property);
    Damage.AddCureBaseValue(builder, cure_base_valueOffset);
    Damage.AddSmashType(builder, smash_type);
    Damage.AddSubType(builder, sub_typeOffset);
    Damage.AddType(builder, type);
    Damage.AddDamageTextType(builder, damage_text_type);
    Damage.AddElement(builder, element);
    Damage.AddCalculateType(builder, calculate_type);
    return Damage.EndDamage(builder);
  }

  public static void StartDamage(FlatBufferBuilder builder) { builder.StartTable(37); }
  public static void AddId(FlatBufferBuilder builder, double id) { builder.AddDouble(0, id, 0.0); }
  public static void AddCalculateType(FlatBufferBuilder builder, int calculateType) { builder.AddInt(1, calculateType, 0); }
  public static void AddElement(FlatBufferBuilder builder, int element) { builder.AddInt(2, element, 0); }
  public static void AddDamageTextType(FlatBufferBuilder builder, int damageTextType) { builder.AddInt(3, damageTextType, 0); }
  public static void AddPayloadId(FlatBufferBuilder builder, double payloadId) { builder.AddDouble(4, payloadId, 0.0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(5, type, 0); }
  public static void AddSubType(FlatBufferBuilder builder, VectorOffset subTypeOffset) { builder.AddOffset(6, subTypeOffset.Value, 0); }
  public static VectorOffset CreateSubTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSubTypeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSubTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSmashType(FlatBufferBuilder builder, int smashType) { builder.AddInt(7, smashType, 1); }
  public static void AddCureBaseValue(FlatBufferBuilder builder, VectorOffset cureBaseValueOffset) { builder.AddOffset(8, cureBaseValueOffset.Value, 0); }
  public static VectorOffset CreateCureBaseValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCureBaseValueVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCureBaseValueVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCureBaseValueVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCureBaseValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRelatedProperty(FlatBufferBuilder builder, int relatedProperty) { builder.AddInt(9, relatedProperty, 7); }
  public static void AddRateLv(FlatBufferBuilder builder, VectorOffset rateLvOffset) { builder.AddOffset(10, rateLvOffset.Value, 0); }
  public static VectorOffset CreateRateLvVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRateLvVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRateLvVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRateLvVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRateLvVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHardnessLv(FlatBufferBuilder builder, VectorOffset hardnessLvOffset) { builder.AddOffset(11, hardnessLvOffset.Value, 0); }
  public static VectorOffset CreateHardnessLvVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateHardnessLvVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHardnessLvVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHardnessLvVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartHardnessLvVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddToughLv(FlatBufferBuilder builder, VectorOffset toughLvOffset) { builder.AddOffset(12, toughLvOffset.Value, 0); }
  public static VectorOffset CreateToughLvVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateToughLvVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateToughLvVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateToughLvVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartToughLvVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEnergy(FlatBufferBuilder builder, VectorOffset energyOffset) { builder.AddOffset(13, energyOffset.Value, 0); }
  public static VectorOffset CreateEnergyVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEnergyVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnergyVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnergyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnergyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSpecialEnergy1(FlatBufferBuilder builder, VectorOffset specialEnergy1Offset) { builder.AddOffset(14, specialEnergy1Offset.Value, 0); }
  public static VectorOffset CreateSpecialEnergy1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEnergy1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEnergy1VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEnergy1VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpecialEnergy1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSpecialEnergy2(FlatBufferBuilder builder, VectorOffset specialEnergy2Offset) { builder.AddOffset(15, specialEnergy2Offset.Value, 0); }
  public static VectorOffset CreateSpecialEnergy2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEnergy2VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEnergy2VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEnergy2VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpecialEnergy2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSpecialEnergy3(FlatBufferBuilder builder, VectorOffset specialEnergy3Offset) { builder.AddOffset(16, specialEnergy3Offset.Value, 0); }
  public static VectorOffset CreateSpecialEnergy3Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEnergy3VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEnergy3VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEnergy3VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpecialEnergy3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSpecialEnergy4(FlatBufferBuilder builder, VectorOffset specialEnergy4Offset) { builder.AddOffset(17, specialEnergy4Offset.Value, 0); }
  public static VectorOffset CreateSpecialEnergy4Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEnergy4VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEnergy4VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEnergy4VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpecialEnergy4Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSpecialEnergy5(FlatBufferBuilder builder, VectorOffset specialEnergy5Offset) { builder.AddOffset(18, specialEnergy5Offset.Value, 0); }
  public static VectorOffset CreateSpecialEnergy5Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEnergy5VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEnergy5VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEnergy5VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpecialEnergy5Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddElementPowerType(FlatBufferBuilder builder, int elementPowerType) { builder.AddInt(19, elementPowerType, 0); }
  public static void AddElementPower(FlatBufferBuilder builder, VectorOffset elementPowerOffset) { builder.AddOffset(20, elementPowerOffset.Value, 0); }
  public static VectorOffset CreateElementPowerVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateElementPowerVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElementPowerVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElementPowerVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartElementPowerVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFormulaType(FlatBufferBuilder builder, int formulaType) { builder.AddInt(21, formulaType, 0); }
  public static void AddFormulaParam1(FlatBufferBuilder builder, VectorOffset formulaParam1Offset) { builder.AddOffset(22, formulaParam1Offset.Value, 0); }
  public static VectorOffset CreateFormulaParam1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam1VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam1VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFormulaParam1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFormulaParam2(FlatBufferBuilder builder, VectorOffset formulaParam2Offset) { builder.AddOffset(23, formulaParam2Offset.Value, 0); }
  public static VectorOffset CreateFormulaParam2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam2VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam2VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam2VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFormulaParam2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFormulaParam3(FlatBufferBuilder builder, VectorOffset formulaParam3Offset) { builder.AddOffset(24, formulaParam3Offset.Value, 0); }
  public static VectorOffset CreateFormulaParam3Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam3VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam3VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam3VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFormulaParam3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFormulaParam4(FlatBufferBuilder builder, VectorOffset formulaParam4Offset) { builder.AddOffset(25, formulaParam4Offset.Value, 0); }
  public static VectorOffset CreateFormulaParam4Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam4VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam4VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam4VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFormulaParam4Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFormulaParam5(FlatBufferBuilder builder, VectorOffset formulaParam5Offset) { builder.AddOffset(26, formulaParam5Offset.Value, 0); }
  public static VectorOffset CreateFormulaParam5Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam5VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam5VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam5VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFormulaParam5Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFormulaParam6(FlatBufferBuilder builder, VectorOffset formulaParam6Offset) { builder.AddOffset(27, formulaParam6Offset.Value, 0); }
  public static VectorOffset CreateFormulaParam6Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam6VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam6VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam6VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFormulaParam6Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFormulaParam7(FlatBufferBuilder builder, VectorOffset formulaParam7Offset) { builder.AddOffset(28, formulaParam7Offset.Value, 0); }
  public static VectorOffset CreateFormulaParam7Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam7VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam7VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam7VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFormulaParam7Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFormulaParam8(FlatBufferBuilder builder, VectorOffset formulaParam8Offset) { builder.AddOffset(29, formulaParam8Offset.Value, 0); }
  public static VectorOffset CreateFormulaParam8Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam8VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam8VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam8VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFormulaParam8Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFormulaParam9(FlatBufferBuilder builder, VectorOffset formulaParam9Offset) { builder.AddOffset(30, formulaParam9Offset.Value, 0); }
  public static VectorOffset CreateFormulaParam9Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam9VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam9VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam9VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFormulaParam9Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFormulaParam10(FlatBufferBuilder builder, VectorOffset formulaParam10Offset) { builder.AddOffset(31, formulaParam10Offset.Value, 0); }
  public static VectorOffset CreateFormulaParam10Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam10VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam10VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormulaParam10VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFormulaParam10Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddImmuneType(FlatBufferBuilder builder, int immuneType) { builder.AddInt(32, immuneType, 0); }
  public static void AddPercent0(FlatBufferBuilder builder, VectorOffset percent0Offset) { builder.AddOffset(33, percent0Offset.Value, 0); }
  public static VectorOffset CreatePercent0Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePercent0VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePercent0VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePercent0VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPercent0Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPercent1(FlatBufferBuilder builder, VectorOffset percent1Offset) { builder.AddOffset(34, percent1Offset.Value, 0); }
  public static VectorOffset CreatePercent1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePercent1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePercent1VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePercent1VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPercent1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFluctuationLower(FlatBufferBuilder builder, VectorOffset fluctuationLowerOffset) { builder.AddOffset(35, fluctuationLowerOffset.Value, 0); }
  public static VectorOffset CreateFluctuationLowerVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFluctuationLowerVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFluctuationLowerVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFluctuationLowerVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFluctuationLowerVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFluctuationUpper(FlatBufferBuilder builder, VectorOffset fluctuationUpperOffset) { builder.AddOffset(36, fluctuationUpperOffset.Value, 0); }
  public static VectorOffset CreateFluctuationUpperVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFluctuationUpperVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFluctuationUpperVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFluctuationUpperVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFluctuationUpperVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.Damage> EndDamage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Damage>(o);
  }
  public DamageT UnPack() {
    var _o = new DamageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DamageT _o) {
    _o.Id = this.Id;
    _o.CalculateType = this.CalculateType;
    _o.Element = this.Element;
    _o.DamageTextType = this.DamageTextType;
    _o.PayloadId = this.PayloadId;
    _o.Type = this.Type;
    _o.SubType = new List<int>();
    for (var _j = 0; _j < this.SubTypeLength; ++_j) {_o.SubType.Add(this.SubType(_j));}
    _o.SmashType = this.SmashType;
    _o.CureBaseValue = new List<int>();
    for (var _j = 0; _j < this.CureBaseValueLength; ++_j) {_o.CureBaseValue.Add(this.CureBaseValue(_j));}
    _o.RelatedProperty = this.RelatedProperty;
    _o.RateLv = new List<int>();
    for (var _j = 0; _j < this.RateLvLength; ++_j) {_o.RateLv.Add(this.RateLv(_j));}
    _o.HardnessLv = new List<int>();
    for (var _j = 0; _j < this.HardnessLvLength; ++_j) {_o.HardnessLv.Add(this.HardnessLv(_j));}
    _o.ToughLv = new List<int>();
    for (var _j = 0; _j < this.ToughLvLength; ++_j) {_o.ToughLv.Add(this.ToughLv(_j));}
    _o.Energy = new List<int>();
    for (var _j = 0; _j < this.EnergyLength; ++_j) {_o.Energy.Add(this.Energy(_j));}
    _o.SpecialEnergy1 = new List<int>();
    for (var _j = 0; _j < this.SpecialEnergy1Length; ++_j) {_o.SpecialEnergy1.Add(this.SpecialEnergy1(_j));}
    _o.SpecialEnergy2 = new List<int>();
    for (var _j = 0; _j < this.SpecialEnergy2Length; ++_j) {_o.SpecialEnergy2.Add(this.SpecialEnergy2(_j));}
    _o.SpecialEnergy3 = new List<int>();
    for (var _j = 0; _j < this.SpecialEnergy3Length; ++_j) {_o.SpecialEnergy3.Add(this.SpecialEnergy3(_j));}
    _o.SpecialEnergy4 = new List<int>();
    for (var _j = 0; _j < this.SpecialEnergy4Length; ++_j) {_o.SpecialEnergy4.Add(this.SpecialEnergy4(_j));}
    _o.SpecialEnergy5 = new List<int>();
    for (var _j = 0; _j < this.SpecialEnergy5Length; ++_j) {_o.SpecialEnergy5.Add(this.SpecialEnergy5(_j));}
    _o.ElementPowerType = this.ElementPowerType;
    _o.ElementPower = new List<int>();
    for (var _j = 0; _j < this.ElementPowerLength; ++_j) {_o.ElementPower.Add(this.ElementPower(_j));}
    _o.FormulaType = this.FormulaType;
    _o.FormulaParam1 = new List<int>();
    for (var _j = 0; _j < this.FormulaParam1Length; ++_j) {_o.FormulaParam1.Add(this.FormulaParam1(_j));}
    _o.FormulaParam2 = new List<int>();
    for (var _j = 0; _j < this.FormulaParam2Length; ++_j) {_o.FormulaParam2.Add(this.FormulaParam2(_j));}
    _o.FormulaParam3 = new List<int>();
    for (var _j = 0; _j < this.FormulaParam3Length; ++_j) {_o.FormulaParam3.Add(this.FormulaParam3(_j));}
    _o.FormulaParam4 = new List<int>();
    for (var _j = 0; _j < this.FormulaParam4Length; ++_j) {_o.FormulaParam4.Add(this.FormulaParam4(_j));}
    _o.FormulaParam5 = new List<int>();
    for (var _j = 0; _j < this.FormulaParam5Length; ++_j) {_o.FormulaParam5.Add(this.FormulaParam5(_j));}
    _o.FormulaParam6 = new List<int>();
    for (var _j = 0; _j < this.FormulaParam6Length; ++_j) {_o.FormulaParam6.Add(this.FormulaParam6(_j));}
    _o.FormulaParam7 = new List<int>();
    for (var _j = 0; _j < this.FormulaParam7Length; ++_j) {_o.FormulaParam7.Add(this.FormulaParam7(_j));}
    _o.FormulaParam8 = new List<int>();
    for (var _j = 0; _j < this.FormulaParam8Length; ++_j) {_o.FormulaParam8.Add(this.FormulaParam8(_j));}
    _o.FormulaParam9 = new List<int>();
    for (var _j = 0; _j < this.FormulaParam9Length; ++_j) {_o.FormulaParam9.Add(this.FormulaParam9(_j));}
    _o.FormulaParam10 = new List<int>();
    for (var _j = 0; _j < this.FormulaParam10Length; ++_j) {_o.FormulaParam10.Add(this.FormulaParam10(_j));}
    _o.ImmuneType = this.ImmuneType;
    _o.Percent0 = new List<int>();
    for (var _j = 0; _j < this.Percent0Length; ++_j) {_o.Percent0.Add(this.Percent0(_j));}
    _o.Percent1 = new List<int>();
    for (var _j = 0; _j < this.Percent1Length; ++_j) {_o.Percent1.Add(this.Percent1(_j));}
    _o.FluctuationLower = new List<int>();
    for (var _j = 0; _j < this.FluctuationLowerLength; ++_j) {_o.FluctuationLower.Add(this.FluctuationLower(_j));}
    _o.FluctuationUpper = new List<int>();
    for (var _j = 0; _j < this.FluctuationUpperLength; ++_j) {_o.FluctuationUpper.Add(this.FluctuationUpper(_j));}
  }
  public static Offset<WWParser.Defs.Damage> Pack(FlatBufferBuilder builder, DamageT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Damage>);
    var _sub_type = default(VectorOffset);
    if (_o.SubType != null) {
      var __sub_type = _o.SubType.ToArray();
      _sub_type = CreateSubTypeVector(builder, __sub_type);
    }
    var _cure_base_value = default(VectorOffset);
    if (_o.CureBaseValue != null) {
      var __cure_base_value = _o.CureBaseValue.ToArray();
      _cure_base_value = CreateCureBaseValueVector(builder, __cure_base_value);
    }
    var _rate_lv = default(VectorOffset);
    if (_o.RateLv != null) {
      var __rate_lv = _o.RateLv.ToArray();
      _rate_lv = CreateRateLvVector(builder, __rate_lv);
    }
    var _hardness_lv = default(VectorOffset);
    if (_o.HardnessLv != null) {
      var __hardness_lv = _o.HardnessLv.ToArray();
      _hardness_lv = CreateHardnessLvVector(builder, __hardness_lv);
    }
    var _tough_lv = default(VectorOffset);
    if (_o.ToughLv != null) {
      var __tough_lv = _o.ToughLv.ToArray();
      _tough_lv = CreateToughLvVector(builder, __tough_lv);
    }
    var _energy = default(VectorOffset);
    if (_o.Energy != null) {
      var __energy = _o.Energy.ToArray();
      _energy = CreateEnergyVector(builder, __energy);
    }
    var _special_energy1 = default(VectorOffset);
    if (_o.SpecialEnergy1 != null) {
      var __special_energy1 = _o.SpecialEnergy1.ToArray();
      _special_energy1 = CreateSpecialEnergy1Vector(builder, __special_energy1);
    }
    var _special_energy2 = default(VectorOffset);
    if (_o.SpecialEnergy2 != null) {
      var __special_energy2 = _o.SpecialEnergy2.ToArray();
      _special_energy2 = CreateSpecialEnergy2Vector(builder, __special_energy2);
    }
    var _special_energy3 = default(VectorOffset);
    if (_o.SpecialEnergy3 != null) {
      var __special_energy3 = _o.SpecialEnergy3.ToArray();
      _special_energy3 = CreateSpecialEnergy3Vector(builder, __special_energy3);
    }
    var _special_energy4 = default(VectorOffset);
    if (_o.SpecialEnergy4 != null) {
      var __special_energy4 = _o.SpecialEnergy4.ToArray();
      _special_energy4 = CreateSpecialEnergy4Vector(builder, __special_energy4);
    }
    var _special_energy5 = default(VectorOffset);
    if (_o.SpecialEnergy5 != null) {
      var __special_energy5 = _o.SpecialEnergy5.ToArray();
      _special_energy5 = CreateSpecialEnergy5Vector(builder, __special_energy5);
    }
    var _element_power = default(VectorOffset);
    if (_o.ElementPower != null) {
      var __element_power = _o.ElementPower.ToArray();
      _element_power = CreateElementPowerVector(builder, __element_power);
    }
    var _formula_param1 = default(VectorOffset);
    if (_o.FormulaParam1 != null) {
      var __formula_param1 = _o.FormulaParam1.ToArray();
      _formula_param1 = CreateFormulaParam1Vector(builder, __formula_param1);
    }
    var _formula_param2 = default(VectorOffset);
    if (_o.FormulaParam2 != null) {
      var __formula_param2 = _o.FormulaParam2.ToArray();
      _formula_param2 = CreateFormulaParam2Vector(builder, __formula_param2);
    }
    var _formula_param3 = default(VectorOffset);
    if (_o.FormulaParam3 != null) {
      var __formula_param3 = _o.FormulaParam3.ToArray();
      _formula_param3 = CreateFormulaParam3Vector(builder, __formula_param3);
    }
    var _formula_param4 = default(VectorOffset);
    if (_o.FormulaParam4 != null) {
      var __formula_param4 = _o.FormulaParam4.ToArray();
      _formula_param4 = CreateFormulaParam4Vector(builder, __formula_param4);
    }
    var _formula_param5 = default(VectorOffset);
    if (_o.FormulaParam5 != null) {
      var __formula_param5 = _o.FormulaParam5.ToArray();
      _formula_param5 = CreateFormulaParam5Vector(builder, __formula_param5);
    }
    var _formula_param6 = default(VectorOffset);
    if (_o.FormulaParam6 != null) {
      var __formula_param6 = _o.FormulaParam6.ToArray();
      _formula_param6 = CreateFormulaParam6Vector(builder, __formula_param6);
    }
    var _formula_param7 = default(VectorOffset);
    if (_o.FormulaParam7 != null) {
      var __formula_param7 = _o.FormulaParam7.ToArray();
      _formula_param7 = CreateFormulaParam7Vector(builder, __formula_param7);
    }
    var _formula_param8 = default(VectorOffset);
    if (_o.FormulaParam8 != null) {
      var __formula_param8 = _o.FormulaParam8.ToArray();
      _formula_param8 = CreateFormulaParam8Vector(builder, __formula_param8);
    }
    var _formula_param9 = default(VectorOffset);
    if (_o.FormulaParam9 != null) {
      var __formula_param9 = _o.FormulaParam9.ToArray();
      _formula_param9 = CreateFormulaParam9Vector(builder, __formula_param9);
    }
    var _formula_param10 = default(VectorOffset);
    if (_o.FormulaParam10 != null) {
      var __formula_param10 = _o.FormulaParam10.ToArray();
      _formula_param10 = CreateFormulaParam10Vector(builder, __formula_param10);
    }
    var _percent0 = default(VectorOffset);
    if (_o.Percent0 != null) {
      var __percent0 = _o.Percent0.ToArray();
      _percent0 = CreatePercent0Vector(builder, __percent0);
    }
    var _percent1 = default(VectorOffset);
    if (_o.Percent1 != null) {
      var __percent1 = _o.Percent1.ToArray();
      _percent1 = CreatePercent1Vector(builder, __percent1);
    }
    var _fluctuation_lower = default(VectorOffset);
    if (_o.FluctuationLower != null) {
      var __fluctuation_lower = _o.FluctuationLower.ToArray();
      _fluctuation_lower = CreateFluctuationLowerVector(builder, __fluctuation_lower);
    }
    var _fluctuation_upper = default(VectorOffset);
    if (_o.FluctuationUpper != null) {
      var __fluctuation_upper = _o.FluctuationUpper.ToArray();
      _fluctuation_upper = CreateFluctuationUpperVector(builder, __fluctuation_upper);
    }
    return CreateDamage(
      builder,
      _o.Id,
      _o.CalculateType,
      _o.Element,
      _o.DamageTextType,
      _o.PayloadId,
      _o.Type,
      _sub_type,
      _o.SmashType,
      _cure_base_value,
      _o.RelatedProperty,
      _rate_lv,
      _hardness_lv,
      _tough_lv,
      _energy,
      _special_energy1,
      _special_energy2,
      _special_energy3,
      _special_energy4,
      _special_energy5,
      _o.ElementPowerType,
      _element_power,
      _o.FormulaType,
      _formula_param1,
      _formula_param2,
      _formula_param3,
      _formula_param4,
      _formula_param5,
      _formula_param6,
      _formula_param7,
      _formula_param8,
      _formula_param9,
      _formula_param10,
      _o.ImmuneType,
      _percent0,
      _percent1,
      _fluctuation_lower,
      _fluctuation_upper);
  }
}

public class DamageT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public double Id { get; set; }
  [Newtonsoft.Json.JsonProperty("calculate_type")]
  public int CalculateType { get; set; }
  [Newtonsoft.Json.JsonProperty("element")]
  public int Element { get; set; }
  [Newtonsoft.Json.JsonProperty("damage_text_type")]
  public int DamageTextType { get; set; }
  [Newtonsoft.Json.JsonProperty("payload_id")]
  public double PayloadId { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("sub_type")]
  public List<int> SubType { get; set; }
  [Newtonsoft.Json.JsonProperty("smash_type")]
  public int SmashType { get; set; }
  [Newtonsoft.Json.JsonProperty("cure_base_value")]
  public List<int> CureBaseValue { get; set; }
  [Newtonsoft.Json.JsonProperty("related_property")]
  public int RelatedProperty { get; set; }
  [Newtonsoft.Json.JsonProperty("rate_lv")]
  public List<int> RateLv { get; set; }
  [Newtonsoft.Json.JsonProperty("hardness_lv")]
  public List<int> HardnessLv { get; set; }
  [Newtonsoft.Json.JsonProperty("tough_lv")]
  public List<int> ToughLv { get; set; }
  [Newtonsoft.Json.JsonProperty("energy")]
  public List<int> Energy { get; set; }
  [Newtonsoft.Json.JsonProperty("special_energy1")]
  public List<int> SpecialEnergy1 { get; set; }
  [Newtonsoft.Json.JsonProperty("special_energy2")]
  public List<int> SpecialEnergy2 { get; set; }
  [Newtonsoft.Json.JsonProperty("special_energy3")]
  public List<int> SpecialEnergy3 { get; set; }
  [Newtonsoft.Json.JsonProperty("special_energy4")]
  public List<int> SpecialEnergy4 { get; set; }
  [Newtonsoft.Json.JsonProperty("special_energy5")]
  public List<int> SpecialEnergy5 { get; set; }
  [Newtonsoft.Json.JsonProperty("element_power_type")]
  public int ElementPowerType { get; set; }
  [Newtonsoft.Json.JsonProperty("element_power")]
  public List<int> ElementPower { get; set; }
  [Newtonsoft.Json.JsonProperty("formula_type")]
  public int FormulaType { get; set; }
  [Newtonsoft.Json.JsonProperty("formula_param1")]
  public List<int> FormulaParam1 { get; set; }
  [Newtonsoft.Json.JsonProperty("formula_param2")]
  public List<int> FormulaParam2 { get; set; }
  [Newtonsoft.Json.JsonProperty("formula_param3")]
  public List<int> FormulaParam3 { get; set; }
  [Newtonsoft.Json.JsonProperty("formula_param4")]
  public List<int> FormulaParam4 { get; set; }
  [Newtonsoft.Json.JsonProperty("formula_param5")]
  public List<int> FormulaParam5 { get; set; }
  [Newtonsoft.Json.JsonProperty("formula_param6")]
  public List<int> FormulaParam6 { get; set; }
  [Newtonsoft.Json.JsonProperty("formula_param7")]
  public List<int> FormulaParam7 { get; set; }
  [Newtonsoft.Json.JsonProperty("formula_param8")]
  public List<int> FormulaParam8 { get; set; }
  [Newtonsoft.Json.JsonProperty("formula_param9")]
  public List<int> FormulaParam9 { get; set; }
  [Newtonsoft.Json.JsonProperty("formula_param10")]
  public List<int> FormulaParam10 { get; set; }
  [Newtonsoft.Json.JsonProperty("immune_type")]
  public int ImmuneType { get; set; }
  [Newtonsoft.Json.JsonProperty("percent0")]
  public List<int> Percent0 { get; set; }
  [Newtonsoft.Json.JsonProperty("percent1")]
  public List<int> Percent1 { get; set; }
  [Newtonsoft.Json.JsonProperty("fluctuation_lower")]
  public List<int> FluctuationLower { get; set; }
  [Newtonsoft.Json.JsonProperty("fluctuation_upper")]
  public List<int> FluctuationUpper { get; set; }

  public DamageT() {
    this.Id = 0.0;
    this.CalculateType = 0;
    this.Element = 0;
    this.DamageTextType = 0;
    this.PayloadId = 0.0;
    this.Type = 0;
    this.SubType = null;
    this.SmashType = 1;
    this.CureBaseValue = null;
    this.RelatedProperty = 7;
    this.RateLv = null;
    this.HardnessLv = null;
    this.ToughLv = null;
    this.Energy = null;
    this.SpecialEnergy1 = null;
    this.SpecialEnergy2 = null;
    this.SpecialEnergy3 = null;
    this.SpecialEnergy4 = null;
    this.SpecialEnergy5 = null;
    this.ElementPowerType = 0;
    this.ElementPower = null;
    this.FormulaType = 0;
    this.FormulaParam1 = null;
    this.FormulaParam2 = null;
    this.FormulaParam3 = null;
    this.FormulaParam4 = null;
    this.FormulaParam5 = null;
    this.FormulaParam6 = null;
    this.FormulaParam7 = null;
    this.FormulaParam8 = null;
    this.FormulaParam9 = null;
    this.FormulaParam10 = null;
    this.ImmuneType = 0;
    this.Percent0 = null;
    this.Percent1 = null;
    this.FluctuationLower = null;
    this.FluctuationUpper = null;
  }
}


static public class DamageVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CalculateType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Element*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*DamageTextType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*PayloadId*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*SubType*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 18 /*SmashType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*CureBaseValue*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 22 /*RelatedProperty*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 24 /*RateLv*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*HardnessLv*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 28 /*ToughLv*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 30 /*Energy*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 32 /*SpecialEnergy1*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 34 /*SpecialEnergy2*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 36 /*SpecialEnergy3*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 38 /*SpecialEnergy4*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 40 /*SpecialEnergy5*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 42 /*ElementPowerType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 44 /*ElementPower*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 46 /*FormulaType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 48 /*FormulaParam1*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 50 /*FormulaParam2*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 52 /*FormulaParam3*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 54 /*FormulaParam4*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 56 /*FormulaParam5*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 58 /*FormulaParam6*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 60 /*FormulaParam7*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 62 /*FormulaParam8*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 64 /*FormulaParam9*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 66 /*FormulaParam10*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 68 /*ImmuneType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 70 /*Percent0*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 72 /*Percent1*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 74 /*FluctuationLower*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 76 /*FluctuationUpper*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
