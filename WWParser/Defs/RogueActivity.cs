// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueActivity : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueActivity GetRootAsRogueActivity(ByteBuffer _bb) { return GetRootAsRogueActivity(_bb, new RogueActivity()); }
  public static RogueActivity GetRootAsRogueActivity(ByteBuffer _bb, RogueActivity obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueActivity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FunctionType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string FunctionParams(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FunctionParamsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ActivityResource { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActivityResourceBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetActivityResourceBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetActivityResourceArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<WWParser.Defs.RogueActivity> CreateRogueActivity(FlatBufferBuilder builder,
      int id = 0,
      int function_type = 0,
      VectorOffset function_paramsOffset = default(VectorOffset),
      StringOffset activity_resourceOffset = default(StringOffset)) {
    builder.StartTable(4);
    RogueActivity.AddActivityResource(builder, activity_resourceOffset);
    RogueActivity.AddFunctionParams(builder, function_paramsOffset);
    RogueActivity.AddFunctionType(builder, function_type);
    RogueActivity.AddId(builder, id);
    return RogueActivity.EndRogueActivity(builder);
  }

  public static void StartRogueActivity(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddFunctionType(FlatBufferBuilder builder, int functionType) { builder.AddInt(1, functionType, 0); }
  public static void AddFunctionParams(FlatBufferBuilder builder, VectorOffset functionParamsOffset) { builder.AddOffset(2, functionParamsOffset.Value, 0); }
  public static VectorOffset CreateFunctionParamsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFunctionParamsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFunctionParamsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFunctionParamsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFunctionParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddActivityResource(FlatBufferBuilder builder, StringOffset activityResourceOffset) { builder.AddOffset(3, activityResourceOffset.Value, 0); }
  public static Offset<WWParser.Defs.RogueActivity> EndRogueActivity(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueActivity>(o);
  }
  public RogueActivityT UnPack() {
    var _o = new RogueActivityT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueActivityT _o) {
    _o.Id = this.Id;
    _o.FunctionType = this.FunctionType;
    _o.FunctionParams = new List<string>();
    for (var _j = 0; _j < this.FunctionParamsLength; ++_j) {_o.FunctionParams.Add(this.FunctionParams(_j));}
    _o.ActivityResource = this.ActivityResource;
  }
  public static Offset<WWParser.Defs.RogueActivity> Pack(FlatBufferBuilder builder, RogueActivityT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueActivity>);
    var _function_params = default(VectorOffset);
    if (_o.FunctionParams != null) {
      var __function_params = new StringOffset[_o.FunctionParams.Count];
      for (var _j = 0; _j < __function_params.Length; ++_j) { __function_params[_j] = builder.CreateString(_o.FunctionParams[_j]); }
      _function_params = CreateFunctionParamsVector(builder, __function_params);
    }
    var _activity_resource = _o.ActivityResource == null ? default(StringOffset) : builder.CreateString(_o.ActivityResource);
    return CreateRogueActivity(
      builder,
      _o.Id,
      _o.FunctionType,
      _function_params,
      _activity_resource);
  }
}

public class RogueActivityT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("function_type")]
  public int FunctionType { get; set; }
  [Newtonsoft.Json.JsonProperty("function_params")]
  public List<string> FunctionParams { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_resource")]
  public string ActivityResource { get; set; }

  public RogueActivityT() {
    this.Id = 0;
    this.FunctionType = 0;
    this.FunctionParams = null;
    this.ActivityResource = null;
  }
}


static public class RogueActivityVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*FunctionType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*FunctionParams*/, false)
      && verifier.VerifyString(tablePos, 10 /*ActivityResource*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
