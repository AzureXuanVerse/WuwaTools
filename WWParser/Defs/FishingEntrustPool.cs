// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FishingEntrustPool : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FishingEntrustPool GetRootAsFishingEntrustPool(ByteBuffer _bb) { return GetRootAsFishingEntrustPool(_bb, new FishingEntrustPool()); }
  public static FishingEntrustPool GetRootAsFishingEntrustPool(ByteBuffer _bb, FishingEntrustPool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FishingEntrustPool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Priority { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NumLimit { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TotalCount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TitleName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTitleNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTitleNameArray() { return __p.__vector_as_array<byte>(12); }
  public string TitleSprite { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleSpriteBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTitleSpriteBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTitleSpriteArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<WWParser.Defs.FishingEntrustPool> CreateFishingEntrustPool(FlatBufferBuilder builder,
      int id = 0,
      int priority = 0,
      int num_limit = 0,
      int total_count = 0,
      StringOffset title_nameOffset = default(StringOffset),
      StringOffset title_spriteOffset = default(StringOffset)) {
    builder.StartTable(6);
    FishingEntrustPool.AddTitleSprite(builder, title_spriteOffset);
    FishingEntrustPool.AddTitleName(builder, title_nameOffset);
    FishingEntrustPool.AddTotalCount(builder, total_count);
    FishingEntrustPool.AddNumLimit(builder, num_limit);
    FishingEntrustPool.AddPriority(builder, priority);
    FishingEntrustPool.AddId(builder, id);
    return FishingEntrustPool.EndFishingEntrustPool(builder);
  }

  public static void StartFishingEntrustPool(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(1, priority, 0); }
  public static void AddNumLimit(FlatBufferBuilder builder, int numLimit) { builder.AddInt(2, numLimit, 0); }
  public static void AddTotalCount(FlatBufferBuilder builder, int totalCount) { builder.AddInt(3, totalCount, 0); }
  public static void AddTitleName(FlatBufferBuilder builder, StringOffset titleNameOffset) { builder.AddOffset(4, titleNameOffset.Value, 0); }
  public static void AddTitleSprite(FlatBufferBuilder builder, StringOffset titleSpriteOffset) { builder.AddOffset(5, titleSpriteOffset.Value, 0); }
  public static Offset<WWParser.Defs.FishingEntrustPool> EndFishingEntrustPool(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FishingEntrustPool>(o);
  }
  public FishingEntrustPoolT UnPack() {
    var _o = new FishingEntrustPoolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FishingEntrustPoolT _o) {
    _o.Id = this.Id;
    _o.Priority = this.Priority;
    _o.NumLimit = this.NumLimit;
    _o.TotalCount = this.TotalCount;
    _o.TitleName = this.TitleName;
    _o.TitleSprite = this.TitleSprite;
  }
  public static Offset<WWParser.Defs.FishingEntrustPool> Pack(FlatBufferBuilder builder, FishingEntrustPoolT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FishingEntrustPool>);
    var _title_name = _o.TitleName == null ? default(StringOffset) : builder.CreateString(_o.TitleName);
    var _title_sprite = _o.TitleSprite == null ? default(StringOffset) : builder.CreateString(_o.TitleSprite);
    return CreateFishingEntrustPool(
      builder,
      _o.Id,
      _o.Priority,
      _o.NumLimit,
      _o.TotalCount,
      _title_name,
      _title_sprite);
  }
}

public class FishingEntrustPoolT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("priority")]
  public int Priority { get; set; }
  [Newtonsoft.Json.JsonProperty("num_limit")]
  public int NumLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("total_count")]
  public int TotalCount { get; set; }
  [Newtonsoft.Json.JsonProperty("title_name")]
  public string TitleName { get; set; }
  [Newtonsoft.Json.JsonProperty("title_sprite")]
  public string TitleSprite { get; set; }

  public FishingEntrustPoolT() {
    this.Id = 0;
    this.Priority = 0;
    this.NumLimit = 0;
    this.TotalCount = 0;
    this.TitleName = null;
    this.TitleSprite = null;
  }
}


static public class FishingEntrustPoolVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Priority*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*NumLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*TotalCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*TitleName*/, false)
      && verifier.VerifyString(tablePos, 14 /*TitleSprite*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
