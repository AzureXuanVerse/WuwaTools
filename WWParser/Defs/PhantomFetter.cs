// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PhantomFetter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PhantomFetter GetRootAsPhantomFetter(ByteBuffer _bb) { return GetRootAsPhantomFetter(_bb, new PhantomFetter()); }
  public static PhantomFetter GetRootAsPhantomFetter(ByteBuffer _bb, PhantomFetter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PhantomFetter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public double BuffIds(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int BuffIdsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetBuffIdsBytes() { return __p.__vector_as_span<double>(8, 8); }
#else
  public ArraySegment<byte>? GetBuffIdsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public double[] GetBuffIdsArray() { return __p.__vector_as_array<double>(8); }
  public WWParser.Defs.ConfigPropValue? AddProp(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.ConfigPropValue?)(new WWParser.Defs.ConfigPropValue()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AddPropLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string EffectDescription { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectDescriptionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetEffectDescriptionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetEffectDescriptionArray() { return __p.__vector_as_array<byte>(12); }
  public string FetterIcon { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFetterIconBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetFetterIconBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetFetterIconArray() { return __p.__vector_as_array<byte>(14); }
  public string SimplyEffectDesc { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSimplyEffectDescBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetSimplyEffectDescBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetSimplyEffectDescArray() { return __p.__vector_as_array<byte>(16); }
  public string EffectDescriptionParam(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EffectDescriptionParamLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string EffectDefineDescription { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectDefineDescriptionBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetEffectDefineDescriptionBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetEffectDefineDescriptionArray() { return __p.__vector_as_array<byte>(20); }
  public int Priority { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.PhantomFetter> CreatePhantomFetter(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset buff_idsOffset = default(VectorOffset),
      VectorOffset add_propOffset = default(VectorOffset),
      StringOffset effect_descriptionOffset = default(StringOffset),
      StringOffset fetter_iconOffset = default(StringOffset),
      StringOffset simply_effect_descOffset = default(StringOffset),
      VectorOffset effect_description_paramOffset = default(VectorOffset),
      StringOffset effect_define_descriptionOffset = default(StringOffset),
      int priority = 0) {
    builder.StartTable(10);
    PhantomFetter.AddPriority(builder, priority);
    PhantomFetter.AddEffectDefineDescription(builder, effect_define_descriptionOffset);
    PhantomFetter.AddEffectDescriptionParam(builder, effect_description_paramOffset);
    PhantomFetter.AddSimplyEffectDesc(builder, simply_effect_descOffset);
    PhantomFetter.AddFetterIcon(builder, fetter_iconOffset);
    PhantomFetter.AddEffectDescription(builder, effect_descriptionOffset);
    PhantomFetter.AddAddProp(builder, add_propOffset);
    PhantomFetter.AddBuffIds(builder, buff_idsOffset);
    PhantomFetter.AddName(builder, nameOffset);
    PhantomFetter.AddId(builder, id);
    return PhantomFetter.EndPhantomFetter(builder);
  }

  public static void StartPhantomFetter(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddBuffIds(FlatBufferBuilder builder, VectorOffset buffIdsOffset) { builder.AddOffset(2, buffIdsOffset.Value, 0); }
  public static VectorOffset CreateBuffIdsVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddAddProp(FlatBufferBuilder builder, VectorOffset addPropOffset) { builder.AddOffset(3, addPropOffset.Value, 0); }
  public static VectorOffset CreateAddPropVector(FlatBufferBuilder builder, Offset<WWParser.Defs.ConfigPropValue>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAddPropVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.ConfigPropValue>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAddPropVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.ConfigPropValue>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAddPropVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.ConfigPropValue>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAddPropVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEffectDescription(FlatBufferBuilder builder, StringOffset effectDescriptionOffset) { builder.AddOffset(4, effectDescriptionOffset.Value, 0); }
  public static void AddFetterIcon(FlatBufferBuilder builder, StringOffset fetterIconOffset) { builder.AddOffset(5, fetterIconOffset.Value, 0); }
  public static void AddSimplyEffectDesc(FlatBufferBuilder builder, StringOffset simplyEffectDescOffset) { builder.AddOffset(6, simplyEffectDescOffset.Value, 0); }
  public static void AddEffectDescriptionParam(FlatBufferBuilder builder, VectorOffset effectDescriptionParamOffset) { builder.AddOffset(7, effectDescriptionParamOffset.Value, 0); }
  public static VectorOffset CreateEffectDescriptionParamVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEffectDescriptionParamVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEffectDescriptionParamVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEffectDescriptionParamVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEffectDescriptionParamVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEffectDefineDescription(FlatBufferBuilder builder, StringOffset effectDefineDescriptionOffset) { builder.AddOffset(8, effectDefineDescriptionOffset.Value, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(9, priority, 0); }
  public static Offset<WWParser.Defs.PhantomFetter> EndPhantomFetter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PhantomFetter>(o);
  }
  public PhantomFetterT UnPack() {
    var _o = new PhantomFetterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PhantomFetterT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.BuffIds = new List<double>();
    for (var _j = 0; _j < this.BuffIdsLength; ++_j) {_o.BuffIds.Add(this.BuffIds(_j));}
    _o.AddProp = new List<WWParser.Defs.ConfigPropValueT>();
    for (var _j = 0; _j < this.AddPropLength; ++_j) {_o.AddProp.Add(this.AddProp(_j).HasValue ? this.AddProp(_j).Value.UnPack() : null);}
    _o.EffectDescription = this.EffectDescription;
    _o.FetterIcon = this.FetterIcon;
    _o.SimplyEffectDesc = this.SimplyEffectDesc;
    _o.EffectDescriptionParam = new List<string>();
    for (var _j = 0; _j < this.EffectDescriptionParamLength; ++_j) {_o.EffectDescriptionParam.Add(this.EffectDescriptionParam(_j));}
    _o.EffectDefineDescription = this.EffectDefineDescription;
    _o.Priority = this.Priority;
  }
  public static Offset<WWParser.Defs.PhantomFetter> Pack(FlatBufferBuilder builder, PhantomFetterT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PhantomFetter>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _buff_ids = default(VectorOffset);
    if (_o.BuffIds != null) {
      var __buff_ids = _o.BuffIds.ToArray();
      _buff_ids = CreateBuffIdsVector(builder, __buff_ids);
    }
    var _add_prop = default(VectorOffset);
    if (_o.AddProp != null) {
      var __add_prop = new Offset<WWParser.Defs.ConfigPropValue>[_o.AddProp.Count];
      for (var _j = 0; _j < __add_prop.Length; ++_j) { __add_prop[_j] = WWParser.Defs.ConfigPropValue.Pack(builder, _o.AddProp[_j]); }
      _add_prop = CreateAddPropVector(builder, __add_prop);
    }
    var _effect_description = _o.EffectDescription == null ? default(StringOffset) : builder.CreateString(_o.EffectDescription);
    var _fetter_icon = _o.FetterIcon == null ? default(StringOffset) : builder.CreateString(_o.FetterIcon);
    var _simply_effect_desc = _o.SimplyEffectDesc == null ? default(StringOffset) : builder.CreateString(_o.SimplyEffectDesc);
    var _effect_description_param = default(VectorOffset);
    if (_o.EffectDescriptionParam != null) {
      var __effect_description_param = new StringOffset[_o.EffectDescriptionParam.Count];
      for (var _j = 0; _j < __effect_description_param.Length; ++_j) { __effect_description_param[_j] = builder.CreateString(_o.EffectDescriptionParam[_j]); }
      _effect_description_param = CreateEffectDescriptionParamVector(builder, __effect_description_param);
    }
    var _effect_define_description = _o.EffectDefineDescription == null ? default(StringOffset) : builder.CreateString(_o.EffectDefineDescription);
    return CreatePhantomFetter(
      builder,
      _o.Id,
      _name,
      _buff_ids,
      _add_prop,
      _effect_description,
      _fetter_icon,
      _simply_effect_desc,
      _effect_description_param,
      _effect_define_description,
      _o.Priority);
  }
}

public class PhantomFetterT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_ids")]
  public List<double> BuffIds { get; set; }
  [Newtonsoft.Json.JsonProperty("add_prop")]
  public List<WWParser.Defs.ConfigPropValueT> AddProp { get; set; }
  [Newtonsoft.Json.JsonProperty("effect_description")]
  public string EffectDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("fetter_icon")]
  public string FetterIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("simply_effect_desc")]
  public string SimplyEffectDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("effect_description_param")]
  public List<string> EffectDescriptionParam { get; set; }
  [Newtonsoft.Json.JsonProperty("effect_define_description")]
  public string EffectDefineDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("priority")]
  public int Priority { get; set; }

  public PhantomFetterT() {
    this.Id = 0;
    this.Name = null;
    this.BuffIds = null;
    this.AddProp = null;
    this.EffectDescription = null;
    this.FetterIcon = null;
    this.SimplyEffectDesc = null;
    this.EffectDescriptionParam = null;
    this.EffectDefineDescription = null;
    this.Priority = 0;
  }
}


static public class PhantomFetterVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*BuffIds*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*AddProp*/, WWParser.Defs.ConfigPropValueVerify.Verify, false)
      && verifier.VerifyString(tablePos, 12 /*EffectDescription*/, false)
      && verifier.VerifyString(tablePos, 14 /*FetterIcon*/, false)
      && verifier.VerifyString(tablePos, 16 /*SimplyEffectDesc*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*EffectDescriptionParam*/, false)
      && verifier.VerifyString(tablePos, 20 /*EffectDefineDescription*/, false)
      && verifier.VerifyField(tablePos, 22 /*Priority*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
