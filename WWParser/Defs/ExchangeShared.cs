// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ExchangeShared : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ExchangeShared GetRootAsExchangeShared(ByteBuffer _bb) { return GetRootAsExchangeShared(_bb, new ExchangeShared()); }
  public static ExchangeShared GetRootAsExchangeShared(ByteBuffer _bb, ExchangeShared obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ExchangeShared __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxCount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? Cost(int j) { int o = __p.__offset(8); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CostLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int ResetTimeId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.ExchangeShared> CreateExchangeShared(FlatBufferBuilder builder,
      int id = 0,
      int max_count = 0,
      VectorOffset costOffset = default(VectorOffset),
      int reset_time_id = 0) {
    builder.StartTable(4);
    ExchangeShared.AddResetTimeId(builder, reset_time_id);
    ExchangeShared.AddCost(builder, costOffset);
    ExchangeShared.AddMaxCount(builder, max_count);
    ExchangeShared.AddId(builder, id);
    return ExchangeShared.EndExchangeShared(builder);
  }

  public static void StartExchangeShared(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMaxCount(FlatBufferBuilder builder, int maxCount) { builder.AddInt(1, maxCount, 0); }
  public static void AddCost(FlatBufferBuilder builder, VectorOffset costOffset) { builder.AddOffset(2, costOffset.Value, 0); }
  public static VectorOffset CreateCostVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCostVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCostVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCostVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddResetTimeId(FlatBufferBuilder builder, int resetTimeId) { builder.AddInt(3, resetTimeId, 0); }
  public static Offset<WWParser.Defs.ExchangeShared> EndExchangeShared(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ExchangeShared>(o);
  }
  public ExchangeSharedT UnPack() {
    var _o = new ExchangeSharedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ExchangeSharedT _o) {
    _o.Id = this.Id;
    _o.MaxCount = this.MaxCount;
    _o.Cost = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.CostLength; ++_j) {_o.Cost.Add(this.Cost(_j).HasValue ? this.Cost(_j).Value.UnPack() : null);}
    _o.ResetTimeId = this.ResetTimeId;
  }
  public static Offset<WWParser.Defs.ExchangeShared> Pack(FlatBufferBuilder builder, ExchangeSharedT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ExchangeShared>);
    var _cost = default(VectorOffset);
    if (_o.Cost != null) {
      var __cost = new Offset<WWParser.Defs.DicIntInt>[_o.Cost.Count];
      for (var _j = 0; _j < __cost.Length; ++_j) { __cost[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.Cost[_j]); }
      _cost = CreateCostVector(builder, __cost);
    }
    return CreateExchangeShared(
      builder,
      _o.Id,
      _o.MaxCount,
      _cost,
      _o.ResetTimeId);
  }
}

public class ExchangeSharedT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("max_count")]
  public int MaxCount { get; set; }
  [Newtonsoft.Json.JsonProperty("cost")]
  public List<WWParser.Defs.DicIntIntT> Cost { get; set; }
  [Newtonsoft.Json.JsonProperty("reset_time_id")]
  public int ResetTimeId { get; set; }

  public ExchangeSharedT() {
    this.Id = 0;
    this.MaxCount = 0;
    this.Cost = null;
    this.ResetTimeId = 0;
  }
}


static public class ExchangeSharedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MaxCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*Cost*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 10 /*ResetTimeId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
