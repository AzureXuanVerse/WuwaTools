// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct UiShow : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static UiShow GetRootAsUiShow(ByteBuffer _bb) { return GetRootAsUiShow(_bb, new UiShow()); }
  public static UiShow GetRootAsUiShow(ByteBuffer _bb, UiShow obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UiShow __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ViewName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetViewNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetViewNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetViewNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Type { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(6); }
  public bool LoadAsync { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int ShowCursorType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ObstructUi(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ObstructUiLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string EffectStart { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectStartBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetEffectStartBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetEffectStartArray() { return __p.__vector_as_array<byte>(14); }
  public string EffectBone { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectBoneBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetEffectBoneBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetEffectBoneArray() { return __p.__vector_as_array<byte>(16); }
  public string MontageStart { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMontageStartBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetMontageStartBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetMontageStartArray() { return __p.__vector_as_array<byte>(18); }
  public string AudioEvent { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAudioEventBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetAudioEventBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetAudioEventArray() { return __p.__vector_as_array<byte>(20); }
  public string OpenAudioEvent { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpenAudioEventBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetOpenAudioEventBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetOpenAudioEventArray() { return __p.__vector_as_array<byte>(22); }
  public string LoopAudioEvent { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLoopAudioEventBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetLoopAudioEventBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetLoopAudioEventArray() { return __p.__vector_as_array<byte>(24); }
  public string CloseAudioEvent { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCloseAudioEventBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetCloseAudioEventBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetCloseAudioEventArray() { return __p.__vector_as_array<byte>(26); }
  public int DelayTime { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EffectDelayTime { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool SetMaskActive { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float TimeDilation { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public bool IsAllowFightInput { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool CanOpenViewByShortcutKey { get { int o = __p.__offset(38); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsShortKeysExitView { get { int o = __p.__offset(40); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ScenePointTag { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScenePointTagBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetScenePointTagBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetScenePointTagArray() { return __p.__vector_as_array<byte>(42); }
  public bool NeedGc { get { int o = __p.__offset(44); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsFullScreen { get { int o = __p.__offset(46); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int CommonPopBg { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public string CommonPopBgKey { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommonPopBgKeyBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetCommonPopBgKeyBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetCommonPopBgKeyArray() { return __p.__vector_as_array<byte>(50); }
  public string ScenePath { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScenePathBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetScenePathBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetScenePathArray() { return __p.__vector_as_array<byte>(52); }
  public bool IsPermanent { get { int o = __p.__offset(54); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public WWParser.Defs.BlackScreen? StartBlackScreen { get { int o = __p.__offset(56); return o != 0 ? (WWParser.Defs.BlackScreen?)(new WWParser.Defs.BlackScreen()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.BlackScreen? CloseBlackScreen { get { int o = __p.__offset(58); return o != 0 ? (WWParser.Defs.BlackScreen?)(new WWParser.Defs.BlackScreen()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool SkipAnim { get { int o = __p.__offset(60); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool PartialBlur { get { int o = __p.__offset(62); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string AudioFilter { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAudioFilterBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetAudioFilterBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetAudioFilterArray() { return __p.__vector_as_array<byte>(64); }
  public bool AllowAutoMoving { get { int o = __p.__offset(66); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.UiShow> CreateUiShow(FlatBufferBuilder builder,
      StringOffset view_nameOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      bool load_async = false,
      int show_cursor_type = 0,
      VectorOffset obstruct_uiOffset = default(VectorOffset),
      StringOffset effect_startOffset = default(StringOffset),
      StringOffset effect_boneOffset = default(StringOffset),
      StringOffset montage_startOffset = default(StringOffset),
      StringOffset audio_eventOffset = default(StringOffset),
      StringOffset open_audio_eventOffset = default(StringOffset),
      StringOffset loop_audio_eventOffset = default(StringOffset),
      StringOffset close_audio_eventOffset = default(StringOffset),
      int delay_time = 0,
      int effect_delay_time = 0,
      bool set_mask_active = false,
      float time_dilation = 1.0f,
      bool is_allow_fight_input = false,
      bool can_open_view_by_shortcut_key = false,
      bool is_short_keys_exit_view = false,
      StringOffset scene_point_tagOffset = default(StringOffset),
      bool need_gc = false,
      bool is_full_screen = false,
      int common_pop_bg = -1,
      StringOffset common_pop_bg_keyOffset = default(StringOffset),
      StringOffset scene_pathOffset = default(StringOffset),
      bool is_permanent = false,
      Offset<WWParser.Defs.BlackScreen> start_black_screenOffset = default(Offset<WWParser.Defs.BlackScreen>),
      Offset<WWParser.Defs.BlackScreen> close_black_screenOffset = default(Offset<WWParser.Defs.BlackScreen>),
      bool skip_anim = false,
      bool partial_blur = false,
      StringOffset audio_filterOffset = default(StringOffset),
      bool allow_auto_moving = false) {
    builder.StartTable(32);
    UiShow.AddAudioFilter(builder, audio_filterOffset);
    UiShow.AddCloseBlackScreen(builder, close_black_screenOffset);
    UiShow.AddStartBlackScreen(builder, start_black_screenOffset);
    UiShow.AddScenePath(builder, scene_pathOffset);
    UiShow.AddCommonPopBgKey(builder, common_pop_bg_keyOffset);
    UiShow.AddCommonPopBg(builder, common_pop_bg);
    UiShow.AddScenePointTag(builder, scene_point_tagOffset);
    UiShow.AddTimeDilation(builder, time_dilation);
    UiShow.AddEffectDelayTime(builder, effect_delay_time);
    UiShow.AddDelayTime(builder, delay_time);
    UiShow.AddCloseAudioEvent(builder, close_audio_eventOffset);
    UiShow.AddLoopAudioEvent(builder, loop_audio_eventOffset);
    UiShow.AddOpenAudioEvent(builder, open_audio_eventOffset);
    UiShow.AddAudioEvent(builder, audio_eventOffset);
    UiShow.AddMontageStart(builder, montage_startOffset);
    UiShow.AddEffectBone(builder, effect_boneOffset);
    UiShow.AddEffectStart(builder, effect_startOffset);
    UiShow.AddObstructUi(builder, obstruct_uiOffset);
    UiShow.AddShowCursorType(builder, show_cursor_type);
    UiShow.AddType(builder, typeOffset);
    UiShow.AddViewName(builder, view_nameOffset);
    UiShow.AddAllowAutoMoving(builder, allow_auto_moving);
    UiShow.AddPartialBlur(builder, partial_blur);
    UiShow.AddSkipAnim(builder, skip_anim);
    UiShow.AddIsPermanent(builder, is_permanent);
    UiShow.AddIsFullScreen(builder, is_full_screen);
    UiShow.AddNeedGc(builder, need_gc);
    UiShow.AddIsShortKeysExitView(builder, is_short_keys_exit_view);
    UiShow.AddCanOpenViewByShortcutKey(builder, can_open_view_by_shortcut_key);
    UiShow.AddIsAllowFightInput(builder, is_allow_fight_input);
    UiShow.AddSetMaskActive(builder, set_mask_active);
    UiShow.AddLoadAsync(builder, load_async);
    return UiShow.EndUiShow(builder);
  }

  public static void StartUiShow(FlatBufferBuilder builder) { builder.StartTable(32); }
  public static void AddViewName(FlatBufferBuilder builder, StringOffset viewNameOffset) { builder.AddOffset(0, viewNameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static void AddLoadAsync(FlatBufferBuilder builder, bool loadAsync) { builder.AddBool(2, loadAsync, false); }
  public static void AddShowCursorType(FlatBufferBuilder builder, int showCursorType) { builder.AddInt(3, showCursorType, 0); }
  public static void AddObstructUi(FlatBufferBuilder builder, VectorOffset obstructUiOffset) { builder.AddOffset(4, obstructUiOffset.Value, 0); }
  public static VectorOffset CreateObstructUiVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateObstructUiVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObstructUiVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObstructUiVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartObstructUiVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEffectStart(FlatBufferBuilder builder, StringOffset effectStartOffset) { builder.AddOffset(5, effectStartOffset.Value, 0); }
  public static void AddEffectBone(FlatBufferBuilder builder, StringOffset effectBoneOffset) { builder.AddOffset(6, effectBoneOffset.Value, 0); }
  public static void AddMontageStart(FlatBufferBuilder builder, StringOffset montageStartOffset) { builder.AddOffset(7, montageStartOffset.Value, 0); }
  public static void AddAudioEvent(FlatBufferBuilder builder, StringOffset audioEventOffset) { builder.AddOffset(8, audioEventOffset.Value, 0); }
  public static void AddOpenAudioEvent(FlatBufferBuilder builder, StringOffset openAudioEventOffset) { builder.AddOffset(9, openAudioEventOffset.Value, 0); }
  public static void AddLoopAudioEvent(FlatBufferBuilder builder, StringOffset loopAudioEventOffset) { builder.AddOffset(10, loopAudioEventOffset.Value, 0); }
  public static void AddCloseAudioEvent(FlatBufferBuilder builder, StringOffset closeAudioEventOffset) { builder.AddOffset(11, closeAudioEventOffset.Value, 0); }
  public static void AddDelayTime(FlatBufferBuilder builder, int delayTime) { builder.AddInt(12, delayTime, 0); }
  public static void AddEffectDelayTime(FlatBufferBuilder builder, int effectDelayTime) { builder.AddInt(13, effectDelayTime, 0); }
  public static void AddSetMaskActive(FlatBufferBuilder builder, bool setMaskActive) { builder.AddBool(14, setMaskActive, false); }
  public static void AddTimeDilation(FlatBufferBuilder builder, float timeDilation) { builder.AddFloat(15, timeDilation, 1.0f); }
  public static void AddIsAllowFightInput(FlatBufferBuilder builder, bool isAllowFightInput) { builder.AddBool(16, isAllowFightInput, false); }
  public static void AddCanOpenViewByShortcutKey(FlatBufferBuilder builder, bool canOpenViewByShortcutKey) { builder.AddBool(17, canOpenViewByShortcutKey, false); }
  public static void AddIsShortKeysExitView(FlatBufferBuilder builder, bool isShortKeysExitView) { builder.AddBool(18, isShortKeysExitView, false); }
  public static void AddScenePointTag(FlatBufferBuilder builder, StringOffset scenePointTagOffset) { builder.AddOffset(19, scenePointTagOffset.Value, 0); }
  public static void AddNeedGc(FlatBufferBuilder builder, bool needGc) { builder.AddBool(20, needGc, false); }
  public static void AddIsFullScreen(FlatBufferBuilder builder, bool isFullScreen) { builder.AddBool(21, isFullScreen, false); }
  public static void AddCommonPopBg(FlatBufferBuilder builder, int commonPopBg) { builder.AddInt(22, commonPopBg, -1); }
  public static void AddCommonPopBgKey(FlatBufferBuilder builder, StringOffset commonPopBgKeyOffset) { builder.AddOffset(23, commonPopBgKeyOffset.Value, 0); }
  public static void AddScenePath(FlatBufferBuilder builder, StringOffset scenePathOffset) { builder.AddOffset(24, scenePathOffset.Value, 0); }
  public static void AddIsPermanent(FlatBufferBuilder builder, bool isPermanent) { builder.AddBool(25, isPermanent, false); }
  public static void AddStartBlackScreen(FlatBufferBuilder builder, Offset<WWParser.Defs.BlackScreen> startBlackScreenOffset) { builder.AddOffset(26, startBlackScreenOffset.Value, 0); }
  public static void AddCloseBlackScreen(FlatBufferBuilder builder, Offset<WWParser.Defs.BlackScreen> closeBlackScreenOffset) { builder.AddOffset(27, closeBlackScreenOffset.Value, 0); }
  public static void AddSkipAnim(FlatBufferBuilder builder, bool skipAnim) { builder.AddBool(28, skipAnim, false); }
  public static void AddPartialBlur(FlatBufferBuilder builder, bool partialBlur) { builder.AddBool(29, partialBlur, false); }
  public static void AddAudioFilter(FlatBufferBuilder builder, StringOffset audioFilterOffset) { builder.AddOffset(30, audioFilterOffset.Value, 0); }
  public static void AddAllowAutoMoving(FlatBufferBuilder builder, bool allowAutoMoving) { builder.AddBool(31, allowAutoMoving, false); }
  public static Offset<WWParser.Defs.UiShow> EndUiShow(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.UiShow>(o);
  }
  public UiShowT UnPack() {
    var _o = new UiShowT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(UiShowT _o) {
    _o.ViewName = this.ViewName;
    _o.Type = this.Type;
    _o.LoadAsync = this.LoadAsync;
    _o.ShowCursorType = this.ShowCursorType;
    _o.ObstructUi = new List<string>();
    for (var _j = 0; _j < this.ObstructUiLength; ++_j) {_o.ObstructUi.Add(this.ObstructUi(_j));}
    _o.EffectStart = this.EffectStart;
    _o.EffectBone = this.EffectBone;
    _o.MontageStart = this.MontageStart;
    _o.AudioEvent = this.AudioEvent;
    _o.OpenAudioEvent = this.OpenAudioEvent;
    _o.LoopAudioEvent = this.LoopAudioEvent;
    _o.CloseAudioEvent = this.CloseAudioEvent;
    _o.DelayTime = this.DelayTime;
    _o.EffectDelayTime = this.EffectDelayTime;
    _o.SetMaskActive = this.SetMaskActive;
    _o.TimeDilation = this.TimeDilation;
    _o.IsAllowFightInput = this.IsAllowFightInput;
    _o.CanOpenViewByShortcutKey = this.CanOpenViewByShortcutKey;
    _o.IsShortKeysExitView = this.IsShortKeysExitView;
    _o.ScenePointTag = this.ScenePointTag;
    _o.NeedGc = this.NeedGc;
    _o.IsFullScreen = this.IsFullScreen;
    _o.CommonPopBg = this.CommonPopBg;
    _o.CommonPopBgKey = this.CommonPopBgKey;
    _o.ScenePath = this.ScenePath;
    _o.IsPermanent = this.IsPermanent;
    _o.StartBlackScreen = this.StartBlackScreen.HasValue ? this.StartBlackScreen.Value.UnPack() : null;
    _o.CloseBlackScreen = this.CloseBlackScreen.HasValue ? this.CloseBlackScreen.Value.UnPack() : null;
    _o.SkipAnim = this.SkipAnim;
    _o.PartialBlur = this.PartialBlur;
    _o.AudioFilter = this.AudioFilter;
    _o.AllowAutoMoving = this.AllowAutoMoving;
  }
  public static Offset<WWParser.Defs.UiShow> Pack(FlatBufferBuilder builder, UiShowT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.UiShow>);
    var _view_name = _o.ViewName == null ? default(StringOffset) : builder.CreateString(_o.ViewName);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _obstruct_ui = default(VectorOffset);
    if (_o.ObstructUi != null) {
      var __obstruct_ui = new StringOffset[_o.ObstructUi.Count];
      for (var _j = 0; _j < __obstruct_ui.Length; ++_j) { __obstruct_ui[_j] = builder.CreateString(_o.ObstructUi[_j]); }
      _obstruct_ui = CreateObstructUiVector(builder, __obstruct_ui);
    }
    var _effect_start = _o.EffectStart == null ? default(StringOffset) : builder.CreateString(_o.EffectStart);
    var _effect_bone = _o.EffectBone == null ? default(StringOffset) : builder.CreateString(_o.EffectBone);
    var _montage_start = _o.MontageStart == null ? default(StringOffset) : builder.CreateString(_o.MontageStart);
    var _audio_event = _o.AudioEvent == null ? default(StringOffset) : builder.CreateString(_o.AudioEvent);
    var _open_audio_event = _o.OpenAudioEvent == null ? default(StringOffset) : builder.CreateString(_o.OpenAudioEvent);
    var _loop_audio_event = _o.LoopAudioEvent == null ? default(StringOffset) : builder.CreateString(_o.LoopAudioEvent);
    var _close_audio_event = _o.CloseAudioEvent == null ? default(StringOffset) : builder.CreateString(_o.CloseAudioEvent);
    var _scene_point_tag = _o.ScenePointTag == null ? default(StringOffset) : builder.CreateString(_o.ScenePointTag);
    var _common_pop_bg_key = _o.CommonPopBgKey == null ? default(StringOffset) : builder.CreateString(_o.CommonPopBgKey);
    var _scene_path = _o.ScenePath == null ? default(StringOffset) : builder.CreateString(_o.ScenePath);
    var _start_black_screen = _o.StartBlackScreen == null ? default(Offset<WWParser.Defs.BlackScreen>) : WWParser.Defs.BlackScreen.Pack(builder, _o.StartBlackScreen);
    var _close_black_screen = _o.CloseBlackScreen == null ? default(Offset<WWParser.Defs.BlackScreen>) : WWParser.Defs.BlackScreen.Pack(builder, _o.CloseBlackScreen);
    var _audio_filter = _o.AudioFilter == null ? default(StringOffset) : builder.CreateString(_o.AudioFilter);
    return CreateUiShow(
      builder,
      _view_name,
      _type,
      _o.LoadAsync,
      _o.ShowCursorType,
      _obstruct_ui,
      _effect_start,
      _effect_bone,
      _montage_start,
      _audio_event,
      _open_audio_event,
      _loop_audio_event,
      _close_audio_event,
      _o.DelayTime,
      _o.EffectDelayTime,
      _o.SetMaskActive,
      _o.TimeDilation,
      _o.IsAllowFightInput,
      _o.CanOpenViewByShortcutKey,
      _o.IsShortKeysExitView,
      _scene_point_tag,
      _o.NeedGc,
      _o.IsFullScreen,
      _o.CommonPopBg,
      _common_pop_bg_key,
      _scene_path,
      _o.IsPermanent,
      _start_black_screen,
      _close_black_screen,
      _o.SkipAnim,
      _o.PartialBlur,
      _audio_filter,
      _o.AllowAutoMoving);
  }
}

public class UiShowT
{
  [Newtonsoft.Json.JsonProperty("view_name")]
  public string ViewName { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public string Type { get; set; }
  [Newtonsoft.Json.JsonProperty("load_async")]
  public bool LoadAsync { get; set; }
  [Newtonsoft.Json.JsonProperty("show_cursor_type")]
  public int ShowCursorType { get; set; }
  [Newtonsoft.Json.JsonProperty("obstruct_ui")]
  public List<string> ObstructUi { get; set; }
  [Newtonsoft.Json.JsonProperty("effect_start")]
  public string EffectStart { get; set; }
  [Newtonsoft.Json.JsonProperty("effect_bone")]
  public string EffectBone { get; set; }
  [Newtonsoft.Json.JsonProperty("montage_start")]
  public string MontageStart { get; set; }
  [Newtonsoft.Json.JsonProperty("audio_event")]
  public string AudioEvent { get; set; }
  [Newtonsoft.Json.JsonProperty("open_audio_event")]
  public string OpenAudioEvent { get; set; }
  [Newtonsoft.Json.JsonProperty("loop_audio_event")]
  public string LoopAudioEvent { get; set; }
  [Newtonsoft.Json.JsonProperty("close_audio_event")]
  public string CloseAudioEvent { get; set; }
  [Newtonsoft.Json.JsonProperty("delay_time")]
  public int DelayTime { get; set; }
  [Newtonsoft.Json.JsonProperty("effect_delay_time")]
  public int EffectDelayTime { get; set; }
  [Newtonsoft.Json.JsonProperty("set_mask_active")]
  public bool SetMaskActive { get; set; }
  [Newtonsoft.Json.JsonProperty("time_dilation")]
  public float TimeDilation { get; set; }
  [Newtonsoft.Json.JsonProperty("is_allow_fight_input")]
  public bool IsAllowFightInput { get; set; }
  [Newtonsoft.Json.JsonProperty("can_open_view_by_shortcut_key")]
  public bool CanOpenViewByShortcutKey { get; set; }
  [Newtonsoft.Json.JsonProperty("is_short_keys_exit_view")]
  public bool IsShortKeysExitView { get; set; }
  [Newtonsoft.Json.JsonProperty("scene_point_tag")]
  public string ScenePointTag { get; set; }
  [Newtonsoft.Json.JsonProperty("need_gc")]
  public bool NeedGc { get; set; }
  [Newtonsoft.Json.JsonProperty("is_full_screen")]
  public bool IsFullScreen { get; set; }
  [Newtonsoft.Json.JsonProperty("common_pop_bg")]
  public int CommonPopBg { get; set; }
  [Newtonsoft.Json.JsonProperty("common_pop_bg_key")]
  public string CommonPopBgKey { get; set; }
  [Newtonsoft.Json.JsonProperty("scene_path")]
  public string ScenePath { get; set; }
  [Newtonsoft.Json.JsonProperty("is_permanent")]
  public bool IsPermanent { get; set; }
  [Newtonsoft.Json.JsonProperty("start_black_screen")]
  public WWParser.Defs.BlackScreenT StartBlackScreen { get; set; }
  [Newtonsoft.Json.JsonProperty("close_black_screen")]
  public WWParser.Defs.BlackScreenT CloseBlackScreen { get; set; }
  [Newtonsoft.Json.JsonProperty("skip_anim")]
  public bool SkipAnim { get; set; }
  [Newtonsoft.Json.JsonProperty("partial_blur")]
  public bool PartialBlur { get; set; }
  [Newtonsoft.Json.JsonProperty("audio_filter")]
  public string AudioFilter { get; set; }
  [Newtonsoft.Json.JsonProperty("allow_auto_moving")]
  public bool AllowAutoMoving { get; set; }

  public UiShowT() {
    this.ViewName = null;
    this.Type = null;
    this.LoadAsync = false;
    this.ShowCursorType = 0;
    this.ObstructUi = null;
    this.EffectStart = null;
    this.EffectBone = null;
    this.MontageStart = null;
    this.AudioEvent = null;
    this.OpenAudioEvent = null;
    this.LoopAudioEvent = null;
    this.CloseAudioEvent = null;
    this.DelayTime = 0;
    this.EffectDelayTime = 0;
    this.SetMaskActive = false;
    this.TimeDilation = 1.0f;
    this.IsAllowFightInput = false;
    this.CanOpenViewByShortcutKey = false;
    this.IsShortKeysExitView = false;
    this.ScenePointTag = null;
    this.NeedGc = false;
    this.IsFullScreen = false;
    this.CommonPopBg = -1;
    this.CommonPopBgKey = null;
    this.ScenePath = null;
    this.IsPermanent = false;
    this.StartBlackScreen = null;
    this.CloseBlackScreen = null;
    this.SkipAnim = false;
    this.PartialBlur = false;
    this.AudioFilter = null;
    this.AllowAutoMoving = false;
  }
}


static public class UiShowVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*ViewName*/, false)
      && verifier.VerifyString(tablePos, 6 /*Type*/, false)
      && verifier.VerifyField(tablePos, 8 /*LoadAsync*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*ShowCursorType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*ObstructUi*/, false)
      && verifier.VerifyString(tablePos, 14 /*EffectStart*/, false)
      && verifier.VerifyString(tablePos, 16 /*EffectBone*/, false)
      && verifier.VerifyString(tablePos, 18 /*MontageStart*/, false)
      && verifier.VerifyString(tablePos, 20 /*AudioEvent*/, false)
      && verifier.VerifyString(tablePos, 22 /*OpenAudioEvent*/, false)
      && verifier.VerifyString(tablePos, 24 /*LoopAudioEvent*/, false)
      && verifier.VerifyString(tablePos, 26 /*CloseAudioEvent*/, false)
      && verifier.VerifyField(tablePos, 28 /*DelayTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*EffectDelayTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*SetMaskActive*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 34 /*TimeDilation*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*IsAllowFightInput*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 38 /*CanOpenViewByShortcutKey*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 40 /*IsShortKeysExitView*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 42 /*ScenePointTag*/, false)
      && verifier.VerifyField(tablePos, 44 /*NeedGc*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 46 /*IsFullScreen*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 48 /*CommonPopBg*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 50 /*CommonPopBgKey*/, false)
      && verifier.VerifyString(tablePos, 52 /*ScenePath*/, false)
      && verifier.VerifyField(tablePos, 54 /*IsPermanent*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTable(tablePos, 56 /*StartBlackScreen*/, WWParser.Defs.BlackScreenVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 58 /*CloseBlackScreen*/, WWParser.Defs.BlackScreenVerify.Verify, false)
      && verifier.VerifyField(tablePos, 60 /*SkipAnim*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 62 /*PartialBlur*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 64 /*AudioFilter*/, false)
      && verifier.VerifyField(tablePos, 66 /*AllowAutoMoving*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
