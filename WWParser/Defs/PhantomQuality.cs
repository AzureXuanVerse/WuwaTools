// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PhantomQuality : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PhantomQuality GetRootAsPhantomQuality(ByteBuffer _bb) { return GetRootAsPhantomQuality(_bb, new PhantomQuality()); }
  public static PhantomQuality GetRootAsPhantomQuality(ByteBuffer _bb, PhantomQuality obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PhantomQuality __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Quality { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LevelLimit { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SlotUnlockLevel(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SlotUnlockLevelLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSlotUnlockLevelBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetSlotUnlockLevelBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetSlotUnlockLevelArray() { return __p.__vector_as_array<int>(8); }
  public WWParser.Defs.DicIntInt? IdentifyCost(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int IdentifyCostLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int IdentifyCoin { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string QualitySprite { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQualitySpriteBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetQualitySpriteBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetQualitySpriteArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<WWParser.Defs.PhantomQuality> CreatePhantomQuality(FlatBufferBuilder builder,
      int quality = 0,
      int level_limit = 0,
      VectorOffset slot_unlock_levelOffset = default(VectorOffset),
      VectorOffset identify_costOffset = default(VectorOffset),
      int identify_coin = 0,
      StringOffset quality_spriteOffset = default(StringOffset)) {
    builder.StartTable(6);
    PhantomQuality.AddQualitySprite(builder, quality_spriteOffset);
    PhantomQuality.AddIdentifyCoin(builder, identify_coin);
    PhantomQuality.AddIdentifyCost(builder, identify_costOffset);
    PhantomQuality.AddSlotUnlockLevel(builder, slot_unlock_levelOffset);
    PhantomQuality.AddLevelLimit(builder, level_limit);
    PhantomQuality.AddQuality(builder, quality);
    return PhantomQuality.EndPhantomQuality(builder);
  }

  public static void StartPhantomQuality(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddQuality(FlatBufferBuilder builder, int quality) { builder.AddInt(0, quality, 0); }
  public static void AddLevelLimit(FlatBufferBuilder builder, int levelLimit) { builder.AddInt(1, levelLimit, 0); }
  public static void AddSlotUnlockLevel(FlatBufferBuilder builder, VectorOffset slotUnlockLevelOffset) { builder.AddOffset(2, slotUnlockLevelOffset.Value, 0); }
  public static VectorOffset CreateSlotUnlockLevelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSlotUnlockLevelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSlotUnlockLevelVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSlotUnlockLevelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSlotUnlockLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIdentifyCost(FlatBufferBuilder builder, VectorOffset identifyCostOffset) { builder.AddOffset(3, identifyCostOffset.Value, 0); }
  public static VectorOffset CreateIdentifyCostVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIdentifyCostVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdentifyCostVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdentifyCostVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIdentifyCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIdentifyCoin(FlatBufferBuilder builder, int identifyCoin) { builder.AddInt(4, identifyCoin, 0); }
  public static void AddQualitySprite(FlatBufferBuilder builder, StringOffset qualitySpriteOffset) { builder.AddOffset(5, qualitySpriteOffset.Value, 0); }
  public static Offset<WWParser.Defs.PhantomQuality> EndPhantomQuality(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PhantomQuality>(o);
  }
  public PhantomQualityT UnPack() {
    var _o = new PhantomQualityT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PhantomQualityT _o) {
    _o.Quality = this.Quality;
    _o.LevelLimit = this.LevelLimit;
    _o.SlotUnlockLevel = new List<int>();
    for (var _j = 0; _j < this.SlotUnlockLevelLength; ++_j) {_o.SlotUnlockLevel.Add(this.SlotUnlockLevel(_j));}
    _o.IdentifyCost = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.IdentifyCostLength; ++_j) {_o.IdentifyCost.Add(this.IdentifyCost(_j).HasValue ? this.IdentifyCost(_j).Value.UnPack() : null);}
    _o.IdentifyCoin = this.IdentifyCoin;
    _o.QualitySprite = this.QualitySprite;
  }
  public static Offset<WWParser.Defs.PhantomQuality> Pack(FlatBufferBuilder builder, PhantomQualityT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PhantomQuality>);
    var _slot_unlock_level = default(VectorOffset);
    if (_o.SlotUnlockLevel != null) {
      var __slot_unlock_level = _o.SlotUnlockLevel.ToArray();
      _slot_unlock_level = CreateSlotUnlockLevelVector(builder, __slot_unlock_level);
    }
    var _identify_cost = default(VectorOffset);
    if (_o.IdentifyCost != null) {
      var __identify_cost = new Offset<WWParser.Defs.DicIntInt>[_o.IdentifyCost.Count];
      for (var _j = 0; _j < __identify_cost.Length; ++_j) { __identify_cost[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.IdentifyCost[_j]); }
      _identify_cost = CreateIdentifyCostVector(builder, __identify_cost);
    }
    var _quality_sprite = _o.QualitySprite == null ? default(StringOffset) : builder.CreateString(_o.QualitySprite);
    return CreatePhantomQuality(
      builder,
      _o.Quality,
      _o.LevelLimit,
      _slot_unlock_level,
      _identify_cost,
      _o.IdentifyCoin,
      _quality_sprite);
  }
}

public class PhantomQualityT
{
  [Newtonsoft.Json.JsonProperty("quality")]
  public int Quality { get; set; }
  [Newtonsoft.Json.JsonProperty("level_limit")]
  public int LevelLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("slot_unlock_level")]
  public List<int> SlotUnlockLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("identify_cost")]
  public List<WWParser.Defs.DicIntIntT> IdentifyCost { get; set; }
  [Newtonsoft.Json.JsonProperty("identify_coin")]
  public int IdentifyCoin { get; set; }
  [Newtonsoft.Json.JsonProperty("quality_sprite")]
  public string QualitySprite { get; set; }

  public PhantomQualityT() {
    this.Quality = 0;
    this.LevelLimit = 0;
    this.SlotUnlockLevel = null;
    this.IdentifyCost = null;
    this.IdentifyCoin = 0;
    this.QualitySprite = null;
  }
}


static public class PhantomQualityVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Quality*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*LevelLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*SlotUnlockLevel*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*IdentifyCost*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 12 /*IdentifyCoin*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*QualitySprite*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
