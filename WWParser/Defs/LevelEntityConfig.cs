// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LevelEntityConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static LevelEntityConfig GetRootAsLevelEntityConfig(ByteBuffer _bb) { return GetRootAsLevelEntityConfig(_bb, new LevelEntityConfig()); }
  public static LevelEntityConfig GetRootAsLevelEntityConfig(ByteBuffer _bb, LevelEntityConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LevelEntityConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EntityId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BlueprintType { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBlueprintTypeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetBlueprintTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetBlueprintTypeArray() { return __p.__vector_as_array<byte>(10); }
  public string Name { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(12); }
  public bool InSleep { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsHidden { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int AreaId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.IntVector? Transform(int j) { int o = __p.__offset(20); return o != 0 ? (WWParser.Defs.IntVector?)(new WWParser.Defs.IntVector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TransformLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ComponentsData { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetComponentsDataBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetComponentsDataBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetComponentsDataArray() { return __p.__vector_as_array<byte>(22); }

  public static Offset<WWParser.Defs.LevelEntityConfig> CreateLevelEntityConfig(FlatBufferBuilder builder,
      int id = 0,
      int map_id = 0,
      int entity_id = 0,
      StringOffset blueprint_typeOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      bool in_sleep = false,
      bool is_hidden = false,
      int area_id = 0,
      VectorOffset transformOffset = default(VectorOffset),
      StringOffset components_dataOffset = default(StringOffset)) {
    builder.StartTable(10);
    LevelEntityConfig.AddComponentsData(builder, components_dataOffset);
    LevelEntityConfig.AddTransform(builder, transformOffset);
    LevelEntityConfig.AddAreaId(builder, area_id);
    LevelEntityConfig.AddName(builder, nameOffset);
    LevelEntityConfig.AddBlueprintType(builder, blueprint_typeOffset);
    LevelEntityConfig.AddEntityId(builder, entity_id);
    LevelEntityConfig.AddMapId(builder, map_id);
    LevelEntityConfig.AddId(builder, id);
    LevelEntityConfig.AddIsHidden(builder, is_hidden);
    LevelEntityConfig.AddInSleep(builder, in_sleep);
    return LevelEntityConfig.EndLevelEntityConfig(builder);
  }

  public static void StartLevelEntityConfig(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMapId(FlatBufferBuilder builder, int mapId) { builder.AddInt(1, mapId, 0); }
  public static void AddEntityId(FlatBufferBuilder builder, int entityId) { builder.AddInt(2, entityId, 0); }
  public static void AddBlueprintType(FlatBufferBuilder builder, StringOffset blueprintTypeOffset) { builder.AddOffset(3, blueprintTypeOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(4, nameOffset.Value, 0); }
  public static void AddInSleep(FlatBufferBuilder builder, bool inSleep) { builder.AddBool(5, inSleep, false); }
  public static void AddIsHidden(FlatBufferBuilder builder, bool isHidden) { builder.AddBool(6, isHidden, false); }
  public static void AddAreaId(FlatBufferBuilder builder, int areaId) { builder.AddInt(7, areaId, 0); }
  public static void AddTransform(FlatBufferBuilder builder, VectorOffset transformOffset) { builder.AddOffset(8, transformOffset.Value, 0); }
  public static VectorOffset CreateTransformVector(FlatBufferBuilder builder, Offset<WWParser.Defs.IntVector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTransformVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.IntVector>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTransformVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.IntVector>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTransformVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.IntVector>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTransformVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddComponentsData(FlatBufferBuilder builder, StringOffset componentsDataOffset) { builder.AddOffset(9, componentsDataOffset.Value, 0); }
  public static Offset<WWParser.Defs.LevelEntityConfig> EndLevelEntityConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.LevelEntityConfig>(o);
  }
  public LevelEntityConfigT UnPack() {
    var _o = new LevelEntityConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LevelEntityConfigT _o) {
    _o.Id = this.Id;
    _o.MapId = this.MapId;
    _o.EntityId = this.EntityId;
    _o.BlueprintType = this.BlueprintType;
    _o.Name = this.Name;
    _o.InSleep = this.InSleep;
    _o.IsHidden = this.IsHidden;
    _o.AreaId = this.AreaId;
    _o.Transform = new List<WWParser.Defs.IntVectorT>();
    for (var _j = 0; _j < this.TransformLength; ++_j) {_o.Transform.Add(this.Transform(_j).HasValue ? this.Transform(_j).Value.UnPack() : null);}
    _o.ComponentsData = this.ComponentsData;
  }
  public static Offset<WWParser.Defs.LevelEntityConfig> Pack(FlatBufferBuilder builder, LevelEntityConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.LevelEntityConfig>);
    var _blueprint_type = _o.BlueprintType == null ? default(StringOffset) : builder.CreateString(_o.BlueprintType);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _transform = default(VectorOffset);
    if (_o.Transform != null) {
      var __transform = new Offset<WWParser.Defs.IntVector>[_o.Transform.Count];
      for (var _j = 0; _j < __transform.Length; ++_j) { __transform[_j] = WWParser.Defs.IntVector.Pack(builder, _o.Transform[_j]); }
      _transform = CreateTransformVector(builder, __transform);
    }
    var _components_data = _o.ComponentsData == null ? default(StringOffset) : builder.CreateString(_o.ComponentsData);
    return CreateLevelEntityConfig(
      builder,
      _o.Id,
      _o.MapId,
      _o.EntityId,
      _blueprint_type,
      _name,
      _o.InSleep,
      _o.IsHidden,
      _o.AreaId,
      _transform,
      _components_data);
  }
}

public class LevelEntityConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("map_id")]
  public int MapId { get; set; }
  [Newtonsoft.Json.JsonProperty("entity_id")]
  public int EntityId { get; set; }
  [Newtonsoft.Json.JsonProperty("blueprint_type")]
  public string BlueprintType { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("in_sleep")]
  public bool InSleep { get; set; }
  [Newtonsoft.Json.JsonProperty("is_hidden")]
  public bool IsHidden { get; set; }
  [Newtonsoft.Json.JsonProperty("area_id")]
  public int AreaId { get; set; }
  [Newtonsoft.Json.JsonProperty("transform")]
  public List<WWParser.Defs.IntVectorT> Transform { get; set; }
  [Newtonsoft.Json.JsonProperty("components_data")]
  public string ComponentsData { get; set; }

  public LevelEntityConfigT() {
    this.Id = 0;
    this.MapId = 0;
    this.EntityId = 0;
    this.BlueprintType = null;
    this.Name = null;
    this.InSleep = false;
    this.IsHidden = false;
    this.AreaId = 0;
    this.Transform = null;
    this.ComponentsData = null;
  }
}


static public class LevelEntityConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MapId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*EntityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*BlueprintType*/, false)
      && verifier.VerifyString(tablePos, 12 /*Name*/, false)
      && verifier.VerifyField(tablePos, 14 /*InSleep*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*IsHidden*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*AreaId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 20 /*Transform*/, WWParser.Defs.IntVectorVerify.Verify, false)
      && verifier.VerifyString(tablePos, 22 /*ComponentsData*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
