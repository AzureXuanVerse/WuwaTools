// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FlowText : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FlowText GetRootAsFlowText(ByteBuffer _bb) { return GetRootAsFlowText(_bb, new FlowText()); }
  public static FlowText GetRootAsFlowText(ByteBuffer _bb, FlowText obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FlowText __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Key { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string FlowListId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFlowListIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFlowListIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFlowListIdArray() { return __p.__vector_as_array<byte>(6); }
  public string PlotLineId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlotLineIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPlotLineIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPlotLineIdArray() { return __p.__vector_as_array<byte>(8); }
  public int Id { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Text { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Sound { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSoundBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetSoundBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetSoundArray() { return __p.__vector_as_array<byte>(14); }
  public string EsKey { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEsKeyBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetEsKeyBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetEsKeyArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<WWParser.Defs.FlowText> CreateFlowText(FlatBufferBuilder builder,
      long key = 0,
      StringOffset flow_list_idOffset = default(StringOffset),
      StringOffset plot_line_idOffset = default(StringOffset),
      int id = 0,
      int text = 0,
      StringOffset soundOffset = default(StringOffset),
      StringOffset es_keyOffset = default(StringOffset)) {
    builder.StartTable(7);
    FlowText.AddKey(builder, key);
    FlowText.AddEsKey(builder, es_keyOffset);
    FlowText.AddSound(builder, soundOffset);
    FlowText.AddText(builder, text);
    FlowText.AddId(builder, id);
    FlowText.AddPlotLineId(builder, plot_line_idOffset);
    FlowText.AddFlowListId(builder, flow_list_idOffset);
    return FlowText.EndFlowText(builder);
  }

  public static void StartFlowText(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddKey(FlatBufferBuilder builder, long key) { builder.AddLong(0, key, 0); }
  public static void AddFlowListId(FlatBufferBuilder builder, StringOffset flowListIdOffset) { builder.AddOffset(1, flowListIdOffset.Value, 0); }
  public static void AddPlotLineId(FlatBufferBuilder builder, StringOffset plotLineIdOffset) { builder.AddOffset(2, plotLineIdOffset.Value, 0); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(3, id, 0); }
  public static void AddText(FlatBufferBuilder builder, int text) { builder.AddInt(4, text, 0); }
  public static void AddSound(FlatBufferBuilder builder, StringOffset soundOffset) { builder.AddOffset(5, soundOffset.Value, 0); }
  public static void AddEsKey(FlatBufferBuilder builder, StringOffset esKeyOffset) { builder.AddOffset(6, esKeyOffset.Value, 0); }
  public static Offset<WWParser.Defs.FlowText> EndFlowText(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FlowText>(o);
  }
  public FlowTextT UnPack() {
    var _o = new FlowTextT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FlowTextT _o) {
    _o.Key = this.Key;
    _o.FlowListId = this.FlowListId;
    _o.PlotLineId = this.PlotLineId;
    _o.Id = this.Id;
    _o.Text = this.Text;
    _o.Sound = this.Sound;
    _o.EsKey = this.EsKey;
  }
  public static Offset<WWParser.Defs.FlowText> Pack(FlatBufferBuilder builder, FlowTextT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FlowText>);
    var _flow_list_id = _o.FlowListId == null ? default(StringOffset) : builder.CreateString(_o.FlowListId);
    var _plot_line_id = _o.PlotLineId == null ? default(StringOffset) : builder.CreateString(_o.PlotLineId);
    var _sound = _o.Sound == null ? default(StringOffset) : builder.CreateString(_o.Sound);
    var _es_key = _o.EsKey == null ? default(StringOffset) : builder.CreateString(_o.EsKey);
    return CreateFlowText(
      builder,
      _o.Key,
      _flow_list_id,
      _plot_line_id,
      _o.Id,
      _o.Text,
      _sound,
      _es_key);
  }
}

public class FlowTextT
{
  [Newtonsoft.Json.JsonProperty("key")]
  public long Key { get; set; }
  [Newtonsoft.Json.JsonProperty("flow_list_id")]
  public string FlowListId { get; set; }
  [Newtonsoft.Json.JsonProperty("plot_line_id")]
  public string PlotLineId { get; set; }
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("text")]
  public int Text { get; set; }
  [Newtonsoft.Json.JsonProperty("sound")]
  public string Sound { get; set; }
  [Newtonsoft.Json.JsonProperty("es_key")]
  public string EsKey { get; set; }

  public FlowTextT() {
    this.Key = 0;
    this.FlowListId = null;
    this.PlotLineId = null;
    this.Id = 0;
    this.Text = 0;
    this.Sound = null;
    this.EsKey = null;
  }
}


static public class FlowTextVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Key*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*FlowListId*/, false)
      && verifier.VerifyString(tablePos, 8 /*PlotLineId*/, false)
      && verifier.VerifyField(tablePos, 10 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Text*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*Sound*/, false)
      && verifier.VerifyString(tablePos, 16 /*EsKey*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
