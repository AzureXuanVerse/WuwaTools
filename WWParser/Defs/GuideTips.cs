// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GuideTips : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GuideTips GetRootAsGuideTips(ByteBuffer _bb) { return GetRootAsGuideTips(_bb, new GuideTips()); }
  public static GuideTips GetRootAsGuideTips(ByteBuffer _bb, GuideTips obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GuideTips __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int GuideId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Content { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetContentBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetContentArray() { return __p.__vector_as_array<byte>(6); }
  public string Button(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ButtonLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string InputEnums(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int InputEnumsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string LimitInputEnums(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LimitInputEnumsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool UseLoopAnim { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int UseMask { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.GuideTips> CreateGuideTips(FlatBufferBuilder builder,
      int guide_id = 0,
      StringOffset contentOffset = default(StringOffset),
      VectorOffset buttonOffset = default(VectorOffset),
      VectorOffset input_enumsOffset = default(VectorOffset),
      VectorOffset limit_input_enumsOffset = default(VectorOffset),
      bool use_loop_anim = false,
      int use_mask = 0) {
    builder.StartTable(7);
    GuideTips.AddUseMask(builder, use_mask);
    GuideTips.AddLimitInputEnums(builder, limit_input_enumsOffset);
    GuideTips.AddInputEnums(builder, input_enumsOffset);
    GuideTips.AddButton(builder, buttonOffset);
    GuideTips.AddContent(builder, contentOffset);
    GuideTips.AddGuideId(builder, guide_id);
    GuideTips.AddUseLoopAnim(builder, use_loop_anim);
    return GuideTips.EndGuideTips(builder);
  }

  public static void StartGuideTips(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddGuideId(FlatBufferBuilder builder, int guideId) { builder.AddInt(0, guideId, 0); }
  public static void AddContent(FlatBufferBuilder builder, StringOffset contentOffset) { builder.AddOffset(1, contentOffset.Value, 0); }
  public static void AddButton(FlatBufferBuilder builder, VectorOffset buttonOffset) { builder.AddOffset(2, buttonOffset.Value, 0); }
  public static VectorOffset CreateButtonVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateButtonVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateButtonVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateButtonVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartButtonVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInputEnums(FlatBufferBuilder builder, VectorOffset inputEnumsOffset) { builder.AddOffset(3, inputEnumsOffset.Value, 0); }
  public static VectorOffset CreateInputEnumsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInputEnumsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInputEnumsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInputEnumsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInputEnumsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLimitInputEnums(FlatBufferBuilder builder, VectorOffset limitInputEnumsOffset) { builder.AddOffset(4, limitInputEnumsOffset.Value, 0); }
  public static VectorOffset CreateLimitInputEnumsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLimitInputEnumsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitInputEnumsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitInputEnumsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLimitInputEnumsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUseLoopAnim(FlatBufferBuilder builder, bool useLoopAnim) { builder.AddBool(5, useLoopAnim, false); }
  public static void AddUseMask(FlatBufferBuilder builder, int useMask) { builder.AddInt(6, useMask, 0); }
  public static Offset<WWParser.Defs.GuideTips> EndGuideTips(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.GuideTips>(o);
  }
  public GuideTipsT UnPack() {
    var _o = new GuideTipsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GuideTipsT _o) {
    _o.GuideId = this.GuideId;
    _o.Content = this.Content;
    _o.Button = new List<string>();
    for (var _j = 0; _j < this.ButtonLength; ++_j) {_o.Button.Add(this.Button(_j));}
    _o.InputEnums = new List<string>();
    for (var _j = 0; _j < this.InputEnumsLength; ++_j) {_o.InputEnums.Add(this.InputEnums(_j));}
    _o.LimitInputEnums = new List<string>();
    for (var _j = 0; _j < this.LimitInputEnumsLength; ++_j) {_o.LimitInputEnums.Add(this.LimitInputEnums(_j));}
    _o.UseLoopAnim = this.UseLoopAnim;
    _o.UseMask = this.UseMask;
  }
  public static Offset<WWParser.Defs.GuideTips> Pack(FlatBufferBuilder builder, GuideTipsT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.GuideTips>);
    var _content = _o.Content == null ? default(StringOffset) : builder.CreateString(_o.Content);
    var _button = default(VectorOffset);
    if (_o.Button != null) {
      var __button = new StringOffset[_o.Button.Count];
      for (var _j = 0; _j < __button.Length; ++_j) { __button[_j] = builder.CreateString(_o.Button[_j]); }
      _button = CreateButtonVector(builder, __button);
    }
    var _input_enums = default(VectorOffset);
    if (_o.InputEnums != null) {
      var __input_enums = new StringOffset[_o.InputEnums.Count];
      for (var _j = 0; _j < __input_enums.Length; ++_j) { __input_enums[_j] = builder.CreateString(_o.InputEnums[_j]); }
      _input_enums = CreateInputEnumsVector(builder, __input_enums);
    }
    var _limit_input_enums = default(VectorOffset);
    if (_o.LimitInputEnums != null) {
      var __limit_input_enums = new StringOffset[_o.LimitInputEnums.Count];
      for (var _j = 0; _j < __limit_input_enums.Length; ++_j) { __limit_input_enums[_j] = builder.CreateString(_o.LimitInputEnums[_j]); }
      _limit_input_enums = CreateLimitInputEnumsVector(builder, __limit_input_enums);
    }
    return CreateGuideTips(
      builder,
      _o.GuideId,
      _content,
      _button,
      _input_enums,
      _limit_input_enums,
      _o.UseLoopAnim,
      _o.UseMask);
  }
}

public class GuideTipsT
{
  [Newtonsoft.Json.JsonProperty("guide_id")]
  public int GuideId { get; set; }
  [Newtonsoft.Json.JsonProperty("content")]
  public string Content { get; set; }
  [Newtonsoft.Json.JsonProperty("button")]
  public List<string> Button { get; set; }
  [Newtonsoft.Json.JsonProperty("input_enums")]
  public List<string> InputEnums { get; set; }
  [Newtonsoft.Json.JsonProperty("limit_input_enums")]
  public List<string> LimitInputEnums { get; set; }
  [Newtonsoft.Json.JsonProperty("use_loop_anim")]
  public bool UseLoopAnim { get; set; }
  [Newtonsoft.Json.JsonProperty("use_mask")]
  public int UseMask { get; set; }

  public GuideTipsT() {
    this.GuideId = 0;
    this.Content = null;
    this.Button = null;
    this.InputEnums = null;
    this.LimitInputEnums = null;
    this.UseLoopAnim = false;
    this.UseMask = 0;
  }
}


static public class GuideTipsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*GuideId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Content*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*Button*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*InputEnums*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*LimitInputEnums*/, false)
      && verifier.VerifyField(tablePos, 14 /*UseLoopAnim*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*UseMask*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
