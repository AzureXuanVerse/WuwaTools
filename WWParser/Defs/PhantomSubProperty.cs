// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PhantomSubProperty : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PhantomSubProperty GetRootAsPhantomSubProperty(ByteBuffer _bb) { return GetRootAsPhantomSubProperty(_bb, new PhantomSubProperty()); }
  public static PhantomSubProperty GetRootAsPhantomSubProperty(ByteBuffer _bb, PhantomSubProperty obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PhantomSubProperty __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PropId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AddType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SubStandardProperty { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.PhantomSubProperty> CreatePhantomSubProperty(FlatBufferBuilder builder,
      int id = 0,
      int prop_id = 0,
      int add_type = 0,
      int sub_standard_property = 0) {
    builder.StartTable(4);
    PhantomSubProperty.AddSubStandardProperty(builder, sub_standard_property);
    PhantomSubProperty.AddAddType(builder, add_type);
    PhantomSubProperty.AddPropId(builder, prop_id);
    PhantomSubProperty.AddId(builder, id);
    return PhantomSubProperty.EndPhantomSubProperty(builder);
  }

  public static void StartPhantomSubProperty(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPropId(FlatBufferBuilder builder, int propId) { builder.AddInt(1, propId, 0); }
  public static void AddAddType(FlatBufferBuilder builder, int addType) { builder.AddInt(2, addType, 0); }
  public static void AddSubStandardProperty(FlatBufferBuilder builder, int subStandardProperty) { builder.AddInt(3, subStandardProperty, 0); }
  public static Offset<WWParser.Defs.PhantomSubProperty> EndPhantomSubProperty(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PhantomSubProperty>(o);
  }
  public PhantomSubPropertyT UnPack() {
    var _o = new PhantomSubPropertyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PhantomSubPropertyT _o) {
    _o.Id = this.Id;
    _o.PropId = this.PropId;
    _o.AddType = this.AddType;
    _o.SubStandardProperty = this.SubStandardProperty;
  }
  public static Offset<WWParser.Defs.PhantomSubProperty> Pack(FlatBufferBuilder builder, PhantomSubPropertyT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PhantomSubProperty>);
    return CreatePhantomSubProperty(
      builder,
      _o.Id,
      _o.PropId,
      _o.AddType,
      _o.SubStandardProperty);
  }
}

public class PhantomSubPropertyT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("prop_id")]
  public int PropId { get; set; }
  [Newtonsoft.Json.JsonProperty("add_type")]
  public int AddType { get; set; }
  [Newtonsoft.Json.JsonProperty("sub_standard_property")]
  public int SubStandardProperty { get; set; }

  public PhantomSubPropertyT() {
    this.Id = 0;
    this.PropId = 0;
    this.AddType = 0;
    this.SubStandardProperty = 0;
  }
}


static public class PhantomSubPropertyVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*PropId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*AddType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*SubStandardProperty*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
