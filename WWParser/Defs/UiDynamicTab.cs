// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct UiDynamicTab : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static UiDynamicTab GetRootAsUiDynamicTab(ByteBuffer _bb) { return GetRootAsUiDynamicTab(_bb, new UiDynamicTab()); }
  public static UiDynamicTab GetRootAsUiDynamicTab(ByteBuffer _bb, UiDynamicTab obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UiDynamicTab __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ParentViewName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParentViewNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetParentViewNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetParentViewNameArray() { return __p.__vector_as_array<byte>(6); }
  public string ChildViewName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChildViewNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetChildViewNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetChildViewNameArray() { return __p.__vector_as_array<byte>(8); }
  public string TabName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTabNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTabNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTabNameArray() { return __p.__vector_as_array<byte>(10); }
  public int TabIndex { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FunctionId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string UiCameraSettingsName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUiCameraSettingsNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetUiCameraSettingsNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetUiCameraSettingsNameArray() { return __p.__vector_as_array<byte>(16); }
  public string UiCameraBlendName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUiCameraBlendNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetUiCameraBlendNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetUiCameraBlendNameArray() { return __p.__vector_as_array<byte>(18); }
  public string BackViewBlendName { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBackViewBlendNameBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetBackViewBlendNameBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetBackViewBlendNameArray() { return __p.__vector_as_array<byte>(20); }
  public string Icon { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(22); }
  public string LightSequence { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLightSequenceBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetLightSequenceBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetLightSequenceArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<WWParser.Defs.UiDynamicTab> CreateUiDynamicTab(FlatBufferBuilder builder,
      int id = 0,
      StringOffset parent_view_nameOffset = default(StringOffset),
      StringOffset child_view_nameOffset = default(StringOffset),
      StringOffset tab_nameOffset = default(StringOffset),
      int tab_index = 0,
      int function_id = 0,
      StringOffset ui_camera_settings_nameOffset = default(StringOffset),
      StringOffset ui_camera_blend_nameOffset = default(StringOffset),
      StringOffset back_view_blend_nameOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset light_sequenceOffset = default(StringOffset)) {
    builder.StartTable(11);
    UiDynamicTab.AddLightSequence(builder, light_sequenceOffset);
    UiDynamicTab.AddIcon(builder, iconOffset);
    UiDynamicTab.AddBackViewBlendName(builder, back_view_blend_nameOffset);
    UiDynamicTab.AddUiCameraBlendName(builder, ui_camera_blend_nameOffset);
    UiDynamicTab.AddUiCameraSettingsName(builder, ui_camera_settings_nameOffset);
    UiDynamicTab.AddFunctionId(builder, function_id);
    UiDynamicTab.AddTabIndex(builder, tab_index);
    UiDynamicTab.AddTabName(builder, tab_nameOffset);
    UiDynamicTab.AddChildViewName(builder, child_view_nameOffset);
    UiDynamicTab.AddParentViewName(builder, parent_view_nameOffset);
    UiDynamicTab.AddId(builder, id);
    return UiDynamicTab.EndUiDynamicTab(builder);
  }

  public static void StartUiDynamicTab(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddParentViewName(FlatBufferBuilder builder, StringOffset parentViewNameOffset) { builder.AddOffset(1, parentViewNameOffset.Value, 0); }
  public static void AddChildViewName(FlatBufferBuilder builder, StringOffset childViewNameOffset) { builder.AddOffset(2, childViewNameOffset.Value, 0); }
  public static void AddTabName(FlatBufferBuilder builder, StringOffset tabNameOffset) { builder.AddOffset(3, tabNameOffset.Value, 0); }
  public static void AddTabIndex(FlatBufferBuilder builder, int tabIndex) { builder.AddInt(4, tabIndex, 0); }
  public static void AddFunctionId(FlatBufferBuilder builder, int functionId) { builder.AddInt(5, functionId, 0); }
  public static void AddUiCameraSettingsName(FlatBufferBuilder builder, StringOffset uiCameraSettingsNameOffset) { builder.AddOffset(6, uiCameraSettingsNameOffset.Value, 0); }
  public static void AddUiCameraBlendName(FlatBufferBuilder builder, StringOffset uiCameraBlendNameOffset) { builder.AddOffset(7, uiCameraBlendNameOffset.Value, 0); }
  public static void AddBackViewBlendName(FlatBufferBuilder builder, StringOffset backViewBlendNameOffset) { builder.AddOffset(8, backViewBlendNameOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(9, iconOffset.Value, 0); }
  public static void AddLightSequence(FlatBufferBuilder builder, StringOffset lightSequenceOffset) { builder.AddOffset(10, lightSequenceOffset.Value, 0); }
  public static Offset<WWParser.Defs.UiDynamicTab> EndUiDynamicTab(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.UiDynamicTab>(o);
  }
  public UiDynamicTabT UnPack() {
    var _o = new UiDynamicTabT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(UiDynamicTabT _o) {
    _o.Id = this.Id;
    _o.ParentViewName = this.ParentViewName;
    _o.ChildViewName = this.ChildViewName;
    _o.TabName = this.TabName;
    _o.TabIndex = this.TabIndex;
    _o.FunctionId = this.FunctionId;
    _o.UiCameraSettingsName = this.UiCameraSettingsName;
    _o.UiCameraBlendName = this.UiCameraBlendName;
    _o.BackViewBlendName = this.BackViewBlendName;
    _o.Icon = this.Icon;
    _o.LightSequence = this.LightSequence;
  }
  public static Offset<WWParser.Defs.UiDynamicTab> Pack(FlatBufferBuilder builder, UiDynamicTabT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.UiDynamicTab>);
    var _parent_view_name = _o.ParentViewName == null ? default(StringOffset) : builder.CreateString(_o.ParentViewName);
    var _child_view_name = _o.ChildViewName == null ? default(StringOffset) : builder.CreateString(_o.ChildViewName);
    var _tab_name = _o.TabName == null ? default(StringOffset) : builder.CreateString(_o.TabName);
    var _ui_camera_settings_name = _o.UiCameraSettingsName == null ? default(StringOffset) : builder.CreateString(_o.UiCameraSettingsName);
    var _ui_camera_blend_name = _o.UiCameraBlendName == null ? default(StringOffset) : builder.CreateString(_o.UiCameraBlendName);
    var _back_view_blend_name = _o.BackViewBlendName == null ? default(StringOffset) : builder.CreateString(_o.BackViewBlendName);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _light_sequence = _o.LightSequence == null ? default(StringOffset) : builder.CreateString(_o.LightSequence);
    return CreateUiDynamicTab(
      builder,
      _o.Id,
      _parent_view_name,
      _child_view_name,
      _tab_name,
      _o.TabIndex,
      _o.FunctionId,
      _ui_camera_settings_name,
      _ui_camera_blend_name,
      _back_view_blend_name,
      _icon,
      _light_sequence);
  }
}

public class UiDynamicTabT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("parent_view_name")]
  public string ParentViewName { get; set; }
  [Newtonsoft.Json.JsonProperty("child_view_name")]
  public string ChildViewName { get; set; }
  [Newtonsoft.Json.JsonProperty("tab_name")]
  public string TabName { get; set; }
  [Newtonsoft.Json.JsonProperty("tab_index")]
  public int TabIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("function_id")]
  public int FunctionId { get; set; }
  [Newtonsoft.Json.JsonProperty("ui_camera_settings_name")]
  public string UiCameraSettingsName { get; set; }
  [Newtonsoft.Json.JsonProperty("ui_camera_blend_name")]
  public string UiCameraBlendName { get; set; }
  [Newtonsoft.Json.JsonProperty("back_view_blend_name")]
  public string BackViewBlendName { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("light_sequence")]
  public string LightSequence { get; set; }

  public UiDynamicTabT() {
    this.Id = 0;
    this.ParentViewName = null;
    this.ChildViewName = null;
    this.TabName = null;
    this.TabIndex = 0;
    this.FunctionId = 0;
    this.UiCameraSettingsName = null;
    this.UiCameraBlendName = null;
    this.BackViewBlendName = null;
    this.Icon = null;
    this.LightSequence = null;
  }
}


static public class UiDynamicTabVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*ParentViewName*/, false)
      && verifier.VerifyString(tablePos, 8 /*ChildViewName*/, false)
      && verifier.VerifyString(tablePos, 10 /*TabName*/, false)
      && verifier.VerifyField(tablePos, 12 /*TabIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*FunctionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*UiCameraSettingsName*/, false)
      && verifier.VerifyString(tablePos, 18 /*UiCameraBlendName*/, false)
      && verifier.VerifyString(tablePos, 20 /*BackViewBlendName*/, false)
      && verifier.VerifyString(tablePos, 22 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 24 /*LightSequence*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
