// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GamePlayScanComposite : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GamePlayScanComposite GetRootAsGamePlayScanComposite(ByteBuffer _bb) { return GetRootAsGamePlayScanComposite(_bb, new GamePlayScanComposite()); }
  public static GamePlayScanComposite GetRootAsGamePlayScanComposite(ByteBuffer _bb, GamePlayScanComposite obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GamePlayScanComposite __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int UId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ScanInfos(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ScanInfosLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetScanInfosBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetScanInfosBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetScanInfosArray() { return __p.__vector_as_array<int>(6); }
  public string ItemMaterialDataPath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetItemMaterialDataPathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetItemMaterialDataPathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetItemMaterialDataPathArray() { return __p.__vector_as_array<byte>(8); }
  public string NearVoiceEffectPath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNearVoiceEffectPathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNearVoiceEffectPathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNearVoiceEffectPathArray() { return __p.__vector_as_array<byte>(10); }
  public string FarVoiceEffectPath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFarVoiceEffectPathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetFarVoiceEffectPathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetFarVoiceEffectPathArray() { return __p.__vector_as_array<byte>(12); }
  public string ScanConcealEffectPath { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScanConcealEffectPathBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetScanConcealEffectPathBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetScanConcealEffectPathArray() { return __p.__vector_as_array<byte>(14); }
  public float InteractionEffectInterval { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)8.0f; } }
  public bool ShowDistance { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ShowInteractionEffect { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ClampToEllipse { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ScanAudioEvent { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScanAudioEventBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetScanAudioEventBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetScanAudioEventArray() { return __p.__vector_as_array<byte>(24); }
  public bool TriggerRoleAudio { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.GamePlayScanComposite> CreateGamePlayScanComposite(FlatBufferBuilder builder,
      int u_id = 0,
      VectorOffset scan_infosOffset = default(VectorOffset),
      StringOffset item_material_data_pathOffset = default(StringOffset),
      StringOffset near_voice_effect_pathOffset = default(StringOffset),
      StringOffset far_voice_effect_pathOffset = default(StringOffset),
      StringOffset scan_conceal_effect_pathOffset = default(StringOffset),
      float interaction_effect_interval = 8.0f,
      bool show_distance = false,
      bool show_interaction_effect = false,
      bool clamp_to_ellipse = false,
      StringOffset scan_audio_eventOffset = default(StringOffset),
      bool trigger_role_audio = false) {
    builder.StartTable(12);
    GamePlayScanComposite.AddScanAudioEvent(builder, scan_audio_eventOffset);
    GamePlayScanComposite.AddInteractionEffectInterval(builder, interaction_effect_interval);
    GamePlayScanComposite.AddScanConcealEffectPath(builder, scan_conceal_effect_pathOffset);
    GamePlayScanComposite.AddFarVoiceEffectPath(builder, far_voice_effect_pathOffset);
    GamePlayScanComposite.AddNearVoiceEffectPath(builder, near_voice_effect_pathOffset);
    GamePlayScanComposite.AddItemMaterialDataPath(builder, item_material_data_pathOffset);
    GamePlayScanComposite.AddScanInfos(builder, scan_infosOffset);
    GamePlayScanComposite.AddUId(builder, u_id);
    GamePlayScanComposite.AddTriggerRoleAudio(builder, trigger_role_audio);
    GamePlayScanComposite.AddClampToEllipse(builder, clamp_to_ellipse);
    GamePlayScanComposite.AddShowInteractionEffect(builder, show_interaction_effect);
    GamePlayScanComposite.AddShowDistance(builder, show_distance);
    return GamePlayScanComposite.EndGamePlayScanComposite(builder);
  }

  public static void StartGamePlayScanComposite(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddUId(FlatBufferBuilder builder, int uId) { builder.AddInt(0, uId, 0); }
  public static void AddScanInfos(FlatBufferBuilder builder, VectorOffset scanInfosOffset) { builder.AddOffset(1, scanInfosOffset.Value, 0); }
  public static VectorOffset CreateScanInfosVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateScanInfosVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateScanInfosVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateScanInfosVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartScanInfosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddItemMaterialDataPath(FlatBufferBuilder builder, StringOffset itemMaterialDataPathOffset) { builder.AddOffset(2, itemMaterialDataPathOffset.Value, 0); }
  public static void AddNearVoiceEffectPath(FlatBufferBuilder builder, StringOffset nearVoiceEffectPathOffset) { builder.AddOffset(3, nearVoiceEffectPathOffset.Value, 0); }
  public static void AddFarVoiceEffectPath(FlatBufferBuilder builder, StringOffset farVoiceEffectPathOffset) { builder.AddOffset(4, farVoiceEffectPathOffset.Value, 0); }
  public static void AddScanConcealEffectPath(FlatBufferBuilder builder, StringOffset scanConcealEffectPathOffset) { builder.AddOffset(5, scanConcealEffectPathOffset.Value, 0); }
  public static void AddInteractionEffectInterval(FlatBufferBuilder builder, float interactionEffectInterval) { builder.AddFloat(6, interactionEffectInterval, 8.0f); }
  public static void AddShowDistance(FlatBufferBuilder builder, bool showDistance) { builder.AddBool(7, showDistance, false); }
  public static void AddShowInteractionEffect(FlatBufferBuilder builder, bool showInteractionEffect) { builder.AddBool(8, showInteractionEffect, false); }
  public static void AddClampToEllipse(FlatBufferBuilder builder, bool clampToEllipse) { builder.AddBool(9, clampToEllipse, false); }
  public static void AddScanAudioEvent(FlatBufferBuilder builder, StringOffset scanAudioEventOffset) { builder.AddOffset(10, scanAudioEventOffset.Value, 0); }
  public static void AddTriggerRoleAudio(FlatBufferBuilder builder, bool triggerRoleAudio) { builder.AddBool(11, triggerRoleAudio, false); }
  public static Offset<WWParser.Defs.GamePlayScanComposite> EndGamePlayScanComposite(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.GamePlayScanComposite>(o);
  }
  public GamePlayScanCompositeT UnPack() {
    var _o = new GamePlayScanCompositeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GamePlayScanCompositeT _o) {
    _o.UId = this.UId;
    _o.ScanInfos = new List<int>();
    for (var _j = 0; _j < this.ScanInfosLength; ++_j) {_o.ScanInfos.Add(this.ScanInfos(_j));}
    _o.ItemMaterialDataPath = this.ItemMaterialDataPath;
    _o.NearVoiceEffectPath = this.NearVoiceEffectPath;
    _o.FarVoiceEffectPath = this.FarVoiceEffectPath;
    _o.ScanConcealEffectPath = this.ScanConcealEffectPath;
    _o.InteractionEffectInterval = this.InteractionEffectInterval;
    _o.ShowDistance = this.ShowDistance;
    _o.ShowInteractionEffect = this.ShowInteractionEffect;
    _o.ClampToEllipse = this.ClampToEllipse;
    _o.ScanAudioEvent = this.ScanAudioEvent;
    _o.TriggerRoleAudio = this.TriggerRoleAudio;
  }
  public static Offset<WWParser.Defs.GamePlayScanComposite> Pack(FlatBufferBuilder builder, GamePlayScanCompositeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.GamePlayScanComposite>);
    var _scan_infos = default(VectorOffset);
    if (_o.ScanInfos != null) {
      var __scan_infos = _o.ScanInfos.ToArray();
      _scan_infos = CreateScanInfosVector(builder, __scan_infos);
    }
    var _item_material_data_path = _o.ItemMaterialDataPath == null ? default(StringOffset) : builder.CreateString(_o.ItemMaterialDataPath);
    var _near_voice_effect_path = _o.NearVoiceEffectPath == null ? default(StringOffset) : builder.CreateString(_o.NearVoiceEffectPath);
    var _far_voice_effect_path = _o.FarVoiceEffectPath == null ? default(StringOffset) : builder.CreateString(_o.FarVoiceEffectPath);
    var _scan_conceal_effect_path = _o.ScanConcealEffectPath == null ? default(StringOffset) : builder.CreateString(_o.ScanConcealEffectPath);
    var _scan_audio_event = _o.ScanAudioEvent == null ? default(StringOffset) : builder.CreateString(_o.ScanAudioEvent);
    return CreateGamePlayScanComposite(
      builder,
      _o.UId,
      _scan_infos,
      _item_material_data_path,
      _near_voice_effect_path,
      _far_voice_effect_path,
      _scan_conceal_effect_path,
      _o.InteractionEffectInterval,
      _o.ShowDistance,
      _o.ShowInteractionEffect,
      _o.ClampToEllipse,
      _scan_audio_event,
      _o.TriggerRoleAudio);
  }
}

public class GamePlayScanCompositeT
{
  [Newtonsoft.Json.JsonProperty("u_id")]
  public int UId { get; set; }
  [Newtonsoft.Json.JsonProperty("scan_infos")]
  public List<int> ScanInfos { get; set; }
  [Newtonsoft.Json.JsonProperty("item_material_data_path")]
  public string ItemMaterialDataPath { get; set; }
  [Newtonsoft.Json.JsonProperty("near_voice_effect_path")]
  public string NearVoiceEffectPath { get; set; }
  [Newtonsoft.Json.JsonProperty("far_voice_effect_path")]
  public string FarVoiceEffectPath { get; set; }
  [Newtonsoft.Json.JsonProperty("scan_conceal_effect_path")]
  public string ScanConcealEffectPath { get; set; }
  [Newtonsoft.Json.JsonProperty("interaction_effect_interval")]
  public float InteractionEffectInterval { get; set; }
  [Newtonsoft.Json.JsonProperty("show_distance")]
  public bool ShowDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("show_interaction_effect")]
  public bool ShowInteractionEffect { get; set; }
  [Newtonsoft.Json.JsonProperty("clamp_to_ellipse")]
  public bool ClampToEllipse { get; set; }
  [Newtonsoft.Json.JsonProperty("scan_audio_event")]
  public string ScanAudioEvent { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_role_audio")]
  public bool TriggerRoleAudio { get; set; }

  public GamePlayScanCompositeT() {
    this.UId = 0;
    this.ScanInfos = null;
    this.ItemMaterialDataPath = null;
    this.NearVoiceEffectPath = null;
    this.FarVoiceEffectPath = null;
    this.ScanConcealEffectPath = null;
    this.InteractionEffectInterval = 8.0f;
    this.ShowDistance = false;
    this.ShowInteractionEffect = false;
    this.ClampToEllipse = false;
    this.ScanAudioEvent = null;
    this.TriggerRoleAudio = false;
  }
}


static public class GamePlayScanCompositeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*ScanInfos*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 8 /*ItemMaterialDataPath*/, false)
      && verifier.VerifyString(tablePos, 10 /*NearVoiceEffectPath*/, false)
      && verifier.VerifyString(tablePos, 12 /*FarVoiceEffectPath*/, false)
      && verifier.VerifyString(tablePos, 14 /*ScanConcealEffectPath*/, false)
      && verifier.VerifyField(tablePos, 16 /*InteractionEffectInterval*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*ShowDistance*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 20 /*ShowInteractionEffect*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*ClampToEllipse*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 24 /*ScanAudioEvent*/, false)
      && verifier.VerifyField(tablePos, 26 /*TriggerRoleAudio*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
