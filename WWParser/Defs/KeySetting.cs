// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct KeySetting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static KeySetting GetRootAsKeySetting(ByteBuffer _bb) { return GetRootAsKeySetting(_bb, new KeySetting()); }
  public static KeySetting GetRootAsKeySetting(ByteBuffer _bb, KeySetting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KeySetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TypeId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int InputControllerType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SortId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(12); }
  public int OpenViewType { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ButtonTextId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetButtonTextIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetButtonTextIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetButtonTextIdArray() { return __p.__vector_as_array<byte>(16); }
  public int ActionOrAxis { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ActionOrAxisName { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActionOrAxisNameBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetActionOrAxisNameBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetActionOrAxisNameArray() { return __p.__vector_as_array<byte>(20); }
  public bool CanCombination { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int PcKeyIndex { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int XBoxKeyIndex { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConnectedKeySettingId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConnectedKeySettingIdList(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ConnectedKeySettingIdListLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetConnectedKeySettingIdListBytes() { return __p.__vector_as_span<int>(30, 4); }
#else
  public ArraySegment<byte>? GetConnectedKeySettingIdListBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public int[] GetConnectedKeySettingIdListArray() { return __p.__vector_as_array<int>(30); }
  public float PcAxisValue { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float XBoxAxisValue { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool IsLock { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string BothActionName(int j) { int o = __p.__offset(38); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BothActionNameLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool IsCheckSameKey { get { int o = __p.__offset(40); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool CanDisable { get { int o = __p.__offset(42); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string AllowKeys(int j) { int o = __p.__offset(44); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AllowKeysLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string AllowMainKeys(int j) { int o = __p.__offset(46); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AllowMainKeysLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string AllowSecondKeys(int j) { int o = __p.__offset(48); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AllowSecondKeysLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string AllowKeysPool { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAllowKeysPoolBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetAllowKeysPoolBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetAllowKeysPoolArray() { return __p.__vector_as_array<byte>(50); }
  public string AllowMainKeysPool { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAllowMainKeysPoolBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetAllowMainKeysPoolBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetAllowMainKeysPoolArray() { return __p.__vector_as_array<byte>(52); }
  public string AllowSecondKeysPool { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAllowSecondKeysPoolBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetAllowSecondKeysPoolBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetAllowSecondKeysPoolArray() { return __p.__vector_as_array<byte>(54); }
  public string DetailTextId { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDetailTextIdBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetDetailTextIdBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetDetailTextIdArray() { return __p.__vector_as_array<byte>(56); }
  public bool OnlyWorkNotShow { get { int o = __p.__offset(58); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.KeySetting> CreateKeySetting(FlatBufferBuilder builder,
      int id = 0,
      int type_id = 1,
      int input_controller_type = 0,
      int sort_id = 0,
      StringOffset nameOffset = default(StringOffset),
      int open_view_type = 0,
      StringOffset button_text_idOffset = default(StringOffset),
      int action_or_axis = 0,
      StringOffset action_or_axis_nameOffset = default(StringOffset),
      bool can_combination = false,
      int pc_key_index = 0,
      int x_box_key_index = 0,
      int connected_key_setting_id = 0,
      VectorOffset connected_key_setting_id_listOffset = default(VectorOffset),
      float pc_axis_value = 0.0f,
      float x_box_axis_value = 0.0f,
      bool is_lock = false,
      VectorOffset both_action_nameOffset = default(VectorOffset),
      bool is_check_same_key = false,
      bool can_disable = false,
      VectorOffset allow_keysOffset = default(VectorOffset),
      VectorOffset allow_main_keysOffset = default(VectorOffset),
      VectorOffset allow_second_keysOffset = default(VectorOffset),
      StringOffset allow_keys_poolOffset = default(StringOffset),
      StringOffset allow_main_keys_poolOffset = default(StringOffset),
      StringOffset allow_second_keys_poolOffset = default(StringOffset),
      StringOffset detail_text_idOffset = default(StringOffset),
      bool only_work_not_show = false) {
    builder.StartTable(28);
    KeySetting.AddDetailTextId(builder, detail_text_idOffset);
    KeySetting.AddAllowSecondKeysPool(builder, allow_second_keys_poolOffset);
    KeySetting.AddAllowMainKeysPool(builder, allow_main_keys_poolOffset);
    KeySetting.AddAllowKeysPool(builder, allow_keys_poolOffset);
    KeySetting.AddAllowSecondKeys(builder, allow_second_keysOffset);
    KeySetting.AddAllowMainKeys(builder, allow_main_keysOffset);
    KeySetting.AddAllowKeys(builder, allow_keysOffset);
    KeySetting.AddBothActionName(builder, both_action_nameOffset);
    KeySetting.AddXBoxAxisValue(builder, x_box_axis_value);
    KeySetting.AddPcAxisValue(builder, pc_axis_value);
    KeySetting.AddConnectedKeySettingIdList(builder, connected_key_setting_id_listOffset);
    KeySetting.AddConnectedKeySettingId(builder, connected_key_setting_id);
    KeySetting.AddXBoxKeyIndex(builder, x_box_key_index);
    KeySetting.AddPcKeyIndex(builder, pc_key_index);
    KeySetting.AddActionOrAxisName(builder, action_or_axis_nameOffset);
    KeySetting.AddActionOrAxis(builder, action_or_axis);
    KeySetting.AddButtonTextId(builder, button_text_idOffset);
    KeySetting.AddOpenViewType(builder, open_view_type);
    KeySetting.AddName(builder, nameOffset);
    KeySetting.AddSortId(builder, sort_id);
    KeySetting.AddInputControllerType(builder, input_controller_type);
    KeySetting.AddTypeId(builder, type_id);
    KeySetting.AddId(builder, id);
    KeySetting.AddOnlyWorkNotShow(builder, only_work_not_show);
    KeySetting.AddCanDisable(builder, can_disable);
    KeySetting.AddIsCheckSameKey(builder, is_check_same_key);
    KeySetting.AddIsLock(builder, is_lock);
    KeySetting.AddCanCombination(builder, can_combination);
    return KeySetting.EndKeySetting(builder);
  }

  public static void StartKeySetting(FlatBufferBuilder builder) { builder.StartTable(28); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTypeId(FlatBufferBuilder builder, int typeId) { builder.AddInt(1, typeId, 1); }
  public static void AddInputControllerType(FlatBufferBuilder builder, int inputControllerType) { builder.AddInt(2, inputControllerType, 0); }
  public static void AddSortId(FlatBufferBuilder builder, int sortId) { builder.AddInt(3, sortId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(4, nameOffset.Value, 0); }
  public static void AddOpenViewType(FlatBufferBuilder builder, int openViewType) { builder.AddInt(5, openViewType, 0); }
  public static void AddButtonTextId(FlatBufferBuilder builder, StringOffset buttonTextIdOffset) { builder.AddOffset(6, buttonTextIdOffset.Value, 0); }
  public static void AddActionOrAxis(FlatBufferBuilder builder, int actionOrAxis) { builder.AddInt(7, actionOrAxis, 0); }
  public static void AddActionOrAxisName(FlatBufferBuilder builder, StringOffset actionOrAxisNameOffset) { builder.AddOffset(8, actionOrAxisNameOffset.Value, 0); }
  public static void AddCanCombination(FlatBufferBuilder builder, bool canCombination) { builder.AddBool(9, canCombination, false); }
  public static void AddPcKeyIndex(FlatBufferBuilder builder, int pcKeyIndex) { builder.AddInt(10, pcKeyIndex, 0); }
  public static void AddXBoxKeyIndex(FlatBufferBuilder builder, int xBoxKeyIndex) { builder.AddInt(11, xBoxKeyIndex, 0); }
  public static void AddConnectedKeySettingId(FlatBufferBuilder builder, int connectedKeySettingId) { builder.AddInt(12, connectedKeySettingId, 0); }
  public static void AddConnectedKeySettingIdList(FlatBufferBuilder builder, VectorOffset connectedKeySettingIdListOffset) { builder.AddOffset(13, connectedKeySettingIdListOffset.Value, 0); }
  public static VectorOffset CreateConnectedKeySettingIdListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConnectedKeySettingIdListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConnectedKeySettingIdListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConnectedKeySettingIdListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConnectedKeySettingIdListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPcAxisValue(FlatBufferBuilder builder, float pcAxisValue) { builder.AddFloat(14, pcAxisValue, 0.0f); }
  public static void AddXBoxAxisValue(FlatBufferBuilder builder, float xBoxAxisValue) { builder.AddFloat(15, xBoxAxisValue, 0.0f); }
  public static void AddIsLock(FlatBufferBuilder builder, bool isLock) { builder.AddBool(16, isLock, false); }
  public static void AddBothActionName(FlatBufferBuilder builder, VectorOffset bothActionNameOffset) { builder.AddOffset(17, bothActionNameOffset.Value, 0); }
  public static VectorOffset CreateBothActionNameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBothActionNameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBothActionNameVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBothActionNameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBothActionNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsCheckSameKey(FlatBufferBuilder builder, bool isCheckSameKey) { builder.AddBool(18, isCheckSameKey, false); }
  public static void AddCanDisable(FlatBufferBuilder builder, bool canDisable) { builder.AddBool(19, canDisable, false); }
  public static void AddAllowKeys(FlatBufferBuilder builder, VectorOffset allowKeysOffset) { builder.AddOffset(20, allowKeysOffset.Value, 0); }
  public static VectorOffset CreateAllowKeysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAllowKeysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllowKeysVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllowKeysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAllowKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAllowMainKeys(FlatBufferBuilder builder, VectorOffset allowMainKeysOffset) { builder.AddOffset(21, allowMainKeysOffset.Value, 0); }
  public static VectorOffset CreateAllowMainKeysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAllowMainKeysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllowMainKeysVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllowMainKeysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAllowMainKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAllowSecondKeys(FlatBufferBuilder builder, VectorOffset allowSecondKeysOffset) { builder.AddOffset(22, allowSecondKeysOffset.Value, 0); }
  public static VectorOffset CreateAllowSecondKeysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAllowSecondKeysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllowSecondKeysVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllowSecondKeysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAllowSecondKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAllowKeysPool(FlatBufferBuilder builder, StringOffset allowKeysPoolOffset) { builder.AddOffset(23, allowKeysPoolOffset.Value, 0); }
  public static void AddAllowMainKeysPool(FlatBufferBuilder builder, StringOffset allowMainKeysPoolOffset) { builder.AddOffset(24, allowMainKeysPoolOffset.Value, 0); }
  public static void AddAllowSecondKeysPool(FlatBufferBuilder builder, StringOffset allowSecondKeysPoolOffset) { builder.AddOffset(25, allowSecondKeysPoolOffset.Value, 0); }
  public static void AddDetailTextId(FlatBufferBuilder builder, StringOffset detailTextIdOffset) { builder.AddOffset(26, detailTextIdOffset.Value, 0); }
  public static void AddOnlyWorkNotShow(FlatBufferBuilder builder, bool onlyWorkNotShow) { builder.AddBool(27, onlyWorkNotShow, false); }
  public static Offset<WWParser.Defs.KeySetting> EndKeySetting(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.KeySetting>(o);
  }
  public KeySettingT UnPack() {
    var _o = new KeySettingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(KeySettingT _o) {
    _o.Id = this.Id;
    _o.TypeId = this.TypeId;
    _o.InputControllerType = this.InputControllerType;
    _o.SortId = this.SortId;
    _o.Name = this.Name;
    _o.OpenViewType = this.OpenViewType;
    _o.ButtonTextId = this.ButtonTextId;
    _o.ActionOrAxis = this.ActionOrAxis;
    _o.ActionOrAxisName = this.ActionOrAxisName;
    _o.CanCombination = this.CanCombination;
    _o.PcKeyIndex = this.PcKeyIndex;
    _o.XBoxKeyIndex = this.XBoxKeyIndex;
    _o.ConnectedKeySettingId = this.ConnectedKeySettingId;
    _o.ConnectedKeySettingIdList = new List<int>();
    for (var _j = 0; _j < this.ConnectedKeySettingIdListLength; ++_j) {_o.ConnectedKeySettingIdList.Add(this.ConnectedKeySettingIdList(_j));}
    _o.PcAxisValue = this.PcAxisValue;
    _o.XBoxAxisValue = this.XBoxAxisValue;
    _o.IsLock = this.IsLock;
    _o.BothActionName = new List<string>();
    for (var _j = 0; _j < this.BothActionNameLength; ++_j) {_o.BothActionName.Add(this.BothActionName(_j));}
    _o.IsCheckSameKey = this.IsCheckSameKey;
    _o.CanDisable = this.CanDisable;
    _o.AllowKeys = new List<string>();
    for (var _j = 0; _j < this.AllowKeysLength; ++_j) {_o.AllowKeys.Add(this.AllowKeys(_j));}
    _o.AllowMainKeys = new List<string>();
    for (var _j = 0; _j < this.AllowMainKeysLength; ++_j) {_o.AllowMainKeys.Add(this.AllowMainKeys(_j));}
    _o.AllowSecondKeys = new List<string>();
    for (var _j = 0; _j < this.AllowSecondKeysLength; ++_j) {_o.AllowSecondKeys.Add(this.AllowSecondKeys(_j));}
    _o.AllowKeysPool = this.AllowKeysPool;
    _o.AllowMainKeysPool = this.AllowMainKeysPool;
    _o.AllowSecondKeysPool = this.AllowSecondKeysPool;
    _o.DetailTextId = this.DetailTextId;
    _o.OnlyWorkNotShow = this.OnlyWorkNotShow;
  }
  public static Offset<WWParser.Defs.KeySetting> Pack(FlatBufferBuilder builder, KeySettingT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.KeySetting>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _button_text_id = _o.ButtonTextId == null ? default(StringOffset) : builder.CreateString(_o.ButtonTextId);
    var _action_or_axis_name = _o.ActionOrAxisName == null ? default(StringOffset) : builder.CreateString(_o.ActionOrAxisName);
    var _connected_key_setting_id_list = default(VectorOffset);
    if (_o.ConnectedKeySettingIdList != null) {
      var __connected_key_setting_id_list = _o.ConnectedKeySettingIdList.ToArray();
      _connected_key_setting_id_list = CreateConnectedKeySettingIdListVector(builder, __connected_key_setting_id_list);
    }
    var _both_action_name = default(VectorOffset);
    if (_o.BothActionName != null) {
      var __both_action_name = new StringOffset[_o.BothActionName.Count];
      for (var _j = 0; _j < __both_action_name.Length; ++_j) { __both_action_name[_j] = builder.CreateString(_o.BothActionName[_j]); }
      _both_action_name = CreateBothActionNameVector(builder, __both_action_name);
    }
    var _allow_keys = default(VectorOffset);
    if (_o.AllowKeys != null) {
      var __allow_keys = new StringOffset[_o.AllowKeys.Count];
      for (var _j = 0; _j < __allow_keys.Length; ++_j) { __allow_keys[_j] = builder.CreateString(_o.AllowKeys[_j]); }
      _allow_keys = CreateAllowKeysVector(builder, __allow_keys);
    }
    var _allow_main_keys = default(VectorOffset);
    if (_o.AllowMainKeys != null) {
      var __allow_main_keys = new StringOffset[_o.AllowMainKeys.Count];
      for (var _j = 0; _j < __allow_main_keys.Length; ++_j) { __allow_main_keys[_j] = builder.CreateString(_o.AllowMainKeys[_j]); }
      _allow_main_keys = CreateAllowMainKeysVector(builder, __allow_main_keys);
    }
    var _allow_second_keys = default(VectorOffset);
    if (_o.AllowSecondKeys != null) {
      var __allow_second_keys = new StringOffset[_o.AllowSecondKeys.Count];
      for (var _j = 0; _j < __allow_second_keys.Length; ++_j) { __allow_second_keys[_j] = builder.CreateString(_o.AllowSecondKeys[_j]); }
      _allow_second_keys = CreateAllowSecondKeysVector(builder, __allow_second_keys);
    }
    var _allow_keys_pool = _o.AllowKeysPool == null ? default(StringOffset) : builder.CreateString(_o.AllowKeysPool);
    var _allow_main_keys_pool = _o.AllowMainKeysPool == null ? default(StringOffset) : builder.CreateString(_o.AllowMainKeysPool);
    var _allow_second_keys_pool = _o.AllowSecondKeysPool == null ? default(StringOffset) : builder.CreateString(_o.AllowSecondKeysPool);
    var _detail_text_id = _o.DetailTextId == null ? default(StringOffset) : builder.CreateString(_o.DetailTextId);
    return CreateKeySetting(
      builder,
      _o.Id,
      _o.TypeId,
      _o.InputControllerType,
      _o.SortId,
      _name,
      _o.OpenViewType,
      _button_text_id,
      _o.ActionOrAxis,
      _action_or_axis_name,
      _o.CanCombination,
      _o.PcKeyIndex,
      _o.XBoxKeyIndex,
      _o.ConnectedKeySettingId,
      _connected_key_setting_id_list,
      _o.PcAxisValue,
      _o.XBoxAxisValue,
      _o.IsLock,
      _both_action_name,
      _o.IsCheckSameKey,
      _o.CanDisable,
      _allow_keys,
      _allow_main_keys,
      _allow_second_keys,
      _allow_keys_pool,
      _allow_main_keys_pool,
      _allow_second_keys_pool,
      _detail_text_id,
      _o.OnlyWorkNotShow);
  }
}

public class KeySettingT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("type_id")]
  public int TypeId { get; set; }
  [Newtonsoft.Json.JsonProperty("input_controller_type")]
  public int InputControllerType { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_id")]
  public int SortId { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("open_view_type")]
  public int OpenViewType { get; set; }
  [Newtonsoft.Json.JsonProperty("button_text_id")]
  public string ButtonTextId { get; set; }
  [Newtonsoft.Json.JsonProperty("action_or_axis")]
  public int ActionOrAxis { get; set; }
  [Newtonsoft.Json.JsonProperty("action_or_axis_name")]
  public string ActionOrAxisName { get; set; }
  [Newtonsoft.Json.JsonProperty("can_combination")]
  public bool CanCombination { get; set; }
  [Newtonsoft.Json.JsonProperty("pc_key_index")]
  public int PcKeyIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("x_box_key_index")]
  public int XBoxKeyIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("connected_key_setting_id")]
  public int ConnectedKeySettingId { get; set; }
  [Newtonsoft.Json.JsonProperty("connected_key_setting_id_list")]
  public List<int> ConnectedKeySettingIdList { get; set; }
  [Newtonsoft.Json.JsonProperty("pc_axis_value")]
  public float PcAxisValue { get; set; }
  [Newtonsoft.Json.JsonProperty("x_box_axis_value")]
  public float XBoxAxisValue { get; set; }
  [Newtonsoft.Json.JsonProperty("is_lock")]
  public bool IsLock { get; set; }
  [Newtonsoft.Json.JsonProperty("both_action_name")]
  public List<string> BothActionName { get; set; }
  [Newtonsoft.Json.JsonProperty("is_check_same_key")]
  public bool IsCheckSameKey { get; set; }
  [Newtonsoft.Json.JsonProperty("can_disable")]
  public bool CanDisable { get; set; }
  [Newtonsoft.Json.JsonProperty("allow_keys")]
  public List<string> AllowKeys { get; set; }
  [Newtonsoft.Json.JsonProperty("allow_main_keys")]
  public List<string> AllowMainKeys { get; set; }
  [Newtonsoft.Json.JsonProperty("allow_second_keys")]
  public List<string> AllowSecondKeys { get; set; }
  [Newtonsoft.Json.JsonProperty("allow_keys_pool")]
  public string AllowKeysPool { get; set; }
  [Newtonsoft.Json.JsonProperty("allow_main_keys_pool")]
  public string AllowMainKeysPool { get; set; }
  [Newtonsoft.Json.JsonProperty("allow_second_keys_pool")]
  public string AllowSecondKeysPool { get; set; }
  [Newtonsoft.Json.JsonProperty("detail_text_id")]
  public string DetailTextId { get; set; }
  [Newtonsoft.Json.JsonProperty("only_work_not_show")]
  public bool OnlyWorkNotShow { get; set; }

  public KeySettingT() {
    this.Id = 0;
    this.TypeId = 1;
    this.InputControllerType = 0;
    this.SortId = 0;
    this.Name = null;
    this.OpenViewType = 0;
    this.ButtonTextId = null;
    this.ActionOrAxis = 0;
    this.ActionOrAxisName = null;
    this.CanCombination = false;
    this.PcKeyIndex = 0;
    this.XBoxKeyIndex = 0;
    this.ConnectedKeySettingId = 0;
    this.ConnectedKeySettingIdList = null;
    this.PcAxisValue = 0.0f;
    this.XBoxAxisValue = 0.0f;
    this.IsLock = false;
    this.BothActionName = null;
    this.IsCheckSameKey = false;
    this.CanDisable = false;
    this.AllowKeys = null;
    this.AllowMainKeys = null;
    this.AllowSecondKeys = null;
    this.AllowKeysPool = null;
    this.AllowMainKeysPool = null;
    this.AllowSecondKeysPool = null;
    this.DetailTextId = null;
    this.OnlyWorkNotShow = false;
  }
}


static public class KeySettingVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*TypeId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*InputControllerType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*SortId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*Name*/, false)
      && verifier.VerifyField(tablePos, 14 /*OpenViewType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*ButtonTextId*/, false)
      && verifier.VerifyField(tablePos, 18 /*ActionOrAxis*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*ActionOrAxisName*/, false)
      && verifier.VerifyField(tablePos, 22 /*CanCombination*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*PcKeyIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*XBoxKeyIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*ConnectedKeySettingId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 30 /*ConnectedKeySettingIdList*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 32 /*PcAxisValue*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*XBoxAxisValue*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*IsLock*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 38 /*BothActionName*/, false)
      && verifier.VerifyField(tablePos, 40 /*IsCheckSameKey*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 42 /*CanDisable*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 44 /*AllowKeys*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 46 /*AllowMainKeys*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 48 /*AllowSecondKeys*/, false)
      && verifier.VerifyString(tablePos, 50 /*AllowKeysPool*/, false)
      && verifier.VerifyString(tablePos, 52 /*AllowMainKeysPool*/, false)
      && verifier.VerifyString(tablePos, 54 /*AllowSecondKeysPool*/, false)
      && verifier.VerifyString(tablePos, 56 /*DetailTextId*/, false)
      && verifier.VerifyField(tablePos, 58 /*OnlyWorkNotShow*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
