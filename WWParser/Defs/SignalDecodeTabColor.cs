// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SignalDecodeTabColor : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SignalDecodeTabColor GetRootAsSignalDecodeTabColor(ByteBuffer _bb) { return GetRootAsSignalDecodeTabColor(_bb, new SignalDecodeTabColor()); }
  public static SignalDecodeTabColor GetRootAsSignalDecodeTabColor(ByteBuffer _bb, SignalDecodeTabColor obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SignalDecodeTabColor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ActiveColor { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActiveColorBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetActiveColorBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetActiveColorArray() { return __p.__vector_as_array<byte>(6); }
  public string DefaultColor { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDefaultColorBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDefaultColorBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDefaultColorArray() { return __p.__vector_as_array<byte>(8); }
  public string VacancyColor { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVacancyColorBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetVacancyColorBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetVacancyColorArray() { return __p.__vector_as_array<byte>(10); }
  public string HighlightColor { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHighlightColorBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetHighlightColorBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetHighlightColorArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<WWParser.Defs.SignalDecodeTabColor> CreateSignalDecodeTabColor(FlatBufferBuilder builder,
      int id = 0,
      StringOffset active_colorOffset = default(StringOffset),
      StringOffset default_colorOffset = default(StringOffset),
      StringOffset vacancy_colorOffset = default(StringOffset),
      StringOffset highlight_colorOffset = default(StringOffset)) {
    builder.StartTable(5);
    SignalDecodeTabColor.AddHighlightColor(builder, highlight_colorOffset);
    SignalDecodeTabColor.AddVacancyColor(builder, vacancy_colorOffset);
    SignalDecodeTabColor.AddDefaultColor(builder, default_colorOffset);
    SignalDecodeTabColor.AddActiveColor(builder, active_colorOffset);
    SignalDecodeTabColor.AddId(builder, id);
    return SignalDecodeTabColor.EndSignalDecodeTabColor(builder);
  }

  public static void StartSignalDecodeTabColor(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActiveColor(FlatBufferBuilder builder, StringOffset activeColorOffset) { builder.AddOffset(1, activeColorOffset.Value, 0); }
  public static void AddDefaultColor(FlatBufferBuilder builder, StringOffset defaultColorOffset) { builder.AddOffset(2, defaultColorOffset.Value, 0); }
  public static void AddVacancyColor(FlatBufferBuilder builder, StringOffset vacancyColorOffset) { builder.AddOffset(3, vacancyColorOffset.Value, 0); }
  public static void AddHighlightColor(FlatBufferBuilder builder, StringOffset highlightColorOffset) { builder.AddOffset(4, highlightColorOffset.Value, 0); }
  public static Offset<WWParser.Defs.SignalDecodeTabColor> EndSignalDecodeTabColor(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SignalDecodeTabColor>(o);
  }
  public SignalDecodeTabColorT UnPack() {
    var _o = new SignalDecodeTabColorT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SignalDecodeTabColorT _o) {
    _o.Id = this.Id;
    _o.ActiveColor = this.ActiveColor;
    _o.DefaultColor = this.DefaultColor;
    _o.VacancyColor = this.VacancyColor;
    _o.HighlightColor = this.HighlightColor;
  }
  public static Offset<WWParser.Defs.SignalDecodeTabColor> Pack(FlatBufferBuilder builder, SignalDecodeTabColorT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SignalDecodeTabColor>);
    var _active_color = _o.ActiveColor == null ? default(StringOffset) : builder.CreateString(_o.ActiveColor);
    var _default_color = _o.DefaultColor == null ? default(StringOffset) : builder.CreateString(_o.DefaultColor);
    var _vacancy_color = _o.VacancyColor == null ? default(StringOffset) : builder.CreateString(_o.VacancyColor);
    var _highlight_color = _o.HighlightColor == null ? default(StringOffset) : builder.CreateString(_o.HighlightColor);
    return CreateSignalDecodeTabColor(
      builder,
      _o.Id,
      _active_color,
      _default_color,
      _vacancy_color,
      _highlight_color);
  }
}

public class SignalDecodeTabColorT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("active_color")]
  public string ActiveColor { get; set; }
  [Newtonsoft.Json.JsonProperty("default_color")]
  public string DefaultColor { get; set; }
  [Newtonsoft.Json.JsonProperty("vacancy_color")]
  public string VacancyColor { get; set; }
  [Newtonsoft.Json.JsonProperty("highlight_color")]
  public string HighlightColor { get; set; }

  public SignalDecodeTabColorT() {
    this.Id = 0;
    this.ActiveColor = null;
    this.DefaultColor = null;
    this.VacancyColor = null;
    this.HighlightColor = null;
  }
}


static public class SignalDecodeTabColorVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*ActiveColor*/, false)
      && verifier.VerifyString(tablePos, 8 /*DefaultColor*/, false)
      && verifier.VerifyString(tablePos, 10 /*VacancyColor*/, false)
      && verifier.VerifyString(tablePos, 12 /*HighlightColor*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
