// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MultiMap : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MultiMap GetRootAsMultiMap(ByteBuffer _bb) { return GetRootAsMultiMap(_bb, new MultiMap()); }
  public static MultiMap GetRootAsMultiMap(ByteBuffer _bb, MultiMap obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MultiMap __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GravityFlip { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int Floor { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MapTilePath(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MapTilePathLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string MiniMapTilePath(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MiniMapTilePathLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Area(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AreaLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAreaBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetAreaBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetAreaArray() { return __p.__vector_as_array<int>(18); }
  public int Mark(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MarkLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetMarkBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetMarkBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetMarkArray() { return __p.__vector_as_array<int>(20); }
  public int ConditionId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string FloorName { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFloorNameBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetFloorNameBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetFloorNameArray() { return __p.__vector_as_array<byte>(24); }
  public string FloorIcon { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFloorIconBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetFloorIconBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetFloorIconArray() { return __p.__vector_as_array<byte>(26); }

  public static Offset<WWParser.Defs.MultiMap> CreateMultiMap(FlatBufferBuilder builder,
      int id = 0,
      int group_id = 0,
      int map_id = 0,
      int gravity_flip = 1,
      int floor = 0,
      VectorOffset map_tile_pathOffset = default(VectorOffset),
      VectorOffset mini_map_tile_pathOffset = default(VectorOffset),
      VectorOffset areaOffset = default(VectorOffset),
      VectorOffset markOffset = default(VectorOffset),
      int condition_id = 0,
      StringOffset floor_nameOffset = default(StringOffset),
      StringOffset floor_iconOffset = default(StringOffset)) {
    builder.StartTable(12);
    MultiMap.AddFloorIcon(builder, floor_iconOffset);
    MultiMap.AddFloorName(builder, floor_nameOffset);
    MultiMap.AddConditionId(builder, condition_id);
    MultiMap.AddMark(builder, markOffset);
    MultiMap.AddArea(builder, areaOffset);
    MultiMap.AddMiniMapTilePath(builder, mini_map_tile_pathOffset);
    MultiMap.AddMapTilePath(builder, map_tile_pathOffset);
    MultiMap.AddFloor(builder, floor);
    MultiMap.AddGravityFlip(builder, gravity_flip);
    MultiMap.AddMapId(builder, map_id);
    MultiMap.AddGroupId(builder, group_id);
    MultiMap.AddId(builder, id);
    return MultiMap.EndMultiMap(builder);
  }

  public static void StartMultiMap(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, int groupId) { builder.AddInt(1, groupId, 0); }
  public static void AddMapId(FlatBufferBuilder builder, int mapId) { builder.AddInt(2, mapId, 0); }
  public static void AddGravityFlip(FlatBufferBuilder builder, int gravityFlip) { builder.AddInt(3, gravityFlip, 1); }
  public static void AddFloor(FlatBufferBuilder builder, int floor) { builder.AddInt(4, floor, 0); }
  public static void AddMapTilePath(FlatBufferBuilder builder, VectorOffset mapTilePathOffset) { builder.AddOffset(5, mapTilePathOffset.Value, 0); }
  public static VectorOffset CreateMapTilePathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMapTilePathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMapTilePathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMapTilePathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMapTilePathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMiniMapTilePath(FlatBufferBuilder builder, VectorOffset miniMapTilePathOffset) { builder.AddOffset(6, miniMapTilePathOffset.Value, 0); }
  public static VectorOffset CreateMiniMapTilePathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMiniMapTilePathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMiniMapTilePathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMiniMapTilePathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMiniMapTilePathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddArea(FlatBufferBuilder builder, VectorOffset areaOffset) { builder.AddOffset(7, areaOffset.Value, 0); }
  public static VectorOffset CreateAreaVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAreaVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAreaVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAreaVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAreaVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMark(FlatBufferBuilder builder, VectorOffset markOffset) { builder.AddOffset(8, markOffset.Value, 0); }
  public static VectorOffset CreateMarkVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMarkVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMarkVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMarkVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMarkVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConditionId(FlatBufferBuilder builder, int conditionId) { builder.AddInt(9, conditionId, 0); }
  public static void AddFloorName(FlatBufferBuilder builder, StringOffset floorNameOffset) { builder.AddOffset(10, floorNameOffset.Value, 0); }
  public static void AddFloorIcon(FlatBufferBuilder builder, StringOffset floorIconOffset) { builder.AddOffset(11, floorIconOffset.Value, 0); }
  public static Offset<WWParser.Defs.MultiMap> EndMultiMap(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MultiMap>(o);
  }
  public MultiMapT UnPack() {
    var _o = new MultiMapT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MultiMapT _o) {
    _o.Id = this.Id;
    _o.GroupId = this.GroupId;
    _o.MapId = this.MapId;
    _o.GravityFlip = this.GravityFlip;
    _o.Floor = this.Floor;
    _o.MapTilePath = new List<string>();
    for (var _j = 0; _j < this.MapTilePathLength; ++_j) {_o.MapTilePath.Add(this.MapTilePath(_j));}
    _o.MiniMapTilePath = new List<string>();
    for (var _j = 0; _j < this.MiniMapTilePathLength; ++_j) {_o.MiniMapTilePath.Add(this.MiniMapTilePath(_j));}
    _o.Area = new List<int>();
    for (var _j = 0; _j < this.AreaLength; ++_j) {_o.Area.Add(this.Area(_j));}
    _o.Mark = new List<int>();
    for (var _j = 0; _j < this.MarkLength; ++_j) {_o.Mark.Add(this.Mark(_j));}
    _o.ConditionId = this.ConditionId;
    _o.FloorName = this.FloorName;
    _o.FloorIcon = this.FloorIcon;
  }
  public static Offset<WWParser.Defs.MultiMap> Pack(FlatBufferBuilder builder, MultiMapT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MultiMap>);
    var _map_tile_path = default(VectorOffset);
    if (_o.MapTilePath != null) {
      var __map_tile_path = new StringOffset[_o.MapTilePath.Count];
      for (var _j = 0; _j < __map_tile_path.Length; ++_j) { __map_tile_path[_j] = builder.CreateString(_o.MapTilePath[_j]); }
      _map_tile_path = CreateMapTilePathVector(builder, __map_tile_path);
    }
    var _mini_map_tile_path = default(VectorOffset);
    if (_o.MiniMapTilePath != null) {
      var __mini_map_tile_path = new StringOffset[_o.MiniMapTilePath.Count];
      for (var _j = 0; _j < __mini_map_tile_path.Length; ++_j) { __mini_map_tile_path[_j] = builder.CreateString(_o.MiniMapTilePath[_j]); }
      _mini_map_tile_path = CreateMiniMapTilePathVector(builder, __mini_map_tile_path);
    }
    var _area = default(VectorOffset);
    if (_o.Area != null) {
      var __area = _o.Area.ToArray();
      _area = CreateAreaVector(builder, __area);
    }
    var _mark = default(VectorOffset);
    if (_o.Mark != null) {
      var __mark = _o.Mark.ToArray();
      _mark = CreateMarkVector(builder, __mark);
    }
    var _floor_name = _o.FloorName == null ? default(StringOffset) : builder.CreateString(_o.FloorName);
    var _floor_icon = _o.FloorIcon == null ? default(StringOffset) : builder.CreateString(_o.FloorIcon);
    return CreateMultiMap(
      builder,
      _o.Id,
      _o.GroupId,
      _o.MapId,
      _o.GravityFlip,
      _o.Floor,
      _map_tile_path,
      _mini_map_tile_path,
      _area,
      _mark,
      _o.ConditionId,
      _floor_name,
      _floor_icon);
  }
}

public class MultiMapT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("group_id")]
  public int GroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("map_id")]
  public int MapId { get; set; }
  [Newtonsoft.Json.JsonProperty("gravity_flip")]
  public int GravityFlip { get; set; }
  [Newtonsoft.Json.JsonProperty("floor")]
  public int Floor { get; set; }
  [Newtonsoft.Json.JsonProperty("map_tile_path")]
  public List<string> MapTilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("mini_map_tile_path")]
  public List<string> MiniMapTilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("area")]
  public List<int> Area { get; set; }
  [Newtonsoft.Json.JsonProperty("mark")]
  public List<int> Mark { get; set; }
  [Newtonsoft.Json.JsonProperty("condition_id")]
  public int ConditionId { get; set; }
  [Newtonsoft.Json.JsonProperty("floor_name")]
  public string FloorName { get; set; }
  [Newtonsoft.Json.JsonProperty("floor_icon")]
  public string FloorIcon { get; set; }

  public MultiMapT() {
    this.Id = 0;
    this.GroupId = 0;
    this.MapId = 0;
    this.GravityFlip = 1;
    this.Floor = 0;
    this.MapTilePath = null;
    this.MiniMapTilePath = null;
    this.Area = null;
    this.Mark = null;
    this.ConditionId = 0;
    this.FloorName = null;
    this.FloorIcon = null;
  }
}


static public class MultiMapVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*GroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*MapId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*GravityFlip*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Floor*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*MapTilePath*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 16 /*MiniMapTilePath*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*Area*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*Mark*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 22 /*ConditionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 24 /*FloorName*/, false)
      && verifier.VerifyString(tablePos, 26 /*FloorIcon*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
