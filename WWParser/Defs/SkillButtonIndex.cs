// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SkillButtonIndex : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SkillButtonIndex GetRootAsSkillButtonIndex(ByteBuffer _bb) { return GetRootAsSkillButtonIndex(_bb, new SkillButtonIndex()); }
  public static SkillButtonIndex GetRootAsSkillButtonIndex(ByteBuffer _bb, SkillButtonIndex obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillButtonIndex __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DesktopButtonTypeList(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DesktopButtonTypeListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDesktopButtonTypeListBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetDesktopButtonTypeListBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetDesktopButtonTypeListArray() { return __p.__vector_as_array<int>(6); }
  public int PadButtonTypeList(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PadButtonTypeListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPadButtonTypeListBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetPadButtonTypeListBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetPadButtonTypeListArray() { return __p.__vector_as_array<int>(8); }
  public WWParser.Defs.GameplayTagArray? TagList(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.GameplayTagArray?)(new WWParser.Defs.GameplayTagArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TagListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.IntArray? TagDesktopButtonTypeList(int j) { int o = __p.__offset(12); return o != 0 ? (WWParser.Defs.IntArray?)(new WWParser.Defs.IntArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TagDesktopButtonTypeListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.IntArray? TagPadButtonTypeList(int j) { int o = __p.__offset(14); return o != 0 ? (WWParser.Defs.IntArray?)(new WWParser.Defs.IntArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TagPadButtonTypeListLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntIntArray? DesktopButtonTypeMap(int j) { int o = __p.__offset(16); return o != 0 ? (WWParser.Defs.DicIntIntArray?)(new WWParser.Defs.DicIntIntArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DesktopButtonTypeMapLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntIntArray? PadButtonTypeMap(int j) { int o = __p.__offset(18); return o != 0 ? (WWParser.Defs.DicIntIntArray?)(new WWParser.Defs.DicIntIntArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PadButtonTypeMapLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntIntArray? GamepadButtonTypeMap(int j) { int o = __p.__offset(20); return o != 0 ? (WWParser.Defs.DicIntIntArray?)(new WWParser.Defs.DicIntIntArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int GamepadButtonTypeMapLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.SkillButtonIndex> CreateSkillButtonIndex(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset desktop_button_type_listOffset = default(VectorOffset),
      VectorOffset pad_button_type_listOffset = default(VectorOffset),
      VectorOffset tag_listOffset = default(VectorOffset),
      VectorOffset tag_desktop_button_type_listOffset = default(VectorOffset),
      VectorOffset tag_pad_button_type_listOffset = default(VectorOffset),
      VectorOffset desktop_button_type_mapOffset = default(VectorOffset),
      VectorOffset pad_button_type_mapOffset = default(VectorOffset),
      VectorOffset gamepad_button_type_mapOffset = default(VectorOffset)) {
    builder.StartTable(9);
    SkillButtonIndex.AddGamepadButtonTypeMap(builder, gamepad_button_type_mapOffset);
    SkillButtonIndex.AddPadButtonTypeMap(builder, pad_button_type_mapOffset);
    SkillButtonIndex.AddDesktopButtonTypeMap(builder, desktop_button_type_mapOffset);
    SkillButtonIndex.AddTagPadButtonTypeList(builder, tag_pad_button_type_listOffset);
    SkillButtonIndex.AddTagDesktopButtonTypeList(builder, tag_desktop_button_type_listOffset);
    SkillButtonIndex.AddTagList(builder, tag_listOffset);
    SkillButtonIndex.AddPadButtonTypeList(builder, pad_button_type_listOffset);
    SkillButtonIndex.AddDesktopButtonTypeList(builder, desktop_button_type_listOffset);
    SkillButtonIndex.AddId(builder, id);
    return SkillButtonIndex.EndSkillButtonIndex(builder);
  }

  public static void StartSkillButtonIndex(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDesktopButtonTypeList(FlatBufferBuilder builder, VectorOffset desktopButtonTypeListOffset) { builder.AddOffset(1, desktopButtonTypeListOffset.Value, 0); }
  public static VectorOffset CreateDesktopButtonTypeListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDesktopButtonTypeListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDesktopButtonTypeListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDesktopButtonTypeListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDesktopButtonTypeListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPadButtonTypeList(FlatBufferBuilder builder, VectorOffset padButtonTypeListOffset) { builder.AddOffset(2, padButtonTypeListOffset.Value, 0); }
  public static VectorOffset CreatePadButtonTypeListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePadButtonTypeListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePadButtonTypeListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePadButtonTypeListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPadButtonTypeListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTagList(FlatBufferBuilder builder, VectorOffset tagListOffset) { builder.AddOffset(3, tagListOffset.Value, 0); }
  public static VectorOffset CreateTagListVector(FlatBufferBuilder builder, Offset<WWParser.Defs.GameplayTagArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagListVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.GameplayTagArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.GameplayTagArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.GameplayTagArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTagDesktopButtonTypeList(FlatBufferBuilder builder, VectorOffset tagDesktopButtonTypeListOffset) { builder.AddOffset(4, tagDesktopButtonTypeListOffset.Value, 0); }
  public static VectorOffset CreateTagDesktopButtonTypeListVector(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagDesktopButtonTypeListVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagDesktopButtonTypeListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.IntArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagDesktopButtonTypeListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.IntArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagDesktopButtonTypeListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTagPadButtonTypeList(FlatBufferBuilder builder, VectorOffset tagPadButtonTypeListOffset) { builder.AddOffset(5, tagPadButtonTypeListOffset.Value, 0); }
  public static VectorOffset CreateTagPadButtonTypeListVector(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagPadButtonTypeListVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagPadButtonTypeListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.IntArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagPadButtonTypeListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.IntArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagPadButtonTypeListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDesktopButtonTypeMap(FlatBufferBuilder builder, VectorOffset desktopButtonTypeMapOffset) { builder.AddOffset(6, desktopButtonTypeMapOffset.Value, 0); }
  public static VectorOffset CreateDesktopButtonTypeMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntIntArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDesktopButtonTypeMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntIntArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDesktopButtonTypeMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntIntArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDesktopButtonTypeMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntIntArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDesktopButtonTypeMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPadButtonTypeMap(FlatBufferBuilder builder, VectorOffset padButtonTypeMapOffset) { builder.AddOffset(7, padButtonTypeMapOffset.Value, 0); }
  public static VectorOffset CreatePadButtonTypeMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntIntArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePadButtonTypeMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntIntArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePadButtonTypeMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntIntArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePadButtonTypeMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntIntArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPadButtonTypeMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGamepadButtonTypeMap(FlatBufferBuilder builder, VectorOffset gamepadButtonTypeMapOffset) { builder.AddOffset(8, gamepadButtonTypeMapOffset.Value, 0); }
  public static VectorOffset CreateGamepadButtonTypeMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntIntArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGamepadButtonTypeMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntIntArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGamepadButtonTypeMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntIntArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGamepadButtonTypeMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntIntArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGamepadButtonTypeMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.SkillButtonIndex> EndSkillButtonIndex(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SkillButtonIndex>(o);
  }
  public SkillButtonIndexT UnPack() {
    var _o = new SkillButtonIndexT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillButtonIndexT _o) {
    _o.Id = this.Id;
    _o.DesktopButtonTypeList = new List<int>();
    for (var _j = 0; _j < this.DesktopButtonTypeListLength; ++_j) {_o.DesktopButtonTypeList.Add(this.DesktopButtonTypeList(_j));}
    _o.PadButtonTypeList = new List<int>();
    for (var _j = 0; _j < this.PadButtonTypeListLength; ++_j) {_o.PadButtonTypeList.Add(this.PadButtonTypeList(_j));}
    _o.TagList = new List<WWParser.Defs.GameplayTagArrayT>();
    for (var _j = 0; _j < this.TagListLength; ++_j) {_o.TagList.Add(this.TagList(_j).HasValue ? this.TagList(_j).Value.UnPack() : null);}
    _o.TagDesktopButtonTypeList = new List<WWParser.Defs.IntArrayT>();
    for (var _j = 0; _j < this.TagDesktopButtonTypeListLength; ++_j) {_o.TagDesktopButtonTypeList.Add(this.TagDesktopButtonTypeList(_j).HasValue ? this.TagDesktopButtonTypeList(_j).Value.UnPack() : null);}
    _o.TagPadButtonTypeList = new List<WWParser.Defs.IntArrayT>();
    for (var _j = 0; _j < this.TagPadButtonTypeListLength; ++_j) {_o.TagPadButtonTypeList.Add(this.TagPadButtonTypeList(_j).HasValue ? this.TagPadButtonTypeList(_j).Value.UnPack() : null);}
    _o.DesktopButtonTypeMap = new List<WWParser.Defs.DicIntIntArrayT>();
    for (var _j = 0; _j < this.DesktopButtonTypeMapLength; ++_j) {_o.DesktopButtonTypeMap.Add(this.DesktopButtonTypeMap(_j).HasValue ? this.DesktopButtonTypeMap(_j).Value.UnPack() : null);}
    _o.PadButtonTypeMap = new List<WWParser.Defs.DicIntIntArrayT>();
    for (var _j = 0; _j < this.PadButtonTypeMapLength; ++_j) {_o.PadButtonTypeMap.Add(this.PadButtonTypeMap(_j).HasValue ? this.PadButtonTypeMap(_j).Value.UnPack() : null);}
    _o.GamepadButtonTypeMap = new List<WWParser.Defs.DicIntIntArrayT>();
    for (var _j = 0; _j < this.GamepadButtonTypeMapLength; ++_j) {_o.GamepadButtonTypeMap.Add(this.GamepadButtonTypeMap(_j).HasValue ? this.GamepadButtonTypeMap(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.SkillButtonIndex> Pack(FlatBufferBuilder builder, SkillButtonIndexT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SkillButtonIndex>);
    var _desktop_button_type_list = default(VectorOffset);
    if (_o.DesktopButtonTypeList != null) {
      var __desktop_button_type_list = _o.DesktopButtonTypeList.ToArray();
      _desktop_button_type_list = CreateDesktopButtonTypeListVector(builder, __desktop_button_type_list);
    }
    var _pad_button_type_list = default(VectorOffset);
    if (_o.PadButtonTypeList != null) {
      var __pad_button_type_list = _o.PadButtonTypeList.ToArray();
      _pad_button_type_list = CreatePadButtonTypeListVector(builder, __pad_button_type_list);
    }
    var _tag_list = default(VectorOffset);
    if (_o.TagList != null) {
      var __tag_list = new Offset<WWParser.Defs.GameplayTagArray>[_o.TagList.Count];
      for (var _j = 0; _j < __tag_list.Length; ++_j) { __tag_list[_j] = WWParser.Defs.GameplayTagArray.Pack(builder, _o.TagList[_j]); }
      _tag_list = CreateTagListVector(builder, __tag_list);
    }
    var _tag_desktop_button_type_list = default(VectorOffset);
    if (_o.TagDesktopButtonTypeList != null) {
      var __tag_desktop_button_type_list = new Offset<WWParser.Defs.IntArray>[_o.TagDesktopButtonTypeList.Count];
      for (var _j = 0; _j < __tag_desktop_button_type_list.Length; ++_j) { __tag_desktop_button_type_list[_j] = WWParser.Defs.IntArray.Pack(builder, _o.TagDesktopButtonTypeList[_j]); }
      _tag_desktop_button_type_list = CreateTagDesktopButtonTypeListVector(builder, __tag_desktop_button_type_list);
    }
    var _tag_pad_button_type_list = default(VectorOffset);
    if (_o.TagPadButtonTypeList != null) {
      var __tag_pad_button_type_list = new Offset<WWParser.Defs.IntArray>[_o.TagPadButtonTypeList.Count];
      for (var _j = 0; _j < __tag_pad_button_type_list.Length; ++_j) { __tag_pad_button_type_list[_j] = WWParser.Defs.IntArray.Pack(builder, _o.TagPadButtonTypeList[_j]); }
      _tag_pad_button_type_list = CreateTagPadButtonTypeListVector(builder, __tag_pad_button_type_list);
    }
    var _desktop_button_type_map = default(VectorOffset);
    if (_o.DesktopButtonTypeMap != null) {
      var __desktop_button_type_map = new Offset<WWParser.Defs.DicIntIntArray>[_o.DesktopButtonTypeMap.Count];
      for (var _j = 0; _j < __desktop_button_type_map.Length; ++_j) { __desktop_button_type_map[_j] = WWParser.Defs.DicIntIntArray.Pack(builder, _o.DesktopButtonTypeMap[_j]); }
      _desktop_button_type_map = CreateDesktopButtonTypeMapVector(builder, __desktop_button_type_map);
    }
    var _pad_button_type_map = default(VectorOffset);
    if (_o.PadButtonTypeMap != null) {
      var __pad_button_type_map = new Offset<WWParser.Defs.DicIntIntArray>[_o.PadButtonTypeMap.Count];
      for (var _j = 0; _j < __pad_button_type_map.Length; ++_j) { __pad_button_type_map[_j] = WWParser.Defs.DicIntIntArray.Pack(builder, _o.PadButtonTypeMap[_j]); }
      _pad_button_type_map = CreatePadButtonTypeMapVector(builder, __pad_button_type_map);
    }
    var _gamepad_button_type_map = default(VectorOffset);
    if (_o.GamepadButtonTypeMap != null) {
      var __gamepad_button_type_map = new Offset<WWParser.Defs.DicIntIntArray>[_o.GamepadButtonTypeMap.Count];
      for (var _j = 0; _j < __gamepad_button_type_map.Length; ++_j) { __gamepad_button_type_map[_j] = WWParser.Defs.DicIntIntArray.Pack(builder, _o.GamepadButtonTypeMap[_j]); }
      _gamepad_button_type_map = CreateGamepadButtonTypeMapVector(builder, __gamepad_button_type_map);
    }
    return CreateSkillButtonIndex(
      builder,
      _o.Id,
      _desktop_button_type_list,
      _pad_button_type_list,
      _tag_list,
      _tag_desktop_button_type_list,
      _tag_pad_button_type_list,
      _desktop_button_type_map,
      _pad_button_type_map,
      _gamepad_button_type_map);
  }
}

public class SkillButtonIndexT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("desktop_button_type_list")]
  public List<int> DesktopButtonTypeList { get; set; }
  [Newtonsoft.Json.JsonProperty("pad_button_type_list")]
  public List<int> PadButtonTypeList { get; set; }
  [Newtonsoft.Json.JsonProperty("tag_list")]
  public List<WWParser.Defs.GameplayTagArrayT> TagList { get; set; }
  [Newtonsoft.Json.JsonProperty("tag_desktop_button_type_list")]
  public List<WWParser.Defs.IntArrayT> TagDesktopButtonTypeList { get; set; }
  [Newtonsoft.Json.JsonProperty("tag_pad_button_type_list")]
  public List<WWParser.Defs.IntArrayT> TagPadButtonTypeList { get; set; }
  [Newtonsoft.Json.JsonProperty("desktop_button_type_map")]
  public List<WWParser.Defs.DicIntIntArrayT> DesktopButtonTypeMap { get; set; }
  [Newtonsoft.Json.JsonProperty("pad_button_type_map")]
  public List<WWParser.Defs.DicIntIntArrayT> PadButtonTypeMap { get; set; }
  [Newtonsoft.Json.JsonProperty("gamepad_button_type_map")]
  public List<WWParser.Defs.DicIntIntArrayT> GamepadButtonTypeMap { get; set; }

  public SkillButtonIndexT() {
    this.Id = 0;
    this.DesktopButtonTypeList = null;
    this.PadButtonTypeList = null;
    this.TagList = null;
    this.TagDesktopButtonTypeList = null;
    this.TagPadButtonTypeList = null;
    this.DesktopButtonTypeMap = null;
    this.PadButtonTypeMap = null;
    this.GamepadButtonTypeMap = null;
  }
}


static public class SkillButtonIndexVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*DesktopButtonTypeList*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*PadButtonTypeList*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*TagList*/, WWParser.Defs.GameplayTagArrayVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 12 /*TagDesktopButtonTypeList*/, WWParser.Defs.IntArrayVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 14 /*TagPadButtonTypeList*/, WWParser.Defs.IntArrayVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 16 /*DesktopButtonTypeMap*/, WWParser.Defs.DicIntIntArrayVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 18 /*PadButtonTypeMap*/, WWParser.Defs.DicIntIntArrayVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 20 /*GamepadButtonTypeMap*/, WWParser.Defs.DicIntIntArrayVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
