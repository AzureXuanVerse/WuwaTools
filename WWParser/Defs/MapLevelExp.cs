// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MapLevelExp : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MapLevelExp GetRootAsMapLevelExp(ByteBuffer _bb) { return GetRootAsMapLevelExp(_bb, new MapLevelExp()); }
  public static MapLevelExp GetRootAsMapLevelExp(ByteBuffer _bb, MapLevelExp obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MapLevelExp __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NeedExp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardDropId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TipsLock { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTipsLockBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTipsLockBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTipsLockArray() { return __p.__vector_as_array<byte>(14); }
  public string TipsDone { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTipsDoneBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTipsDoneBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTipsDoneArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<WWParser.Defs.MapLevelExp> CreateMapLevelExp(FlatBufferBuilder builder,
      int id = 0,
      int activity_id = 0,
      int level = 0,
      int need_exp = 0,
      int reward_drop_id = 0,
      StringOffset tips_lockOffset = default(StringOffset),
      StringOffset tips_doneOffset = default(StringOffset)) {
    builder.StartTable(7);
    MapLevelExp.AddTipsDone(builder, tips_doneOffset);
    MapLevelExp.AddTipsLock(builder, tips_lockOffset);
    MapLevelExp.AddRewardDropId(builder, reward_drop_id);
    MapLevelExp.AddNeedExp(builder, need_exp);
    MapLevelExp.AddLevel(builder, level);
    MapLevelExp.AddActivityId(builder, activity_id);
    MapLevelExp.AddId(builder, id);
    return MapLevelExp.EndMapLevelExp(builder);
  }

  public static void StartMapLevelExp(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(2, level, 0); }
  public static void AddNeedExp(FlatBufferBuilder builder, int needExp) { builder.AddInt(3, needExp, 0); }
  public static void AddRewardDropId(FlatBufferBuilder builder, int rewardDropId) { builder.AddInt(4, rewardDropId, 0); }
  public static void AddTipsLock(FlatBufferBuilder builder, StringOffset tipsLockOffset) { builder.AddOffset(5, tipsLockOffset.Value, 0); }
  public static void AddTipsDone(FlatBufferBuilder builder, StringOffset tipsDoneOffset) { builder.AddOffset(6, tipsDoneOffset.Value, 0); }
  public static Offset<WWParser.Defs.MapLevelExp> EndMapLevelExp(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MapLevelExp>(o);
  }
  public MapLevelExpT UnPack() {
    var _o = new MapLevelExpT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MapLevelExpT _o) {
    _o.Id = this.Id;
    _o.ActivityId = this.ActivityId;
    _o.Level = this.Level;
    _o.NeedExp = this.NeedExp;
    _o.RewardDropId = this.RewardDropId;
    _o.TipsLock = this.TipsLock;
    _o.TipsDone = this.TipsDone;
  }
  public static Offset<WWParser.Defs.MapLevelExp> Pack(FlatBufferBuilder builder, MapLevelExpT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MapLevelExp>);
    var _tips_lock = _o.TipsLock == null ? default(StringOffset) : builder.CreateString(_o.TipsLock);
    var _tips_done = _o.TipsDone == null ? default(StringOffset) : builder.CreateString(_o.TipsDone);
    return CreateMapLevelExp(
      builder,
      _o.Id,
      _o.ActivityId,
      _o.Level,
      _o.NeedExp,
      _o.RewardDropId,
      _tips_lock,
      _tips_done);
  }
}

public class MapLevelExpT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("level")]
  public int Level { get; set; }
  [Newtonsoft.Json.JsonProperty("need_exp")]
  public int NeedExp { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_drop_id")]
  public int RewardDropId { get; set; }
  [Newtonsoft.Json.JsonProperty("tips_lock")]
  public string TipsLock { get; set; }
  [Newtonsoft.Json.JsonProperty("tips_done")]
  public string TipsDone { get; set; }

  public MapLevelExpT() {
    this.Id = 0;
    this.ActivityId = 0;
    this.Level = 0;
    this.NeedExp = 0;
    this.RewardDropId = 0;
    this.TipsLock = null;
    this.TipsDone = null;
  }
}


static public class MapLevelExpVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*NeedExp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*RewardDropId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*TipsLock*/, false)
      && verifier.VerifyString(tablePos, 16 /*TipsDone*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
