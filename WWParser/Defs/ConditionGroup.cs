// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ConditionGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ConditionGroup GetRootAsConditionGroup(ByteBuffer _bb) { return GetRootAsConditionGroup(_bb, new ConditionGroup()); }
  public static ConditionGroup GetRootAsConditionGroup(ByteBuffer _bb, ConditionGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConditionGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroupId(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int GroupIdLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetGroupIdBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetGroupIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetGroupIdArray() { return __p.__vector_as_array<int>(6); }
  public int Relation { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string HintText { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHintTextBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetHintTextBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetHintTextArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<WWParser.Defs.ConditionGroup> CreateConditionGroup(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset group_idOffset = default(VectorOffset),
      int relation = 0,
      StringOffset hint_textOffset = default(StringOffset)) {
    builder.StartTable(4);
    ConditionGroup.AddHintText(builder, hint_textOffset);
    ConditionGroup.AddRelation(builder, relation);
    ConditionGroup.AddGroupId(builder, group_idOffset);
    ConditionGroup.AddId(builder, id);
    return ConditionGroup.EndConditionGroup(builder);
  }

  public static void StartConditionGroup(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, VectorOffset groupIdOffset) { builder.AddOffset(1, groupIdOffset.Value, 0); }
  public static VectorOffset CreateGroupIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGroupIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRelation(FlatBufferBuilder builder, int relation) { builder.AddInt(2, relation, 0); }
  public static void AddHintText(FlatBufferBuilder builder, StringOffset hintTextOffset) { builder.AddOffset(3, hintTextOffset.Value, 0); }
  public static Offset<WWParser.Defs.ConditionGroup> EndConditionGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ConditionGroup>(o);
  }
  public ConditionGroupT UnPack() {
    var _o = new ConditionGroupT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConditionGroupT _o) {
    _o.Id = this.Id;
    _o.GroupId = new List<int>();
    for (var _j = 0; _j < this.GroupIdLength; ++_j) {_o.GroupId.Add(this.GroupId(_j));}
    _o.Relation = this.Relation;
    _o.HintText = this.HintText;
  }
  public static Offset<WWParser.Defs.ConditionGroup> Pack(FlatBufferBuilder builder, ConditionGroupT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ConditionGroup>);
    var _group_id = default(VectorOffset);
    if (_o.GroupId != null) {
      var __group_id = _o.GroupId.ToArray();
      _group_id = CreateGroupIdVector(builder, __group_id);
    }
    var _hint_text = _o.HintText == null ? default(StringOffset) : builder.CreateString(_o.HintText);
    return CreateConditionGroup(
      builder,
      _o.Id,
      _group_id,
      _o.Relation,
      _hint_text);
  }
}

public class ConditionGroupT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("group_id")]
  public List<int> GroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("relation")]
  public int Relation { get; set; }
  [Newtonsoft.Json.JsonProperty("hint_text")]
  public string HintText { get; set; }

  public ConditionGroupT() {
    this.Id = 0;
    this.GroupId = null;
    this.Relation = 0;
    this.HintText = null;
  }
}


static public class ConditionGroupVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*GroupId*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 8 /*Relation*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*HintText*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
