// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ActivitySign : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ActivitySign GetRootAsActivitySign(ByteBuffer _bb) { return GetRootAsActivitySign(_bb, new ActivitySign()); }
  public static ActivitySign GetRootAsActivitySign(ByteBuffer _bb, ActivitySign obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ActivitySign __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string PrefabResource { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabResourceBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPrefabResourceBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPrefabResourceArray() { return __p.__vector_as_array<byte>(8); }
  public WWParser.Defs.OneItemConfig? SignRewards(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.OneItemConfig?)(new WWParser.Defs.OneItemConfig()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SignRewardsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int ImportantRewardIndex { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public string ImportantRewardIcon { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImportantRewardIconBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetImportantRewardIconBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetImportantRewardIconArray() { return __p.__vector_as_array<byte>(14); }
  public int ImportantRewardType { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PreviewList(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PreviewListLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPreviewListBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetPreviewListBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetPreviewListArray() { return __p.__vector_as_array<int>(18); }

  public static Offset<WWParser.Defs.ActivitySign> CreateActivitySign(FlatBufferBuilder builder,
      int id = 0,
      int type = 0,
      StringOffset prefab_resourceOffset = default(StringOffset),
      VectorOffset sign_rewardsOffset = default(VectorOffset),
      int important_reward_index = -1,
      StringOffset important_reward_iconOffset = default(StringOffset),
      int important_reward_type = 0,
      VectorOffset preview_listOffset = default(VectorOffset)) {
    builder.StartTable(8);
    ActivitySign.AddPreviewList(builder, preview_listOffset);
    ActivitySign.AddImportantRewardType(builder, important_reward_type);
    ActivitySign.AddImportantRewardIcon(builder, important_reward_iconOffset);
    ActivitySign.AddImportantRewardIndex(builder, important_reward_index);
    ActivitySign.AddSignRewards(builder, sign_rewardsOffset);
    ActivitySign.AddPrefabResource(builder, prefab_resourceOffset);
    ActivitySign.AddType(builder, type);
    ActivitySign.AddId(builder, id);
    return ActivitySign.EndActivitySign(builder);
  }

  public static void StartActivitySign(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(1, type, 0); }
  public static void AddPrefabResource(FlatBufferBuilder builder, StringOffset prefabResourceOffset) { builder.AddOffset(2, prefabResourceOffset.Value, 0); }
  public static void AddSignRewards(FlatBufferBuilder builder, VectorOffset signRewardsOffset) { builder.AddOffset(3, signRewardsOffset.Value, 0); }
  public static VectorOffset CreateSignRewardsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.OneItemConfig>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSignRewardsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.OneItemConfig>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSignRewardsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.OneItemConfig>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSignRewardsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.OneItemConfig>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSignRewardsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddImportantRewardIndex(FlatBufferBuilder builder, int importantRewardIndex) { builder.AddInt(4, importantRewardIndex, -1); }
  public static void AddImportantRewardIcon(FlatBufferBuilder builder, StringOffset importantRewardIconOffset) { builder.AddOffset(5, importantRewardIconOffset.Value, 0); }
  public static void AddImportantRewardType(FlatBufferBuilder builder, int importantRewardType) { builder.AddInt(6, importantRewardType, 0); }
  public static void AddPreviewList(FlatBufferBuilder builder, VectorOffset previewListOffset) { builder.AddOffset(7, previewListOffset.Value, 0); }
  public static VectorOffset CreatePreviewListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePreviewListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePreviewListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePreviewListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPreviewListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.ActivitySign> EndActivitySign(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ActivitySign>(o);
  }
  public ActivitySignT UnPack() {
    var _o = new ActivitySignT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ActivitySignT _o) {
    _o.Id = this.Id;
    _o.Type = this.Type;
    _o.PrefabResource = this.PrefabResource;
    _o.SignRewards = new List<WWParser.Defs.OneItemConfigT>();
    for (var _j = 0; _j < this.SignRewardsLength; ++_j) {_o.SignRewards.Add(this.SignRewards(_j).HasValue ? this.SignRewards(_j).Value.UnPack() : null);}
    _o.ImportantRewardIndex = this.ImportantRewardIndex;
    _o.ImportantRewardIcon = this.ImportantRewardIcon;
    _o.ImportantRewardType = this.ImportantRewardType;
    _o.PreviewList = new List<int>();
    for (var _j = 0; _j < this.PreviewListLength; ++_j) {_o.PreviewList.Add(this.PreviewList(_j));}
  }
  public static Offset<WWParser.Defs.ActivitySign> Pack(FlatBufferBuilder builder, ActivitySignT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ActivitySign>);
    var _prefab_resource = _o.PrefabResource == null ? default(StringOffset) : builder.CreateString(_o.PrefabResource);
    var _sign_rewards = default(VectorOffset);
    if (_o.SignRewards != null) {
      var __sign_rewards = new Offset<WWParser.Defs.OneItemConfig>[_o.SignRewards.Count];
      for (var _j = 0; _j < __sign_rewards.Length; ++_j) { __sign_rewards[_j] = WWParser.Defs.OneItemConfig.Pack(builder, _o.SignRewards[_j]); }
      _sign_rewards = CreateSignRewardsVector(builder, __sign_rewards);
    }
    var _important_reward_icon = _o.ImportantRewardIcon == null ? default(StringOffset) : builder.CreateString(_o.ImportantRewardIcon);
    var _preview_list = default(VectorOffset);
    if (_o.PreviewList != null) {
      var __preview_list = _o.PreviewList.ToArray();
      _preview_list = CreatePreviewListVector(builder, __preview_list);
    }
    return CreateActivitySign(
      builder,
      _o.Id,
      _o.Type,
      _prefab_resource,
      _sign_rewards,
      _o.ImportantRewardIndex,
      _important_reward_icon,
      _o.ImportantRewardType,
      _preview_list);
  }
}

public class ActivitySignT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("prefab_resource")]
  public string PrefabResource { get; set; }
  [Newtonsoft.Json.JsonProperty("sign_rewards")]
  public List<WWParser.Defs.OneItemConfigT> SignRewards { get; set; }
  [Newtonsoft.Json.JsonProperty("important_reward_index")]
  public int ImportantRewardIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("important_reward_icon")]
  public string ImportantRewardIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("important_reward_type")]
  public int ImportantRewardType { get; set; }
  [Newtonsoft.Json.JsonProperty("preview_list")]
  public List<int> PreviewList { get; set; }

  public ActivitySignT() {
    this.Id = 0;
    this.Type = 0;
    this.PrefabResource = null;
    this.SignRewards = null;
    this.ImportantRewardIndex = -1;
    this.ImportantRewardIcon = null;
    this.ImportantRewardType = 0;
    this.PreviewList = null;
  }
}


static public class ActivitySignVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*PrefabResource*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*SignRewards*/, WWParser.Defs.OneItemConfigVerify.Verify, false)
      && verifier.VerifyField(tablePos, 12 /*ImportantRewardIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*ImportantRewardIcon*/, false)
      && verifier.VerifyField(tablePos, 16 /*ImportantRewardType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*PreviewList*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
