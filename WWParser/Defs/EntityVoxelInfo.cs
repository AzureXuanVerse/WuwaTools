// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EntityVoxelInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EntityVoxelInfo GetRootAsEntityVoxelInfo(ByteBuffer _bb) { return GetRootAsEntityVoxelInfo(_bb, new EntityVoxelInfo()); }
  public static EntityVoxelInfo GetRootAsEntityVoxelInfo(ByteBuffer _bb, EntityVoxelInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntityVoxelInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EntityId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EnvType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.EntityVoxelInfo> CreateEntityVoxelInfo(FlatBufferBuilder builder,
      int id = 0,
      int map_id = 0,
      int entity_id = 0,
      int env_type = 0) {
    builder.StartTable(4);
    EntityVoxelInfo.AddEnvType(builder, env_type);
    EntityVoxelInfo.AddEntityId(builder, entity_id);
    EntityVoxelInfo.AddMapId(builder, map_id);
    EntityVoxelInfo.AddId(builder, id);
    return EntityVoxelInfo.EndEntityVoxelInfo(builder);
  }

  public static void StartEntityVoxelInfo(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMapId(FlatBufferBuilder builder, int mapId) { builder.AddInt(1, mapId, 0); }
  public static void AddEntityId(FlatBufferBuilder builder, int entityId) { builder.AddInt(2, entityId, 0); }
  public static void AddEnvType(FlatBufferBuilder builder, int envType) { builder.AddInt(3, envType, 0); }
  public static Offset<WWParser.Defs.EntityVoxelInfo> EndEntityVoxelInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.EntityVoxelInfo>(o);
  }
  public EntityVoxelInfoT UnPack() {
    var _o = new EntityVoxelInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntityVoxelInfoT _o) {
    _o.Id = this.Id;
    _o.MapId = this.MapId;
    _o.EntityId = this.EntityId;
    _o.EnvType = this.EnvType;
  }
  public static Offset<WWParser.Defs.EntityVoxelInfo> Pack(FlatBufferBuilder builder, EntityVoxelInfoT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.EntityVoxelInfo>);
    return CreateEntityVoxelInfo(
      builder,
      _o.Id,
      _o.MapId,
      _o.EntityId,
      _o.EnvType);
  }
}

public class EntityVoxelInfoT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("map_id")]
  public int MapId { get; set; }
  [Newtonsoft.Json.JsonProperty("entity_id")]
  public int EntityId { get; set; }
  [Newtonsoft.Json.JsonProperty("env_type")]
  public int EnvType { get; set; }

  public EntityVoxelInfoT() {
    this.Id = 0;
    this.MapId = 0;
    this.EntityId = 0;
    this.EnvType = 0;
  }
}


static public class EntityVoxelInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MapId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*EntityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*EnvType*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
