// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueResEvent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueResEvent GetRootAsRogueResEvent(ByteBuffer _bb) { return GetRootAsRogueResEvent(_bb, new RogueResEvent()); }
  public static RogueResEvent GetRootAsRogueResEvent(ByteBuffer _bb, RogueResEvent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueResEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TextId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTextIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTextIdArray() { return __p.__vector_as_array<byte>(6); }
  public string Title { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(8); }
  public int Condition { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EventType { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Args(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ArgsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetArgsBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetArgsBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetArgsArray() { return __p.__vector_as_array<int>(14); }
  public string FlowListName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFlowListNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetFlowListNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetFlowListNameArray() { return __p.__vector_as_array<byte>(16); }
  public int FlowId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StateId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsCopyCamera { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.RogueResEvent> CreateRogueResEvent(FlatBufferBuilder builder,
      int id = 0,
      StringOffset text_idOffset = default(StringOffset),
      StringOffset titleOffset = default(StringOffset),
      int condition = 0,
      int event_type = 0,
      VectorOffset argsOffset = default(VectorOffset),
      StringOffset flow_list_nameOffset = default(StringOffset),
      int flow_id = 0,
      int state_id = 0,
      bool is_copy_camera = false) {
    builder.StartTable(10);
    RogueResEvent.AddStateId(builder, state_id);
    RogueResEvent.AddFlowId(builder, flow_id);
    RogueResEvent.AddFlowListName(builder, flow_list_nameOffset);
    RogueResEvent.AddArgs(builder, argsOffset);
    RogueResEvent.AddEventType(builder, event_type);
    RogueResEvent.AddCondition(builder, condition);
    RogueResEvent.AddTitle(builder, titleOffset);
    RogueResEvent.AddTextId(builder, text_idOffset);
    RogueResEvent.AddId(builder, id);
    RogueResEvent.AddIsCopyCamera(builder, is_copy_camera);
    return RogueResEvent.EndRogueResEvent(builder);
  }

  public static void StartRogueResEvent(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTextId(FlatBufferBuilder builder, StringOffset textIdOffset) { builder.AddOffset(1, textIdOffset.Value, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(2, titleOffset.Value, 0); }
  public static void AddCondition(FlatBufferBuilder builder, int condition) { builder.AddInt(3, condition, 0); }
  public static void AddEventType(FlatBufferBuilder builder, int eventType) { builder.AddInt(4, eventType, 0); }
  public static void AddArgs(FlatBufferBuilder builder, VectorOffset argsOffset) { builder.AddOffset(5, argsOffset.Value, 0); }
  public static VectorOffset CreateArgsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateArgsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArgsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArgsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartArgsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFlowListName(FlatBufferBuilder builder, StringOffset flowListNameOffset) { builder.AddOffset(6, flowListNameOffset.Value, 0); }
  public static void AddFlowId(FlatBufferBuilder builder, int flowId) { builder.AddInt(7, flowId, 0); }
  public static void AddStateId(FlatBufferBuilder builder, int stateId) { builder.AddInt(8, stateId, 0); }
  public static void AddIsCopyCamera(FlatBufferBuilder builder, bool isCopyCamera) { builder.AddBool(9, isCopyCamera, false); }
  public static Offset<WWParser.Defs.RogueResEvent> EndRogueResEvent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueResEvent>(o);
  }
  public RogueResEventT UnPack() {
    var _o = new RogueResEventT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueResEventT _o) {
    _o.Id = this.Id;
    _o.TextId = this.TextId;
    _o.Title = this.Title;
    _o.Condition = this.Condition;
    _o.EventType = this.EventType;
    _o.Args = new List<int>();
    for (var _j = 0; _j < this.ArgsLength; ++_j) {_o.Args.Add(this.Args(_j));}
    _o.FlowListName = this.FlowListName;
    _o.FlowId = this.FlowId;
    _o.StateId = this.StateId;
    _o.IsCopyCamera = this.IsCopyCamera;
  }
  public static Offset<WWParser.Defs.RogueResEvent> Pack(FlatBufferBuilder builder, RogueResEventT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueResEvent>);
    var _text_id = _o.TextId == null ? default(StringOffset) : builder.CreateString(_o.TextId);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _args = default(VectorOffset);
    if (_o.Args != null) {
      var __args = _o.Args.ToArray();
      _args = CreateArgsVector(builder, __args);
    }
    var _flow_list_name = _o.FlowListName == null ? default(StringOffset) : builder.CreateString(_o.FlowListName);
    return CreateRogueResEvent(
      builder,
      _o.Id,
      _text_id,
      _title,
      _o.Condition,
      _o.EventType,
      _args,
      _flow_list_name,
      _o.FlowId,
      _o.StateId,
      _o.IsCopyCamera);
  }
}

public class RogueResEventT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("text_id")]
  public string TextId { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("condition")]
  public int Condition { get; set; }
  [Newtonsoft.Json.JsonProperty("event_type")]
  public int EventType { get; set; }
  [Newtonsoft.Json.JsonProperty("args")]
  public List<int> Args { get; set; }
  [Newtonsoft.Json.JsonProperty("flow_list_name")]
  public string FlowListName { get; set; }
  [Newtonsoft.Json.JsonProperty("flow_id")]
  public int FlowId { get; set; }
  [Newtonsoft.Json.JsonProperty("state_id")]
  public int StateId { get; set; }
  [Newtonsoft.Json.JsonProperty("is_copy_camera")]
  public bool IsCopyCamera { get; set; }

  public RogueResEventT() {
    this.Id = 0;
    this.TextId = null;
    this.Title = null;
    this.Condition = 0;
    this.EventType = 0;
    this.Args = null;
    this.FlowListName = null;
    this.FlowId = 0;
    this.StateId = 0;
    this.IsCopyCamera = false;
  }
}


static public class RogueResEventVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*TextId*/, false)
      && verifier.VerifyString(tablePos, 8 /*Title*/, false)
      && verifier.VerifyField(tablePos, 10 /*Condition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*EventType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*Args*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 16 /*FlowListName*/, false)
      && verifier.VerifyField(tablePos, 18 /*FlowId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*StateId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*IsCopyCamera*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
