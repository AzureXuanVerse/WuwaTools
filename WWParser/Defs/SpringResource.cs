// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SpringResource : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SpringResource GetRootAsSpringResource(ByteBuffer _bb) { return GetRootAsSpringResource(_bb, new SpringResource()); }
  public static SpringResource GetRootAsSpringResource(ByteBuffer _bb, SpringResource obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SpringResource __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RoleType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IsClientOnly { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string RoleName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoleNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetRoleNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetRoleNameArray() { return __p.__vector_as_array<byte>(10); }
  public int DialogData { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DialogDataList(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DialogDataListLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDialogDataListBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetDialogDataListBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetDialogDataListArray() { return __p.__vector_as_array<int>(14); }
  public string MailIcon { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMailIconBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetMailIconBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetMailIconArray() { return __p.__vector_as_array<byte>(16); }
  public string LetterContent { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLetterContentBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetLetterContentBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetLetterContentArray() { return __p.__vector_as_array<byte>(18); }
  public string LetterTitle { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLetterTitleBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetLetterTitleBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetLetterTitleArray() { return __p.__vector_as_array<byte>(20); }
  public string LetterTab { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLetterTabBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetLetterTabBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetLetterTabArray() { return __p.__vector_as_array<byte>(22); }
  public string LeftSpineAtlas { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLeftSpineAtlasBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetLeftSpineAtlasBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetLeftSpineAtlasArray() { return __p.__vector_as_array<byte>(24); }
  public string LeftSpineSkeletonData { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLeftSpineSkeletonDataBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetLeftSpineSkeletonDataBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetLeftSpineSkeletonDataArray() { return __p.__vector_as_array<byte>(26); }
  public string RightSpineAtlas { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRightSpineAtlasBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetRightSpineAtlasBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetRightSpineAtlasArray() { return __p.__vector_as_array<byte>(28); }
  public string RightSpineSkeletonData { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRightSpineSkeletonDataBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetRightSpineSkeletonDataBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetRightSpineSkeletonDataArray() { return __p.__vector_as_array<byte>(30); }
  public string LeftDialog { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLeftDialogBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetLeftDialogBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetLeftDialogArray() { return __p.__vector_as_array<byte>(32); }
  public string RightDialog { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRightDialogBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetRightDialogBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetRightDialogArray() { return __p.__vector_as_array<byte>(34); }

  public static Offset<WWParser.Defs.SpringResource> CreateSpringResource(FlatBufferBuilder builder,
      int id = 0,
      int role_type = 0,
      int is_client_only = 0,
      StringOffset role_nameOffset = default(StringOffset),
      int dialog_data = 0,
      VectorOffset dialog_data_listOffset = default(VectorOffset),
      StringOffset mail_iconOffset = default(StringOffset),
      StringOffset letter_contentOffset = default(StringOffset),
      StringOffset letter_titleOffset = default(StringOffset),
      StringOffset letter_tabOffset = default(StringOffset),
      StringOffset left_spine_atlasOffset = default(StringOffset),
      StringOffset left_spine_skeleton_dataOffset = default(StringOffset),
      StringOffset right_spine_atlasOffset = default(StringOffset),
      StringOffset right_spine_skeleton_dataOffset = default(StringOffset),
      StringOffset left_dialogOffset = default(StringOffset),
      StringOffset right_dialogOffset = default(StringOffset)) {
    builder.StartTable(16);
    SpringResource.AddRightDialog(builder, right_dialogOffset);
    SpringResource.AddLeftDialog(builder, left_dialogOffset);
    SpringResource.AddRightSpineSkeletonData(builder, right_spine_skeleton_dataOffset);
    SpringResource.AddRightSpineAtlas(builder, right_spine_atlasOffset);
    SpringResource.AddLeftSpineSkeletonData(builder, left_spine_skeleton_dataOffset);
    SpringResource.AddLeftSpineAtlas(builder, left_spine_atlasOffset);
    SpringResource.AddLetterTab(builder, letter_tabOffset);
    SpringResource.AddLetterTitle(builder, letter_titleOffset);
    SpringResource.AddLetterContent(builder, letter_contentOffset);
    SpringResource.AddMailIcon(builder, mail_iconOffset);
    SpringResource.AddDialogDataList(builder, dialog_data_listOffset);
    SpringResource.AddDialogData(builder, dialog_data);
    SpringResource.AddRoleName(builder, role_nameOffset);
    SpringResource.AddIsClientOnly(builder, is_client_only);
    SpringResource.AddRoleType(builder, role_type);
    SpringResource.AddId(builder, id);
    return SpringResource.EndSpringResource(builder);
  }

  public static void StartSpringResource(FlatBufferBuilder builder) { builder.StartTable(16); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddRoleType(FlatBufferBuilder builder, int roleType) { builder.AddInt(1, roleType, 0); }
  public static void AddIsClientOnly(FlatBufferBuilder builder, int isClientOnly) { builder.AddInt(2, isClientOnly, 0); }
  public static void AddRoleName(FlatBufferBuilder builder, StringOffset roleNameOffset) { builder.AddOffset(3, roleNameOffset.Value, 0); }
  public static void AddDialogData(FlatBufferBuilder builder, int dialogData) { builder.AddInt(4, dialogData, 0); }
  public static void AddDialogDataList(FlatBufferBuilder builder, VectorOffset dialogDataListOffset) { builder.AddOffset(5, dialogDataListOffset.Value, 0); }
  public static VectorOffset CreateDialogDataListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDialogDataListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDialogDataListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDialogDataListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDialogDataListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMailIcon(FlatBufferBuilder builder, StringOffset mailIconOffset) { builder.AddOffset(6, mailIconOffset.Value, 0); }
  public static void AddLetterContent(FlatBufferBuilder builder, StringOffset letterContentOffset) { builder.AddOffset(7, letterContentOffset.Value, 0); }
  public static void AddLetterTitle(FlatBufferBuilder builder, StringOffset letterTitleOffset) { builder.AddOffset(8, letterTitleOffset.Value, 0); }
  public static void AddLetterTab(FlatBufferBuilder builder, StringOffset letterTabOffset) { builder.AddOffset(9, letterTabOffset.Value, 0); }
  public static void AddLeftSpineAtlas(FlatBufferBuilder builder, StringOffset leftSpineAtlasOffset) { builder.AddOffset(10, leftSpineAtlasOffset.Value, 0); }
  public static void AddLeftSpineSkeletonData(FlatBufferBuilder builder, StringOffset leftSpineSkeletonDataOffset) { builder.AddOffset(11, leftSpineSkeletonDataOffset.Value, 0); }
  public static void AddRightSpineAtlas(FlatBufferBuilder builder, StringOffset rightSpineAtlasOffset) { builder.AddOffset(12, rightSpineAtlasOffset.Value, 0); }
  public static void AddRightSpineSkeletonData(FlatBufferBuilder builder, StringOffset rightSpineSkeletonDataOffset) { builder.AddOffset(13, rightSpineSkeletonDataOffset.Value, 0); }
  public static void AddLeftDialog(FlatBufferBuilder builder, StringOffset leftDialogOffset) { builder.AddOffset(14, leftDialogOffset.Value, 0); }
  public static void AddRightDialog(FlatBufferBuilder builder, StringOffset rightDialogOffset) { builder.AddOffset(15, rightDialogOffset.Value, 0); }
  public static Offset<WWParser.Defs.SpringResource> EndSpringResource(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SpringResource>(o);
  }
  public SpringResourceT UnPack() {
    var _o = new SpringResourceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SpringResourceT _o) {
    _o.Id = this.Id;
    _o.RoleType = this.RoleType;
    _o.IsClientOnly = this.IsClientOnly;
    _o.RoleName = this.RoleName;
    _o.DialogData = this.DialogData;
    _o.DialogDataList = new List<int>();
    for (var _j = 0; _j < this.DialogDataListLength; ++_j) {_o.DialogDataList.Add(this.DialogDataList(_j));}
    _o.MailIcon = this.MailIcon;
    _o.LetterContent = this.LetterContent;
    _o.LetterTitle = this.LetterTitle;
    _o.LetterTab = this.LetterTab;
    _o.LeftSpineAtlas = this.LeftSpineAtlas;
    _o.LeftSpineSkeletonData = this.LeftSpineSkeletonData;
    _o.RightSpineAtlas = this.RightSpineAtlas;
    _o.RightSpineSkeletonData = this.RightSpineSkeletonData;
    _o.LeftDialog = this.LeftDialog;
    _o.RightDialog = this.RightDialog;
  }
  public static Offset<WWParser.Defs.SpringResource> Pack(FlatBufferBuilder builder, SpringResourceT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SpringResource>);
    var _role_name = _o.RoleName == null ? default(StringOffset) : builder.CreateString(_o.RoleName);
    var _dialog_data_list = default(VectorOffset);
    if (_o.DialogDataList != null) {
      var __dialog_data_list = _o.DialogDataList.ToArray();
      _dialog_data_list = CreateDialogDataListVector(builder, __dialog_data_list);
    }
    var _mail_icon = _o.MailIcon == null ? default(StringOffset) : builder.CreateString(_o.MailIcon);
    var _letter_content = _o.LetterContent == null ? default(StringOffset) : builder.CreateString(_o.LetterContent);
    var _letter_title = _o.LetterTitle == null ? default(StringOffset) : builder.CreateString(_o.LetterTitle);
    var _letter_tab = _o.LetterTab == null ? default(StringOffset) : builder.CreateString(_o.LetterTab);
    var _left_spine_atlas = _o.LeftSpineAtlas == null ? default(StringOffset) : builder.CreateString(_o.LeftSpineAtlas);
    var _left_spine_skeleton_data = _o.LeftSpineSkeletonData == null ? default(StringOffset) : builder.CreateString(_o.LeftSpineSkeletonData);
    var _right_spine_atlas = _o.RightSpineAtlas == null ? default(StringOffset) : builder.CreateString(_o.RightSpineAtlas);
    var _right_spine_skeleton_data = _o.RightSpineSkeletonData == null ? default(StringOffset) : builder.CreateString(_o.RightSpineSkeletonData);
    var _left_dialog = _o.LeftDialog == null ? default(StringOffset) : builder.CreateString(_o.LeftDialog);
    var _right_dialog = _o.RightDialog == null ? default(StringOffset) : builder.CreateString(_o.RightDialog);
    return CreateSpringResource(
      builder,
      _o.Id,
      _o.RoleType,
      _o.IsClientOnly,
      _role_name,
      _o.DialogData,
      _dialog_data_list,
      _mail_icon,
      _letter_content,
      _letter_title,
      _letter_tab,
      _left_spine_atlas,
      _left_spine_skeleton_data,
      _right_spine_atlas,
      _right_spine_skeleton_data,
      _left_dialog,
      _right_dialog);
  }
}

public class SpringResourceT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("role_type")]
  public int RoleType { get; set; }
  [Newtonsoft.Json.JsonProperty("is_client_only")]
  public int IsClientOnly { get; set; }
  [Newtonsoft.Json.JsonProperty("role_name")]
  public string RoleName { get; set; }
  [Newtonsoft.Json.JsonProperty("dialog_data")]
  public int DialogData { get; set; }
  [Newtonsoft.Json.JsonProperty("dialog_data_list")]
  public List<int> DialogDataList { get; set; }
  [Newtonsoft.Json.JsonProperty("mail_icon")]
  public string MailIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("letter_content")]
  public string LetterContent { get; set; }
  [Newtonsoft.Json.JsonProperty("letter_title")]
  public string LetterTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("letter_tab")]
  public string LetterTab { get; set; }
  [Newtonsoft.Json.JsonProperty("left_spine_atlas")]
  public string LeftSpineAtlas { get; set; }
  [Newtonsoft.Json.JsonProperty("left_spine_skeleton_data")]
  public string LeftSpineSkeletonData { get; set; }
  [Newtonsoft.Json.JsonProperty("right_spine_atlas")]
  public string RightSpineAtlas { get; set; }
  [Newtonsoft.Json.JsonProperty("right_spine_skeleton_data")]
  public string RightSpineSkeletonData { get; set; }
  [Newtonsoft.Json.JsonProperty("left_dialog")]
  public string LeftDialog { get; set; }
  [Newtonsoft.Json.JsonProperty("right_dialog")]
  public string RightDialog { get; set; }

  public SpringResourceT() {
    this.Id = 0;
    this.RoleType = 0;
    this.IsClientOnly = 0;
    this.RoleName = null;
    this.DialogData = 0;
    this.DialogDataList = null;
    this.MailIcon = null;
    this.LetterContent = null;
    this.LetterTitle = null;
    this.LetterTab = null;
    this.LeftSpineAtlas = null;
    this.LeftSpineSkeletonData = null;
    this.RightSpineAtlas = null;
    this.RightSpineSkeletonData = null;
    this.LeftDialog = null;
    this.RightDialog = null;
  }
}


static public class SpringResourceVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*RoleType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*IsClientOnly*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*RoleName*/, false)
      && verifier.VerifyField(tablePos, 12 /*DialogData*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*DialogDataList*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 16 /*MailIcon*/, false)
      && verifier.VerifyString(tablePos, 18 /*LetterContent*/, false)
      && verifier.VerifyString(tablePos, 20 /*LetterTitle*/, false)
      && verifier.VerifyString(tablePos, 22 /*LetterTab*/, false)
      && verifier.VerifyString(tablePos, 24 /*LeftSpineAtlas*/, false)
      && verifier.VerifyString(tablePos, 26 /*LeftSpineSkeletonData*/, false)
      && verifier.VerifyString(tablePos, 28 /*RightSpineAtlas*/, false)
      && verifier.VerifyString(tablePos, 30 /*RightSpineSkeletonData*/, false)
      && verifier.VerifyString(tablePos, 32 /*LeftDialog*/, false)
      && verifier.VerifyString(tablePos, 34 /*RightDialog*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
