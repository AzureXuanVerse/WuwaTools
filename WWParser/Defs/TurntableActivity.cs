// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TurntableActivity : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TurntableActivity GetRootAsTurntableActivity(ByteBuffer _bb) { return GetRootAsTurntableActivity(_bb, new TurntableActivity()); }
  public static TurntableActivity GetRootAsTurntableActivity(ByteBuffer _bb, TurntableActivity obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TurntableActivity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CoinQuestId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string QuestDesc { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQuestDescBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetQuestDescBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetQuestDescArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<WWParser.Defs.TurntableActivity> CreateTurntableActivity(FlatBufferBuilder builder,
      int id = 0,
      int activity_id = 0,
      int coin_quest_id = 0,
      StringOffset quest_descOffset = default(StringOffset)) {
    builder.StartTable(4);
    TurntableActivity.AddQuestDesc(builder, quest_descOffset);
    TurntableActivity.AddCoinQuestId(builder, coin_quest_id);
    TurntableActivity.AddActivityId(builder, activity_id);
    TurntableActivity.AddId(builder, id);
    return TurntableActivity.EndTurntableActivity(builder);
  }

  public static void StartTurntableActivity(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddCoinQuestId(FlatBufferBuilder builder, int coinQuestId) { builder.AddInt(2, coinQuestId, 0); }
  public static void AddQuestDesc(FlatBufferBuilder builder, StringOffset questDescOffset) { builder.AddOffset(3, questDescOffset.Value, 0); }
  public static Offset<WWParser.Defs.TurntableActivity> EndTurntableActivity(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.TurntableActivity>(o);
  }
  public TurntableActivityT UnPack() {
    var _o = new TurntableActivityT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TurntableActivityT _o) {
    _o.Id = this.Id;
    _o.ActivityId = this.ActivityId;
    _o.CoinQuestId = this.CoinQuestId;
    _o.QuestDesc = this.QuestDesc;
  }
  public static Offset<WWParser.Defs.TurntableActivity> Pack(FlatBufferBuilder builder, TurntableActivityT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.TurntableActivity>);
    var _quest_desc = _o.QuestDesc == null ? default(StringOffset) : builder.CreateString(_o.QuestDesc);
    return CreateTurntableActivity(
      builder,
      _o.Id,
      _o.ActivityId,
      _o.CoinQuestId,
      _quest_desc);
  }
}

public class TurntableActivityT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("coin_quest_id")]
  public int CoinQuestId { get; set; }
  [Newtonsoft.Json.JsonProperty("quest_desc")]
  public string QuestDesc { get; set; }

  public TurntableActivityT() {
    this.Id = 0;
    this.ActivityId = 0;
    this.CoinQuestId = 0;
    this.QuestDesc = null;
  }
}


static public class TurntableActivityVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*CoinQuestId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*QuestDesc*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
