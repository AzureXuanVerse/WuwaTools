// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BulletPreload : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BulletPreload GetRootAsBulletPreload(ByteBuffer _bb) { return GetRootAsBulletPreload(_bb, new BulletPreload()); }
  public static BulletPreload GetRootAsBulletPreload(ByteBuffer _bb, BulletPreload obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BulletPreload __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long BulletId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ActorBlueprint { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActorBlueprintBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetActorBlueprintBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetActorBlueprintArray() { return __p.__vector_as_array<byte>(8); }
  public string ActorClass(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ActorClassLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Animations(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AnimationsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Effects(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EffectsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Audios(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AudiosLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Meshes(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MeshesLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Materials(int j) { int o = __p.__offset(20); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MaterialsLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string AnimationBlueprints(int j) { int o = __p.__offset(22); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AnimationBlueprintsLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Others(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int OthersLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.BulletPreload> CreateBulletPreload(FlatBufferBuilder builder,
      int id = 0,
      long bullet_id = 0,
      StringOffset actor_blueprintOffset = default(StringOffset),
      VectorOffset actor_classOffset = default(VectorOffset),
      VectorOffset animationsOffset = default(VectorOffset),
      VectorOffset effectsOffset = default(VectorOffset),
      VectorOffset audiosOffset = default(VectorOffset),
      VectorOffset meshesOffset = default(VectorOffset),
      VectorOffset materialsOffset = default(VectorOffset),
      VectorOffset animation_blueprintsOffset = default(VectorOffset),
      VectorOffset othersOffset = default(VectorOffset)) {
    builder.StartTable(11);
    BulletPreload.AddBulletId(builder, bullet_id);
    BulletPreload.AddOthers(builder, othersOffset);
    BulletPreload.AddAnimationBlueprints(builder, animation_blueprintsOffset);
    BulletPreload.AddMaterials(builder, materialsOffset);
    BulletPreload.AddMeshes(builder, meshesOffset);
    BulletPreload.AddAudios(builder, audiosOffset);
    BulletPreload.AddEffects(builder, effectsOffset);
    BulletPreload.AddAnimations(builder, animationsOffset);
    BulletPreload.AddActorClass(builder, actor_classOffset);
    BulletPreload.AddActorBlueprint(builder, actor_blueprintOffset);
    BulletPreload.AddId(builder, id);
    return BulletPreload.EndBulletPreload(builder);
  }

  public static void StartBulletPreload(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddBulletId(FlatBufferBuilder builder, long bulletId) { builder.AddLong(1, bulletId, 0); }
  public static void AddActorBlueprint(FlatBufferBuilder builder, StringOffset actorBlueprintOffset) { builder.AddOffset(2, actorBlueprintOffset.Value, 0); }
  public static void AddActorClass(FlatBufferBuilder builder, VectorOffset actorClassOffset) { builder.AddOffset(3, actorClassOffset.Value, 0); }
  public static VectorOffset CreateActorClassVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateActorClassVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActorClassVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActorClassVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartActorClassVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAnimations(FlatBufferBuilder builder, VectorOffset animationsOffset) { builder.AddOffset(4, animationsOffset.Value, 0); }
  public static VectorOffset CreateAnimationsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAnimationsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAnimationsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAnimationsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAnimationsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEffects(FlatBufferBuilder builder, VectorOffset effectsOffset) { builder.AddOffset(5, effectsOffset.Value, 0); }
  public static VectorOffset CreateEffectsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEffectsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEffectsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEffectsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEffectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAudios(FlatBufferBuilder builder, VectorOffset audiosOffset) { builder.AddOffset(6, audiosOffset.Value, 0); }
  public static VectorOffset CreateAudiosVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAudiosVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAudiosVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAudiosVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAudiosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMeshes(FlatBufferBuilder builder, VectorOffset meshesOffset) { builder.AddOffset(7, meshesOffset.Value, 0); }
  public static VectorOffset CreateMeshesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMeshesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMeshesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMeshesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMeshesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMaterials(FlatBufferBuilder builder, VectorOffset materialsOffset) { builder.AddOffset(8, materialsOffset.Value, 0); }
  public static VectorOffset CreateMaterialsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMaterialsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMaterialsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMaterialsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMaterialsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAnimationBlueprints(FlatBufferBuilder builder, VectorOffset animationBlueprintsOffset) { builder.AddOffset(9, animationBlueprintsOffset.Value, 0); }
  public static VectorOffset CreateAnimationBlueprintsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAnimationBlueprintsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAnimationBlueprintsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAnimationBlueprintsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAnimationBlueprintsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOthers(FlatBufferBuilder builder, VectorOffset othersOffset) { builder.AddOffset(10, othersOffset.Value, 0); }
  public static VectorOffset CreateOthersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOthersVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOthersVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOthersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOthersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.BulletPreload> EndBulletPreload(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BulletPreload>(o);
  }
  public BulletPreloadT UnPack() {
    var _o = new BulletPreloadT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BulletPreloadT _o) {
    _o.Id = this.Id;
    _o.BulletId = this.BulletId;
    _o.ActorBlueprint = this.ActorBlueprint;
    _o.ActorClass = new List<string>();
    for (var _j = 0; _j < this.ActorClassLength; ++_j) {_o.ActorClass.Add(this.ActorClass(_j));}
    _o.Animations = new List<string>();
    for (var _j = 0; _j < this.AnimationsLength; ++_j) {_o.Animations.Add(this.Animations(_j));}
    _o.Effects = new List<string>();
    for (var _j = 0; _j < this.EffectsLength; ++_j) {_o.Effects.Add(this.Effects(_j));}
    _o.Audios = new List<string>();
    for (var _j = 0; _j < this.AudiosLength; ++_j) {_o.Audios.Add(this.Audios(_j));}
    _o.Meshes = new List<string>();
    for (var _j = 0; _j < this.MeshesLength; ++_j) {_o.Meshes.Add(this.Meshes(_j));}
    _o.Materials = new List<string>();
    for (var _j = 0; _j < this.MaterialsLength; ++_j) {_o.Materials.Add(this.Materials(_j));}
    _o.AnimationBlueprints = new List<string>();
    for (var _j = 0; _j < this.AnimationBlueprintsLength; ++_j) {_o.AnimationBlueprints.Add(this.AnimationBlueprints(_j));}
    _o.Others = new List<string>();
    for (var _j = 0; _j < this.OthersLength; ++_j) {_o.Others.Add(this.Others(_j));}
  }
  public static Offset<WWParser.Defs.BulletPreload> Pack(FlatBufferBuilder builder, BulletPreloadT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BulletPreload>);
    var _actor_blueprint = _o.ActorBlueprint == null ? default(StringOffset) : builder.CreateString(_o.ActorBlueprint);
    var _actor_class = default(VectorOffset);
    if (_o.ActorClass != null) {
      var __actor_class = new StringOffset[_o.ActorClass.Count];
      for (var _j = 0; _j < __actor_class.Length; ++_j) { __actor_class[_j] = builder.CreateString(_o.ActorClass[_j]); }
      _actor_class = CreateActorClassVector(builder, __actor_class);
    }
    var _animations = default(VectorOffset);
    if (_o.Animations != null) {
      var __animations = new StringOffset[_o.Animations.Count];
      for (var _j = 0; _j < __animations.Length; ++_j) { __animations[_j] = builder.CreateString(_o.Animations[_j]); }
      _animations = CreateAnimationsVector(builder, __animations);
    }
    var _effects = default(VectorOffset);
    if (_o.Effects != null) {
      var __effects = new StringOffset[_o.Effects.Count];
      for (var _j = 0; _j < __effects.Length; ++_j) { __effects[_j] = builder.CreateString(_o.Effects[_j]); }
      _effects = CreateEffectsVector(builder, __effects);
    }
    var _audios = default(VectorOffset);
    if (_o.Audios != null) {
      var __audios = new StringOffset[_o.Audios.Count];
      for (var _j = 0; _j < __audios.Length; ++_j) { __audios[_j] = builder.CreateString(_o.Audios[_j]); }
      _audios = CreateAudiosVector(builder, __audios);
    }
    var _meshes = default(VectorOffset);
    if (_o.Meshes != null) {
      var __meshes = new StringOffset[_o.Meshes.Count];
      for (var _j = 0; _j < __meshes.Length; ++_j) { __meshes[_j] = builder.CreateString(_o.Meshes[_j]); }
      _meshes = CreateMeshesVector(builder, __meshes);
    }
    var _materials = default(VectorOffset);
    if (_o.Materials != null) {
      var __materials = new StringOffset[_o.Materials.Count];
      for (var _j = 0; _j < __materials.Length; ++_j) { __materials[_j] = builder.CreateString(_o.Materials[_j]); }
      _materials = CreateMaterialsVector(builder, __materials);
    }
    var _animation_blueprints = default(VectorOffset);
    if (_o.AnimationBlueprints != null) {
      var __animation_blueprints = new StringOffset[_o.AnimationBlueprints.Count];
      for (var _j = 0; _j < __animation_blueprints.Length; ++_j) { __animation_blueprints[_j] = builder.CreateString(_o.AnimationBlueprints[_j]); }
      _animation_blueprints = CreateAnimationBlueprintsVector(builder, __animation_blueprints);
    }
    var _others = default(VectorOffset);
    if (_o.Others != null) {
      var __others = new StringOffset[_o.Others.Count];
      for (var _j = 0; _j < __others.Length; ++_j) { __others[_j] = builder.CreateString(_o.Others[_j]); }
      _others = CreateOthersVector(builder, __others);
    }
    return CreateBulletPreload(
      builder,
      _o.Id,
      _o.BulletId,
      _actor_blueprint,
      _actor_class,
      _animations,
      _effects,
      _audios,
      _meshes,
      _materials,
      _animation_blueprints,
      _others);
  }
}

public class BulletPreloadT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("bullet_id")]
  public long BulletId { get; set; }
  [Newtonsoft.Json.JsonProperty("actor_blueprint")]
  public string ActorBlueprint { get; set; }
  [Newtonsoft.Json.JsonProperty("actor_class")]
  public List<string> ActorClass { get; set; }
  [Newtonsoft.Json.JsonProperty("animations")]
  public List<string> Animations { get; set; }
  [Newtonsoft.Json.JsonProperty("effects")]
  public List<string> Effects { get; set; }
  [Newtonsoft.Json.JsonProperty("audios")]
  public List<string> Audios { get; set; }
  [Newtonsoft.Json.JsonProperty("meshes")]
  public List<string> Meshes { get; set; }
  [Newtonsoft.Json.JsonProperty("materials")]
  public List<string> Materials { get; set; }
  [Newtonsoft.Json.JsonProperty("animation_blueprints")]
  public List<string> AnimationBlueprints { get; set; }
  [Newtonsoft.Json.JsonProperty("others")]
  public List<string> Others { get; set; }

  public BulletPreloadT() {
    this.Id = 0;
    this.BulletId = 0;
    this.ActorBlueprint = null;
    this.ActorClass = null;
    this.Animations = null;
    this.Effects = null;
    this.Audios = null;
    this.Meshes = null;
    this.Materials = null;
    this.AnimationBlueprints = null;
    this.Others = null;
  }
}


static public class BulletPreloadVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*BulletId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 8 /*ActorBlueprint*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*ActorClass*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*Animations*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*Effects*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 16 /*Audios*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*Meshes*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 20 /*Materials*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 22 /*AnimationBlueprints*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 24 /*Others*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
