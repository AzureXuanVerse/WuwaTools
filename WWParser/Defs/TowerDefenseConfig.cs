// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TowerDefenseConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TowerDefenseConfig GetRootAsTowerDefenseConfig(ByteBuffer _bb) { return GetRootAsTowerDefenseConfig(_bb, new TowerDefenseConfig()); }
  public static TowerDefenseConfig GetRootAsTowerDefenseConfig(ByteBuffer _bb, TowerDefenseConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TowerDefenseConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ShowDifferent { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int ActivityType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int EntranceId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.TowerDefenseConfig> CreateTowerDefenseConfig(FlatBufferBuilder builder,
      int id = 0,
      bool show_different = false,
      int activity_type = 1,
      int entrance_id = 0) {
    builder.StartTable(4);
    TowerDefenseConfig.AddEntranceId(builder, entrance_id);
    TowerDefenseConfig.AddActivityType(builder, activity_type);
    TowerDefenseConfig.AddId(builder, id);
    TowerDefenseConfig.AddShowDifferent(builder, show_different);
    return TowerDefenseConfig.EndTowerDefenseConfig(builder);
  }

  public static void StartTowerDefenseConfig(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddShowDifferent(FlatBufferBuilder builder, bool showDifferent) { builder.AddBool(1, showDifferent, false); }
  public static void AddActivityType(FlatBufferBuilder builder, int activityType) { builder.AddInt(2, activityType, 1); }
  public static void AddEntranceId(FlatBufferBuilder builder, int entranceId) { builder.AddInt(3, entranceId, 0); }
  public static Offset<WWParser.Defs.TowerDefenseConfig> EndTowerDefenseConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.TowerDefenseConfig>(o);
  }
  public TowerDefenseConfigT UnPack() {
    var _o = new TowerDefenseConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TowerDefenseConfigT _o) {
    _o.Id = this.Id;
    _o.ShowDifferent = this.ShowDifferent;
    _o.ActivityType = this.ActivityType;
    _o.EntranceId = this.EntranceId;
  }
  public static Offset<WWParser.Defs.TowerDefenseConfig> Pack(FlatBufferBuilder builder, TowerDefenseConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.TowerDefenseConfig>);
    return CreateTowerDefenseConfig(
      builder,
      _o.Id,
      _o.ShowDifferent,
      _o.ActivityType,
      _o.EntranceId);
  }
}

public class TowerDefenseConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("show_different")]
  public bool ShowDifferent { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_type")]
  public int ActivityType { get; set; }
  [Newtonsoft.Json.JsonProperty("entrance_id")]
  public int EntranceId { get; set; }

  public TowerDefenseConfigT() {
    this.Id = 0;
    this.ShowDifferent = false;
    this.ActivityType = 1;
    this.EntranceId = 0;
  }
}


static public class TowerDefenseConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ShowDifferent*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*ActivityType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*EntranceId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
