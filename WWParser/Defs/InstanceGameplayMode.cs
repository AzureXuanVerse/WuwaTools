// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct InstanceGameplayMode : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static InstanceGameplayMode GetRootAsInstanceGameplayMode(ByteBuffer _bb) { return GetRootAsInstanceGameplayMode(_bb, new InstanceGameplayMode()); }
  public static InstanceGameplayMode GetRootAsInstanceGameplayMode(ByteBuffer _bb, InstanceGameplayMode obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InstanceGameplayMode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool DisableAllPlayerRole { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int DefaultCameraMode { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CameraParams(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CameraParamsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCameraParamsBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetCameraParamsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetCameraParamsArray() { return __p.__vector_as_array<int>(10); }

  public static Offset<WWParser.Defs.InstanceGameplayMode> CreateInstanceGameplayMode(FlatBufferBuilder builder,
      int id = 0,
      bool disable_all_player_role = false,
      int default_camera_mode = 0,
      VectorOffset camera_paramsOffset = default(VectorOffset)) {
    builder.StartTable(4);
    InstanceGameplayMode.AddCameraParams(builder, camera_paramsOffset);
    InstanceGameplayMode.AddDefaultCameraMode(builder, default_camera_mode);
    InstanceGameplayMode.AddId(builder, id);
    InstanceGameplayMode.AddDisableAllPlayerRole(builder, disable_all_player_role);
    return InstanceGameplayMode.EndInstanceGameplayMode(builder);
  }

  public static void StartInstanceGameplayMode(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDisableAllPlayerRole(FlatBufferBuilder builder, bool disableAllPlayerRole) { builder.AddBool(1, disableAllPlayerRole, false); }
  public static void AddDefaultCameraMode(FlatBufferBuilder builder, int defaultCameraMode) { builder.AddInt(2, defaultCameraMode, 0); }
  public static void AddCameraParams(FlatBufferBuilder builder, VectorOffset cameraParamsOffset) { builder.AddOffset(3, cameraParamsOffset.Value, 0); }
  public static VectorOffset CreateCameraParamsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCameraParamsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCameraParamsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCameraParamsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCameraParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.InstanceGameplayMode> EndInstanceGameplayMode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.InstanceGameplayMode>(o);
  }
  public InstanceGameplayModeT UnPack() {
    var _o = new InstanceGameplayModeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InstanceGameplayModeT _o) {
    _o.Id = this.Id;
    _o.DisableAllPlayerRole = this.DisableAllPlayerRole;
    _o.DefaultCameraMode = this.DefaultCameraMode;
    _o.CameraParams = new List<int>();
    for (var _j = 0; _j < this.CameraParamsLength; ++_j) {_o.CameraParams.Add(this.CameraParams(_j));}
  }
  public static Offset<WWParser.Defs.InstanceGameplayMode> Pack(FlatBufferBuilder builder, InstanceGameplayModeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.InstanceGameplayMode>);
    var _camera_params = default(VectorOffset);
    if (_o.CameraParams != null) {
      var __camera_params = _o.CameraParams.ToArray();
      _camera_params = CreateCameraParamsVector(builder, __camera_params);
    }
    return CreateInstanceGameplayMode(
      builder,
      _o.Id,
      _o.DisableAllPlayerRole,
      _o.DefaultCameraMode,
      _camera_params);
  }
}

public class InstanceGameplayModeT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("disable_all_player_role")]
  public bool DisableAllPlayerRole { get; set; }
  [Newtonsoft.Json.JsonProperty("default_camera_mode")]
  public int DefaultCameraMode { get; set; }
  [Newtonsoft.Json.JsonProperty("camera_params")]
  public List<int> CameraParams { get; set; }

  public InstanceGameplayModeT() {
    this.Id = 0;
    this.DisableAllPlayerRole = false;
    this.DefaultCameraMode = 0;
    this.CameraParams = null;
  }
}


static public class InstanceGameplayModeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*DisableAllPlayerRole*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*DefaultCameraMode*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*CameraParams*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
