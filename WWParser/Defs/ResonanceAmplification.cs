// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ResonanceAmplification : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ResonanceAmplification GetRootAsResonanceAmplification(ByteBuffer _bb) { return GetRootAsResonanceAmplification(_bb, new ResonanceAmplification()); }
  public static ResonanceAmplification GetRootAsResonanceAmplification(ByteBuffer _bb, ResonanceAmplification obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ResonanceAmplification __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Attr { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)7; } }
  public float LifeSeatBoostFactor(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int LifeSeatBoostFactorLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetLifeSeatBoostFactorBytes() { return __p.__vector_as_span<float>(8, 4); }
#else
  public ArraySegment<byte>? GetLifeSeatBoostFactorBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public float[] GetLifeSeatBoostFactorArray() { return __p.__vector_as_array<float>(8); }

  public static Offset<WWParser.Defs.ResonanceAmplification> CreateResonanceAmplification(FlatBufferBuilder builder,
      int id = 0,
      int attr = 7,
      VectorOffset life_seat_boost_factorOffset = default(VectorOffset)) {
    builder.StartTable(3);
    ResonanceAmplification.AddLifeSeatBoostFactor(builder, life_seat_boost_factorOffset);
    ResonanceAmplification.AddAttr(builder, attr);
    ResonanceAmplification.AddId(builder, id);
    return ResonanceAmplification.EndResonanceAmplification(builder);
  }

  public static void StartResonanceAmplification(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddAttr(FlatBufferBuilder builder, int attr) { builder.AddInt(1, attr, 7); }
  public static void AddLifeSeatBoostFactor(FlatBufferBuilder builder, VectorOffset lifeSeatBoostFactorOffset) { builder.AddOffset(2, lifeSeatBoostFactorOffset.Value, 0); }
  public static VectorOffset CreateLifeSeatBoostFactorVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLifeSeatBoostFactorVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLifeSeatBoostFactorVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLifeSeatBoostFactorVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLifeSeatBoostFactorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.ResonanceAmplification> EndResonanceAmplification(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ResonanceAmplification>(o);
  }
  public ResonanceAmplificationT UnPack() {
    var _o = new ResonanceAmplificationT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ResonanceAmplificationT _o) {
    _o.Id = this.Id;
    _o.Attr = this.Attr;
    _o.LifeSeatBoostFactor = new List<float>();
    for (var _j = 0; _j < this.LifeSeatBoostFactorLength; ++_j) {_o.LifeSeatBoostFactor.Add(this.LifeSeatBoostFactor(_j));}
  }
  public static Offset<WWParser.Defs.ResonanceAmplification> Pack(FlatBufferBuilder builder, ResonanceAmplificationT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ResonanceAmplification>);
    var _life_seat_boost_factor = default(VectorOffset);
    if (_o.LifeSeatBoostFactor != null) {
      var __life_seat_boost_factor = _o.LifeSeatBoostFactor.ToArray();
      _life_seat_boost_factor = CreateLifeSeatBoostFactorVector(builder, __life_seat_boost_factor);
    }
    return CreateResonanceAmplification(
      builder,
      _o.Id,
      _o.Attr,
      _life_seat_boost_factor);
  }
}

public class ResonanceAmplificationT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("attr")]
  public int Attr { get; set; }
  [Newtonsoft.Json.JsonProperty("life_seat_boost_factor")]
  public List<float> LifeSeatBoostFactor { get; set; }

  public ResonanceAmplificationT() {
    this.Id = 0;
    this.Attr = 7;
    this.LifeSeatBoostFactor = null;
  }
}


static public class ResonanceAmplificationVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Attr*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*LifeSeatBoostFactor*/, 4 /*float*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
