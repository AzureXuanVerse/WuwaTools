// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DirectTrainActivity : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DirectTrainActivity GetRootAsDirectTrainActivity(ByteBuffer _bb) { return GetRootAsDirectTrainActivity(_bb, new DirectTrainActivity()); }
  public static DirectTrainActivity GetRootAsDirectTrainActivity(ByteBuffer _bb, DirectTrainActivity obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DirectTrainActivity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkipQuestId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ForceRemindCond { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkipQuestCondition { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RecommendQuestId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RecommendQuestLinkList(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RecommendQuestLinkListLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRecommendQuestLinkListBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetRecommendQuestLinkListBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetRecommendQuestLinkListArray() { return __p.__vector_as_array<int>(14); }
  public string RecommendQuestLabel { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRecommendQuestLabelBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetRecommendQuestLabelBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetRecommendQuestLabelArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<WWParser.Defs.DirectTrainActivity> CreateDirectTrainActivity(FlatBufferBuilder builder,
      int id = 0,
      int skip_quest_id = 0,
      int force_remind_cond = 0,
      int skip_quest_condition = 0,
      int recommend_quest_id = 0,
      VectorOffset recommend_quest_link_listOffset = default(VectorOffset),
      StringOffset recommend_quest_labelOffset = default(StringOffset)) {
    builder.StartTable(7);
    DirectTrainActivity.AddRecommendQuestLabel(builder, recommend_quest_labelOffset);
    DirectTrainActivity.AddRecommendQuestLinkList(builder, recommend_quest_link_listOffset);
    DirectTrainActivity.AddRecommendQuestId(builder, recommend_quest_id);
    DirectTrainActivity.AddSkipQuestCondition(builder, skip_quest_condition);
    DirectTrainActivity.AddForceRemindCond(builder, force_remind_cond);
    DirectTrainActivity.AddSkipQuestId(builder, skip_quest_id);
    DirectTrainActivity.AddId(builder, id);
    return DirectTrainActivity.EndDirectTrainActivity(builder);
  }

  public static void StartDirectTrainActivity(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddSkipQuestId(FlatBufferBuilder builder, int skipQuestId) { builder.AddInt(1, skipQuestId, 0); }
  public static void AddForceRemindCond(FlatBufferBuilder builder, int forceRemindCond) { builder.AddInt(2, forceRemindCond, 0); }
  public static void AddSkipQuestCondition(FlatBufferBuilder builder, int skipQuestCondition) { builder.AddInt(3, skipQuestCondition, 0); }
  public static void AddRecommendQuestId(FlatBufferBuilder builder, int recommendQuestId) { builder.AddInt(4, recommendQuestId, 0); }
  public static void AddRecommendQuestLinkList(FlatBufferBuilder builder, VectorOffset recommendQuestLinkListOffset) { builder.AddOffset(5, recommendQuestLinkListOffset.Value, 0); }
  public static VectorOffset CreateRecommendQuestLinkListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRecommendQuestLinkListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecommendQuestLinkListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecommendQuestLinkListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRecommendQuestLinkListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRecommendQuestLabel(FlatBufferBuilder builder, StringOffset recommendQuestLabelOffset) { builder.AddOffset(6, recommendQuestLabelOffset.Value, 0); }
  public static Offset<WWParser.Defs.DirectTrainActivity> EndDirectTrainActivity(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DirectTrainActivity>(o);
  }
  public DirectTrainActivityT UnPack() {
    var _o = new DirectTrainActivityT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DirectTrainActivityT _o) {
    _o.Id = this.Id;
    _o.SkipQuestId = this.SkipQuestId;
    _o.ForceRemindCond = this.ForceRemindCond;
    _o.SkipQuestCondition = this.SkipQuestCondition;
    _o.RecommendQuestId = this.RecommendQuestId;
    _o.RecommendQuestLinkList = new List<int>();
    for (var _j = 0; _j < this.RecommendQuestLinkListLength; ++_j) {_o.RecommendQuestLinkList.Add(this.RecommendQuestLinkList(_j));}
    _o.RecommendQuestLabel = this.RecommendQuestLabel;
  }
  public static Offset<WWParser.Defs.DirectTrainActivity> Pack(FlatBufferBuilder builder, DirectTrainActivityT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DirectTrainActivity>);
    var _recommend_quest_link_list = default(VectorOffset);
    if (_o.RecommendQuestLinkList != null) {
      var __recommend_quest_link_list = _o.RecommendQuestLinkList.ToArray();
      _recommend_quest_link_list = CreateRecommendQuestLinkListVector(builder, __recommend_quest_link_list);
    }
    var _recommend_quest_label = _o.RecommendQuestLabel == null ? default(StringOffset) : builder.CreateString(_o.RecommendQuestLabel);
    return CreateDirectTrainActivity(
      builder,
      _o.Id,
      _o.SkipQuestId,
      _o.ForceRemindCond,
      _o.SkipQuestCondition,
      _o.RecommendQuestId,
      _recommend_quest_link_list,
      _recommend_quest_label);
  }
}

public class DirectTrainActivityT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("skip_quest_id")]
  public int SkipQuestId { get; set; }
  [Newtonsoft.Json.JsonProperty("force_remind_cond")]
  public int ForceRemindCond { get; set; }
  [Newtonsoft.Json.JsonProperty("skip_quest_condition")]
  public int SkipQuestCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("recommend_quest_id")]
  public int RecommendQuestId { get; set; }
  [Newtonsoft.Json.JsonProperty("recommend_quest_link_list")]
  public List<int> RecommendQuestLinkList { get; set; }
  [Newtonsoft.Json.JsonProperty("recommend_quest_label")]
  public string RecommendQuestLabel { get; set; }

  public DirectTrainActivityT() {
    this.Id = 0;
    this.SkipQuestId = 0;
    this.ForceRemindCond = 0;
    this.SkipQuestCondition = 0;
    this.RecommendQuestId = 0;
    this.RecommendQuestLinkList = null;
    this.RecommendQuestLabel = null;
  }
}


static public class DirectTrainActivityVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SkipQuestId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ForceRemindCond*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*SkipQuestCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*RecommendQuestId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*RecommendQuestLinkList*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 16 /*RecommendQuestLabel*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
