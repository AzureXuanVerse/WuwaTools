// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TravelPhantomQuest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TravelPhantomQuest GetRootAsTravelPhantomQuest(ByteBuffer _bb) { return GetRootAsTravelPhantomQuest(_bb, new TravelPhantomQuest()); }
  public static TravelPhantomQuest GetRootAsTravelPhantomQuest(ByteBuffer _bb, TravelPhantomQuest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TravelPhantomQuest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapMarkId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Sort { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AreaId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QuestId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(16); }
  public string LockName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLockNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetLockNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetLockNameArray() { return __p.__vector_as_array<byte>(18); }
  public int QuestReward { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Texture { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextureBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetTextureBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetTextureArray() { return __p.__vector_as_array<byte>(22); }
  public string UnlockTips { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnlockTipsBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetUnlockTipsBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetUnlockTipsArray() { return __p.__vector_as_array<byte>(24); }
  public string MapDesc { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapDescBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetMapDescBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetMapDescArray() { return __p.__vector_as_array<byte>(26); }

  public static Offset<WWParser.Defs.TravelPhantomQuest> CreateTravelPhantomQuest(FlatBufferBuilder builder,
      int id = 0,
      int activity_id = 0,
      int map_mark_id = 0,
      int sort = 0,
      int area_id = 0,
      int quest_id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset lock_nameOffset = default(StringOffset),
      int quest_reward = 0,
      StringOffset textureOffset = default(StringOffset),
      StringOffset unlock_tipsOffset = default(StringOffset),
      StringOffset map_descOffset = default(StringOffset)) {
    builder.StartTable(12);
    TravelPhantomQuest.AddMapDesc(builder, map_descOffset);
    TravelPhantomQuest.AddUnlockTips(builder, unlock_tipsOffset);
    TravelPhantomQuest.AddTexture(builder, textureOffset);
    TravelPhantomQuest.AddQuestReward(builder, quest_reward);
    TravelPhantomQuest.AddLockName(builder, lock_nameOffset);
    TravelPhantomQuest.AddName(builder, nameOffset);
    TravelPhantomQuest.AddQuestId(builder, quest_id);
    TravelPhantomQuest.AddAreaId(builder, area_id);
    TravelPhantomQuest.AddSort(builder, sort);
    TravelPhantomQuest.AddMapMarkId(builder, map_mark_id);
    TravelPhantomQuest.AddActivityId(builder, activity_id);
    TravelPhantomQuest.AddId(builder, id);
    return TravelPhantomQuest.EndTravelPhantomQuest(builder);
  }

  public static void StartTravelPhantomQuest(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddMapMarkId(FlatBufferBuilder builder, int mapMarkId) { builder.AddInt(2, mapMarkId, 0); }
  public static void AddSort(FlatBufferBuilder builder, int sort) { builder.AddInt(3, sort, 0); }
  public static void AddAreaId(FlatBufferBuilder builder, int areaId) { builder.AddInt(4, areaId, 0); }
  public static void AddQuestId(FlatBufferBuilder builder, int questId) { builder.AddInt(5, questId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(6, nameOffset.Value, 0); }
  public static void AddLockName(FlatBufferBuilder builder, StringOffset lockNameOffset) { builder.AddOffset(7, lockNameOffset.Value, 0); }
  public static void AddQuestReward(FlatBufferBuilder builder, int questReward) { builder.AddInt(8, questReward, 0); }
  public static void AddTexture(FlatBufferBuilder builder, StringOffset textureOffset) { builder.AddOffset(9, textureOffset.Value, 0); }
  public static void AddUnlockTips(FlatBufferBuilder builder, StringOffset unlockTipsOffset) { builder.AddOffset(10, unlockTipsOffset.Value, 0); }
  public static void AddMapDesc(FlatBufferBuilder builder, StringOffset mapDescOffset) { builder.AddOffset(11, mapDescOffset.Value, 0); }
  public static Offset<WWParser.Defs.TravelPhantomQuest> EndTravelPhantomQuest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.TravelPhantomQuest>(o);
  }
  public TravelPhantomQuestT UnPack() {
    var _o = new TravelPhantomQuestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TravelPhantomQuestT _o) {
    _o.Id = this.Id;
    _o.ActivityId = this.ActivityId;
    _o.MapMarkId = this.MapMarkId;
    _o.Sort = this.Sort;
    _o.AreaId = this.AreaId;
    _o.QuestId = this.QuestId;
    _o.Name = this.Name;
    _o.LockName = this.LockName;
    _o.QuestReward = this.QuestReward;
    _o.Texture = this.Texture;
    _o.UnlockTips = this.UnlockTips;
    _o.MapDesc = this.MapDesc;
  }
  public static Offset<WWParser.Defs.TravelPhantomQuest> Pack(FlatBufferBuilder builder, TravelPhantomQuestT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.TravelPhantomQuest>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _lock_name = _o.LockName == null ? default(StringOffset) : builder.CreateString(_o.LockName);
    var _texture = _o.Texture == null ? default(StringOffset) : builder.CreateString(_o.Texture);
    var _unlock_tips = _o.UnlockTips == null ? default(StringOffset) : builder.CreateString(_o.UnlockTips);
    var _map_desc = _o.MapDesc == null ? default(StringOffset) : builder.CreateString(_o.MapDesc);
    return CreateTravelPhantomQuest(
      builder,
      _o.Id,
      _o.ActivityId,
      _o.MapMarkId,
      _o.Sort,
      _o.AreaId,
      _o.QuestId,
      _name,
      _lock_name,
      _o.QuestReward,
      _texture,
      _unlock_tips,
      _map_desc);
  }
}

public class TravelPhantomQuestT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("map_mark_id")]
  public int MapMarkId { get; set; }
  [Newtonsoft.Json.JsonProperty("sort")]
  public int Sort { get; set; }
  [Newtonsoft.Json.JsonProperty("area_id")]
  public int AreaId { get; set; }
  [Newtonsoft.Json.JsonProperty("quest_id")]
  public int QuestId { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("lock_name")]
  public string LockName { get; set; }
  [Newtonsoft.Json.JsonProperty("quest_reward")]
  public int QuestReward { get; set; }
  [Newtonsoft.Json.JsonProperty("texture")]
  public string Texture { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_tips")]
  public string UnlockTips { get; set; }
  [Newtonsoft.Json.JsonProperty("map_desc")]
  public string MapDesc { get; set; }

  public TravelPhantomQuestT() {
    this.Id = 0;
    this.ActivityId = 0;
    this.MapMarkId = 0;
    this.Sort = 0;
    this.AreaId = 0;
    this.QuestId = 0;
    this.Name = null;
    this.LockName = null;
    this.QuestReward = 0;
    this.Texture = null;
    this.UnlockTips = null;
    this.MapDesc = null;
  }
}


static public class TravelPhantomQuestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*MapMarkId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Sort*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*AreaId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*QuestId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*Name*/, false)
      && verifier.VerifyString(tablePos, 18 /*LockName*/, false)
      && verifier.VerifyField(tablePos, 20 /*QuestReward*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*Texture*/, false)
      && verifier.VerifyString(tablePos, 24 /*UnlockTips*/, false)
      && verifier.VerifyString(tablePos, 26 /*MapDesc*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
