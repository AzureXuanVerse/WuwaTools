// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Climb : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Climb GetRootAsClimb(ByteBuffer _bb) { return GetRootAsClimb(_bb, new Climb()); }
  public static Climb GetRootAsClimb(ByteBuffer _bb, Climb obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Climb __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public WWParser.Defs.Vector? ClimbDetectPoints(int j) { int o = __p.__offset(6); return o != 0 ? (WWParser.Defs.Vector?)(new WWParser.Defs.Vector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ClimbDetectPointsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public float DetectRadius { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)20.0f; } }
  public float ClimbRadius { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)40.0f; } }
  public WWParser.Defs.Vector? ClimbFromTop { get { int o = __p.__offset(12); return o != 0 ? (WWParser.Defs.Vector?)(new WWParser.Defs.Vector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.Vector? ClimbVault { get { int o = __p.__offset(14); return o != 0 ? (WWParser.Defs.Vector?)(new WWParser.Defs.Vector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.Vector? ClimbOnTop { get { int o = __p.__offset(16); return o != 0 ? (WWParser.Defs.Vector?)(new WWParser.Defs.Vector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.FloatRange? VaultRange { get { int o = __p.__offset(18); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.FloatRange? UpArriveRange { get { int o = __p.__offset(20); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.Vector? ClimbSprintVault { get { int o = __p.__offset(22); return o != 0 ? (WWParser.Defs.Vector?)(new WWParser.Defs.Vector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.FloatRange? SprintVaultRange { get { int o = __p.__offset(24); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float ForwardBlockHeight { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)50.0f; } }
  public float ForwardBlockRadius { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)30.0f; } }
  public WWParser.Defs.FloatRange? ForwardBlockDistance { get { int o = __p.__offset(30); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float SprintVaultLongNeedDistance { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)48.0f; } }
  public float SprintVaultLongHeight { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)75.0f; } }
  public WWParser.Defs.FloatRange? SprintVaultLongRange { get { int o = __p.__offset(36); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.Vector? BlockUpOffset { get { int o = __p.__offset(38); return o != 0 ? (WWParser.Defs.Vector?)(new WWParser.Defs.Vector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float BlockUpDetectRadius { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)20.0f; } }
  public float BlockUpDetectDistance { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)250.0f; } }
  public float BlockUpBackDistance { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)100.0f; } }
  public float BlockUpBackMinDist { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)50.0f; } }
  public WWParser.Defs.Vector? BlockUpFinalMove { get { int o = __p.__offset(48); return o != 0 ? (WWParser.Defs.Vector?)(new WWParser.Defs.Vector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.FloatRange? BlockUpVerticalRange { get { int o = __p.__offset(50); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<WWParser.Defs.Climb> CreateClimb(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      VectorOffset climb_detect_pointsOffset = default(VectorOffset),
      float detect_radius = 20.0f,
      float climb_radius = 40.0f,
      Offset<WWParser.Defs.Vector> climb_from_topOffset = default(Offset<WWParser.Defs.Vector>),
      Offset<WWParser.Defs.Vector> climb_vaultOffset = default(Offset<WWParser.Defs.Vector>),
      Offset<WWParser.Defs.Vector> climb_on_topOffset = default(Offset<WWParser.Defs.Vector>),
      Offset<WWParser.Defs.FloatRange> vault_rangeOffset = default(Offset<WWParser.Defs.FloatRange>),
      Offset<WWParser.Defs.FloatRange> up_arrive_rangeOffset = default(Offset<WWParser.Defs.FloatRange>),
      Offset<WWParser.Defs.Vector> climb_sprint_vaultOffset = default(Offset<WWParser.Defs.Vector>),
      Offset<WWParser.Defs.FloatRange> sprint_vault_rangeOffset = default(Offset<WWParser.Defs.FloatRange>),
      float forward_block_height = 50.0f,
      float forward_block_radius = 30.0f,
      Offset<WWParser.Defs.FloatRange> forward_block_distanceOffset = default(Offset<WWParser.Defs.FloatRange>),
      float sprint_vault_long_need_distance = 48.0f,
      float sprint_vault_long_height = 75.0f,
      Offset<WWParser.Defs.FloatRange> sprint_vault_long_rangeOffset = default(Offset<WWParser.Defs.FloatRange>),
      Offset<WWParser.Defs.Vector> block_up_offsetOffset = default(Offset<WWParser.Defs.Vector>),
      float block_up_detect_radius = 20.0f,
      float block_up_detect_distance = 250.0f,
      float block_up_back_distance = 100.0f,
      float block_up_back_min_dist = 50.0f,
      Offset<WWParser.Defs.Vector> block_up_final_moveOffset = default(Offset<WWParser.Defs.Vector>),
      Offset<WWParser.Defs.FloatRange> block_up_vertical_rangeOffset = default(Offset<WWParser.Defs.FloatRange>)) {
    builder.StartTable(24);
    Climb.AddBlockUpVerticalRange(builder, block_up_vertical_rangeOffset);
    Climb.AddBlockUpFinalMove(builder, block_up_final_moveOffset);
    Climb.AddBlockUpBackMinDist(builder, block_up_back_min_dist);
    Climb.AddBlockUpBackDistance(builder, block_up_back_distance);
    Climb.AddBlockUpDetectDistance(builder, block_up_detect_distance);
    Climb.AddBlockUpDetectRadius(builder, block_up_detect_radius);
    Climb.AddBlockUpOffset(builder, block_up_offsetOffset);
    Climb.AddSprintVaultLongRange(builder, sprint_vault_long_rangeOffset);
    Climb.AddSprintVaultLongHeight(builder, sprint_vault_long_height);
    Climb.AddSprintVaultLongNeedDistance(builder, sprint_vault_long_need_distance);
    Climb.AddForwardBlockDistance(builder, forward_block_distanceOffset);
    Climb.AddForwardBlockRadius(builder, forward_block_radius);
    Climb.AddForwardBlockHeight(builder, forward_block_height);
    Climb.AddSprintVaultRange(builder, sprint_vault_rangeOffset);
    Climb.AddClimbSprintVault(builder, climb_sprint_vaultOffset);
    Climb.AddUpArriveRange(builder, up_arrive_rangeOffset);
    Climb.AddVaultRange(builder, vault_rangeOffset);
    Climb.AddClimbOnTop(builder, climb_on_topOffset);
    Climb.AddClimbVault(builder, climb_vaultOffset);
    Climb.AddClimbFromTop(builder, climb_from_topOffset);
    Climb.AddClimbRadius(builder, climb_radius);
    Climb.AddDetectRadius(builder, detect_radius);
    Climb.AddClimbDetectPoints(builder, climb_detect_pointsOffset);
    Climb.AddId(builder, idOffset);
    return Climb.EndClimb(builder);
  }

  public static void StartClimb(FlatBufferBuilder builder) { builder.StartTable(24); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClimbDetectPoints(FlatBufferBuilder builder, VectorOffset climbDetectPointsOffset) { builder.AddOffset(1, climbDetectPointsOffset.Value, 0); }
  public static VectorOffset CreateClimbDetectPointsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.Vector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateClimbDetectPointsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.Vector>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClimbDetectPointsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.Vector>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClimbDetectPointsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.Vector>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartClimbDetectPointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDetectRadius(FlatBufferBuilder builder, float detectRadius) { builder.AddFloat(2, detectRadius, 20.0f); }
  public static void AddClimbRadius(FlatBufferBuilder builder, float climbRadius) { builder.AddFloat(3, climbRadius, 40.0f); }
  public static void AddClimbFromTop(FlatBufferBuilder builder, Offset<WWParser.Defs.Vector> climbFromTopOffset) { builder.AddOffset(4, climbFromTopOffset.Value, 0); }
  public static void AddClimbVault(FlatBufferBuilder builder, Offset<WWParser.Defs.Vector> climbVaultOffset) { builder.AddOffset(5, climbVaultOffset.Value, 0); }
  public static void AddClimbOnTop(FlatBufferBuilder builder, Offset<WWParser.Defs.Vector> climbOnTopOffset) { builder.AddOffset(6, climbOnTopOffset.Value, 0); }
  public static void AddVaultRange(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> vaultRangeOffset) { builder.AddOffset(7, vaultRangeOffset.Value, 0); }
  public static void AddUpArriveRange(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> upArriveRangeOffset) { builder.AddOffset(8, upArriveRangeOffset.Value, 0); }
  public static void AddClimbSprintVault(FlatBufferBuilder builder, Offset<WWParser.Defs.Vector> climbSprintVaultOffset) { builder.AddOffset(9, climbSprintVaultOffset.Value, 0); }
  public static void AddSprintVaultRange(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> sprintVaultRangeOffset) { builder.AddOffset(10, sprintVaultRangeOffset.Value, 0); }
  public static void AddForwardBlockHeight(FlatBufferBuilder builder, float forwardBlockHeight) { builder.AddFloat(11, forwardBlockHeight, 50.0f); }
  public static void AddForwardBlockRadius(FlatBufferBuilder builder, float forwardBlockRadius) { builder.AddFloat(12, forwardBlockRadius, 30.0f); }
  public static void AddForwardBlockDistance(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> forwardBlockDistanceOffset) { builder.AddOffset(13, forwardBlockDistanceOffset.Value, 0); }
  public static void AddSprintVaultLongNeedDistance(FlatBufferBuilder builder, float sprintVaultLongNeedDistance) { builder.AddFloat(14, sprintVaultLongNeedDistance, 48.0f); }
  public static void AddSprintVaultLongHeight(FlatBufferBuilder builder, float sprintVaultLongHeight) { builder.AddFloat(15, sprintVaultLongHeight, 75.0f); }
  public static void AddSprintVaultLongRange(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> sprintVaultLongRangeOffset) { builder.AddOffset(16, sprintVaultLongRangeOffset.Value, 0); }
  public static void AddBlockUpOffset(FlatBufferBuilder builder, Offset<WWParser.Defs.Vector> blockUpOffsetOffset) { builder.AddOffset(17, blockUpOffsetOffset.Value, 0); }
  public static void AddBlockUpDetectRadius(FlatBufferBuilder builder, float blockUpDetectRadius) { builder.AddFloat(18, blockUpDetectRadius, 20.0f); }
  public static void AddBlockUpDetectDistance(FlatBufferBuilder builder, float blockUpDetectDistance) { builder.AddFloat(19, blockUpDetectDistance, 250.0f); }
  public static void AddBlockUpBackDistance(FlatBufferBuilder builder, float blockUpBackDistance) { builder.AddFloat(20, blockUpBackDistance, 100.0f); }
  public static void AddBlockUpBackMinDist(FlatBufferBuilder builder, float blockUpBackMinDist) { builder.AddFloat(21, blockUpBackMinDist, 50.0f); }
  public static void AddBlockUpFinalMove(FlatBufferBuilder builder, Offset<WWParser.Defs.Vector> blockUpFinalMoveOffset) { builder.AddOffset(22, blockUpFinalMoveOffset.Value, 0); }
  public static void AddBlockUpVerticalRange(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> blockUpVerticalRangeOffset) { builder.AddOffset(23, blockUpVerticalRangeOffset.Value, 0); }
  public static Offset<WWParser.Defs.Climb> EndClimb(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Climb>(o);
  }
  public ClimbT UnPack() {
    var _o = new ClimbT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ClimbT _o) {
    _o.Id = this.Id;
    _o.ClimbDetectPoints = new List<WWParser.Defs.VectorT>();
    for (var _j = 0; _j < this.ClimbDetectPointsLength; ++_j) {_o.ClimbDetectPoints.Add(this.ClimbDetectPoints(_j).HasValue ? this.ClimbDetectPoints(_j).Value.UnPack() : null);}
    _o.DetectRadius = this.DetectRadius;
    _o.ClimbRadius = this.ClimbRadius;
    _o.ClimbFromTop = this.ClimbFromTop.HasValue ? this.ClimbFromTop.Value.UnPack() : null;
    _o.ClimbVault = this.ClimbVault.HasValue ? this.ClimbVault.Value.UnPack() : null;
    _o.ClimbOnTop = this.ClimbOnTop.HasValue ? this.ClimbOnTop.Value.UnPack() : null;
    _o.VaultRange = this.VaultRange.HasValue ? this.VaultRange.Value.UnPack() : null;
    _o.UpArriveRange = this.UpArriveRange.HasValue ? this.UpArriveRange.Value.UnPack() : null;
    _o.ClimbSprintVault = this.ClimbSprintVault.HasValue ? this.ClimbSprintVault.Value.UnPack() : null;
    _o.SprintVaultRange = this.SprintVaultRange.HasValue ? this.SprintVaultRange.Value.UnPack() : null;
    _o.ForwardBlockHeight = this.ForwardBlockHeight;
    _o.ForwardBlockRadius = this.ForwardBlockRadius;
    _o.ForwardBlockDistance = this.ForwardBlockDistance.HasValue ? this.ForwardBlockDistance.Value.UnPack() : null;
    _o.SprintVaultLongNeedDistance = this.SprintVaultLongNeedDistance;
    _o.SprintVaultLongHeight = this.SprintVaultLongHeight;
    _o.SprintVaultLongRange = this.SprintVaultLongRange.HasValue ? this.SprintVaultLongRange.Value.UnPack() : null;
    _o.BlockUpOffset = this.BlockUpOffset.HasValue ? this.BlockUpOffset.Value.UnPack() : null;
    _o.BlockUpDetectRadius = this.BlockUpDetectRadius;
    _o.BlockUpDetectDistance = this.BlockUpDetectDistance;
    _o.BlockUpBackDistance = this.BlockUpBackDistance;
    _o.BlockUpBackMinDist = this.BlockUpBackMinDist;
    _o.BlockUpFinalMove = this.BlockUpFinalMove.HasValue ? this.BlockUpFinalMove.Value.UnPack() : null;
    _o.BlockUpVerticalRange = this.BlockUpVerticalRange.HasValue ? this.BlockUpVerticalRange.Value.UnPack() : null;
  }
  public static Offset<WWParser.Defs.Climb> Pack(FlatBufferBuilder builder, ClimbT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Climb>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _climb_detect_points = default(VectorOffset);
    if (_o.ClimbDetectPoints != null) {
      var __climb_detect_points = new Offset<WWParser.Defs.Vector>[_o.ClimbDetectPoints.Count];
      for (var _j = 0; _j < __climb_detect_points.Length; ++_j) { __climb_detect_points[_j] = WWParser.Defs.Vector.Pack(builder, _o.ClimbDetectPoints[_j]); }
      _climb_detect_points = CreateClimbDetectPointsVector(builder, __climb_detect_points);
    }
    var _climb_from_top = _o.ClimbFromTop == null ? default(Offset<WWParser.Defs.Vector>) : WWParser.Defs.Vector.Pack(builder, _o.ClimbFromTop);
    var _climb_vault = _o.ClimbVault == null ? default(Offset<WWParser.Defs.Vector>) : WWParser.Defs.Vector.Pack(builder, _o.ClimbVault);
    var _climb_on_top = _o.ClimbOnTop == null ? default(Offset<WWParser.Defs.Vector>) : WWParser.Defs.Vector.Pack(builder, _o.ClimbOnTop);
    var _vault_range = _o.VaultRange == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.VaultRange);
    var _up_arrive_range = _o.UpArriveRange == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.UpArriveRange);
    var _climb_sprint_vault = _o.ClimbSprintVault == null ? default(Offset<WWParser.Defs.Vector>) : WWParser.Defs.Vector.Pack(builder, _o.ClimbSprintVault);
    var _sprint_vault_range = _o.SprintVaultRange == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.SprintVaultRange);
    var _forward_block_distance = _o.ForwardBlockDistance == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.ForwardBlockDistance);
    var _sprint_vault_long_range = _o.SprintVaultLongRange == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.SprintVaultLongRange);
    var _block_up_offset = _o.BlockUpOffset == null ? default(Offset<WWParser.Defs.Vector>) : WWParser.Defs.Vector.Pack(builder, _o.BlockUpOffset);
    var _block_up_final_move = _o.BlockUpFinalMove == null ? default(Offset<WWParser.Defs.Vector>) : WWParser.Defs.Vector.Pack(builder, _o.BlockUpFinalMove);
    var _block_up_vertical_range = _o.BlockUpVerticalRange == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.BlockUpVerticalRange);
    return CreateClimb(
      builder,
      _id,
      _climb_detect_points,
      _o.DetectRadius,
      _o.ClimbRadius,
      _climb_from_top,
      _climb_vault,
      _climb_on_top,
      _vault_range,
      _up_arrive_range,
      _climb_sprint_vault,
      _sprint_vault_range,
      _o.ForwardBlockHeight,
      _o.ForwardBlockRadius,
      _forward_block_distance,
      _o.SprintVaultLongNeedDistance,
      _o.SprintVaultLongHeight,
      _sprint_vault_long_range,
      _block_up_offset,
      _o.BlockUpDetectRadius,
      _o.BlockUpDetectDistance,
      _o.BlockUpBackDistance,
      _o.BlockUpBackMinDist,
      _block_up_final_move,
      _block_up_vertical_range);
  }
}

public class ClimbT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("climb_detect_points")]
  public List<WWParser.Defs.VectorT> ClimbDetectPoints { get; set; }
  [Newtonsoft.Json.JsonProperty("detect_radius")]
  public float DetectRadius { get; set; }
  [Newtonsoft.Json.JsonProperty("climb_radius")]
  public float ClimbRadius { get; set; }
  [Newtonsoft.Json.JsonProperty("climb_from_top")]
  public WWParser.Defs.VectorT ClimbFromTop { get; set; }
  [Newtonsoft.Json.JsonProperty("climb_vault")]
  public WWParser.Defs.VectorT ClimbVault { get; set; }
  [Newtonsoft.Json.JsonProperty("climb_on_top")]
  public WWParser.Defs.VectorT ClimbOnTop { get; set; }
  [Newtonsoft.Json.JsonProperty("vault_range")]
  public WWParser.Defs.FloatRangeT VaultRange { get; set; }
  [Newtonsoft.Json.JsonProperty("up_arrive_range")]
  public WWParser.Defs.FloatRangeT UpArriveRange { get; set; }
  [Newtonsoft.Json.JsonProperty("climb_sprint_vault")]
  public WWParser.Defs.VectorT ClimbSprintVault { get; set; }
  [Newtonsoft.Json.JsonProperty("sprint_vault_range")]
  public WWParser.Defs.FloatRangeT SprintVaultRange { get; set; }
  [Newtonsoft.Json.JsonProperty("forward_block_height")]
  public float ForwardBlockHeight { get; set; }
  [Newtonsoft.Json.JsonProperty("forward_block_radius")]
  public float ForwardBlockRadius { get; set; }
  [Newtonsoft.Json.JsonProperty("forward_block_distance")]
  public WWParser.Defs.FloatRangeT ForwardBlockDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("sprint_vault_long_need_distance")]
  public float SprintVaultLongNeedDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("sprint_vault_long_height")]
  public float SprintVaultLongHeight { get; set; }
  [Newtonsoft.Json.JsonProperty("sprint_vault_long_range")]
  public WWParser.Defs.FloatRangeT SprintVaultLongRange { get; set; }
  [Newtonsoft.Json.JsonProperty("block_up_offset")]
  public WWParser.Defs.VectorT BlockUpOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("block_up_detect_radius")]
  public float BlockUpDetectRadius { get; set; }
  [Newtonsoft.Json.JsonProperty("block_up_detect_distance")]
  public float BlockUpDetectDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("block_up_back_distance")]
  public float BlockUpBackDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("block_up_back_min_dist")]
  public float BlockUpBackMinDist { get; set; }
  [Newtonsoft.Json.JsonProperty("block_up_final_move")]
  public WWParser.Defs.VectorT BlockUpFinalMove { get; set; }
  [Newtonsoft.Json.JsonProperty("block_up_vertical_range")]
  public WWParser.Defs.FloatRangeT BlockUpVerticalRange { get; set; }

  public ClimbT() {
    this.Id = null;
    this.ClimbDetectPoints = null;
    this.DetectRadius = 20.0f;
    this.ClimbRadius = 40.0f;
    this.ClimbFromTop = null;
    this.ClimbVault = null;
    this.ClimbOnTop = null;
    this.VaultRange = null;
    this.UpArriveRange = null;
    this.ClimbSprintVault = null;
    this.SprintVaultRange = null;
    this.ForwardBlockHeight = 50.0f;
    this.ForwardBlockRadius = 30.0f;
    this.ForwardBlockDistance = null;
    this.SprintVaultLongNeedDistance = 48.0f;
    this.SprintVaultLongHeight = 75.0f;
    this.SprintVaultLongRange = null;
    this.BlockUpOffset = null;
    this.BlockUpDetectRadius = 20.0f;
    this.BlockUpDetectDistance = 250.0f;
    this.BlockUpBackDistance = 100.0f;
    this.BlockUpBackMinDist = 50.0f;
    this.BlockUpFinalMove = null;
    this.BlockUpVerticalRange = null;
  }
}


static public class ClimbVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*ClimbDetectPoints*/, WWParser.Defs.VectorVerify.Verify, false)
      && verifier.VerifyField(tablePos, 8 /*DetectRadius*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ClimbRadius*/, 4 /*float*/, 4, false)
      && verifier.VerifyTable(tablePos, 12 /*ClimbFromTop*/, WWParser.Defs.VectorVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 14 /*ClimbVault*/, WWParser.Defs.VectorVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 16 /*ClimbOnTop*/, WWParser.Defs.VectorVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 18 /*VaultRange*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 20 /*UpArriveRange*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 22 /*ClimbSprintVault*/, WWParser.Defs.VectorVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 24 /*SprintVaultRange*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyField(tablePos, 26 /*ForwardBlockHeight*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*ForwardBlockRadius*/, 4 /*float*/, 4, false)
      && verifier.VerifyTable(tablePos, 30 /*ForwardBlockDistance*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyField(tablePos, 32 /*SprintVaultLongNeedDistance*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*SprintVaultLongHeight*/, 4 /*float*/, 4, false)
      && verifier.VerifyTable(tablePos, 36 /*SprintVaultLongRange*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 38 /*BlockUpOffset*/, WWParser.Defs.VectorVerify.Verify, false)
      && verifier.VerifyField(tablePos, 40 /*BlockUpDetectRadius*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*BlockUpDetectDistance*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*BlockUpBackDistance*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*BlockUpBackMinDist*/, 4 /*float*/, 4, false)
      && verifier.VerifyTable(tablePos, 48 /*BlockUpFinalMove*/, WWParser.Defs.VectorVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 50 /*BlockUpVerticalRange*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
