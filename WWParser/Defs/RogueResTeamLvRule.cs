// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueResTeamLvRule : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueResTeamLvRule GetRootAsRogueResTeamLvRule(ByteBuffer _bb) { return GetRootAsRogueResTeamLvRule(_bb, new RogueResTeamLvRule()); }
  public static RogueResTeamLvRule GetRootAsRogueResTeamLvRule(ByteBuffer _bb, RogueResTeamLvRule obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueResTeamLvRule __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LevelRange(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LevelRangeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLevelRangeBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetLevelRangeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetLevelRangeArray() { return __p.__vector_as_array<int>(6); }
  public int RoleLevel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RangeEffects(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RangeEffectsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRangeEffectsBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetRangeEffectsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetRangeEffectsArray() { return __p.__vector_as_array<int>(10); }
  public int TargetLevel { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TargetEffects(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TargetEffectsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTargetEffectsBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetTargetEffectsBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetTargetEffectsArray() { return __p.__vector_as_array<int>(14); }

  public static Offset<WWParser.Defs.RogueResTeamLvRule> CreateRogueResTeamLvRule(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset level_rangeOffset = default(VectorOffset),
      int role_level = 0,
      VectorOffset range_effectsOffset = default(VectorOffset),
      int target_level = 0,
      VectorOffset target_effectsOffset = default(VectorOffset)) {
    builder.StartTable(6);
    RogueResTeamLvRule.AddTargetEffects(builder, target_effectsOffset);
    RogueResTeamLvRule.AddTargetLevel(builder, target_level);
    RogueResTeamLvRule.AddRangeEffects(builder, range_effectsOffset);
    RogueResTeamLvRule.AddRoleLevel(builder, role_level);
    RogueResTeamLvRule.AddLevelRange(builder, level_rangeOffset);
    RogueResTeamLvRule.AddId(builder, id);
    return RogueResTeamLvRule.EndRogueResTeamLvRule(builder);
  }

  public static void StartRogueResTeamLvRule(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddLevelRange(FlatBufferBuilder builder, VectorOffset levelRangeOffset) { builder.AddOffset(1, levelRangeOffset.Value, 0); }
  public static VectorOffset CreateLevelRangeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLevelRangeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLevelRangeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLevelRangeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLevelRangeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRoleLevel(FlatBufferBuilder builder, int roleLevel) { builder.AddInt(2, roleLevel, 0); }
  public static void AddRangeEffects(FlatBufferBuilder builder, VectorOffset rangeEffectsOffset) { builder.AddOffset(3, rangeEffectsOffset.Value, 0); }
  public static VectorOffset CreateRangeEffectsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRangeEffectsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRangeEffectsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRangeEffectsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRangeEffectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTargetLevel(FlatBufferBuilder builder, int targetLevel) { builder.AddInt(4, targetLevel, 0); }
  public static void AddTargetEffects(FlatBufferBuilder builder, VectorOffset targetEffectsOffset) { builder.AddOffset(5, targetEffectsOffset.Value, 0); }
  public static VectorOffset CreateTargetEffectsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTargetEffectsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTargetEffectsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTargetEffectsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTargetEffectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.RogueResTeamLvRule> EndRogueResTeamLvRule(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueResTeamLvRule>(o);
  }
  public RogueResTeamLvRuleT UnPack() {
    var _o = new RogueResTeamLvRuleT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueResTeamLvRuleT _o) {
    _o.Id = this.Id;
    _o.LevelRange = new List<int>();
    for (var _j = 0; _j < this.LevelRangeLength; ++_j) {_o.LevelRange.Add(this.LevelRange(_j));}
    _o.RoleLevel = this.RoleLevel;
    _o.RangeEffects = new List<int>();
    for (var _j = 0; _j < this.RangeEffectsLength; ++_j) {_o.RangeEffects.Add(this.RangeEffects(_j));}
    _o.TargetLevel = this.TargetLevel;
    _o.TargetEffects = new List<int>();
    for (var _j = 0; _j < this.TargetEffectsLength; ++_j) {_o.TargetEffects.Add(this.TargetEffects(_j));}
  }
  public static Offset<WWParser.Defs.RogueResTeamLvRule> Pack(FlatBufferBuilder builder, RogueResTeamLvRuleT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueResTeamLvRule>);
    var _level_range = default(VectorOffset);
    if (_o.LevelRange != null) {
      var __level_range = _o.LevelRange.ToArray();
      _level_range = CreateLevelRangeVector(builder, __level_range);
    }
    var _range_effects = default(VectorOffset);
    if (_o.RangeEffects != null) {
      var __range_effects = _o.RangeEffects.ToArray();
      _range_effects = CreateRangeEffectsVector(builder, __range_effects);
    }
    var _target_effects = default(VectorOffset);
    if (_o.TargetEffects != null) {
      var __target_effects = _o.TargetEffects.ToArray();
      _target_effects = CreateTargetEffectsVector(builder, __target_effects);
    }
    return CreateRogueResTeamLvRule(
      builder,
      _o.Id,
      _level_range,
      _o.RoleLevel,
      _range_effects,
      _o.TargetLevel,
      _target_effects);
  }
}

public class RogueResTeamLvRuleT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("level_range")]
  public List<int> LevelRange { get; set; }
  [Newtonsoft.Json.JsonProperty("role_level")]
  public int RoleLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("range_effects")]
  public List<int> RangeEffects { get; set; }
  [Newtonsoft.Json.JsonProperty("target_level")]
  public int TargetLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("target_effects")]
  public List<int> TargetEffects { get; set; }

  public RogueResTeamLvRuleT() {
    this.Id = 0;
    this.LevelRange = null;
    this.RoleLevel = 0;
    this.RangeEffects = null;
    this.TargetLevel = 0;
    this.TargetEffects = null;
  }
}


static public class RogueResTeamLvRuleVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*LevelRange*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 8 /*RoleLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*RangeEffects*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 12 /*TargetLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*TargetEffects*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
