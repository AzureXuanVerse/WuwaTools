// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PerformanceCondition : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PerformanceCondition GetRootAsPerformanceCondition(ByteBuffer _bb) { return GetRootAsPerformanceCondition(_bb, new PerformanceCondition()); }
  public static PerformanceCondition GetRootAsPerformanceCondition(ByteBuffer _bb, PerformanceCondition obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PerformanceCondition __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float WaterHeight(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int WaterHeightLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetWaterHeightBytes() { return __p.__vector_as_span<float>(6, 4); }
#else
  public ArraySegment<byte>? GetWaterHeightBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public float[] GetWaterHeightArray() { return __p.__vector_as_array<float>(6); }
  public float StandingNormalz(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int StandingNormalzLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetStandingNormalzBytes() { return __p.__vector_as_span<float>(8, 4); }
#else
  public ArraySegment<byte>? GetStandingNormalzBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public float[] GetStandingNormalzArray() { return __p.__vector_as_array<float>(8); }
  public string DisableTag(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DisableTagLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.PerformanceCondition> CreatePerformanceCondition(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset water_heightOffset = default(VectorOffset),
      VectorOffset standing_normalzOffset = default(VectorOffset),
      VectorOffset disable_tagOffset = default(VectorOffset)) {
    builder.StartTable(4);
    PerformanceCondition.AddDisableTag(builder, disable_tagOffset);
    PerformanceCondition.AddStandingNormalz(builder, standing_normalzOffset);
    PerformanceCondition.AddWaterHeight(builder, water_heightOffset);
    PerformanceCondition.AddId(builder, id);
    return PerformanceCondition.EndPerformanceCondition(builder);
  }

  public static void StartPerformanceCondition(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddWaterHeight(FlatBufferBuilder builder, VectorOffset waterHeightOffset) { builder.AddOffset(1, waterHeightOffset.Value, 0); }
  public static VectorOffset CreateWaterHeightVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateWaterHeightVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWaterHeightVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWaterHeightVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartWaterHeightVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStandingNormalz(FlatBufferBuilder builder, VectorOffset standingNormalzOffset) { builder.AddOffset(2, standingNormalzOffset.Value, 0); }
  public static VectorOffset CreateStandingNormalzVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStandingNormalzVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStandingNormalzVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStandingNormalzVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStandingNormalzVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDisableTag(FlatBufferBuilder builder, VectorOffset disableTagOffset) { builder.AddOffset(3, disableTagOffset.Value, 0); }
  public static VectorOffset CreateDisableTagVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDisableTagVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDisableTagVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDisableTagVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDisableTagVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.PerformanceCondition> EndPerformanceCondition(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PerformanceCondition>(o);
  }
  public PerformanceConditionT UnPack() {
    var _o = new PerformanceConditionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PerformanceConditionT _o) {
    _o.Id = this.Id;
    _o.WaterHeight = new List<float>();
    for (var _j = 0; _j < this.WaterHeightLength; ++_j) {_o.WaterHeight.Add(this.WaterHeight(_j));}
    _o.StandingNormalz = new List<float>();
    for (var _j = 0; _j < this.StandingNormalzLength; ++_j) {_o.StandingNormalz.Add(this.StandingNormalz(_j));}
    _o.DisableTag = new List<string>();
    for (var _j = 0; _j < this.DisableTagLength; ++_j) {_o.DisableTag.Add(this.DisableTag(_j));}
  }
  public static Offset<WWParser.Defs.PerformanceCondition> Pack(FlatBufferBuilder builder, PerformanceConditionT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PerformanceCondition>);
    var _water_height = default(VectorOffset);
    if (_o.WaterHeight != null) {
      var __water_height = _o.WaterHeight.ToArray();
      _water_height = CreateWaterHeightVector(builder, __water_height);
    }
    var _standing_normalz = default(VectorOffset);
    if (_o.StandingNormalz != null) {
      var __standing_normalz = _o.StandingNormalz.ToArray();
      _standing_normalz = CreateStandingNormalzVector(builder, __standing_normalz);
    }
    var _disable_tag = default(VectorOffset);
    if (_o.DisableTag != null) {
      var __disable_tag = new StringOffset[_o.DisableTag.Count];
      for (var _j = 0; _j < __disable_tag.Length; ++_j) { __disable_tag[_j] = builder.CreateString(_o.DisableTag[_j]); }
      _disable_tag = CreateDisableTagVector(builder, __disable_tag);
    }
    return CreatePerformanceCondition(
      builder,
      _o.Id,
      _water_height,
      _standing_normalz,
      _disable_tag);
  }
}

public class PerformanceConditionT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("water_height")]
  public List<float> WaterHeight { get; set; }
  [Newtonsoft.Json.JsonProperty("standing_normalz")]
  public List<float> StandingNormalz { get; set; }
  [Newtonsoft.Json.JsonProperty("disable_tag")]
  public List<string> DisableTag { get; set; }

  public PerformanceConditionT() {
    this.Id = 0;
    this.WaterHeight = null;
    this.StandingNormalz = null;
    this.DisableTag = null;
  }
}


static public class PerformanceConditionVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*WaterHeight*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*StandingNormalz*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*DisableTag*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
