// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct QuestType : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static QuestType GetRootAsQuestType(ByteBuffer _bb) { return GetRootAsQuestType(_bb, new QuestType()); }
  public static QuestType GetRootAsQuestType(ByteBuffer _bb, QuestType obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public QuestType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MainId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string QuestTypeName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQuestTypeNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetQuestTypeNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetQuestTypeNameArray() { return __p.__vector_as_array<byte>(8); }
  public bool IsShowInQuestPanel { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string TypeColor { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeColorBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTypeColorBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTypeColorArray() { return __p.__vector_as_array<byte>(12); }
  public string TextColor { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextColorBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTextColorBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTextColorArray() { return __p.__vector_as_array<byte>(14); }
  public bool NeedRedDot { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int MapId(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MapIdLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetMapIdBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetMapIdBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetMapIdArray() { return __p.__vector_as_array<int>(18); }

  public static Offset<WWParser.Defs.QuestType> CreateQuestType(FlatBufferBuilder builder,
      int id = 0,
      int main_id = 0,
      StringOffset quest_type_nameOffset = default(StringOffset),
      bool is_show_in_quest_panel = false,
      StringOffset type_colorOffset = default(StringOffset),
      StringOffset text_colorOffset = default(StringOffset),
      bool need_red_dot = false,
      VectorOffset map_idOffset = default(VectorOffset)) {
    builder.StartTable(8);
    QuestType.AddMapId(builder, map_idOffset);
    QuestType.AddTextColor(builder, text_colorOffset);
    QuestType.AddTypeColor(builder, type_colorOffset);
    QuestType.AddQuestTypeName(builder, quest_type_nameOffset);
    QuestType.AddMainId(builder, main_id);
    QuestType.AddId(builder, id);
    QuestType.AddNeedRedDot(builder, need_red_dot);
    QuestType.AddIsShowInQuestPanel(builder, is_show_in_quest_panel);
    return QuestType.EndQuestType(builder);
  }

  public static void StartQuestType(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMainId(FlatBufferBuilder builder, int mainId) { builder.AddInt(1, mainId, 0); }
  public static void AddQuestTypeName(FlatBufferBuilder builder, StringOffset questTypeNameOffset) { builder.AddOffset(2, questTypeNameOffset.Value, 0); }
  public static void AddIsShowInQuestPanel(FlatBufferBuilder builder, bool isShowInQuestPanel) { builder.AddBool(3, isShowInQuestPanel, false); }
  public static void AddTypeColor(FlatBufferBuilder builder, StringOffset typeColorOffset) { builder.AddOffset(4, typeColorOffset.Value, 0); }
  public static void AddTextColor(FlatBufferBuilder builder, StringOffset textColorOffset) { builder.AddOffset(5, textColorOffset.Value, 0); }
  public static void AddNeedRedDot(FlatBufferBuilder builder, bool needRedDot) { builder.AddBool(6, needRedDot, false); }
  public static void AddMapId(FlatBufferBuilder builder, VectorOffset mapIdOffset) { builder.AddOffset(7, mapIdOffset.Value, 0); }
  public static VectorOffset CreateMapIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMapIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMapIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMapIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMapIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.QuestType> EndQuestType(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.QuestType>(o);
  }
  public QuestTypeT UnPack() {
    var _o = new QuestTypeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QuestTypeT _o) {
    _o.Id = this.Id;
    _o.MainId = this.MainId;
    _o.QuestTypeName = this.QuestTypeName;
    _o.IsShowInQuestPanel = this.IsShowInQuestPanel;
    _o.TypeColor = this.TypeColor;
    _o.TextColor = this.TextColor;
    _o.NeedRedDot = this.NeedRedDot;
    _o.MapId = new List<int>();
    for (var _j = 0; _j < this.MapIdLength; ++_j) {_o.MapId.Add(this.MapId(_j));}
  }
  public static Offset<WWParser.Defs.QuestType> Pack(FlatBufferBuilder builder, QuestTypeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.QuestType>);
    var _quest_type_name = _o.QuestTypeName == null ? default(StringOffset) : builder.CreateString(_o.QuestTypeName);
    var _type_color = _o.TypeColor == null ? default(StringOffset) : builder.CreateString(_o.TypeColor);
    var _text_color = _o.TextColor == null ? default(StringOffset) : builder.CreateString(_o.TextColor);
    var _map_id = default(VectorOffset);
    if (_o.MapId != null) {
      var __map_id = _o.MapId.ToArray();
      _map_id = CreateMapIdVector(builder, __map_id);
    }
    return CreateQuestType(
      builder,
      _o.Id,
      _o.MainId,
      _quest_type_name,
      _o.IsShowInQuestPanel,
      _type_color,
      _text_color,
      _o.NeedRedDot,
      _map_id);
  }
}

public class QuestTypeT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("main_id")]
  public int MainId { get; set; }
  [Newtonsoft.Json.JsonProperty("quest_type_name")]
  public string QuestTypeName { get; set; }
  [Newtonsoft.Json.JsonProperty("is_show_in_quest_panel")]
  public bool IsShowInQuestPanel { get; set; }
  [Newtonsoft.Json.JsonProperty("type_color")]
  public string TypeColor { get; set; }
  [Newtonsoft.Json.JsonProperty("text_color")]
  public string TextColor { get; set; }
  [Newtonsoft.Json.JsonProperty("need_red_dot")]
  public bool NeedRedDot { get; set; }
  [Newtonsoft.Json.JsonProperty("map_id")]
  public List<int> MapId { get; set; }

  public QuestTypeT() {
    this.Id = 0;
    this.MainId = 0;
    this.QuestTypeName = null;
    this.IsShowInQuestPanel = false;
    this.TypeColor = null;
    this.TextColor = null;
    this.NeedRedDot = false;
    this.MapId = null;
  }
}


static public class QuestTypeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MainId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*QuestTypeName*/, false)
      && verifier.VerifyField(tablePos, 10 /*IsShowInQuestPanel*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 12 /*TypeColor*/, false)
      && verifier.VerifyString(tablePos, 14 /*TextColor*/, false)
      && verifier.VerifyField(tablePos, 16 /*NeedRedDot*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*MapId*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
