// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PhantomCollectActivity : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PhantomCollectActivity GetRootAsPhantomCollectActivity(ByteBuffer _bb) { return GetRootAsPhantomCollectActivity(_bb, new PhantomCollectActivity()); }
  public static PhantomCollectActivity GetRootAsPhantomCollectActivity(ByteBuffer _bb, PhantomCollectActivity obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PhantomCollectActivity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Phantoms(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PhantomsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPhantomsBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetPhantomsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetPhantomsArray() { return __p.__vector_as_array<int>(6); }
  public int PhantomReward { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntString? PhantomDesc(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.DicIntString?)(new WWParser.Defs.DicIntString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PhantomDescLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntString? PhantomActivityImage(int j) { int o = __p.__offset(12); return o != 0 ? (WWParser.Defs.DicIntString?)(new WWParser.Defs.DicIntString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PhantomActivityImageLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int DataDockLevel { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DataDockReward { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PhantomSideQuest(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PhantomSideQuestLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPhantomSideQuestBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetPhantomSideQuestBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetPhantomSideQuestArray() { return __p.__vector_as_array<int>(18); }
  public int PhantomSideQuestReward { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.PhantomCollectActivity> CreatePhantomCollectActivity(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset phantomsOffset = default(VectorOffset),
      int phantom_reward = 0,
      VectorOffset phantom_descOffset = default(VectorOffset),
      VectorOffset phantom_activity_imageOffset = default(VectorOffset),
      int data_dock_level = 0,
      int data_dock_reward = 0,
      VectorOffset phantom_side_questOffset = default(VectorOffset),
      int phantom_side_quest_reward = 0) {
    builder.StartTable(9);
    PhantomCollectActivity.AddPhantomSideQuestReward(builder, phantom_side_quest_reward);
    PhantomCollectActivity.AddPhantomSideQuest(builder, phantom_side_questOffset);
    PhantomCollectActivity.AddDataDockReward(builder, data_dock_reward);
    PhantomCollectActivity.AddDataDockLevel(builder, data_dock_level);
    PhantomCollectActivity.AddPhantomActivityImage(builder, phantom_activity_imageOffset);
    PhantomCollectActivity.AddPhantomDesc(builder, phantom_descOffset);
    PhantomCollectActivity.AddPhantomReward(builder, phantom_reward);
    PhantomCollectActivity.AddPhantoms(builder, phantomsOffset);
    PhantomCollectActivity.AddId(builder, id);
    return PhantomCollectActivity.EndPhantomCollectActivity(builder);
  }

  public static void StartPhantomCollectActivity(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPhantoms(FlatBufferBuilder builder, VectorOffset phantomsOffset) { builder.AddOffset(1, phantomsOffset.Value, 0); }
  public static VectorOffset CreatePhantomsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePhantomsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhantomsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhantomsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPhantomsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPhantomReward(FlatBufferBuilder builder, int phantomReward) { builder.AddInt(2, phantomReward, 0); }
  public static void AddPhantomDesc(FlatBufferBuilder builder, VectorOffset phantomDescOffset) { builder.AddOffset(3, phantomDescOffset.Value, 0); }
  public static VectorOffset CreatePhantomDescVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePhantomDescVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhantomDescVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhantomDescVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPhantomDescVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPhantomActivityImage(FlatBufferBuilder builder, VectorOffset phantomActivityImageOffset) { builder.AddOffset(4, phantomActivityImageOffset.Value, 0); }
  public static VectorOffset CreatePhantomActivityImageVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePhantomActivityImageVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhantomActivityImageVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhantomActivityImageVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPhantomActivityImageVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDataDockLevel(FlatBufferBuilder builder, int dataDockLevel) { builder.AddInt(5, dataDockLevel, 0); }
  public static void AddDataDockReward(FlatBufferBuilder builder, int dataDockReward) { builder.AddInt(6, dataDockReward, 0); }
  public static void AddPhantomSideQuest(FlatBufferBuilder builder, VectorOffset phantomSideQuestOffset) { builder.AddOffset(7, phantomSideQuestOffset.Value, 0); }
  public static VectorOffset CreatePhantomSideQuestVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePhantomSideQuestVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhantomSideQuestVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhantomSideQuestVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPhantomSideQuestVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPhantomSideQuestReward(FlatBufferBuilder builder, int phantomSideQuestReward) { builder.AddInt(8, phantomSideQuestReward, 0); }
  public static Offset<WWParser.Defs.PhantomCollectActivity> EndPhantomCollectActivity(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PhantomCollectActivity>(o);
  }
  public PhantomCollectActivityT UnPack() {
    var _o = new PhantomCollectActivityT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PhantomCollectActivityT _o) {
    _o.Id = this.Id;
    _o.Phantoms = new List<int>();
    for (var _j = 0; _j < this.PhantomsLength; ++_j) {_o.Phantoms.Add(this.Phantoms(_j));}
    _o.PhantomReward = this.PhantomReward;
    _o.PhantomDesc = new List<WWParser.Defs.DicIntStringT>();
    for (var _j = 0; _j < this.PhantomDescLength; ++_j) {_o.PhantomDesc.Add(this.PhantomDesc(_j).HasValue ? this.PhantomDesc(_j).Value.UnPack() : null);}
    _o.PhantomActivityImage = new List<WWParser.Defs.DicIntStringT>();
    for (var _j = 0; _j < this.PhantomActivityImageLength; ++_j) {_o.PhantomActivityImage.Add(this.PhantomActivityImage(_j).HasValue ? this.PhantomActivityImage(_j).Value.UnPack() : null);}
    _o.DataDockLevel = this.DataDockLevel;
    _o.DataDockReward = this.DataDockReward;
    _o.PhantomSideQuest = new List<int>();
    for (var _j = 0; _j < this.PhantomSideQuestLength; ++_j) {_o.PhantomSideQuest.Add(this.PhantomSideQuest(_j));}
    _o.PhantomSideQuestReward = this.PhantomSideQuestReward;
  }
  public static Offset<WWParser.Defs.PhantomCollectActivity> Pack(FlatBufferBuilder builder, PhantomCollectActivityT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PhantomCollectActivity>);
    var _phantoms = default(VectorOffset);
    if (_o.Phantoms != null) {
      var __phantoms = _o.Phantoms.ToArray();
      _phantoms = CreatePhantomsVector(builder, __phantoms);
    }
    var _phantom_desc = default(VectorOffset);
    if (_o.PhantomDesc != null) {
      var __phantom_desc = new Offset<WWParser.Defs.DicIntString>[_o.PhantomDesc.Count];
      for (var _j = 0; _j < __phantom_desc.Length; ++_j) { __phantom_desc[_j] = WWParser.Defs.DicIntString.Pack(builder, _o.PhantomDesc[_j]); }
      _phantom_desc = CreatePhantomDescVector(builder, __phantom_desc);
    }
    var _phantom_activity_image = default(VectorOffset);
    if (_o.PhantomActivityImage != null) {
      var __phantom_activity_image = new Offset<WWParser.Defs.DicIntString>[_o.PhantomActivityImage.Count];
      for (var _j = 0; _j < __phantom_activity_image.Length; ++_j) { __phantom_activity_image[_j] = WWParser.Defs.DicIntString.Pack(builder, _o.PhantomActivityImage[_j]); }
      _phantom_activity_image = CreatePhantomActivityImageVector(builder, __phantom_activity_image);
    }
    var _phantom_side_quest = default(VectorOffset);
    if (_o.PhantomSideQuest != null) {
      var __phantom_side_quest = _o.PhantomSideQuest.ToArray();
      _phantom_side_quest = CreatePhantomSideQuestVector(builder, __phantom_side_quest);
    }
    return CreatePhantomCollectActivity(
      builder,
      _o.Id,
      _phantoms,
      _o.PhantomReward,
      _phantom_desc,
      _phantom_activity_image,
      _o.DataDockLevel,
      _o.DataDockReward,
      _phantom_side_quest,
      _o.PhantomSideQuestReward);
  }
}

public class PhantomCollectActivityT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("phantoms")]
  public List<int> Phantoms { get; set; }
  [Newtonsoft.Json.JsonProperty("phantom_reward")]
  public int PhantomReward { get; set; }
  [Newtonsoft.Json.JsonProperty("phantom_desc")]
  public List<WWParser.Defs.DicIntStringT> PhantomDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("phantom_activity_image")]
  public List<WWParser.Defs.DicIntStringT> PhantomActivityImage { get; set; }
  [Newtonsoft.Json.JsonProperty("data_dock_level")]
  public int DataDockLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("data_dock_reward")]
  public int DataDockReward { get; set; }
  [Newtonsoft.Json.JsonProperty("phantom_side_quest")]
  public List<int> PhantomSideQuest { get; set; }
  [Newtonsoft.Json.JsonProperty("phantom_side_quest_reward")]
  public int PhantomSideQuestReward { get; set; }

  public PhantomCollectActivityT() {
    this.Id = 0;
    this.Phantoms = null;
    this.PhantomReward = 0;
    this.PhantomDesc = null;
    this.PhantomActivityImage = null;
    this.DataDockLevel = 0;
    this.DataDockReward = 0;
    this.PhantomSideQuest = null;
    this.PhantomSideQuestReward = 0;
  }
}


static public class PhantomCollectActivityVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Phantoms*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 8 /*PhantomReward*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*PhantomDesc*/, WWParser.Defs.DicIntStringVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 12 /*PhantomActivityImage*/, WWParser.Defs.DicIntStringVerify.Verify, false)
      && verifier.VerifyField(tablePos, 14 /*DataDockLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*DataDockReward*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*PhantomSideQuest*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 20 /*PhantomSideQuestReward*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
