// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RoleBreach : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RoleBreach GetRootAsRoleBreach(ByteBuffer _bb) { return GetRootAsRoleBreach(_bb, new RoleBreach()); }
  public static RoleBreach GetRootAsRoleBreach(ByteBuffer _bb, RoleBreach obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoleBreach __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BreachGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BreachLevel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxLevel { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? BreachConsume(int j) { int o = __p.__offset(12); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BreachConsumeLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int BreachReward { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConditionId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.RoleBreach> CreateRoleBreach(FlatBufferBuilder builder,
      int id = 0,
      int breach_group_id = 0,
      int breach_level = 0,
      int max_level = 0,
      VectorOffset breach_consumeOffset = default(VectorOffset),
      int breach_reward = 0,
      int condition_id = 0) {
    builder.StartTable(7);
    RoleBreach.AddConditionId(builder, condition_id);
    RoleBreach.AddBreachReward(builder, breach_reward);
    RoleBreach.AddBreachConsume(builder, breach_consumeOffset);
    RoleBreach.AddMaxLevel(builder, max_level);
    RoleBreach.AddBreachLevel(builder, breach_level);
    RoleBreach.AddBreachGroupId(builder, breach_group_id);
    RoleBreach.AddId(builder, id);
    return RoleBreach.EndRoleBreach(builder);
  }

  public static void StartRoleBreach(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddBreachGroupId(FlatBufferBuilder builder, int breachGroupId) { builder.AddInt(1, breachGroupId, 0); }
  public static void AddBreachLevel(FlatBufferBuilder builder, int breachLevel) { builder.AddInt(2, breachLevel, 0); }
  public static void AddMaxLevel(FlatBufferBuilder builder, int maxLevel) { builder.AddInt(3, maxLevel, 0); }
  public static void AddBreachConsume(FlatBufferBuilder builder, VectorOffset breachConsumeOffset) { builder.AddOffset(4, breachConsumeOffset.Value, 0); }
  public static VectorOffset CreateBreachConsumeVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBreachConsumeVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBreachConsumeVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBreachConsumeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBreachConsumeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBreachReward(FlatBufferBuilder builder, int breachReward) { builder.AddInt(5, breachReward, 0); }
  public static void AddConditionId(FlatBufferBuilder builder, int conditionId) { builder.AddInt(6, conditionId, 0); }
  public static Offset<WWParser.Defs.RoleBreach> EndRoleBreach(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RoleBreach>(o);
  }
  public RoleBreachT UnPack() {
    var _o = new RoleBreachT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RoleBreachT _o) {
    _o.Id = this.Id;
    _o.BreachGroupId = this.BreachGroupId;
    _o.BreachLevel = this.BreachLevel;
    _o.MaxLevel = this.MaxLevel;
    _o.BreachConsume = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.BreachConsumeLength; ++_j) {_o.BreachConsume.Add(this.BreachConsume(_j).HasValue ? this.BreachConsume(_j).Value.UnPack() : null);}
    _o.BreachReward = this.BreachReward;
    _o.ConditionId = this.ConditionId;
  }
  public static Offset<WWParser.Defs.RoleBreach> Pack(FlatBufferBuilder builder, RoleBreachT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RoleBreach>);
    var _breach_consume = default(VectorOffset);
    if (_o.BreachConsume != null) {
      var __breach_consume = new Offset<WWParser.Defs.DicIntInt>[_o.BreachConsume.Count];
      for (var _j = 0; _j < __breach_consume.Length; ++_j) { __breach_consume[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.BreachConsume[_j]); }
      _breach_consume = CreateBreachConsumeVector(builder, __breach_consume);
    }
    return CreateRoleBreach(
      builder,
      _o.Id,
      _o.BreachGroupId,
      _o.BreachLevel,
      _o.MaxLevel,
      _breach_consume,
      _o.BreachReward,
      _o.ConditionId);
  }
}

public class RoleBreachT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("breach_group_id")]
  public int BreachGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("breach_level")]
  public int BreachLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("max_level")]
  public int MaxLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("breach_consume")]
  public List<WWParser.Defs.DicIntIntT> BreachConsume { get; set; }
  [Newtonsoft.Json.JsonProperty("breach_reward")]
  public int BreachReward { get; set; }
  [Newtonsoft.Json.JsonProperty("condition_id")]
  public int ConditionId { get; set; }

  public RoleBreachT() {
    this.Id = 0;
    this.BreachGroupId = 0;
    this.BreachLevel = 0;
    this.MaxLevel = 0;
    this.BreachConsume = null;
    this.BreachReward = 0;
    this.ConditionId = 0;
  }
}


static public class RoleBreachVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*BreachGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*BreachLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*MaxLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 12 /*BreachConsume*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 14 /*BreachReward*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*ConditionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
