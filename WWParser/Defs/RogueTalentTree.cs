// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueTalentTree : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueTalentTree GetRootAsRogueTalentTree(ByteBuffer _bb) { return GetRootAsRogueTalentTree(_bb, new RogueTalentTree()); }
  public static RogueTalentTree GetRootAsRogueTalentTree(ByteBuffer _bb, RogueTalentTree obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueTalentTree __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SeasonId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TalentType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Column { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Row { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PostId(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PostIdLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPostIdBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetPostIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetPostIdArray() { return __p.__vector_as_array<int>(14); }
  public int Condition { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Consule(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ConsuleLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetConsuleBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetConsuleBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetConsuleArray() { return __p.__vector_as_array<int>(18); }
  public int Describe { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.RogueTalentTree> CreateRogueTalentTree(FlatBufferBuilder builder,
      int id = 0,
      int season_id = 0,
      int talent_type = 0,
      int column = 0,
      int row = 0,
      VectorOffset post_idOffset = default(VectorOffset),
      int condition = 0,
      VectorOffset consuleOffset = default(VectorOffset),
      int describe = 0) {
    builder.StartTable(9);
    RogueTalentTree.AddDescribe(builder, describe);
    RogueTalentTree.AddConsule(builder, consuleOffset);
    RogueTalentTree.AddCondition(builder, condition);
    RogueTalentTree.AddPostId(builder, post_idOffset);
    RogueTalentTree.AddRow(builder, row);
    RogueTalentTree.AddColumn(builder, column);
    RogueTalentTree.AddTalentType(builder, talent_type);
    RogueTalentTree.AddSeasonId(builder, season_id);
    RogueTalentTree.AddId(builder, id);
    return RogueTalentTree.EndRogueTalentTree(builder);
  }

  public static void StartRogueTalentTree(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddSeasonId(FlatBufferBuilder builder, int seasonId) { builder.AddInt(1, seasonId, 0); }
  public static void AddTalentType(FlatBufferBuilder builder, int talentType) { builder.AddInt(2, talentType, 0); }
  public static void AddColumn(FlatBufferBuilder builder, int column) { builder.AddInt(3, column, 0); }
  public static void AddRow(FlatBufferBuilder builder, int row) { builder.AddInt(4, row, 0); }
  public static void AddPostId(FlatBufferBuilder builder, VectorOffset postIdOffset) { builder.AddOffset(5, postIdOffset.Value, 0); }
  public static VectorOffset CreatePostIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePostIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePostIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePostIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPostIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCondition(FlatBufferBuilder builder, int condition) { builder.AddInt(6, condition, 0); }
  public static void AddConsule(FlatBufferBuilder builder, VectorOffset consuleOffset) { builder.AddOffset(7, consuleOffset.Value, 0); }
  public static VectorOffset CreateConsuleVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConsuleVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConsuleVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConsuleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConsuleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescribe(FlatBufferBuilder builder, int describe) { builder.AddInt(8, describe, 0); }
  public static Offset<WWParser.Defs.RogueTalentTree> EndRogueTalentTree(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueTalentTree>(o);
  }
  public RogueTalentTreeT UnPack() {
    var _o = new RogueTalentTreeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueTalentTreeT _o) {
    _o.Id = this.Id;
    _o.SeasonId = this.SeasonId;
    _o.TalentType = this.TalentType;
    _o.Column = this.Column;
    _o.Row = this.Row;
    _o.PostId = new List<int>();
    for (var _j = 0; _j < this.PostIdLength; ++_j) {_o.PostId.Add(this.PostId(_j));}
    _o.Condition = this.Condition;
    _o.Consule = new List<int>();
    for (var _j = 0; _j < this.ConsuleLength; ++_j) {_o.Consule.Add(this.Consule(_j));}
    _o.Describe = this.Describe;
  }
  public static Offset<WWParser.Defs.RogueTalentTree> Pack(FlatBufferBuilder builder, RogueTalentTreeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueTalentTree>);
    var _post_id = default(VectorOffset);
    if (_o.PostId != null) {
      var __post_id = _o.PostId.ToArray();
      _post_id = CreatePostIdVector(builder, __post_id);
    }
    var _consule = default(VectorOffset);
    if (_o.Consule != null) {
      var __consule = _o.Consule.ToArray();
      _consule = CreateConsuleVector(builder, __consule);
    }
    return CreateRogueTalentTree(
      builder,
      _o.Id,
      _o.SeasonId,
      _o.TalentType,
      _o.Column,
      _o.Row,
      _post_id,
      _o.Condition,
      _consule,
      _o.Describe);
  }
}

public class RogueTalentTreeT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("season_id")]
  public int SeasonId { get; set; }
  [Newtonsoft.Json.JsonProperty("talent_type")]
  public int TalentType { get; set; }
  [Newtonsoft.Json.JsonProperty("column")]
  public int Column { get; set; }
  [Newtonsoft.Json.JsonProperty("row")]
  public int Row { get; set; }
  [Newtonsoft.Json.JsonProperty("post_id")]
  public List<int> PostId { get; set; }
  [Newtonsoft.Json.JsonProperty("condition")]
  public int Condition { get; set; }
  [Newtonsoft.Json.JsonProperty("consule")]
  public List<int> Consule { get; set; }
  [Newtonsoft.Json.JsonProperty("describe")]
  public int Describe { get; set; }

  public RogueTalentTreeT() {
    this.Id = 0;
    this.SeasonId = 0;
    this.TalentType = 0;
    this.Column = 0;
    this.Row = 0;
    this.PostId = null;
    this.Condition = 0;
    this.Consule = null;
    this.Describe = 0;
  }
}


static public class RogueTalentTreeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SeasonId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*TalentType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Column*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Row*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*PostId*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 16 /*Condition*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*Consule*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 20 /*Describe*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
