// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SilentAreaDetection : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SilentAreaDetection GetRootAsSilentAreaDetection(ByteBuffer _bb) { return GetRootAsSilentAreaDetection(_bb, new SilentAreaDetection()); }
  public static SilentAreaDetection GetRootAsSilentAreaDetection(ByteBuffer _bb, SilentAreaDetection obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SilentAreaDetection __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int GuideId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LevelPlayList(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LevelPlayListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLevelPlayListBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetLevelPlayListBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetLevelPlayListArray() { return __p.__vector_as_array<int>(10); }
  public string InstanceSubTypeDescription { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInstanceSubTypeDescriptionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetInstanceSubTypeDescriptionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetInstanceSubTypeDescriptionArray() { return __p.__vector_as_array<byte>(12); }
  public int DangerType { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int Secondary { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TypeDescription2 { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MatType { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string AttributesDescriptionLock { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributesDescriptionLockBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetAttributesDescriptionLockBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetAttributesDescriptionLockArray() { return __p.__vector_as_array<byte>(22); }
  public string AttributesDescriptionUnlock { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributesDescriptionUnlockBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetAttributesDescriptionUnlockBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetAttributesDescriptionUnlockArray() { return __p.__vector_as_array<byte>(24); }
  public string BigIcon { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBigIconBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetBigIconBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetBigIconArray() { return __p.__vector_as_array<byte>(26); }
  public string Icon { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(28); }
  public string LockBigIcon { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLockBigIconBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetLockBigIconBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetLockBigIconArray() { return __p.__vector_as_array<byte>(30); }
  public string TemporaryIconUnLock { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTemporaryIconUnLockBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetTemporaryIconUnLockBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetTemporaryIconUnLockArray() { return __p.__vector_as_array<byte>(32); }
  public string TemporaryIconlock { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTemporaryIconlockBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetTemporaryIconlockBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetTemporaryIconlockArray() { return __p.__vector_as_array<byte>(34); }
  public int ShowReward { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? ShowRewardMap(int j) { int o = __p.__offset(38); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ShowRewardMapLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int BeginTimeStamp { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PreOpenId { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MarkId { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LockCon { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PhantomId(int j) { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PhantomIdLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPhantomIdBytes() { return __p.__vector_as_span<int>(48, 4); }
#else
  public ArraySegment<byte>? GetPhantomIdBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public int[] GetPhantomIdArray() { return __p.__vector_as_array<int>(48); }
  public int FirstDropId { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AdditionalId { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SortId { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string NewContent { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNewContentBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetNewContentBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetNewContentArray() { return __p.__vector_as_array<byte>(56); }

  public static Offset<WWParser.Defs.SilentAreaDetection> CreateSilentAreaDetection(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      int guide_id = 0,
      VectorOffset level_play_listOffset = default(VectorOffset),
      StringOffset instance_sub_type_descriptionOffset = default(StringOffset),
      int danger_type = 1,
      int secondary = 0,
      int type_description2 = 0,
      int mat_type = 0,
      StringOffset attributes_description_lockOffset = default(StringOffset),
      StringOffset attributes_description_unlockOffset = default(StringOffset),
      StringOffset big_iconOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset lock_big_iconOffset = default(StringOffset),
      StringOffset temporary_icon_un_lockOffset = default(StringOffset),
      StringOffset temporary_iconlockOffset = default(StringOffset),
      int show_reward = 0,
      VectorOffset show_reward_mapOffset = default(VectorOffset),
      int begin_time_stamp = 0,
      int pre_open_id = 0,
      int mark_id = 0,
      int lock_con = 0,
      VectorOffset phantom_idOffset = default(VectorOffset),
      int first_drop_id = 0,
      int additional_id = 0,
      int sort_id = 0,
      StringOffset new_contentOffset = default(StringOffset)) {
    builder.StartTable(27);
    SilentAreaDetection.AddNewContent(builder, new_contentOffset);
    SilentAreaDetection.AddSortId(builder, sort_id);
    SilentAreaDetection.AddAdditionalId(builder, additional_id);
    SilentAreaDetection.AddFirstDropId(builder, first_drop_id);
    SilentAreaDetection.AddPhantomId(builder, phantom_idOffset);
    SilentAreaDetection.AddLockCon(builder, lock_con);
    SilentAreaDetection.AddMarkId(builder, mark_id);
    SilentAreaDetection.AddPreOpenId(builder, pre_open_id);
    SilentAreaDetection.AddBeginTimeStamp(builder, begin_time_stamp);
    SilentAreaDetection.AddShowRewardMap(builder, show_reward_mapOffset);
    SilentAreaDetection.AddShowReward(builder, show_reward);
    SilentAreaDetection.AddTemporaryIconlock(builder, temporary_iconlockOffset);
    SilentAreaDetection.AddTemporaryIconUnLock(builder, temporary_icon_un_lockOffset);
    SilentAreaDetection.AddLockBigIcon(builder, lock_big_iconOffset);
    SilentAreaDetection.AddIcon(builder, iconOffset);
    SilentAreaDetection.AddBigIcon(builder, big_iconOffset);
    SilentAreaDetection.AddAttributesDescriptionUnlock(builder, attributes_description_unlockOffset);
    SilentAreaDetection.AddAttributesDescriptionLock(builder, attributes_description_lockOffset);
    SilentAreaDetection.AddMatType(builder, mat_type);
    SilentAreaDetection.AddTypeDescription2(builder, type_description2);
    SilentAreaDetection.AddSecondary(builder, secondary);
    SilentAreaDetection.AddDangerType(builder, danger_type);
    SilentAreaDetection.AddInstanceSubTypeDescription(builder, instance_sub_type_descriptionOffset);
    SilentAreaDetection.AddLevelPlayList(builder, level_play_listOffset);
    SilentAreaDetection.AddGuideId(builder, guide_id);
    SilentAreaDetection.AddName(builder, nameOffset);
    SilentAreaDetection.AddId(builder, id);
    return SilentAreaDetection.EndSilentAreaDetection(builder);
  }

  public static void StartSilentAreaDetection(FlatBufferBuilder builder) { builder.StartTable(27); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddGuideId(FlatBufferBuilder builder, int guideId) { builder.AddInt(2, guideId, 0); }
  public static void AddLevelPlayList(FlatBufferBuilder builder, VectorOffset levelPlayListOffset) { builder.AddOffset(3, levelPlayListOffset.Value, 0); }
  public static VectorOffset CreateLevelPlayListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLevelPlayListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLevelPlayListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLevelPlayListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLevelPlayListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInstanceSubTypeDescription(FlatBufferBuilder builder, StringOffset instanceSubTypeDescriptionOffset) { builder.AddOffset(4, instanceSubTypeDescriptionOffset.Value, 0); }
  public static void AddDangerType(FlatBufferBuilder builder, int dangerType) { builder.AddInt(5, dangerType, 1); }
  public static void AddSecondary(FlatBufferBuilder builder, int secondary) { builder.AddInt(6, secondary, 0); }
  public static void AddTypeDescription2(FlatBufferBuilder builder, int typeDescription2) { builder.AddInt(7, typeDescription2, 0); }
  public static void AddMatType(FlatBufferBuilder builder, int matType) { builder.AddInt(8, matType, 0); }
  public static void AddAttributesDescriptionLock(FlatBufferBuilder builder, StringOffset attributesDescriptionLockOffset) { builder.AddOffset(9, attributesDescriptionLockOffset.Value, 0); }
  public static void AddAttributesDescriptionUnlock(FlatBufferBuilder builder, StringOffset attributesDescriptionUnlockOffset) { builder.AddOffset(10, attributesDescriptionUnlockOffset.Value, 0); }
  public static void AddBigIcon(FlatBufferBuilder builder, StringOffset bigIconOffset) { builder.AddOffset(11, bigIconOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(12, iconOffset.Value, 0); }
  public static void AddLockBigIcon(FlatBufferBuilder builder, StringOffset lockBigIconOffset) { builder.AddOffset(13, lockBigIconOffset.Value, 0); }
  public static void AddTemporaryIconUnLock(FlatBufferBuilder builder, StringOffset temporaryIconUnLockOffset) { builder.AddOffset(14, temporaryIconUnLockOffset.Value, 0); }
  public static void AddTemporaryIconlock(FlatBufferBuilder builder, StringOffset temporaryIconlockOffset) { builder.AddOffset(15, temporaryIconlockOffset.Value, 0); }
  public static void AddShowReward(FlatBufferBuilder builder, int showReward) { builder.AddInt(16, showReward, 0); }
  public static void AddShowRewardMap(FlatBufferBuilder builder, VectorOffset showRewardMapOffset) { builder.AddOffset(17, showRewardMapOffset.Value, 0); }
  public static VectorOffset CreateShowRewardMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateShowRewardMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowRewardMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowRewardMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShowRewardMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBeginTimeStamp(FlatBufferBuilder builder, int beginTimeStamp) { builder.AddInt(18, beginTimeStamp, 0); }
  public static void AddPreOpenId(FlatBufferBuilder builder, int preOpenId) { builder.AddInt(19, preOpenId, 0); }
  public static void AddMarkId(FlatBufferBuilder builder, int markId) { builder.AddInt(20, markId, 0); }
  public static void AddLockCon(FlatBufferBuilder builder, int lockCon) { builder.AddInt(21, lockCon, 0); }
  public static void AddPhantomId(FlatBufferBuilder builder, VectorOffset phantomIdOffset) { builder.AddOffset(22, phantomIdOffset.Value, 0); }
  public static VectorOffset CreatePhantomIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePhantomIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhantomIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhantomIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPhantomIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFirstDropId(FlatBufferBuilder builder, int firstDropId) { builder.AddInt(23, firstDropId, 0); }
  public static void AddAdditionalId(FlatBufferBuilder builder, int additionalId) { builder.AddInt(24, additionalId, 0); }
  public static void AddSortId(FlatBufferBuilder builder, int sortId) { builder.AddInt(25, sortId, 0); }
  public static void AddNewContent(FlatBufferBuilder builder, StringOffset newContentOffset) { builder.AddOffset(26, newContentOffset.Value, 0); }
  public static Offset<WWParser.Defs.SilentAreaDetection> EndSilentAreaDetection(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SilentAreaDetection>(o);
  }
  public SilentAreaDetectionT UnPack() {
    var _o = new SilentAreaDetectionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SilentAreaDetectionT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.GuideId = this.GuideId;
    _o.LevelPlayList = new List<int>();
    for (var _j = 0; _j < this.LevelPlayListLength; ++_j) {_o.LevelPlayList.Add(this.LevelPlayList(_j));}
    _o.InstanceSubTypeDescription = this.InstanceSubTypeDescription;
    _o.DangerType = this.DangerType;
    _o.Secondary = this.Secondary;
    _o.TypeDescription2 = this.TypeDescription2;
    _o.MatType = this.MatType;
    _o.AttributesDescriptionLock = this.AttributesDescriptionLock;
    _o.AttributesDescriptionUnlock = this.AttributesDescriptionUnlock;
    _o.BigIcon = this.BigIcon;
    _o.Icon = this.Icon;
    _o.LockBigIcon = this.LockBigIcon;
    _o.TemporaryIconUnLock = this.TemporaryIconUnLock;
    _o.TemporaryIconlock = this.TemporaryIconlock;
    _o.ShowReward = this.ShowReward;
    _o.ShowRewardMap = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.ShowRewardMapLength; ++_j) {_o.ShowRewardMap.Add(this.ShowRewardMap(_j).HasValue ? this.ShowRewardMap(_j).Value.UnPack() : null);}
    _o.BeginTimeStamp = this.BeginTimeStamp;
    _o.PreOpenId = this.PreOpenId;
    _o.MarkId = this.MarkId;
    _o.LockCon = this.LockCon;
    _o.PhantomId = new List<int>();
    for (var _j = 0; _j < this.PhantomIdLength; ++_j) {_o.PhantomId.Add(this.PhantomId(_j));}
    _o.FirstDropId = this.FirstDropId;
    _o.AdditionalId = this.AdditionalId;
    _o.SortId = this.SortId;
    _o.NewContent = this.NewContent;
  }
  public static Offset<WWParser.Defs.SilentAreaDetection> Pack(FlatBufferBuilder builder, SilentAreaDetectionT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SilentAreaDetection>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _level_play_list = default(VectorOffset);
    if (_o.LevelPlayList != null) {
      var __level_play_list = _o.LevelPlayList.ToArray();
      _level_play_list = CreateLevelPlayListVector(builder, __level_play_list);
    }
    var _instance_sub_type_description = _o.InstanceSubTypeDescription == null ? default(StringOffset) : builder.CreateString(_o.InstanceSubTypeDescription);
    var _attributes_description_lock = _o.AttributesDescriptionLock == null ? default(StringOffset) : builder.CreateString(_o.AttributesDescriptionLock);
    var _attributes_description_unlock = _o.AttributesDescriptionUnlock == null ? default(StringOffset) : builder.CreateString(_o.AttributesDescriptionUnlock);
    var _big_icon = _o.BigIcon == null ? default(StringOffset) : builder.CreateString(_o.BigIcon);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _lock_big_icon = _o.LockBigIcon == null ? default(StringOffset) : builder.CreateString(_o.LockBigIcon);
    var _temporary_icon_un_lock = _o.TemporaryIconUnLock == null ? default(StringOffset) : builder.CreateString(_o.TemporaryIconUnLock);
    var _temporary_iconlock = _o.TemporaryIconlock == null ? default(StringOffset) : builder.CreateString(_o.TemporaryIconlock);
    var _show_reward_map = default(VectorOffset);
    if (_o.ShowRewardMap != null) {
      var __show_reward_map = new Offset<WWParser.Defs.DicIntInt>[_o.ShowRewardMap.Count];
      for (var _j = 0; _j < __show_reward_map.Length; ++_j) { __show_reward_map[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.ShowRewardMap[_j]); }
      _show_reward_map = CreateShowRewardMapVector(builder, __show_reward_map);
    }
    var _phantom_id = default(VectorOffset);
    if (_o.PhantomId != null) {
      var __phantom_id = _o.PhantomId.ToArray();
      _phantom_id = CreatePhantomIdVector(builder, __phantom_id);
    }
    var _new_content = _o.NewContent == null ? default(StringOffset) : builder.CreateString(_o.NewContent);
    return CreateSilentAreaDetection(
      builder,
      _o.Id,
      _name,
      _o.GuideId,
      _level_play_list,
      _instance_sub_type_description,
      _o.DangerType,
      _o.Secondary,
      _o.TypeDescription2,
      _o.MatType,
      _attributes_description_lock,
      _attributes_description_unlock,
      _big_icon,
      _icon,
      _lock_big_icon,
      _temporary_icon_un_lock,
      _temporary_iconlock,
      _o.ShowReward,
      _show_reward_map,
      _o.BeginTimeStamp,
      _o.PreOpenId,
      _o.MarkId,
      _o.LockCon,
      _phantom_id,
      _o.FirstDropId,
      _o.AdditionalId,
      _o.SortId,
      _new_content);
  }
}

public class SilentAreaDetectionT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("guide_id")]
  public int GuideId { get; set; }
  [Newtonsoft.Json.JsonProperty("level_play_list")]
  public List<int> LevelPlayList { get; set; }
  [Newtonsoft.Json.JsonProperty("instance_sub_type_description")]
  public string InstanceSubTypeDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("danger_type")]
  public int DangerType { get; set; }
  [Newtonsoft.Json.JsonProperty("secondary")]
  public int Secondary { get; set; }
  [Newtonsoft.Json.JsonProperty("type_description2")]
  public int TypeDescription2 { get; set; }
  [Newtonsoft.Json.JsonProperty("mat_type")]
  public int MatType { get; set; }
  [Newtonsoft.Json.JsonProperty("attributes_description_lock")]
  public string AttributesDescriptionLock { get; set; }
  [Newtonsoft.Json.JsonProperty("attributes_description_unlock")]
  public string AttributesDescriptionUnlock { get; set; }
  [Newtonsoft.Json.JsonProperty("big_icon")]
  public string BigIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("lock_big_icon")]
  public string LockBigIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("temporary_icon_un_lock")]
  public string TemporaryIconUnLock { get; set; }
  [Newtonsoft.Json.JsonProperty("temporary_iconlock")]
  public string TemporaryIconlock { get; set; }
  [Newtonsoft.Json.JsonProperty("show_reward")]
  public int ShowReward { get; set; }
  [Newtonsoft.Json.JsonProperty("show_reward_map")]
  public List<WWParser.Defs.DicIntIntT> ShowRewardMap { get; set; }
  [Newtonsoft.Json.JsonProperty("begin_time_stamp")]
  public int BeginTimeStamp { get; set; }
  [Newtonsoft.Json.JsonProperty("pre_open_id")]
  public int PreOpenId { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_id")]
  public int MarkId { get; set; }
  [Newtonsoft.Json.JsonProperty("lock_con")]
  public int LockCon { get; set; }
  [Newtonsoft.Json.JsonProperty("phantom_id")]
  public List<int> PhantomId { get; set; }
  [Newtonsoft.Json.JsonProperty("first_drop_id")]
  public int FirstDropId { get; set; }
  [Newtonsoft.Json.JsonProperty("additional_id")]
  public int AdditionalId { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_id")]
  public int SortId { get; set; }
  [Newtonsoft.Json.JsonProperty("new_content")]
  public string NewContent { get; set; }

  public SilentAreaDetectionT() {
    this.Id = 0;
    this.Name = null;
    this.GuideId = 0;
    this.LevelPlayList = null;
    this.InstanceSubTypeDescription = null;
    this.DangerType = 1;
    this.Secondary = 0;
    this.TypeDescription2 = 0;
    this.MatType = 0;
    this.AttributesDescriptionLock = null;
    this.AttributesDescriptionUnlock = null;
    this.BigIcon = null;
    this.Icon = null;
    this.LockBigIcon = null;
    this.TemporaryIconUnLock = null;
    this.TemporaryIconlock = null;
    this.ShowReward = 0;
    this.ShowRewardMap = null;
    this.BeginTimeStamp = 0;
    this.PreOpenId = 0;
    this.MarkId = 0;
    this.LockCon = 0;
    this.PhantomId = null;
    this.FirstDropId = 0;
    this.AdditionalId = 0;
    this.SortId = 0;
    this.NewContent = null;
  }
}


static public class SilentAreaDetectionVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*GuideId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*LevelPlayList*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 12 /*InstanceSubTypeDescription*/, false)
      && verifier.VerifyField(tablePos, 14 /*DangerType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*Secondary*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*TypeDescription2*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*MatType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*AttributesDescriptionLock*/, false)
      && verifier.VerifyString(tablePos, 24 /*AttributesDescriptionUnlock*/, false)
      && verifier.VerifyString(tablePos, 26 /*BigIcon*/, false)
      && verifier.VerifyString(tablePos, 28 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 30 /*LockBigIcon*/, false)
      && verifier.VerifyString(tablePos, 32 /*TemporaryIconUnLock*/, false)
      && verifier.VerifyString(tablePos, 34 /*TemporaryIconlock*/, false)
      && verifier.VerifyField(tablePos, 36 /*ShowReward*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 38 /*ShowRewardMap*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 40 /*BeginTimeStamp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*PreOpenId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*MarkId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*LockCon*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 48 /*PhantomId*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 50 /*FirstDropId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*AdditionalId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*SortId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 56 /*NewContent*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
