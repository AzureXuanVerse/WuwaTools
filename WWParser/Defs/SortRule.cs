// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SortRule : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SortRule GetRootAsSortRule(ByteBuffer _bb) { return GetRootAsSortRule(_bb, new SortRule()); }
  public static SortRule GetRootAsSortRule(ByteBuffer _bb, SortRule obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SortRule __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DataId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string Icon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(10); }
  public int AttributeId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AddType { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.SortRule> CreateSortRule(FlatBufferBuilder builder,
      int id = 0,
      int data_id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      int attribute_id = 0,
      int add_type = 0) {
    builder.StartTable(6);
    SortRule.AddAddType(builder, add_type);
    SortRule.AddAttributeId(builder, attribute_id);
    SortRule.AddIcon(builder, iconOffset);
    SortRule.AddName(builder, nameOffset);
    SortRule.AddDataId(builder, data_id);
    SortRule.AddId(builder, id);
    return SortRule.EndSortRule(builder);
  }

  public static void StartSortRule(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDataId(FlatBufferBuilder builder, int dataId) { builder.AddInt(1, dataId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(3, iconOffset.Value, 0); }
  public static void AddAttributeId(FlatBufferBuilder builder, int attributeId) { builder.AddInt(4, attributeId, 0); }
  public static void AddAddType(FlatBufferBuilder builder, int addType) { builder.AddInt(5, addType, 0); }
  public static Offset<WWParser.Defs.SortRule> EndSortRule(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SortRule>(o);
  }
  public SortRuleT UnPack() {
    var _o = new SortRuleT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SortRuleT _o) {
    _o.Id = this.Id;
    _o.DataId = this.DataId;
    _o.Name = this.Name;
    _o.Icon = this.Icon;
    _o.AttributeId = this.AttributeId;
    _o.AddType = this.AddType;
  }
  public static Offset<WWParser.Defs.SortRule> Pack(FlatBufferBuilder builder, SortRuleT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SortRule>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    return CreateSortRule(
      builder,
      _o.Id,
      _o.DataId,
      _name,
      _icon,
      _o.AttributeId,
      _o.AddType);
  }
}

public class SortRuleT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("data_id")]
  public int DataId { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("attribute_id")]
  public int AttributeId { get; set; }
  [Newtonsoft.Json.JsonProperty("add_type")]
  public int AddType { get; set; }

  public SortRuleT() {
    this.Id = 0;
    this.DataId = 0;
    this.Name = null;
    this.Icon = null;
    this.AttributeId = 0;
    this.AddType = 0;
  }
}


static public class SortRuleVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*DataId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyString(tablePos, 10 /*Icon*/, false)
      && verifier.VerifyField(tablePos, 12 /*AttributeId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*AddType*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
