// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BranchLine : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BranchLine GetRootAsBranchLine(ByteBuffer _bb) { return GetRootAsBranchLine(_bb, new BranchLine()); }
  public static BranchLine GetRootAsBranchLine(ByteBuffer _bb, BranchLine obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BranchLine __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TaskId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int JumpBuildingId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AssociateRole { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.BranchLine> CreateBranchLine(FlatBufferBuilder builder,
      int id = 0,
      int task_id = 0,
      int jump_building_id = 0,
      int associate_role = 0) {
    builder.StartTable(4);
    BranchLine.AddAssociateRole(builder, associate_role);
    BranchLine.AddJumpBuildingId(builder, jump_building_id);
    BranchLine.AddTaskId(builder, task_id);
    BranchLine.AddId(builder, id);
    return BranchLine.EndBranchLine(builder);
  }

  public static void StartBranchLine(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTaskId(FlatBufferBuilder builder, int taskId) { builder.AddInt(1, taskId, 0); }
  public static void AddJumpBuildingId(FlatBufferBuilder builder, int jumpBuildingId) { builder.AddInt(2, jumpBuildingId, 0); }
  public static void AddAssociateRole(FlatBufferBuilder builder, int associateRole) { builder.AddInt(3, associateRole, 0); }
  public static Offset<WWParser.Defs.BranchLine> EndBranchLine(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BranchLine>(o);
  }
  public BranchLineT UnPack() {
    var _o = new BranchLineT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BranchLineT _o) {
    _o.Id = this.Id;
    _o.TaskId = this.TaskId;
    _o.JumpBuildingId = this.JumpBuildingId;
    _o.AssociateRole = this.AssociateRole;
  }
  public static Offset<WWParser.Defs.BranchLine> Pack(FlatBufferBuilder builder, BranchLineT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BranchLine>);
    return CreateBranchLine(
      builder,
      _o.Id,
      _o.TaskId,
      _o.JumpBuildingId,
      _o.AssociateRole);
  }
}

public class BranchLineT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("task_id")]
  public int TaskId { get; set; }
  [Newtonsoft.Json.JsonProperty("jump_building_id")]
  public int JumpBuildingId { get; set; }
  [Newtonsoft.Json.JsonProperty("associate_role")]
  public int AssociateRole { get; set; }

  public BranchLineT() {
    this.Id = 0;
    this.TaskId = 0;
    this.JumpBuildingId = 0;
    this.AssociateRole = 0;
  }
}


static public class BranchLineVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*TaskId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*JumpBuildingId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*AssociateRole*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
