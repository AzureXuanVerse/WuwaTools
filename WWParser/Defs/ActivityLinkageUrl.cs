// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ActivityLinkageUrl : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ActivityLinkageUrl GetRootAsActivityLinkageUrl(ByteBuffer _bb) { return GetRootAsActivityLinkageUrl(_bb, new ActivityLinkageUrl()); }
  public static ActivityLinkageUrl GetRootAsActivityLinkageUrl(ByteBuffer _bb, ActivityLinkageUrl obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ActivityLinkageUrl __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityLinkageId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsNational { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsInternalLink { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsNeedToken { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string LinkUrl { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLinkUrlBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetLinkUrlBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetLinkUrlArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<WWParser.Defs.ActivityLinkageUrl> CreateActivityLinkageUrl(FlatBufferBuilder builder,
      int id = 0,
      int activity_linkage_id = 0,
      bool is_national = false,
      bool is_internal_link = false,
      bool is_need_token = false,
      StringOffset link_urlOffset = default(StringOffset)) {
    builder.StartTable(6);
    ActivityLinkageUrl.AddLinkUrl(builder, link_urlOffset);
    ActivityLinkageUrl.AddActivityLinkageId(builder, activity_linkage_id);
    ActivityLinkageUrl.AddId(builder, id);
    ActivityLinkageUrl.AddIsNeedToken(builder, is_need_token);
    ActivityLinkageUrl.AddIsInternalLink(builder, is_internal_link);
    ActivityLinkageUrl.AddIsNational(builder, is_national);
    return ActivityLinkageUrl.EndActivityLinkageUrl(builder);
  }

  public static void StartActivityLinkageUrl(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityLinkageId(FlatBufferBuilder builder, int activityLinkageId) { builder.AddInt(1, activityLinkageId, 0); }
  public static void AddIsNational(FlatBufferBuilder builder, bool isNational) { builder.AddBool(2, isNational, false); }
  public static void AddIsInternalLink(FlatBufferBuilder builder, bool isInternalLink) { builder.AddBool(3, isInternalLink, false); }
  public static void AddIsNeedToken(FlatBufferBuilder builder, bool isNeedToken) { builder.AddBool(4, isNeedToken, false); }
  public static void AddLinkUrl(FlatBufferBuilder builder, StringOffset linkUrlOffset) { builder.AddOffset(5, linkUrlOffset.Value, 0); }
  public static Offset<WWParser.Defs.ActivityLinkageUrl> EndActivityLinkageUrl(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ActivityLinkageUrl>(o);
  }
  public ActivityLinkageUrlT UnPack() {
    var _o = new ActivityLinkageUrlT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ActivityLinkageUrlT _o) {
    _o.Id = this.Id;
    _o.ActivityLinkageId = this.ActivityLinkageId;
    _o.IsNational = this.IsNational;
    _o.IsInternalLink = this.IsInternalLink;
    _o.IsNeedToken = this.IsNeedToken;
    _o.LinkUrl = this.LinkUrl;
  }
  public static Offset<WWParser.Defs.ActivityLinkageUrl> Pack(FlatBufferBuilder builder, ActivityLinkageUrlT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ActivityLinkageUrl>);
    var _link_url = _o.LinkUrl == null ? default(StringOffset) : builder.CreateString(_o.LinkUrl);
    return CreateActivityLinkageUrl(
      builder,
      _o.Id,
      _o.ActivityLinkageId,
      _o.IsNational,
      _o.IsInternalLink,
      _o.IsNeedToken,
      _link_url);
  }
}

public class ActivityLinkageUrlT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_linkage_id")]
  public int ActivityLinkageId { get; set; }
  [Newtonsoft.Json.JsonProperty("is_national")]
  public bool IsNational { get; set; }
  [Newtonsoft.Json.JsonProperty("is_internal_link")]
  public bool IsInternalLink { get; set; }
  [Newtonsoft.Json.JsonProperty("is_need_token")]
  public bool IsNeedToken { get; set; }
  [Newtonsoft.Json.JsonProperty("link_url")]
  public string LinkUrl { get; set; }

  public ActivityLinkageUrlT() {
    this.Id = 0;
    this.ActivityLinkageId = 0;
    this.IsNational = false;
    this.IsInternalLink = false;
    this.IsNeedToken = false;
    this.LinkUrl = null;
  }
}


static public class ActivityLinkageUrlVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityLinkageId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*IsNational*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*IsInternalLink*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*IsNeedToken*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 14 /*LinkUrl*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
