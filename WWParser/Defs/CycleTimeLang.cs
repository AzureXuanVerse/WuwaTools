// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CycleTimeLang : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CycleTimeLang GetRootAsCycleTimeLang(ByteBuffer _bb) { return GetRootAsCycleTimeLang(_bb, new CycleTimeLang()); }
  public static CycleTimeLang GetRootAsCycleTimeLang(ByteBuffer _bb, CycleTimeLang obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CycleTimeLang __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CycleType { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CycleParam { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TimeParam { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.CycleTimeLang> CreateCycleTimeLang(FlatBufferBuilder builder,
      int cycle_type = 0,
      int cycle_param = 0,
      int time_param = 0) {
    builder.StartTable(3);
    CycleTimeLang.AddTimeParam(builder, time_param);
    CycleTimeLang.AddCycleParam(builder, cycle_param);
    CycleTimeLang.AddCycleType(builder, cycle_type);
    return CycleTimeLang.EndCycleTimeLang(builder);
  }

  public static void StartCycleTimeLang(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddCycleType(FlatBufferBuilder builder, int cycleType) { builder.AddInt(0, cycleType, 0); }
  public static void AddCycleParam(FlatBufferBuilder builder, int cycleParam) { builder.AddInt(1, cycleParam, 0); }
  public static void AddTimeParam(FlatBufferBuilder builder, int timeParam) { builder.AddInt(2, timeParam, 0); }
  public static Offset<WWParser.Defs.CycleTimeLang> EndCycleTimeLang(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.CycleTimeLang>(o);
  }
  public CycleTimeLangT UnPack() {
    var _o = new CycleTimeLangT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CycleTimeLangT _o) {
    _o.CycleType = this.CycleType;
    _o.CycleParam = this.CycleParam;
    _o.TimeParam = this.TimeParam;
  }
  public static Offset<WWParser.Defs.CycleTimeLang> Pack(FlatBufferBuilder builder, CycleTimeLangT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.CycleTimeLang>);
    return CreateCycleTimeLang(
      builder,
      _o.CycleType,
      _o.CycleParam,
      _o.TimeParam);
  }
}

public class CycleTimeLangT
{
  [Newtonsoft.Json.JsonProperty("cycle_type")]
  public int CycleType { get; set; }
  [Newtonsoft.Json.JsonProperty("cycle_param")]
  public int CycleParam { get; set; }
  [Newtonsoft.Json.JsonProperty("time_param")]
  public int TimeParam { get; set; }

  public CycleTimeLangT() {
    this.CycleType = 0;
    this.CycleParam = 0;
    this.TimeParam = 0;
  }
}


static public class CycleTimeLangVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CycleType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*CycleParam*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*TimeParam*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
