// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueLimitTimeReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueLimitTimeReward GetRootAsRogueLimitTimeReward(ByteBuffer _bb) { return GetRootAsRogueLimitTimeReward(_bb, new RogueLimitTimeReward()); }
  public static RogueLimitTimeReward GetRootAsRogueLimitTimeReward(ByteBuffer _bb, RogueLimitTimeReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueLimitTimeReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TargetName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTargetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTargetNameArray() { return __p.__vector_as_array<byte>(8); }
  public int Type { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int TargetReward { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.RogueLimitTimeReward> CreateRogueLimitTimeReward(FlatBufferBuilder builder,
      int id = 0,
      int activity_id = 0,
      StringOffset target_nameOffset = default(StringOffset),
      int type = 1,
      int target_reward = 0) {
    builder.StartTable(5);
    RogueLimitTimeReward.AddTargetReward(builder, target_reward);
    RogueLimitTimeReward.AddType(builder, type);
    RogueLimitTimeReward.AddTargetName(builder, target_nameOffset);
    RogueLimitTimeReward.AddActivityId(builder, activity_id);
    RogueLimitTimeReward.AddId(builder, id);
    return RogueLimitTimeReward.EndRogueLimitTimeReward(builder);
  }

  public static void StartRogueLimitTimeReward(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddTargetName(FlatBufferBuilder builder, StringOffset targetNameOffset) { builder.AddOffset(2, targetNameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(3, type, 1); }
  public static void AddTargetReward(FlatBufferBuilder builder, int targetReward) { builder.AddInt(4, targetReward, 0); }
  public static Offset<WWParser.Defs.RogueLimitTimeReward> EndRogueLimitTimeReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueLimitTimeReward>(o);
  }
  public RogueLimitTimeRewardT UnPack() {
    var _o = new RogueLimitTimeRewardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueLimitTimeRewardT _o) {
    _o.Id = this.Id;
    _o.ActivityId = this.ActivityId;
    _o.TargetName = this.TargetName;
    _o.Type = this.Type;
    _o.TargetReward = this.TargetReward;
  }
  public static Offset<WWParser.Defs.RogueLimitTimeReward> Pack(FlatBufferBuilder builder, RogueLimitTimeRewardT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueLimitTimeReward>);
    var _target_name = _o.TargetName == null ? default(StringOffset) : builder.CreateString(_o.TargetName);
    return CreateRogueLimitTimeReward(
      builder,
      _o.Id,
      _o.ActivityId,
      _target_name,
      _o.Type,
      _o.TargetReward);
  }
}

public class RogueLimitTimeRewardT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("target_name")]
  public string TargetName { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("target_reward")]
  public int TargetReward { get; set; }

  public RogueLimitTimeRewardT() {
    this.Id = 0;
    this.ActivityId = 0;
    this.TargetName = null;
    this.Type = 1;
    this.TargetReward = 0;
  }
}


static public class RogueLimitTimeRewardVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*TargetName*/, false)
      && verifier.VerifyField(tablePos, 10 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*TargetReward*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
