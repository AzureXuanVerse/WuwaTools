// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct HotKeyIcon : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static HotKeyIcon GetRootAsHotKeyIcon(ByteBuffer _bb) { return GetRootAsHotKeyIcon(_bb, new HotKeyIcon()); }
  public static HotKeyIcon GetRootAsHotKeyIcon(ByteBuffer _bb, HotKeyIcon obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HotKeyIcon __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string KeyName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetKeyNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetKeyNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Icon { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<WWParser.Defs.HotKeyIcon> CreateHotKeyIcon(FlatBufferBuilder builder,
      StringOffset key_nameOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset)) {
    builder.StartTable(2);
    HotKeyIcon.AddIcon(builder, iconOffset);
    HotKeyIcon.AddKeyName(builder, key_nameOffset);
    return HotKeyIcon.EndHotKeyIcon(builder);
  }

  public static void StartHotKeyIcon(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddKeyName(FlatBufferBuilder builder, StringOffset keyNameOffset) { builder.AddOffset(0, keyNameOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(1, iconOffset.Value, 0); }
  public static Offset<WWParser.Defs.HotKeyIcon> EndHotKeyIcon(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.HotKeyIcon>(o);
  }
  public HotKeyIconT UnPack() {
    var _o = new HotKeyIconT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HotKeyIconT _o) {
    _o.KeyName = this.KeyName;
    _o.Icon = this.Icon;
  }
  public static Offset<WWParser.Defs.HotKeyIcon> Pack(FlatBufferBuilder builder, HotKeyIconT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.HotKeyIcon>);
    var _key_name = _o.KeyName == null ? default(StringOffset) : builder.CreateString(_o.KeyName);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    return CreateHotKeyIcon(
      builder,
      _key_name,
      _icon);
  }
}

public class HotKeyIconT
{
  [Newtonsoft.Json.JsonProperty("key_name")]
  public string KeyName { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }

  public HotKeyIconT() {
    this.KeyName = null;
    this.Icon = null;
  }
}


static public class HotKeyIconVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*KeyName*/, false)
      && verifier.VerifyString(tablePos, 6 /*Icon*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
