// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EffectSpecData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EffectSpecData GetRootAsEffectSpecData(ByteBuffer _bb) { return GetRootAsEffectSpecData(_bb, new EffectSpecData()); }
  public static EffectSpecData GetRootAsEffectSpecData(ByteBuffer _bb, EffectSpecData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EffectSpecData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpecType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EffectRegularType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LifeTime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Children(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ChildrenLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetChildrenBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetChildrenBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetChildrenArray() { return __p.__vector_as_array<int>(12); }

  public static Offset<WWParser.Defs.EffectSpecData> CreateEffectSpecData(FlatBufferBuilder builder,
      int id = 0,
      int spec_type = 0,
      int effect_regular_type = 0,
      int life_time = 0,
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartTable(5);
    EffectSpecData.AddChildren(builder, childrenOffset);
    EffectSpecData.AddLifeTime(builder, life_time);
    EffectSpecData.AddEffectRegularType(builder, effect_regular_type);
    EffectSpecData.AddSpecType(builder, spec_type);
    EffectSpecData.AddId(builder, id);
    return EffectSpecData.EndEffectSpecData(builder);
  }

  public static void StartEffectSpecData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddSpecType(FlatBufferBuilder builder, int specType) { builder.AddInt(1, specType, 0); }
  public static void AddEffectRegularType(FlatBufferBuilder builder, int effectRegularType) { builder.AddInt(2, effectRegularType, 0); }
  public static void AddLifeTime(FlatBufferBuilder builder, int lifeTime) { builder.AddInt(3, lifeTime, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(4, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.EffectSpecData> EndEffectSpecData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.EffectSpecData>(o);
  }
  public EffectSpecDataT UnPack() {
    var _o = new EffectSpecDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EffectSpecDataT _o) {
    _o.Id = this.Id;
    _o.SpecType = this.SpecType;
    _o.EffectRegularType = this.EffectRegularType;
    _o.LifeTime = this.LifeTime;
    _o.Children = new List<int>();
    for (var _j = 0; _j < this.ChildrenLength; ++_j) {_o.Children.Add(this.Children(_j));}
  }
  public static Offset<WWParser.Defs.EffectSpecData> Pack(FlatBufferBuilder builder, EffectSpecDataT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.EffectSpecData>);
    var _children = default(VectorOffset);
    if (_o.Children != null) {
      var __children = _o.Children.ToArray();
      _children = CreateChildrenVector(builder, __children);
    }
    return CreateEffectSpecData(
      builder,
      _o.Id,
      _o.SpecType,
      _o.EffectRegularType,
      _o.LifeTime,
      _children);
  }
}

public class EffectSpecDataT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("spec_type")]
  public int SpecType { get; set; }
  [Newtonsoft.Json.JsonProperty("effect_regular_type")]
  public int EffectRegularType { get; set; }
  [Newtonsoft.Json.JsonProperty("life_time")]
  public int LifeTime { get; set; }
  [Newtonsoft.Json.JsonProperty("children")]
  public List<int> Children { get; set; }

  public EffectSpecDataT() {
    this.Id = 0;
    this.SpecType = 0;
    this.EffectRegularType = 0;
    this.LifeTime = 0;
    this.Children = null;
  }
}


static public class EffectSpecDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SpecType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*EffectRegularType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*LifeTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*Children*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
