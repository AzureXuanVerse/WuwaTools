// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Building : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Building GetRootAsBuilding(ByteBuffer _bb) { return GetRootAsBuilding(_bb, new Building()); }
  public static Building GetRootAsBuilding(ByteBuffer _bb, Building obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Building __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int Sort { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Desc { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(10); }
  public int AssociateRole { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string RoleTips { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoleTipsBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetRoleTipsBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetRoleTipsArray() { return __p.__vector_as_array<byte>(14); }
  public string BuildingTexture { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuildingTextureBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetBuildingTextureBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetBuildingTextureArray() { return __p.__vector_as_array<byte>(16); }
  public string TipsSprite { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTipsSpriteBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTipsSpriteBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTipsSpriteArray() { return __p.__vector_as_array<byte>(18); }
  public int MapMarkId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnLockPrice { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockCondition { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int JumpType { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int JumpParam { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UpGradeCurve { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string FlowListName { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFlowListNameBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetFlowListNameBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetFlowListNameArray() { return __p.__vector_as_array<byte>(32); }
  public int FlowId { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StateId { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TriggerEntityId { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.Building> CreateBuilding(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      int sort = 0,
      StringOffset descOffset = default(StringOffset),
      int associate_role = 0,
      StringOffset role_tipsOffset = default(StringOffset),
      StringOffset building_textureOffset = default(StringOffset),
      StringOffset tips_spriteOffset = default(StringOffset),
      int map_mark_id = 0,
      int un_lock_price = 0,
      int unlock_condition = 0,
      int jump_type = 0,
      int jump_param = 0,
      int up_grade_curve = 0,
      StringOffset flow_list_nameOffset = default(StringOffset),
      int flow_id = 0,
      int state_id = 0,
      int trigger_entity_id = 0) {
    builder.StartTable(18);
    Building.AddTriggerEntityId(builder, trigger_entity_id);
    Building.AddStateId(builder, state_id);
    Building.AddFlowId(builder, flow_id);
    Building.AddFlowListName(builder, flow_list_nameOffset);
    Building.AddUpGradeCurve(builder, up_grade_curve);
    Building.AddJumpParam(builder, jump_param);
    Building.AddJumpType(builder, jump_type);
    Building.AddUnlockCondition(builder, unlock_condition);
    Building.AddUnLockPrice(builder, un_lock_price);
    Building.AddMapMarkId(builder, map_mark_id);
    Building.AddTipsSprite(builder, tips_spriteOffset);
    Building.AddBuildingTexture(builder, building_textureOffset);
    Building.AddRoleTips(builder, role_tipsOffset);
    Building.AddAssociateRole(builder, associate_role);
    Building.AddDesc(builder, descOffset);
    Building.AddSort(builder, sort);
    Building.AddName(builder, nameOffset);
    Building.AddId(builder, id);
    return Building.EndBuilding(builder);
  }

  public static void StartBuilding(FlatBufferBuilder builder) { builder.StartTable(18); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddSort(FlatBufferBuilder builder, int sort) { builder.AddInt(2, sort, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(3, descOffset.Value, 0); }
  public static void AddAssociateRole(FlatBufferBuilder builder, int associateRole) { builder.AddInt(4, associateRole, 0); }
  public static void AddRoleTips(FlatBufferBuilder builder, StringOffset roleTipsOffset) { builder.AddOffset(5, roleTipsOffset.Value, 0); }
  public static void AddBuildingTexture(FlatBufferBuilder builder, StringOffset buildingTextureOffset) { builder.AddOffset(6, buildingTextureOffset.Value, 0); }
  public static void AddTipsSprite(FlatBufferBuilder builder, StringOffset tipsSpriteOffset) { builder.AddOffset(7, tipsSpriteOffset.Value, 0); }
  public static void AddMapMarkId(FlatBufferBuilder builder, int mapMarkId) { builder.AddInt(8, mapMarkId, 0); }
  public static void AddUnLockPrice(FlatBufferBuilder builder, int unLockPrice) { builder.AddInt(9, unLockPrice, 0); }
  public static void AddUnlockCondition(FlatBufferBuilder builder, int unlockCondition) { builder.AddInt(10, unlockCondition, 0); }
  public static void AddJumpType(FlatBufferBuilder builder, int jumpType) { builder.AddInt(11, jumpType, 0); }
  public static void AddJumpParam(FlatBufferBuilder builder, int jumpParam) { builder.AddInt(12, jumpParam, 0); }
  public static void AddUpGradeCurve(FlatBufferBuilder builder, int upGradeCurve) { builder.AddInt(13, upGradeCurve, 0); }
  public static void AddFlowListName(FlatBufferBuilder builder, StringOffset flowListNameOffset) { builder.AddOffset(14, flowListNameOffset.Value, 0); }
  public static void AddFlowId(FlatBufferBuilder builder, int flowId) { builder.AddInt(15, flowId, 0); }
  public static void AddStateId(FlatBufferBuilder builder, int stateId) { builder.AddInt(16, stateId, 0); }
  public static void AddTriggerEntityId(FlatBufferBuilder builder, int triggerEntityId) { builder.AddInt(17, triggerEntityId, 0); }
  public static Offset<WWParser.Defs.Building> EndBuilding(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Building>(o);
  }
  public BuildingT UnPack() {
    var _o = new BuildingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BuildingT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.Sort = this.Sort;
    _o.Desc = this.Desc;
    _o.AssociateRole = this.AssociateRole;
    _o.RoleTips = this.RoleTips;
    _o.BuildingTexture = this.BuildingTexture;
    _o.TipsSprite = this.TipsSprite;
    _o.MapMarkId = this.MapMarkId;
    _o.UnLockPrice = this.UnLockPrice;
    _o.UnlockCondition = this.UnlockCondition;
    _o.JumpType = this.JumpType;
    _o.JumpParam = this.JumpParam;
    _o.UpGradeCurve = this.UpGradeCurve;
    _o.FlowListName = this.FlowListName;
    _o.FlowId = this.FlowId;
    _o.StateId = this.StateId;
    _o.TriggerEntityId = this.TriggerEntityId;
  }
  public static Offset<WWParser.Defs.Building> Pack(FlatBufferBuilder builder, BuildingT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Building>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    var _role_tips = _o.RoleTips == null ? default(StringOffset) : builder.CreateString(_o.RoleTips);
    var _building_texture = _o.BuildingTexture == null ? default(StringOffset) : builder.CreateString(_o.BuildingTexture);
    var _tips_sprite = _o.TipsSprite == null ? default(StringOffset) : builder.CreateString(_o.TipsSprite);
    var _flow_list_name = _o.FlowListName == null ? default(StringOffset) : builder.CreateString(_o.FlowListName);
    return CreateBuilding(
      builder,
      _o.Id,
      _name,
      _o.Sort,
      _desc,
      _o.AssociateRole,
      _role_tips,
      _building_texture,
      _tips_sprite,
      _o.MapMarkId,
      _o.UnLockPrice,
      _o.UnlockCondition,
      _o.JumpType,
      _o.JumpParam,
      _o.UpGradeCurve,
      _flow_list_name,
      _o.FlowId,
      _o.StateId,
      _o.TriggerEntityId);
  }
}

public class BuildingT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("sort")]
  public int Sort { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }
  [Newtonsoft.Json.JsonProperty("associate_role")]
  public int AssociateRole { get; set; }
  [Newtonsoft.Json.JsonProperty("role_tips")]
  public string RoleTips { get; set; }
  [Newtonsoft.Json.JsonProperty("building_texture")]
  public string BuildingTexture { get; set; }
  [Newtonsoft.Json.JsonProperty("tips_sprite")]
  public string TipsSprite { get; set; }
  [Newtonsoft.Json.JsonProperty("map_mark_id")]
  public int MapMarkId { get; set; }
  [Newtonsoft.Json.JsonProperty("un_lock_price")]
  public int UnLockPrice { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_condition")]
  public int UnlockCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("jump_type")]
  public int JumpType { get; set; }
  [Newtonsoft.Json.JsonProperty("jump_param")]
  public int JumpParam { get; set; }
  [Newtonsoft.Json.JsonProperty("up_grade_curve")]
  public int UpGradeCurve { get; set; }
  [Newtonsoft.Json.JsonProperty("flow_list_name")]
  public string FlowListName { get; set; }
  [Newtonsoft.Json.JsonProperty("flow_id")]
  public int FlowId { get; set; }
  [Newtonsoft.Json.JsonProperty("state_id")]
  public int StateId { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_entity_id")]
  public int TriggerEntityId { get; set; }

  public BuildingT() {
    this.Id = 0;
    this.Name = null;
    this.Sort = 0;
    this.Desc = null;
    this.AssociateRole = 0;
    this.RoleTips = null;
    this.BuildingTexture = null;
    this.TipsSprite = null;
    this.MapMarkId = 0;
    this.UnLockPrice = 0;
    this.UnlockCondition = 0;
    this.JumpType = 0;
    this.JumpParam = 0;
    this.UpGradeCurve = 0;
    this.FlowListName = null;
    this.FlowId = 0;
    this.StateId = 0;
    this.TriggerEntityId = 0;
  }
}


static public class BuildingVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*Sort*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Desc*/, false)
      && verifier.VerifyField(tablePos, 12 /*AssociateRole*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*RoleTips*/, false)
      && verifier.VerifyString(tablePos, 16 /*BuildingTexture*/, false)
      && verifier.VerifyString(tablePos, 18 /*TipsSprite*/, false)
      && verifier.VerifyField(tablePos, 20 /*MapMarkId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*UnLockPrice*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*UnlockCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*JumpType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*JumpParam*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*UpGradeCurve*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 32 /*FlowListName*/, false)
      && verifier.VerifyField(tablePos, 34 /*FlowId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*StateId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*TriggerEntityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
