// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TowerDefencePhantom : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TowerDefencePhantom GetRootAsTowerDefencePhantom(ByteBuffer _bb) { return GetRootAsTowerDefencePhantom(_bb, new TowerDefencePhantom()); }
  public static TowerDefencePhantom GetRootAsTowerDefencePhantom(ByteBuffer _bb, TowerDefencePhantom obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TowerDefencePhantom __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PhantomItemId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string PhantomName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPhantomNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPhantomNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPhantomNameArray() { return __p.__vector_as_array<byte>(8); }
  public string TypeTextId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeTextIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTypeTextIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTypeTextIdArray() { return __p.__vector_as_array<byte>(10); }
  public string TypeIcon { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeIconBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTypeIconBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTypeIconArray() { return __p.__vector_as_array<byte>(12); }
  public string MarkHex { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMarkHexBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetMarkHexBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetMarkHexArray() { return __p.__vector_as_array<byte>(14); }
  public int SkillGroup { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.TowerDefencePhantom> CreateTowerDefencePhantom(FlatBufferBuilder builder,
      int id = 0,
      int phantom_item_id = 0,
      StringOffset phantom_nameOffset = default(StringOffset),
      StringOffset type_text_idOffset = default(StringOffset),
      StringOffset type_iconOffset = default(StringOffset),
      StringOffset mark_hexOffset = default(StringOffset),
      int skill_group = 0,
      int activity_id = 0) {
    builder.StartTable(8);
    TowerDefencePhantom.AddActivityId(builder, activity_id);
    TowerDefencePhantom.AddSkillGroup(builder, skill_group);
    TowerDefencePhantom.AddMarkHex(builder, mark_hexOffset);
    TowerDefencePhantom.AddTypeIcon(builder, type_iconOffset);
    TowerDefencePhantom.AddTypeTextId(builder, type_text_idOffset);
    TowerDefencePhantom.AddPhantomName(builder, phantom_nameOffset);
    TowerDefencePhantom.AddPhantomItemId(builder, phantom_item_id);
    TowerDefencePhantom.AddId(builder, id);
    return TowerDefencePhantom.EndTowerDefencePhantom(builder);
  }

  public static void StartTowerDefencePhantom(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPhantomItemId(FlatBufferBuilder builder, int phantomItemId) { builder.AddInt(1, phantomItemId, 0); }
  public static void AddPhantomName(FlatBufferBuilder builder, StringOffset phantomNameOffset) { builder.AddOffset(2, phantomNameOffset.Value, 0); }
  public static void AddTypeTextId(FlatBufferBuilder builder, StringOffset typeTextIdOffset) { builder.AddOffset(3, typeTextIdOffset.Value, 0); }
  public static void AddTypeIcon(FlatBufferBuilder builder, StringOffset typeIconOffset) { builder.AddOffset(4, typeIconOffset.Value, 0); }
  public static void AddMarkHex(FlatBufferBuilder builder, StringOffset markHexOffset) { builder.AddOffset(5, markHexOffset.Value, 0); }
  public static void AddSkillGroup(FlatBufferBuilder builder, int skillGroup) { builder.AddInt(6, skillGroup, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(7, activityId, 0); }
  public static Offset<WWParser.Defs.TowerDefencePhantom> EndTowerDefencePhantom(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.TowerDefencePhantom>(o);
  }
  public TowerDefencePhantomT UnPack() {
    var _o = new TowerDefencePhantomT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TowerDefencePhantomT _o) {
    _o.Id = this.Id;
    _o.PhantomItemId = this.PhantomItemId;
    _o.PhantomName = this.PhantomName;
    _o.TypeTextId = this.TypeTextId;
    _o.TypeIcon = this.TypeIcon;
    _o.MarkHex = this.MarkHex;
    _o.SkillGroup = this.SkillGroup;
    _o.ActivityId = this.ActivityId;
  }
  public static Offset<WWParser.Defs.TowerDefencePhantom> Pack(FlatBufferBuilder builder, TowerDefencePhantomT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.TowerDefencePhantom>);
    var _phantom_name = _o.PhantomName == null ? default(StringOffset) : builder.CreateString(_o.PhantomName);
    var _type_text_id = _o.TypeTextId == null ? default(StringOffset) : builder.CreateString(_o.TypeTextId);
    var _type_icon = _o.TypeIcon == null ? default(StringOffset) : builder.CreateString(_o.TypeIcon);
    var _mark_hex = _o.MarkHex == null ? default(StringOffset) : builder.CreateString(_o.MarkHex);
    return CreateTowerDefencePhantom(
      builder,
      _o.Id,
      _o.PhantomItemId,
      _phantom_name,
      _type_text_id,
      _type_icon,
      _mark_hex,
      _o.SkillGroup,
      _o.ActivityId);
  }
}

public class TowerDefencePhantomT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("phantom_item_id")]
  public int PhantomItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("phantom_name")]
  public string PhantomName { get; set; }
  [Newtonsoft.Json.JsonProperty("type_text_id")]
  public string TypeTextId { get; set; }
  [Newtonsoft.Json.JsonProperty("type_icon")]
  public string TypeIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_hex")]
  public string MarkHex { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_group")]
  public int SkillGroup { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }

  public TowerDefencePhantomT() {
    this.Id = 0;
    this.PhantomItemId = 0;
    this.PhantomName = null;
    this.TypeTextId = null;
    this.TypeIcon = null;
    this.MarkHex = null;
    this.SkillGroup = 0;
    this.ActivityId = 0;
  }
}


static public class TowerDefencePhantomVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*PhantomItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*PhantomName*/, false)
      && verifier.VerifyString(tablePos, 10 /*TypeTextId*/, false)
      && verifier.VerifyString(tablePos, 12 /*TypeIcon*/, false)
      && verifier.VerifyString(tablePos, 14 /*MarkHex*/, false)
      && verifier.VerifyField(tablePos, 16 /*SkillGroup*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
