// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BuffItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BuffItem GetRootAsBuffItem(ByteBuffer _bb) { return GetRootAsBuffItem(_bb, new BuffItem()); }
  public static BuffItem GetRootAsBuffItem(ByteBuffer _bb, BuffItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BuffItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PublicCdGroup { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public double Buffs(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int BuffsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetBuffsBytes() { return __p.__vector_as_span<double>(8, 8); }
#else
  public ArraySegment<byte>? GetBuffsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public double[] GetBuffsArray() { return __p.__vector_as_array<double>(8); }
  public int Cd { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Share { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.BuffItem> CreateBuffItem(FlatBufferBuilder builder,
      int id = 0,
      int public_cd_group = 0,
      VectorOffset buffsOffset = default(VectorOffset),
      int cd = 0,
      bool share = false) {
    builder.StartTable(5);
    BuffItem.AddCd(builder, cd);
    BuffItem.AddBuffs(builder, buffsOffset);
    BuffItem.AddPublicCdGroup(builder, public_cd_group);
    BuffItem.AddId(builder, id);
    BuffItem.AddShare(builder, share);
    return BuffItem.EndBuffItem(builder);
  }

  public static void StartBuffItem(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPublicCdGroup(FlatBufferBuilder builder, int publicCdGroup) { builder.AddInt(1, publicCdGroup, 0); }
  public static void AddBuffs(FlatBufferBuilder builder, VectorOffset buffsOffset) { builder.AddOffset(2, buffsOffset.Value, 0); }
  public static VectorOffset CreateBuffsVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffsVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffsVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddCd(FlatBufferBuilder builder, int cd) { builder.AddInt(3, cd, 0); }
  public static void AddShare(FlatBufferBuilder builder, bool share) { builder.AddBool(4, share, false); }
  public static Offset<WWParser.Defs.BuffItem> EndBuffItem(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BuffItem>(o);
  }
  public BuffItemT UnPack() {
    var _o = new BuffItemT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BuffItemT _o) {
    _o.Id = this.Id;
    _o.PublicCdGroup = this.PublicCdGroup;
    _o.Buffs = new List<double>();
    for (var _j = 0; _j < this.BuffsLength; ++_j) {_o.Buffs.Add(this.Buffs(_j));}
    _o.Cd = this.Cd;
    _o.Share = this.Share;
  }
  public static Offset<WWParser.Defs.BuffItem> Pack(FlatBufferBuilder builder, BuffItemT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BuffItem>);
    var _buffs = default(VectorOffset);
    if (_o.Buffs != null) {
      var __buffs = _o.Buffs.ToArray();
      _buffs = CreateBuffsVector(builder, __buffs);
    }
    return CreateBuffItem(
      builder,
      _o.Id,
      _o.PublicCdGroup,
      _buffs,
      _o.Cd,
      _o.Share);
  }
}

public class BuffItemT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("public_cd_group")]
  public int PublicCdGroup { get; set; }
  [Newtonsoft.Json.JsonProperty("buffs")]
  public List<double> Buffs { get; set; }
  [Newtonsoft.Json.JsonProperty("cd")]
  public int Cd { get; set; }
  [Newtonsoft.Json.JsonProperty("share")]
  public bool Share { get; set; }

  public BuffItemT() {
    this.Id = 0;
    this.PublicCdGroup = 0;
    this.Buffs = null;
    this.Cd = 0;
    this.Share = false;
  }
}


static public class BuffItemVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*PublicCdGroup*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*Buffs*/, 8 /*double*/, false)
      && verifier.VerifyField(tablePos, 10 /*Cd*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Share*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
