// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SignalDecodeWaveform : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SignalDecodeWaveform GetRootAsSignalDecodeWaveform(ByteBuffer _bb) { return GetRootAsSignalDecodeWaveform(_bb, new SignalDecodeWaveform()); }
  public static SignalDecodeWaveform GetRootAsSignalDecodeWaveform(ByteBuffer _bb, SignalDecodeWaveform obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SignalDecodeWaveform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public float SpeedRate { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public string SignalFragment { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSignalFragmentBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSignalFragmentBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSignalFragmentArray() { return __p.__vector_as_array<byte>(10); }
  public string MissingParts { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissingPartsBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMissingPartsBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMissingPartsArray() { return __p.__vector_as_array<byte>(12); }
  public int Offset { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.SignalDecodeWaveform> CreateSignalDecodeWaveform(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      float speed_rate = 1.0f,
      StringOffset signal_fragmentOffset = default(StringOffset),
      StringOffset missing_partsOffset = default(StringOffset),
      int offset = 0) {
    builder.StartTable(6);
    SignalDecodeWaveform.AddOffset(builder, offset);
    SignalDecodeWaveform.AddMissingParts(builder, missing_partsOffset);
    SignalDecodeWaveform.AddSignalFragment(builder, signal_fragmentOffset);
    SignalDecodeWaveform.AddSpeedRate(builder, speed_rate);
    SignalDecodeWaveform.AddName(builder, nameOffset);
    SignalDecodeWaveform.AddId(builder, id);
    return SignalDecodeWaveform.EndSignalDecodeWaveform(builder);
  }

  public static void StartSignalDecodeWaveform(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddSpeedRate(FlatBufferBuilder builder, float speedRate) { builder.AddFloat(2, speedRate, 1.0f); }
  public static void AddSignalFragment(FlatBufferBuilder builder, StringOffset signalFragmentOffset) { builder.AddOffset(3, signalFragmentOffset.Value, 0); }
  public static void AddMissingParts(FlatBufferBuilder builder, StringOffset missingPartsOffset) { builder.AddOffset(4, missingPartsOffset.Value, 0); }
  public static void AddOffset(FlatBufferBuilder builder, int offset) { builder.AddInt(5, offset, 0); }
  public static Offset<WWParser.Defs.SignalDecodeWaveform> EndSignalDecodeWaveform(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SignalDecodeWaveform>(o);
  }
  public SignalDecodeWaveformT UnPack() {
    var _o = new SignalDecodeWaveformT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SignalDecodeWaveformT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.SpeedRate = this.SpeedRate;
    _o.SignalFragment = this.SignalFragment;
    _o.MissingParts = this.MissingParts;
    _o.Offset = this.Offset;
  }
  public static Offset<WWParser.Defs.SignalDecodeWaveform> Pack(FlatBufferBuilder builder, SignalDecodeWaveformT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SignalDecodeWaveform>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _signal_fragment = _o.SignalFragment == null ? default(StringOffset) : builder.CreateString(_o.SignalFragment);
    var _missing_parts = _o.MissingParts == null ? default(StringOffset) : builder.CreateString(_o.MissingParts);
    return CreateSignalDecodeWaveform(
      builder,
      _o.Id,
      _name,
      _o.SpeedRate,
      _signal_fragment,
      _missing_parts,
      _o.Offset);
  }
}

public class SignalDecodeWaveformT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("speed_rate")]
  public float SpeedRate { get; set; }
  [Newtonsoft.Json.JsonProperty("signal_fragment")]
  public string SignalFragment { get; set; }
  [Newtonsoft.Json.JsonProperty("missing_parts")]
  public string MissingParts { get; set; }
  [Newtonsoft.Json.JsonProperty("offset")]
  public int Offset { get; set; }

  public SignalDecodeWaveformT() {
    this.Id = 0;
    this.Name = null;
    this.SpeedRate = 1.0f;
    this.SignalFragment = null;
    this.MissingParts = null;
    this.Offset = 0;
  }
}


static public class SignalDecodeWaveformVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*SpeedRate*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*SignalFragment*/, false)
      && verifier.VerifyString(tablePos, 12 /*MissingParts*/, false)
      && verifier.VerifyField(tablePos, 14 /*Offset*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
