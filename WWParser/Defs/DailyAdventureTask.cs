// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DailyAdventureTask : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DailyAdventureTask GetRootAsDailyAdventureTask(ByteBuffer _bb) { return GetRootAsDailyAdventureTask(_bb, new DailyAdventureTask()); }
  public static DailyAdventureTask GetRootAsDailyAdventureTask(ByteBuffer _bb, DailyAdventureTask obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DailyAdventureTask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TaskId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TaskTitle { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskTitleBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTaskTitleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTaskTitleArray() { return __p.__vector_as_array<byte>(6); }
  public string TaskDescription { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskDescriptionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTaskDescriptionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTaskDescriptionArray() { return __p.__vector_as_array<byte>(8); }
  public WWParser.Defs.DicIntInt? TaskReward(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TaskRewardLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string TaskFunc(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TaskFuncLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.DailyAdventureTask> CreateDailyAdventureTask(FlatBufferBuilder builder,
      int task_id = 0,
      StringOffset task_titleOffset = default(StringOffset),
      StringOffset task_descriptionOffset = default(StringOffset),
      VectorOffset task_rewardOffset = default(VectorOffset),
      VectorOffset task_funcOffset = default(VectorOffset)) {
    builder.StartTable(5);
    DailyAdventureTask.AddTaskFunc(builder, task_funcOffset);
    DailyAdventureTask.AddTaskReward(builder, task_rewardOffset);
    DailyAdventureTask.AddTaskDescription(builder, task_descriptionOffset);
    DailyAdventureTask.AddTaskTitle(builder, task_titleOffset);
    DailyAdventureTask.AddTaskId(builder, task_id);
    return DailyAdventureTask.EndDailyAdventureTask(builder);
  }

  public static void StartDailyAdventureTask(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTaskId(FlatBufferBuilder builder, int taskId) { builder.AddInt(0, taskId, 0); }
  public static void AddTaskTitle(FlatBufferBuilder builder, StringOffset taskTitleOffset) { builder.AddOffset(1, taskTitleOffset.Value, 0); }
  public static void AddTaskDescription(FlatBufferBuilder builder, StringOffset taskDescriptionOffset) { builder.AddOffset(2, taskDescriptionOffset.Value, 0); }
  public static void AddTaskReward(FlatBufferBuilder builder, VectorOffset taskRewardOffset) { builder.AddOffset(3, taskRewardOffset.Value, 0); }
  public static VectorOffset CreateTaskRewardVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTaskRewardVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTaskRewardVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTaskRewardVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTaskRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTaskFunc(FlatBufferBuilder builder, VectorOffset taskFuncOffset) { builder.AddOffset(4, taskFuncOffset.Value, 0); }
  public static VectorOffset CreateTaskFuncVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTaskFuncVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTaskFuncVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTaskFuncVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTaskFuncVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.DailyAdventureTask> EndDailyAdventureTask(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DailyAdventureTask>(o);
  }
  public DailyAdventureTaskT UnPack() {
    var _o = new DailyAdventureTaskT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DailyAdventureTaskT _o) {
    _o.TaskId = this.TaskId;
    _o.TaskTitle = this.TaskTitle;
    _o.TaskDescription = this.TaskDescription;
    _o.TaskReward = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.TaskRewardLength; ++_j) {_o.TaskReward.Add(this.TaskReward(_j).HasValue ? this.TaskReward(_j).Value.UnPack() : null);}
    _o.TaskFunc = new List<string>();
    for (var _j = 0; _j < this.TaskFuncLength; ++_j) {_o.TaskFunc.Add(this.TaskFunc(_j));}
  }
  public static Offset<WWParser.Defs.DailyAdventureTask> Pack(FlatBufferBuilder builder, DailyAdventureTaskT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DailyAdventureTask>);
    var _task_title = _o.TaskTitle == null ? default(StringOffset) : builder.CreateString(_o.TaskTitle);
    var _task_description = _o.TaskDescription == null ? default(StringOffset) : builder.CreateString(_o.TaskDescription);
    var _task_reward = default(VectorOffset);
    if (_o.TaskReward != null) {
      var __task_reward = new Offset<WWParser.Defs.DicIntInt>[_o.TaskReward.Count];
      for (var _j = 0; _j < __task_reward.Length; ++_j) { __task_reward[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.TaskReward[_j]); }
      _task_reward = CreateTaskRewardVector(builder, __task_reward);
    }
    var _task_func = default(VectorOffset);
    if (_o.TaskFunc != null) {
      var __task_func = new StringOffset[_o.TaskFunc.Count];
      for (var _j = 0; _j < __task_func.Length; ++_j) { __task_func[_j] = builder.CreateString(_o.TaskFunc[_j]); }
      _task_func = CreateTaskFuncVector(builder, __task_func);
    }
    return CreateDailyAdventureTask(
      builder,
      _o.TaskId,
      _task_title,
      _task_description,
      _task_reward,
      _task_func);
  }
}

public class DailyAdventureTaskT
{
  [Newtonsoft.Json.JsonProperty("task_id")]
  public int TaskId { get; set; }
  [Newtonsoft.Json.JsonProperty("task_title")]
  public string TaskTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("task_description")]
  public string TaskDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("task_reward")]
  public List<WWParser.Defs.DicIntIntT> TaskReward { get; set; }
  [Newtonsoft.Json.JsonProperty("task_func")]
  public List<string> TaskFunc { get; set; }

  public DailyAdventureTaskT() {
    this.TaskId = 0;
    this.TaskTitle = null;
    this.TaskDescription = null;
    this.TaskReward = null;
    this.TaskFunc = null;
  }
}


static public class DailyAdventureTaskVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TaskId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*TaskTitle*/, false)
      && verifier.VerifyString(tablePos, 8 /*TaskDescription*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*TaskReward*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*TaskFunc*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
