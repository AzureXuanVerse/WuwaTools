// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BabelTowerDailyTask : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BabelTowerDailyTask GetRootAsBabelTowerDailyTask(ByteBuffer _bb) { return GetRootAsBabelTowerDailyTask(_bb, new BabelTowerDailyTask()); }
  public static BabelTowerDailyTask GetRootAsBabelTowerDailyTask(ByteBuffer _bb, BabelTowerDailyTask obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BabelTowerDailyTask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TaskId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroupId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Weight { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DropId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(14); }
  public int ShowDeTerm(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ShowDeTermLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetShowDeTermBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetShowDeTermBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetShowDeTermArray() { return __p.__vector_as_array<int>(16); }
  public int ShowBuff(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ShowBuffLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetShowBuffBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetShowBuffBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetShowBuffArray() { return __p.__vector_as_array<int>(18); }
  public int JumpToLevelId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.BabelTowerDailyTask> CreateBabelTowerDailyTask(FlatBufferBuilder builder,
      int task_id = 0,
      int activity_id = 0,
      int group_id = 0,
      int weight = 0,
      int drop_id = 0,
      StringOffset titleOffset = default(StringOffset),
      VectorOffset show_de_termOffset = default(VectorOffset),
      VectorOffset show_buffOffset = default(VectorOffset),
      int jump_to_level_id = 0) {
    builder.StartTable(9);
    BabelTowerDailyTask.AddJumpToLevelId(builder, jump_to_level_id);
    BabelTowerDailyTask.AddShowBuff(builder, show_buffOffset);
    BabelTowerDailyTask.AddShowDeTerm(builder, show_de_termOffset);
    BabelTowerDailyTask.AddTitle(builder, titleOffset);
    BabelTowerDailyTask.AddDropId(builder, drop_id);
    BabelTowerDailyTask.AddWeight(builder, weight);
    BabelTowerDailyTask.AddGroupId(builder, group_id);
    BabelTowerDailyTask.AddActivityId(builder, activity_id);
    BabelTowerDailyTask.AddTaskId(builder, task_id);
    return BabelTowerDailyTask.EndBabelTowerDailyTask(builder);
  }

  public static void StartBabelTowerDailyTask(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddTaskId(FlatBufferBuilder builder, int taskId) { builder.AddInt(0, taskId, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, int groupId) { builder.AddInt(2, groupId, 0); }
  public static void AddWeight(FlatBufferBuilder builder, int weight) { builder.AddInt(3, weight, 0); }
  public static void AddDropId(FlatBufferBuilder builder, int dropId) { builder.AddInt(4, dropId, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(5, titleOffset.Value, 0); }
  public static void AddShowDeTerm(FlatBufferBuilder builder, VectorOffset showDeTermOffset) { builder.AddOffset(6, showDeTermOffset.Value, 0); }
  public static VectorOffset CreateShowDeTermVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateShowDeTermVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowDeTermVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowDeTermVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShowDeTermVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShowBuff(FlatBufferBuilder builder, VectorOffset showBuffOffset) { builder.AddOffset(7, showBuffOffset.Value, 0); }
  public static VectorOffset CreateShowBuffVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateShowBuffVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowBuffVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowBuffVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShowBuffVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddJumpToLevelId(FlatBufferBuilder builder, int jumpToLevelId) { builder.AddInt(8, jumpToLevelId, 0); }
  public static Offset<WWParser.Defs.BabelTowerDailyTask> EndBabelTowerDailyTask(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BabelTowerDailyTask>(o);
  }
  public BabelTowerDailyTaskT UnPack() {
    var _o = new BabelTowerDailyTaskT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BabelTowerDailyTaskT _o) {
    _o.TaskId = this.TaskId;
    _o.ActivityId = this.ActivityId;
    _o.GroupId = this.GroupId;
    _o.Weight = this.Weight;
    _o.DropId = this.DropId;
    _o.Title = this.Title;
    _o.ShowDeTerm = new List<int>();
    for (var _j = 0; _j < this.ShowDeTermLength; ++_j) {_o.ShowDeTerm.Add(this.ShowDeTerm(_j));}
    _o.ShowBuff = new List<int>();
    for (var _j = 0; _j < this.ShowBuffLength; ++_j) {_o.ShowBuff.Add(this.ShowBuff(_j));}
    _o.JumpToLevelId = this.JumpToLevelId;
  }
  public static Offset<WWParser.Defs.BabelTowerDailyTask> Pack(FlatBufferBuilder builder, BabelTowerDailyTaskT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BabelTowerDailyTask>);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _show_de_term = default(VectorOffset);
    if (_o.ShowDeTerm != null) {
      var __show_de_term = _o.ShowDeTerm.ToArray();
      _show_de_term = CreateShowDeTermVector(builder, __show_de_term);
    }
    var _show_buff = default(VectorOffset);
    if (_o.ShowBuff != null) {
      var __show_buff = _o.ShowBuff.ToArray();
      _show_buff = CreateShowBuffVector(builder, __show_buff);
    }
    return CreateBabelTowerDailyTask(
      builder,
      _o.TaskId,
      _o.ActivityId,
      _o.GroupId,
      _o.Weight,
      _o.DropId,
      _title,
      _show_de_term,
      _show_buff,
      _o.JumpToLevelId);
  }
}

public class BabelTowerDailyTaskT
{
  [Newtonsoft.Json.JsonProperty("task_id")]
  public int TaskId { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("group_id")]
  public int GroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("weight")]
  public int Weight { get; set; }
  [Newtonsoft.Json.JsonProperty("drop_id")]
  public int DropId { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("show_de_term")]
  public List<int> ShowDeTerm { get; set; }
  [Newtonsoft.Json.JsonProperty("show_buff")]
  public List<int> ShowBuff { get; set; }
  [Newtonsoft.Json.JsonProperty("jump_to_level_id")]
  public int JumpToLevelId { get; set; }

  public BabelTowerDailyTaskT() {
    this.TaskId = 0;
    this.ActivityId = 0;
    this.GroupId = 0;
    this.Weight = 0;
    this.DropId = 0;
    this.Title = null;
    this.ShowDeTerm = null;
    this.ShowBuff = null;
    this.JumpToLevelId = 0;
  }
}


static public class BabelTowerDailyTaskVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TaskId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*GroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Weight*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*DropId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*Title*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*ShowDeTerm*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*ShowBuff*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 20 /*JumpToLevelId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
