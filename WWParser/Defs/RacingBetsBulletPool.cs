// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RacingBetsBulletPool : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RacingBetsBulletPool GetRootAsRacingBetsBulletPool(ByteBuffer _bb) { return GetRootAsRacingBetsBulletPool(_bb, new RacingBetsBulletPool()); }
  public static RacingBetsBulletPool GetRootAsRacingBetsBulletPool(ByteBuffer _bb, RacingBetsBulletPool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RacingBetsBulletPool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Threshold { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? BulletPool(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BulletPoolLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.RacingBetsBulletPool> CreateRacingBetsBulletPool(FlatBufferBuilder builder,
      int id = 0,
      int activity_id = 0,
      int threshold = 0,
      VectorOffset bullet_poolOffset = default(VectorOffset)) {
    builder.StartTable(4);
    RacingBetsBulletPool.AddBulletPool(builder, bullet_poolOffset);
    RacingBetsBulletPool.AddThreshold(builder, threshold);
    RacingBetsBulletPool.AddActivityId(builder, activity_id);
    RacingBetsBulletPool.AddId(builder, id);
    return RacingBetsBulletPool.EndRacingBetsBulletPool(builder);
  }

  public static void StartRacingBetsBulletPool(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddThreshold(FlatBufferBuilder builder, int threshold) { builder.AddInt(2, threshold, 0); }
  public static void AddBulletPool(FlatBufferBuilder builder, VectorOffset bulletPoolOffset) { builder.AddOffset(3, bulletPoolOffset.Value, 0); }
  public static VectorOffset CreateBulletPoolVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBulletPoolVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBulletPoolVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBulletPoolVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBulletPoolVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.RacingBetsBulletPool> EndRacingBetsBulletPool(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RacingBetsBulletPool>(o);
  }
  public RacingBetsBulletPoolT UnPack() {
    var _o = new RacingBetsBulletPoolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RacingBetsBulletPoolT _o) {
    _o.Id = this.Id;
    _o.ActivityId = this.ActivityId;
    _o.Threshold = this.Threshold;
    _o.BulletPool = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.BulletPoolLength; ++_j) {_o.BulletPool.Add(this.BulletPool(_j).HasValue ? this.BulletPool(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.RacingBetsBulletPool> Pack(FlatBufferBuilder builder, RacingBetsBulletPoolT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RacingBetsBulletPool>);
    var _bullet_pool = default(VectorOffset);
    if (_o.BulletPool != null) {
      var __bullet_pool = new Offset<WWParser.Defs.DicIntInt>[_o.BulletPool.Count];
      for (var _j = 0; _j < __bullet_pool.Length; ++_j) { __bullet_pool[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.BulletPool[_j]); }
      _bullet_pool = CreateBulletPoolVector(builder, __bullet_pool);
    }
    return CreateRacingBetsBulletPool(
      builder,
      _o.Id,
      _o.ActivityId,
      _o.Threshold,
      _bullet_pool);
  }
}

public class RacingBetsBulletPoolT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("threshold")]
  public int Threshold { get; set; }
  [Newtonsoft.Json.JsonProperty("bullet_pool")]
  public List<WWParser.Defs.DicIntIntT> BulletPool { get; set; }

  public RacingBetsBulletPoolT() {
    this.Id = 0;
    this.ActivityId = 0;
    this.Threshold = 0;
    this.BulletPool = null;
  }
}


static public class RacingBetsBulletPoolVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Threshold*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*BulletPool*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
