// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MonsterSizeId : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MonsterSizeId GetRootAsMonsterSizeId(ByteBuffer _bb) { return GetRootAsMonsterSizeId(_bb, new MonsterSizeId()); }
  public static MonsterSizeId GetRootAsMonsterSizeId(ByteBuffer _bb, MonsterSizeId obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MonsterSizeId __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MonsterSizeTag(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MonsterSizeTagLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.MonsterSizeId> CreateMonsterSizeId(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset monster_size_tagOffset = default(VectorOffset)) {
    builder.StartTable(2);
    MonsterSizeId.AddMonsterSizeTag(builder, monster_size_tagOffset);
    MonsterSizeId.AddId(builder, id);
    return MonsterSizeId.EndMonsterSizeId(builder);
  }

  public static void StartMonsterSizeId(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMonsterSizeTag(FlatBufferBuilder builder, VectorOffset monsterSizeTagOffset) { builder.AddOffset(1, monsterSizeTagOffset.Value, 0); }
  public static VectorOffset CreateMonsterSizeTagVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMonsterSizeTagVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMonsterSizeTagVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMonsterSizeTagVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMonsterSizeTagVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.MonsterSizeId> EndMonsterSizeId(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MonsterSizeId>(o);
  }
  public MonsterSizeIdT UnPack() {
    var _o = new MonsterSizeIdT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MonsterSizeIdT _o) {
    _o.Id = this.Id;
    _o.MonsterSizeTag = new List<string>();
    for (var _j = 0; _j < this.MonsterSizeTagLength; ++_j) {_o.MonsterSizeTag.Add(this.MonsterSizeTag(_j));}
  }
  public static Offset<WWParser.Defs.MonsterSizeId> Pack(FlatBufferBuilder builder, MonsterSizeIdT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MonsterSizeId>);
    var _monster_size_tag = default(VectorOffset);
    if (_o.MonsterSizeTag != null) {
      var __monster_size_tag = new StringOffset[_o.MonsterSizeTag.Count];
      for (var _j = 0; _j < __monster_size_tag.Length; ++_j) { __monster_size_tag[_j] = builder.CreateString(_o.MonsterSizeTag[_j]); }
      _monster_size_tag = CreateMonsterSizeTagVector(builder, __monster_size_tag);
    }
    return CreateMonsterSizeId(
      builder,
      _o.Id,
      _monster_size_tag);
  }
}

public class MonsterSizeIdT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_size_tag")]
  public List<string> MonsterSizeTag { get; set; }

  public MonsterSizeIdT() {
    this.Id = 0;
    this.MonsterSizeTag = null;
  }
}


static public class MonsterSizeIdVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 6 /*MonsterSizeTag*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
