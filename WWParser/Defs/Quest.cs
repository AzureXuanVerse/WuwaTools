// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Quest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Quest GetRootAsQuest(ByteBuffer _bb) { return GetRootAsQuest(_bb, new Quest()); }
  public static Quest GetRootAsQuest(ByteBuffer _bb, Quest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Quest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string QuestKey { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQuestKeyBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetQuestKeyBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetQuestKeyArray() { return __p.__vector_as_array<byte>(6); }
  public string QuestName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQuestNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetQuestNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetQuestNameArray() { return __p.__vector_as_array<byte>(8); }
  public int QuestType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsRepeat { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsAutoTrack { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string QuestText { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQuestTextBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetQuestTextBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetQuestTextArray() { return __p.__vector_as_array<byte>(16); }
  public int IsOnline { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardShow { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AreaId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Duration { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string PanelTexturePath { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPanelTexturePathBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetPanelTexturePathBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetPanelTexturePathArray() { return __p.__vector_as_array<byte>(26); }

  public static Offset<WWParser.Defs.Quest> CreateQuest(FlatBufferBuilder builder,
      int id = 0,
      StringOffset quest_keyOffset = default(StringOffset),
      StringOffset quest_nameOffset = default(StringOffset),
      int quest_type = 0,
      bool is_repeat = false,
      bool is_auto_track = false,
      StringOffset quest_textOffset = default(StringOffset),
      int is_online = 0,
      int reward_show = 0,
      int area_id = 0,
      int duration = 0,
      StringOffset panel_texture_pathOffset = default(StringOffset)) {
    builder.StartTable(12);
    Quest.AddPanelTexturePath(builder, panel_texture_pathOffset);
    Quest.AddDuration(builder, duration);
    Quest.AddAreaId(builder, area_id);
    Quest.AddRewardShow(builder, reward_show);
    Quest.AddIsOnline(builder, is_online);
    Quest.AddQuestText(builder, quest_textOffset);
    Quest.AddQuestType(builder, quest_type);
    Quest.AddQuestName(builder, quest_nameOffset);
    Quest.AddQuestKey(builder, quest_keyOffset);
    Quest.AddId(builder, id);
    Quest.AddIsAutoTrack(builder, is_auto_track);
    Quest.AddIsRepeat(builder, is_repeat);
    return Quest.EndQuest(builder);
  }

  public static void StartQuest(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddQuestKey(FlatBufferBuilder builder, StringOffset questKeyOffset) { builder.AddOffset(1, questKeyOffset.Value, 0); }
  public static void AddQuestName(FlatBufferBuilder builder, StringOffset questNameOffset) { builder.AddOffset(2, questNameOffset.Value, 0); }
  public static void AddQuestType(FlatBufferBuilder builder, int questType) { builder.AddInt(3, questType, 0); }
  public static void AddIsRepeat(FlatBufferBuilder builder, bool isRepeat) { builder.AddBool(4, isRepeat, false); }
  public static void AddIsAutoTrack(FlatBufferBuilder builder, bool isAutoTrack) { builder.AddBool(5, isAutoTrack, false); }
  public static void AddQuestText(FlatBufferBuilder builder, StringOffset questTextOffset) { builder.AddOffset(6, questTextOffset.Value, 0); }
  public static void AddIsOnline(FlatBufferBuilder builder, int isOnline) { builder.AddInt(7, isOnline, 0); }
  public static void AddRewardShow(FlatBufferBuilder builder, int rewardShow) { builder.AddInt(8, rewardShow, 0); }
  public static void AddAreaId(FlatBufferBuilder builder, int areaId) { builder.AddInt(9, areaId, 0); }
  public static void AddDuration(FlatBufferBuilder builder, int duration) { builder.AddInt(10, duration, 0); }
  public static void AddPanelTexturePath(FlatBufferBuilder builder, StringOffset panelTexturePathOffset) { builder.AddOffset(11, panelTexturePathOffset.Value, 0); }
  public static Offset<WWParser.Defs.Quest> EndQuest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Quest>(o);
  }
  public QuestT UnPack() {
    var _o = new QuestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QuestT _o) {
    _o.Id = this.Id;
    _o.QuestKey = this.QuestKey;
    _o.QuestName = this.QuestName;
    _o.QuestType = this.QuestType;
    _o.IsRepeat = this.IsRepeat;
    _o.IsAutoTrack = this.IsAutoTrack;
    _o.QuestText = this.QuestText;
    _o.IsOnline = this.IsOnline;
    _o.RewardShow = this.RewardShow;
    _o.AreaId = this.AreaId;
    _o.Duration = this.Duration;
    _o.PanelTexturePath = this.PanelTexturePath;
  }
  public static Offset<WWParser.Defs.Quest> Pack(FlatBufferBuilder builder, QuestT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Quest>);
    var _quest_key = _o.QuestKey == null ? default(StringOffset) : builder.CreateString(_o.QuestKey);
    var _quest_name = _o.QuestName == null ? default(StringOffset) : builder.CreateString(_o.QuestName);
    var _quest_text = _o.QuestText == null ? default(StringOffset) : builder.CreateString(_o.QuestText);
    var _panel_texture_path = _o.PanelTexturePath == null ? default(StringOffset) : builder.CreateString(_o.PanelTexturePath);
    return CreateQuest(
      builder,
      _o.Id,
      _quest_key,
      _quest_name,
      _o.QuestType,
      _o.IsRepeat,
      _o.IsAutoTrack,
      _quest_text,
      _o.IsOnline,
      _o.RewardShow,
      _o.AreaId,
      _o.Duration,
      _panel_texture_path);
  }
}

public class QuestT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("quest_key")]
  public string QuestKey { get; set; }
  [Newtonsoft.Json.JsonProperty("quest_name")]
  public string QuestName { get; set; }
  [Newtonsoft.Json.JsonProperty("quest_type")]
  public int QuestType { get; set; }
  [Newtonsoft.Json.JsonProperty("is_repeat")]
  public bool IsRepeat { get; set; }
  [Newtonsoft.Json.JsonProperty("is_auto_track")]
  public bool IsAutoTrack { get; set; }
  [Newtonsoft.Json.JsonProperty("quest_text")]
  public string QuestText { get; set; }
  [Newtonsoft.Json.JsonProperty("is_online")]
  public int IsOnline { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_show")]
  public int RewardShow { get; set; }
  [Newtonsoft.Json.JsonProperty("area_id")]
  public int AreaId { get; set; }
  [Newtonsoft.Json.JsonProperty("duration")]
  public int Duration { get; set; }
  [Newtonsoft.Json.JsonProperty("panel_texture_path")]
  public string PanelTexturePath { get; set; }

  public QuestT() {
    this.Id = 0;
    this.QuestKey = null;
    this.QuestName = null;
    this.QuestType = 0;
    this.IsRepeat = false;
    this.IsAutoTrack = false;
    this.QuestText = null;
    this.IsOnline = 0;
    this.RewardShow = 0;
    this.AreaId = 0;
    this.Duration = 0;
    this.PanelTexturePath = null;
  }
}


static public class QuestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*QuestKey*/, false)
      && verifier.VerifyString(tablePos, 8 /*QuestName*/, false)
      && verifier.VerifyField(tablePos, 10 /*QuestType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*IsRepeat*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*IsAutoTrack*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 16 /*QuestText*/, false)
      && verifier.VerifyField(tablePos, 18 /*IsOnline*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*RewardShow*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*AreaId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*Duration*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 26 /*PanelTexturePath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
