// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TowerDifficulty : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TowerDifficulty GetRootAsTowerDifficulty(ByteBuffer _bb) { return GetRootAsTowerDifficulty(_bb, new TowerDifficulty()); }
  public static TowerDifficulty GetRootAsTowerDifficulty(ByteBuffer _bb, TowerDifficulty obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TowerDifficulty __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Difficulty { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.IntPair? Reward(int j) { int o = __p.__offset(6); return o != 0 ? (WWParser.Defs.IntPair?)(new WWParser.Defs.IntPair()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RewardLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.TowerDifficulty> CreateTowerDifficulty(FlatBufferBuilder builder,
      int difficulty = 0,
      VectorOffset rewardOffset = default(VectorOffset)) {
    builder.StartTable(2);
    TowerDifficulty.AddReward(builder, rewardOffset);
    TowerDifficulty.AddDifficulty(builder, difficulty);
    return TowerDifficulty.EndTowerDifficulty(builder);
  }

  public static void StartTowerDifficulty(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddDifficulty(FlatBufferBuilder builder, int difficulty) { builder.AddInt(0, difficulty, 0); }
  public static void AddReward(FlatBufferBuilder builder, VectorOffset rewardOffset) { builder.AddOffset(1, rewardOffset.Value, 0); }
  public static VectorOffset CreateRewardVector(FlatBufferBuilder builder, Offset<WWParser.Defs.IntPair>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRewardVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.IntPair>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.IntPair>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.IntPair>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.TowerDifficulty> EndTowerDifficulty(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.TowerDifficulty>(o);
  }
  public TowerDifficultyT UnPack() {
    var _o = new TowerDifficultyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TowerDifficultyT _o) {
    _o.Difficulty = this.Difficulty;
    _o.Reward = new List<WWParser.Defs.IntPairT>();
    for (var _j = 0; _j < this.RewardLength; ++_j) {_o.Reward.Add(this.Reward(_j).HasValue ? this.Reward(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.TowerDifficulty> Pack(FlatBufferBuilder builder, TowerDifficultyT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.TowerDifficulty>);
    var _reward = default(VectorOffset);
    if (_o.Reward != null) {
      var __reward = new Offset<WWParser.Defs.IntPair>[_o.Reward.Count];
      for (var _j = 0; _j < __reward.Length; ++_j) { __reward[_j] = WWParser.Defs.IntPair.Pack(builder, _o.Reward[_j]); }
      _reward = CreateRewardVector(builder, __reward);
    }
    return CreateTowerDifficulty(
      builder,
      _o.Difficulty,
      _reward);
  }
}

public class TowerDifficultyT
{
  [Newtonsoft.Json.JsonProperty("difficulty")]
  public int Difficulty { get; set; }
  [Newtonsoft.Json.JsonProperty("reward")]
  public List<WWParser.Defs.IntPairT> Reward { get; set; }

  public TowerDifficultyT() {
    this.Difficulty = 0;
    this.Reward = null;
  }
}


static public class TowerDifficultyVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Difficulty*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Reward*/, WWParser.Defs.IntPairVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
