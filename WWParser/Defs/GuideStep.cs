// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GuideStep : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GuideStep GetRootAsGuideStep(ByteBuffer _bb) { return GetRootAsGuideStep(_bb, new GuideStep()); }
  public static GuideStep GetRootAsGuideStep(ByteBuffer _bb, GuideStep obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GuideStep __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Controller { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetControllerBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetControllerBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetControllerArray() { return __p.__vector_as_array<byte>(6); }
  public int SuccessCondition { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FailureCondition { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TickCondition { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkipCondition { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BreakCondition { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float TimeScale { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public int ContentType { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ReportId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Duration { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)5000; } }
  public int MinDuration { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public int ShowDelay { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsDangerous { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsTimeUpAsFinish { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.GuideStep> CreateGuideStep(FlatBufferBuilder builder,
      int id = 0,
      StringOffset controllerOffset = default(StringOffset),
      int success_condition = 0,
      int failure_condition = 0,
      int tick_condition = 0,
      int skip_condition = 0,
      int break_condition = 0,
      float time_scale = 1.0f,
      int content_type = 0,
      int report_id = 0,
      int duration = 5000,
      int min_duration = -1,
      int show_delay = 0,
      bool is_dangerous = false,
      bool is_time_up_as_finish = false) {
    builder.StartTable(15);
    GuideStep.AddShowDelay(builder, show_delay);
    GuideStep.AddMinDuration(builder, min_duration);
    GuideStep.AddDuration(builder, duration);
    GuideStep.AddReportId(builder, report_id);
    GuideStep.AddContentType(builder, content_type);
    GuideStep.AddTimeScale(builder, time_scale);
    GuideStep.AddBreakCondition(builder, break_condition);
    GuideStep.AddSkipCondition(builder, skip_condition);
    GuideStep.AddTickCondition(builder, tick_condition);
    GuideStep.AddFailureCondition(builder, failure_condition);
    GuideStep.AddSuccessCondition(builder, success_condition);
    GuideStep.AddController(builder, controllerOffset);
    GuideStep.AddId(builder, id);
    GuideStep.AddIsTimeUpAsFinish(builder, is_time_up_as_finish);
    GuideStep.AddIsDangerous(builder, is_dangerous);
    return GuideStep.EndGuideStep(builder);
  }

  public static void StartGuideStep(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddController(FlatBufferBuilder builder, StringOffset controllerOffset) { builder.AddOffset(1, controllerOffset.Value, 0); }
  public static void AddSuccessCondition(FlatBufferBuilder builder, int successCondition) { builder.AddInt(2, successCondition, 0); }
  public static void AddFailureCondition(FlatBufferBuilder builder, int failureCondition) { builder.AddInt(3, failureCondition, 0); }
  public static void AddTickCondition(FlatBufferBuilder builder, int tickCondition) { builder.AddInt(4, tickCondition, 0); }
  public static void AddSkipCondition(FlatBufferBuilder builder, int skipCondition) { builder.AddInt(5, skipCondition, 0); }
  public static void AddBreakCondition(FlatBufferBuilder builder, int breakCondition) { builder.AddInt(6, breakCondition, 0); }
  public static void AddTimeScale(FlatBufferBuilder builder, float timeScale) { builder.AddFloat(7, timeScale, 1.0f); }
  public static void AddContentType(FlatBufferBuilder builder, int contentType) { builder.AddInt(8, contentType, 0); }
  public static void AddReportId(FlatBufferBuilder builder, int reportId) { builder.AddInt(9, reportId, 0); }
  public static void AddDuration(FlatBufferBuilder builder, int duration) { builder.AddInt(10, duration, 5000); }
  public static void AddMinDuration(FlatBufferBuilder builder, int minDuration) { builder.AddInt(11, minDuration, -1); }
  public static void AddShowDelay(FlatBufferBuilder builder, int showDelay) { builder.AddInt(12, showDelay, 0); }
  public static void AddIsDangerous(FlatBufferBuilder builder, bool isDangerous) { builder.AddBool(13, isDangerous, false); }
  public static void AddIsTimeUpAsFinish(FlatBufferBuilder builder, bool isTimeUpAsFinish) { builder.AddBool(14, isTimeUpAsFinish, false); }
  public static Offset<WWParser.Defs.GuideStep> EndGuideStep(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.GuideStep>(o);
  }
  public GuideStepT UnPack() {
    var _o = new GuideStepT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GuideStepT _o) {
    _o.Id = this.Id;
    _o.Controller = this.Controller;
    _o.SuccessCondition = this.SuccessCondition;
    _o.FailureCondition = this.FailureCondition;
    _o.TickCondition = this.TickCondition;
    _o.SkipCondition = this.SkipCondition;
    _o.BreakCondition = this.BreakCondition;
    _o.TimeScale = this.TimeScale;
    _o.ContentType = this.ContentType;
    _o.ReportId = this.ReportId;
    _o.Duration = this.Duration;
    _o.MinDuration = this.MinDuration;
    _o.ShowDelay = this.ShowDelay;
    _o.IsDangerous = this.IsDangerous;
    _o.IsTimeUpAsFinish = this.IsTimeUpAsFinish;
  }
  public static Offset<WWParser.Defs.GuideStep> Pack(FlatBufferBuilder builder, GuideStepT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.GuideStep>);
    var _controller = _o.Controller == null ? default(StringOffset) : builder.CreateString(_o.Controller);
    return CreateGuideStep(
      builder,
      _o.Id,
      _controller,
      _o.SuccessCondition,
      _o.FailureCondition,
      _o.TickCondition,
      _o.SkipCondition,
      _o.BreakCondition,
      _o.TimeScale,
      _o.ContentType,
      _o.ReportId,
      _o.Duration,
      _o.MinDuration,
      _o.ShowDelay,
      _o.IsDangerous,
      _o.IsTimeUpAsFinish);
  }
}

public class GuideStepT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("controller")]
  public string Controller { get; set; }
  [Newtonsoft.Json.JsonProperty("success_condition")]
  public int SuccessCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("failure_condition")]
  public int FailureCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("tick_condition")]
  public int TickCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("skip_condition")]
  public int SkipCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("break_condition")]
  public int BreakCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("time_scale")]
  public float TimeScale { get; set; }
  [Newtonsoft.Json.JsonProperty("content_type")]
  public int ContentType { get; set; }
  [Newtonsoft.Json.JsonProperty("report_id")]
  public int ReportId { get; set; }
  [Newtonsoft.Json.JsonProperty("duration")]
  public int Duration { get; set; }
  [Newtonsoft.Json.JsonProperty("min_duration")]
  public int MinDuration { get; set; }
  [Newtonsoft.Json.JsonProperty("show_delay")]
  public int ShowDelay { get; set; }
  [Newtonsoft.Json.JsonProperty("is_dangerous")]
  public bool IsDangerous { get; set; }
  [Newtonsoft.Json.JsonProperty("is_time_up_as_finish")]
  public bool IsTimeUpAsFinish { get; set; }

  public GuideStepT() {
    this.Id = 0;
    this.Controller = null;
    this.SuccessCondition = 0;
    this.FailureCondition = 0;
    this.TickCondition = 0;
    this.SkipCondition = 0;
    this.BreakCondition = 0;
    this.TimeScale = 1.0f;
    this.ContentType = 0;
    this.ReportId = 0;
    this.Duration = 5000;
    this.MinDuration = -1;
    this.ShowDelay = 0;
    this.IsDangerous = false;
    this.IsTimeUpAsFinish = false;
  }
}


static public class GuideStepVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Controller*/, false)
      && verifier.VerifyField(tablePos, 8 /*SuccessCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*FailureCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*TickCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*SkipCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*BreakCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*TimeScale*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*ContentType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*ReportId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*Duration*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*MinDuration*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*ShowDelay*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*IsDangerous*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 32 /*IsTimeUpAsFinish*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
