// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SoarChallenge : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SoarChallenge GetRootAsSoarChallenge(ByteBuffer _bb) { return GetRootAsSoarChallenge(_bb, new SoarChallenge()); }
  public static SoarChallenge GetRootAsSoarChallenge(ByteBuffer _bb, SoarChallenge obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SoarChallenge __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LevelPlayId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public int NeedScore { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Reward { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ScoreText { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScoreTextBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetScoreTextBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetScoreTextArray() { return __p.__vector_as_array<byte>(14); }
  public int JumpId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockTravelLevel { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockQuestId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string LockTips { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLockTipsBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetLockTipsBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetLockTipsArray() { return __p.__vector_as_array<byte>(22); }

  public static Offset<WWParser.Defs.SoarChallenge> CreateSoarChallenge(FlatBufferBuilder builder,
      int id = 0,
      int level_play_id = 0,
      StringOffset nameOffset = default(StringOffset),
      int need_score = 0,
      int reward = 0,
      StringOffset score_textOffset = default(StringOffset),
      int jump_id = 0,
      int unlock_travel_level = 0,
      int unlock_quest_id = 0,
      StringOffset lock_tipsOffset = default(StringOffset)) {
    builder.StartTable(10);
    SoarChallenge.AddLockTips(builder, lock_tipsOffset);
    SoarChallenge.AddUnlockQuestId(builder, unlock_quest_id);
    SoarChallenge.AddUnlockTravelLevel(builder, unlock_travel_level);
    SoarChallenge.AddJumpId(builder, jump_id);
    SoarChallenge.AddScoreText(builder, score_textOffset);
    SoarChallenge.AddReward(builder, reward);
    SoarChallenge.AddNeedScore(builder, need_score);
    SoarChallenge.AddName(builder, nameOffset);
    SoarChallenge.AddLevelPlayId(builder, level_play_id);
    SoarChallenge.AddId(builder, id);
    return SoarChallenge.EndSoarChallenge(builder);
  }

  public static void StartSoarChallenge(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddLevelPlayId(FlatBufferBuilder builder, int levelPlayId) { builder.AddInt(1, levelPlayId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddNeedScore(FlatBufferBuilder builder, int needScore) { builder.AddInt(3, needScore, 0); }
  public static void AddReward(FlatBufferBuilder builder, int reward) { builder.AddInt(4, reward, 0); }
  public static void AddScoreText(FlatBufferBuilder builder, StringOffset scoreTextOffset) { builder.AddOffset(5, scoreTextOffset.Value, 0); }
  public static void AddJumpId(FlatBufferBuilder builder, int jumpId) { builder.AddInt(6, jumpId, 0); }
  public static void AddUnlockTravelLevel(FlatBufferBuilder builder, int unlockTravelLevel) { builder.AddInt(7, unlockTravelLevel, 0); }
  public static void AddUnlockQuestId(FlatBufferBuilder builder, int unlockQuestId) { builder.AddInt(8, unlockQuestId, 0); }
  public static void AddLockTips(FlatBufferBuilder builder, StringOffset lockTipsOffset) { builder.AddOffset(9, lockTipsOffset.Value, 0); }
  public static Offset<WWParser.Defs.SoarChallenge> EndSoarChallenge(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SoarChallenge>(o);
  }
  public SoarChallengeT UnPack() {
    var _o = new SoarChallengeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SoarChallengeT _o) {
    _o.Id = this.Id;
    _o.LevelPlayId = this.LevelPlayId;
    _o.Name = this.Name;
    _o.NeedScore = this.NeedScore;
    _o.Reward = this.Reward;
    _o.ScoreText = this.ScoreText;
    _o.JumpId = this.JumpId;
    _o.UnlockTravelLevel = this.UnlockTravelLevel;
    _o.UnlockQuestId = this.UnlockQuestId;
    _o.LockTips = this.LockTips;
  }
  public static Offset<WWParser.Defs.SoarChallenge> Pack(FlatBufferBuilder builder, SoarChallengeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SoarChallenge>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _score_text = _o.ScoreText == null ? default(StringOffset) : builder.CreateString(_o.ScoreText);
    var _lock_tips = _o.LockTips == null ? default(StringOffset) : builder.CreateString(_o.LockTips);
    return CreateSoarChallenge(
      builder,
      _o.Id,
      _o.LevelPlayId,
      _name,
      _o.NeedScore,
      _o.Reward,
      _score_text,
      _o.JumpId,
      _o.UnlockTravelLevel,
      _o.UnlockQuestId,
      _lock_tips);
  }
}

public class SoarChallengeT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("level_play_id")]
  public int LevelPlayId { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("need_score")]
  public int NeedScore { get; set; }
  [Newtonsoft.Json.JsonProperty("reward")]
  public int Reward { get; set; }
  [Newtonsoft.Json.JsonProperty("score_text")]
  public string ScoreText { get; set; }
  [Newtonsoft.Json.JsonProperty("jump_id")]
  public int JumpId { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_travel_level")]
  public int UnlockTravelLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_quest_id")]
  public int UnlockQuestId { get; set; }
  [Newtonsoft.Json.JsonProperty("lock_tips")]
  public string LockTips { get; set; }

  public SoarChallengeT() {
    this.Id = 0;
    this.LevelPlayId = 0;
    this.Name = null;
    this.NeedScore = 0;
    this.Reward = 0;
    this.ScoreText = null;
    this.JumpId = 0;
    this.UnlockTravelLevel = 0;
    this.UnlockQuestId = 0;
    this.LockTips = null;
  }
}


static public class SoarChallengeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*LevelPlayId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyField(tablePos, 10 /*NeedScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Reward*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*ScoreText*/, false)
      && verifier.VerifyField(tablePos, 16 /*JumpId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*UnlockTravelLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*UnlockQuestId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*LockTips*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
