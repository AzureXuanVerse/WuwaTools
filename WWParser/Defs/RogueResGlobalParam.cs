// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueResGlobalParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueResGlobalParam GetRootAsRogueResGlobalParam(ByteBuffer _bb) { return GetRootAsRogueResGlobalParam(_bb, new RogueResGlobalParam()); }
  public static RogueResGlobalParam GetRootAsRogueResGlobalParam(ByteBuffer _bb, RogueResGlobalParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueResGlobalParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EventStartSeqType(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EventStartSeqTypeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEventStartSeqTypeBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetEventStartSeqTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetEventStartSeqTypeArray() { return __p.__vector_as_array<int>(6); }
  public int EventStartSpineType(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EventStartSpineTypeLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEventStartSpineTypeBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetEventStartSpineTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetEventStartSpineTypeArray() { return __p.__vector_as_array<int>(8); }
  public int GridTakeTipsEventType(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int GridTakeTipsEventTypeLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetGridTakeTipsEventTypeBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetGridTakeTipsEventTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetGridTakeTipsEventTypeArray() { return __p.__vector_as_array<int>(10); }
  public int GridTakeSpineEventType(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int GridTakeSpineEventTypeLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetGridTakeSpineEventTypeBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetGridTakeSpineEventTypeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetGridTakeSpineEventTypeArray() { return __p.__vector_as_array<int>(12); }
  public int EventDisappearEventType(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EventDisappearEventTypeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEventDisappearEventTypeBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetEventDisappearEventTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetEventDisappearEventTypeArray() { return __p.__vector_as_array<int>(14); }
  public int ShowMoodChangeEventType(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ShowMoodChangeEventTypeLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetShowMoodChangeEventTypeBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetShowMoodChangeEventTypeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetShowMoodChangeEventTypeArray() { return __p.__vector_as_array<int>(16); }
  public int ShowLvChangeEventType(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ShowLvChangeEventTypeLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetShowLvChangeEventTypeBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetShowLvChangeEventTypeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetShowLvChangeEventTypeArray() { return __p.__vector_as_array<int>(18); }
  public int ShowCurrencyChangeEventType(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ShowCurrencyChangeEventTypeLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetShowCurrencyChangeEventTypeBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetShowCurrencyChangeEventTypeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetShowCurrencyChangeEventTypeArray() { return __p.__vector_as_array<int>(20); }
  public int FocusTime { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)500; } }
  public string MainHelpImageDesc(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MainHelpImageDescLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string MainHelpImageFig(int j) { int o = __p.__offset(26); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MainHelpImageFigLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string MainHelpRuleDesc { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMainHelpRuleDescBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetMainHelpRuleDescBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetMainHelpRuleDescArray() { return __p.__vector_as_array<byte>(28); }
  public int GridValidRangeTolerance { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1000; } }
  public bool OpenMapViewBlackScreen { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.RogueResGlobalParam> CreateRogueResGlobalParam(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset event_start_seq_typeOffset = default(VectorOffset),
      VectorOffset event_start_spine_typeOffset = default(VectorOffset),
      VectorOffset grid_take_tips_event_typeOffset = default(VectorOffset),
      VectorOffset grid_take_spine_event_typeOffset = default(VectorOffset),
      VectorOffset event_disappear_event_typeOffset = default(VectorOffset),
      VectorOffset show_mood_change_event_typeOffset = default(VectorOffset),
      VectorOffset show_lv_change_event_typeOffset = default(VectorOffset),
      VectorOffset show_currency_change_event_typeOffset = default(VectorOffset),
      int focus_time = 500,
      VectorOffset main_help_image_descOffset = default(VectorOffset),
      VectorOffset main_help_image_figOffset = default(VectorOffset),
      StringOffset main_help_rule_descOffset = default(StringOffset),
      int grid_valid_range_tolerance = 1000,
      bool open_map_view_black_screen = false) {
    builder.StartTable(15);
    RogueResGlobalParam.AddGridValidRangeTolerance(builder, grid_valid_range_tolerance);
    RogueResGlobalParam.AddMainHelpRuleDesc(builder, main_help_rule_descOffset);
    RogueResGlobalParam.AddMainHelpImageFig(builder, main_help_image_figOffset);
    RogueResGlobalParam.AddMainHelpImageDesc(builder, main_help_image_descOffset);
    RogueResGlobalParam.AddFocusTime(builder, focus_time);
    RogueResGlobalParam.AddShowCurrencyChangeEventType(builder, show_currency_change_event_typeOffset);
    RogueResGlobalParam.AddShowLvChangeEventType(builder, show_lv_change_event_typeOffset);
    RogueResGlobalParam.AddShowMoodChangeEventType(builder, show_mood_change_event_typeOffset);
    RogueResGlobalParam.AddEventDisappearEventType(builder, event_disappear_event_typeOffset);
    RogueResGlobalParam.AddGridTakeSpineEventType(builder, grid_take_spine_event_typeOffset);
    RogueResGlobalParam.AddGridTakeTipsEventType(builder, grid_take_tips_event_typeOffset);
    RogueResGlobalParam.AddEventStartSpineType(builder, event_start_spine_typeOffset);
    RogueResGlobalParam.AddEventStartSeqType(builder, event_start_seq_typeOffset);
    RogueResGlobalParam.AddId(builder, id);
    RogueResGlobalParam.AddOpenMapViewBlackScreen(builder, open_map_view_black_screen);
    return RogueResGlobalParam.EndRogueResGlobalParam(builder);
  }

  public static void StartRogueResGlobalParam(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddEventStartSeqType(FlatBufferBuilder builder, VectorOffset eventStartSeqTypeOffset) { builder.AddOffset(1, eventStartSeqTypeOffset.Value, 0); }
  public static VectorOffset CreateEventStartSeqTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEventStartSeqTypeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEventStartSeqTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEventStartSeqTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEventStartSeqTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEventStartSpineType(FlatBufferBuilder builder, VectorOffset eventStartSpineTypeOffset) { builder.AddOffset(2, eventStartSpineTypeOffset.Value, 0); }
  public static VectorOffset CreateEventStartSpineTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEventStartSpineTypeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEventStartSpineTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEventStartSpineTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEventStartSpineTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGridTakeTipsEventType(FlatBufferBuilder builder, VectorOffset gridTakeTipsEventTypeOffset) { builder.AddOffset(3, gridTakeTipsEventTypeOffset.Value, 0); }
  public static VectorOffset CreateGridTakeTipsEventTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGridTakeTipsEventTypeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGridTakeTipsEventTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGridTakeTipsEventTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGridTakeTipsEventTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGridTakeSpineEventType(FlatBufferBuilder builder, VectorOffset gridTakeSpineEventTypeOffset) { builder.AddOffset(4, gridTakeSpineEventTypeOffset.Value, 0); }
  public static VectorOffset CreateGridTakeSpineEventTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGridTakeSpineEventTypeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGridTakeSpineEventTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGridTakeSpineEventTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGridTakeSpineEventTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEventDisappearEventType(FlatBufferBuilder builder, VectorOffset eventDisappearEventTypeOffset) { builder.AddOffset(5, eventDisappearEventTypeOffset.Value, 0); }
  public static VectorOffset CreateEventDisappearEventTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEventDisappearEventTypeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEventDisappearEventTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEventDisappearEventTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEventDisappearEventTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShowMoodChangeEventType(FlatBufferBuilder builder, VectorOffset showMoodChangeEventTypeOffset) { builder.AddOffset(6, showMoodChangeEventTypeOffset.Value, 0); }
  public static VectorOffset CreateShowMoodChangeEventTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateShowMoodChangeEventTypeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowMoodChangeEventTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowMoodChangeEventTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShowMoodChangeEventTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShowLvChangeEventType(FlatBufferBuilder builder, VectorOffset showLvChangeEventTypeOffset) { builder.AddOffset(7, showLvChangeEventTypeOffset.Value, 0); }
  public static VectorOffset CreateShowLvChangeEventTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateShowLvChangeEventTypeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowLvChangeEventTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowLvChangeEventTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShowLvChangeEventTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShowCurrencyChangeEventType(FlatBufferBuilder builder, VectorOffset showCurrencyChangeEventTypeOffset) { builder.AddOffset(8, showCurrencyChangeEventTypeOffset.Value, 0); }
  public static VectorOffset CreateShowCurrencyChangeEventTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateShowCurrencyChangeEventTypeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowCurrencyChangeEventTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowCurrencyChangeEventTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShowCurrencyChangeEventTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFocusTime(FlatBufferBuilder builder, int focusTime) { builder.AddInt(9, focusTime, 500); }
  public static void AddMainHelpImageDesc(FlatBufferBuilder builder, VectorOffset mainHelpImageDescOffset) { builder.AddOffset(10, mainHelpImageDescOffset.Value, 0); }
  public static VectorOffset CreateMainHelpImageDescVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMainHelpImageDescVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMainHelpImageDescVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMainHelpImageDescVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMainHelpImageDescVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMainHelpImageFig(FlatBufferBuilder builder, VectorOffset mainHelpImageFigOffset) { builder.AddOffset(11, mainHelpImageFigOffset.Value, 0); }
  public static VectorOffset CreateMainHelpImageFigVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMainHelpImageFigVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMainHelpImageFigVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMainHelpImageFigVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMainHelpImageFigVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMainHelpRuleDesc(FlatBufferBuilder builder, StringOffset mainHelpRuleDescOffset) { builder.AddOffset(12, mainHelpRuleDescOffset.Value, 0); }
  public static void AddGridValidRangeTolerance(FlatBufferBuilder builder, int gridValidRangeTolerance) { builder.AddInt(13, gridValidRangeTolerance, 1000); }
  public static void AddOpenMapViewBlackScreen(FlatBufferBuilder builder, bool openMapViewBlackScreen) { builder.AddBool(14, openMapViewBlackScreen, false); }
  public static Offset<WWParser.Defs.RogueResGlobalParam> EndRogueResGlobalParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueResGlobalParam>(o);
  }
  public RogueResGlobalParamT UnPack() {
    var _o = new RogueResGlobalParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueResGlobalParamT _o) {
    _o.Id = this.Id;
    _o.EventStartSeqType = new List<int>();
    for (var _j = 0; _j < this.EventStartSeqTypeLength; ++_j) {_o.EventStartSeqType.Add(this.EventStartSeqType(_j));}
    _o.EventStartSpineType = new List<int>();
    for (var _j = 0; _j < this.EventStartSpineTypeLength; ++_j) {_o.EventStartSpineType.Add(this.EventStartSpineType(_j));}
    _o.GridTakeTipsEventType = new List<int>();
    for (var _j = 0; _j < this.GridTakeTipsEventTypeLength; ++_j) {_o.GridTakeTipsEventType.Add(this.GridTakeTipsEventType(_j));}
    _o.GridTakeSpineEventType = new List<int>();
    for (var _j = 0; _j < this.GridTakeSpineEventTypeLength; ++_j) {_o.GridTakeSpineEventType.Add(this.GridTakeSpineEventType(_j));}
    _o.EventDisappearEventType = new List<int>();
    for (var _j = 0; _j < this.EventDisappearEventTypeLength; ++_j) {_o.EventDisappearEventType.Add(this.EventDisappearEventType(_j));}
    _o.ShowMoodChangeEventType = new List<int>();
    for (var _j = 0; _j < this.ShowMoodChangeEventTypeLength; ++_j) {_o.ShowMoodChangeEventType.Add(this.ShowMoodChangeEventType(_j));}
    _o.ShowLvChangeEventType = new List<int>();
    for (var _j = 0; _j < this.ShowLvChangeEventTypeLength; ++_j) {_o.ShowLvChangeEventType.Add(this.ShowLvChangeEventType(_j));}
    _o.ShowCurrencyChangeEventType = new List<int>();
    for (var _j = 0; _j < this.ShowCurrencyChangeEventTypeLength; ++_j) {_o.ShowCurrencyChangeEventType.Add(this.ShowCurrencyChangeEventType(_j));}
    _o.FocusTime = this.FocusTime;
    _o.MainHelpImageDesc = new List<string>();
    for (var _j = 0; _j < this.MainHelpImageDescLength; ++_j) {_o.MainHelpImageDesc.Add(this.MainHelpImageDesc(_j));}
    _o.MainHelpImageFig = new List<string>();
    for (var _j = 0; _j < this.MainHelpImageFigLength; ++_j) {_o.MainHelpImageFig.Add(this.MainHelpImageFig(_j));}
    _o.MainHelpRuleDesc = this.MainHelpRuleDesc;
    _o.GridValidRangeTolerance = this.GridValidRangeTolerance;
    _o.OpenMapViewBlackScreen = this.OpenMapViewBlackScreen;
  }
  public static Offset<WWParser.Defs.RogueResGlobalParam> Pack(FlatBufferBuilder builder, RogueResGlobalParamT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueResGlobalParam>);
    var _event_start_seq_type = default(VectorOffset);
    if (_o.EventStartSeqType != null) {
      var __event_start_seq_type = _o.EventStartSeqType.ToArray();
      _event_start_seq_type = CreateEventStartSeqTypeVector(builder, __event_start_seq_type);
    }
    var _event_start_spine_type = default(VectorOffset);
    if (_o.EventStartSpineType != null) {
      var __event_start_spine_type = _o.EventStartSpineType.ToArray();
      _event_start_spine_type = CreateEventStartSpineTypeVector(builder, __event_start_spine_type);
    }
    var _grid_take_tips_event_type = default(VectorOffset);
    if (_o.GridTakeTipsEventType != null) {
      var __grid_take_tips_event_type = _o.GridTakeTipsEventType.ToArray();
      _grid_take_tips_event_type = CreateGridTakeTipsEventTypeVector(builder, __grid_take_tips_event_type);
    }
    var _grid_take_spine_event_type = default(VectorOffset);
    if (_o.GridTakeSpineEventType != null) {
      var __grid_take_spine_event_type = _o.GridTakeSpineEventType.ToArray();
      _grid_take_spine_event_type = CreateGridTakeSpineEventTypeVector(builder, __grid_take_spine_event_type);
    }
    var _event_disappear_event_type = default(VectorOffset);
    if (_o.EventDisappearEventType != null) {
      var __event_disappear_event_type = _o.EventDisappearEventType.ToArray();
      _event_disappear_event_type = CreateEventDisappearEventTypeVector(builder, __event_disappear_event_type);
    }
    var _show_mood_change_event_type = default(VectorOffset);
    if (_o.ShowMoodChangeEventType != null) {
      var __show_mood_change_event_type = _o.ShowMoodChangeEventType.ToArray();
      _show_mood_change_event_type = CreateShowMoodChangeEventTypeVector(builder, __show_mood_change_event_type);
    }
    var _show_lv_change_event_type = default(VectorOffset);
    if (_o.ShowLvChangeEventType != null) {
      var __show_lv_change_event_type = _o.ShowLvChangeEventType.ToArray();
      _show_lv_change_event_type = CreateShowLvChangeEventTypeVector(builder, __show_lv_change_event_type);
    }
    var _show_currency_change_event_type = default(VectorOffset);
    if (_o.ShowCurrencyChangeEventType != null) {
      var __show_currency_change_event_type = _o.ShowCurrencyChangeEventType.ToArray();
      _show_currency_change_event_type = CreateShowCurrencyChangeEventTypeVector(builder, __show_currency_change_event_type);
    }
    var _main_help_image_desc = default(VectorOffset);
    if (_o.MainHelpImageDesc != null) {
      var __main_help_image_desc = new StringOffset[_o.MainHelpImageDesc.Count];
      for (var _j = 0; _j < __main_help_image_desc.Length; ++_j) { __main_help_image_desc[_j] = builder.CreateString(_o.MainHelpImageDesc[_j]); }
      _main_help_image_desc = CreateMainHelpImageDescVector(builder, __main_help_image_desc);
    }
    var _main_help_image_fig = default(VectorOffset);
    if (_o.MainHelpImageFig != null) {
      var __main_help_image_fig = new StringOffset[_o.MainHelpImageFig.Count];
      for (var _j = 0; _j < __main_help_image_fig.Length; ++_j) { __main_help_image_fig[_j] = builder.CreateString(_o.MainHelpImageFig[_j]); }
      _main_help_image_fig = CreateMainHelpImageFigVector(builder, __main_help_image_fig);
    }
    var _main_help_rule_desc = _o.MainHelpRuleDesc == null ? default(StringOffset) : builder.CreateString(_o.MainHelpRuleDesc);
    return CreateRogueResGlobalParam(
      builder,
      _o.Id,
      _event_start_seq_type,
      _event_start_spine_type,
      _grid_take_tips_event_type,
      _grid_take_spine_event_type,
      _event_disappear_event_type,
      _show_mood_change_event_type,
      _show_lv_change_event_type,
      _show_currency_change_event_type,
      _o.FocusTime,
      _main_help_image_desc,
      _main_help_image_fig,
      _main_help_rule_desc,
      _o.GridValidRangeTolerance,
      _o.OpenMapViewBlackScreen);
  }
}

public class RogueResGlobalParamT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("event_start_seq_type")]
  public List<int> EventStartSeqType { get; set; }
  [Newtonsoft.Json.JsonProperty("event_start_spine_type")]
  public List<int> EventStartSpineType { get; set; }
  [Newtonsoft.Json.JsonProperty("grid_take_tips_event_type")]
  public List<int> GridTakeTipsEventType { get; set; }
  [Newtonsoft.Json.JsonProperty("grid_take_spine_event_type")]
  public List<int> GridTakeSpineEventType { get; set; }
  [Newtonsoft.Json.JsonProperty("event_disappear_event_type")]
  public List<int> EventDisappearEventType { get; set; }
  [Newtonsoft.Json.JsonProperty("show_mood_change_event_type")]
  public List<int> ShowMoodChangeEventType { get; set; }
  [Newtonsoft.Json.JsonProperty("show_lv_change_event_type")]
  public List<int> ShowLvChangeEventType { get; set; }
  [Newtonsoft.Json.JsonProperty("show_currency_change_event_type")]
  public List<int> ShowCurrencyChangeEventType { get; set; }
  [Newtonsoft.Json.JsonProperty("focus_time")]
  public int FocusTime { get; set; }
  [Newtonsoft.Json.JsonProperty("main_help_image_desc")]
  public List<string> MainHelpImageDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("main_help_image_fig")]
  public List<string> MainHelpImageFig { get; set; }
  [Newtonsoft.Json.JsonProperty("main_help_rule_desc")]
  public string MainHelpRuleDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("grid_valid_range_tolerance")]
  public int GridValidRangeTolerance { get; set; }
  [Newtonsoft.Json.JsonProperty("open_map_view_black_screen")]
  public bool OpenMapViewBlackScreen { get; set; }

  public RogueResGlobalParamT() {
    this.Id = 0;
    this.EventStartSeqType = null;
    this.EventStartSpineType = null;
    this.GridTakeTipsEventType = null;
    this.GridTakeSpineEventType = null;
    this.EventDisappearEventType = null;
    this.ShowMoodChangeEventType = null;
    this.ShowLvChangeEventType = null;
    this.ShowCurrencyChangeEventType = null;
    this.FocusTime = 500;
    this.MainHelpImageDesc = null;
    this.MainHelpImageFig = null;
    this.MainHelpRuleDesc = null;
    this.GridValidRangeTolerance = 1000;
    this.OpenMapViewBlackScreen = false;
  }
}


static public class RogueResGlobalParamVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*EventStartSeqType*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*EventStartSpineType*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*GridTakeTipsEventType*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*GridTakeSpineEventType*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*EventDisappearEventType*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*ShowMoodChangeEventType*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*ShowLvChangeEventType*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*ShowCurrencyChangeEventType*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 22 /*FocusTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 24 /*MainHelpImageDesc*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 26 /*MainHelpImageFig*/, false)
      && verifier.VerifyString(tablePos, 28 /*MainHelpRuleDesc*/, false)
      && verifier.VerifyField(tablePos, 30 /*GridValidRangeTolerance*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*OpenMapViewBlackScreen*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
