// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GeographyHandBook : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GeographyHandBook GetRootAsGeographyHandBook(ByteBuffer _bb) { return GetRootAsGeographyHandBook(_bb, new GeographyHandBook()); }
  public static GeographyHandBook GetRootAsGeographyHandBook(ByteBuffer _bb, GeographyHandBook obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GeographyHandBook __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string Texture { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextureBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTextureBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTextureArray() { return __p.__vector_as_array<byte>(10); }
  public string TypeDescrtption { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeDescrtptionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTypeDescrtptionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTypeDescrtptionArray() { return __p.__vector_as_array<byte>(12); }
  public string Descrtption { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescrtptionBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetDescrtptionBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDescrtptionArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<WWParser.Defs.GeographyHandBook> CreateGeographyHandBook(FlatBufferBuilder builder,
      int id = 0,
      int type = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset textureOffset = default(StringOffset),
      StringOffset type_descrtptionOffset = default(StringOffset),
      StringOffset descrtptionOffset = default(StringOffset)) {
    builder.StartTable(6);
    GeographyHandBook.AddDescrtption(builder, descrtptionOffset);
    GeographyHandBook.AddTypeDescrtption(builder, type_descrtptionOffset);
    GeographyHandBook.AddTexture(builder, textureOffset);
    GeographyHandBook.AddName(builder, nameOffset);
    GeographyHandBook.AddType(builder, type);
    GeographyHandBook.AddId(builder, id);
    return GeographyHandBook.EndGeographyHandBook(builder);
  }

  public static void StartGeographyHandBook(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(1, type, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddTexture(FlatBufferBuilder builder, StringOffset textureOffset) { builder.AddOffset(3, textureOffset.Value, 0); }
  public static void AddTypeDescrtption(FlatBufferBuilder builder, StringOffset typeDescrtptionOffset) { builder.AddOffset(4, typeDescrtptionOffset.Value, 0); }
  public static void AddDescrtption(FlatBufferBuilder builder, StringOffset descrtptionOffset) { builder.AddOffset(5, descrtptionOffset.Value, 0); }
  public static Offset<WWParser.Defs.GeographyHandBook> EndGeographyHandBook(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.GeographyHandBook>(o);
  }
  public GeographyHandBookT UnPack() {
    var _o = new GeographyHandBookT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GeographyHandBookT _o) {
    _o.Id = this.Id;
    _o.Type = this.Type;
    _o.Name = this.Name;
    _o.Texture = this.Texture;
    _o.TypeDescrtption = this.TypeDescrtption;
    _o.Descrtption = this.Descrtption;
  }
  public static Offset<WWParser.Defs.GeographyHandBook> Pack(FlatBufferBuilder builder, GeographyHandBookT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.GeographyHandBook>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _texture = _o.Texture == null ? default(StringOffset) : builder.CreateString(_o.Texture);
    var _type_descrtption = _o.TypeDescrtption == null ? default(StringOffset) : builder.CreateString(_o.TypeDescrtption);
    var _descrtption = _o.Descrtption == null ? default(StringOffset) : builder.CreateString(_o.Descrtption);
    return CreateGeographyHandBook(
      builder,
      _o.Id,
      _o.Type,
      _name,
      _texture,
      _type_descrtption,
      _descrtption);
  }
}

public class GeographyHandBookT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("texture")]
  public string Texture { get; set; }
  [Newtonsoft.Json.JsonProperty("type_descrtption")]
  public string TypeDescrtption { get; set; }
  [Newtonsoft.Json.JsonProperty("descrtption")]
  public string Descrtption { get; set; }

  public GeographyHandBookT() {
    this.Id = 0;
    this.Type = 0;
    this.Name = null;
    this.Texture = null;
    this.TypeDescrtption = null;
    this.Descrtption = null;
  }
}


static public class GeographyHandBookVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyString(tablePos, 10 /*Texture*/, false)
      && verifier.VerifyString(tablePos, 12 /*TypeDescrtption*/, false)
      && verifier.VerifyString(tablePos, 14 /*Descrtption*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
