// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TeamParKOurReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TeamParKOurReward GetRootAsTeamParKOurReward(ByteBuffer _bb) { return GetRootAsTeamParKOurReward(_bb, new TeamParKOurReward()); }
  public static TeamParKOurReward GetRootAsTeamParKOurReward(ByteBuffer _bb, TeamParKOurReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TeamParKOurReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Reward { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardThreshold { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TaskTitle { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskTitleBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTaskTitleBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTaskTitleArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<WWParser.Defs.TeamParKOurReward> CreateTeamParKOurReward(FlatBufferBuilder builder,
      int id = 0,
      int activity_id = 0,
      int reward = 0,
      int reward_threshold = 0,
      StringOffset task_titleOffset = default(StringOffset)) {
    builder.StartTable(5);
    TeamParKOurReward.AddTaskTitle(builder, task_titleOffset);
    TeamParKOurReward.AddRewardThreshold(builder, reward_threshold);
    TeamParKOurReward.AddReward(builder, reward);
    TeamParKOurReward.AddActivityId(builder, activity_id);
    TeamParKOurReward.AddId(builder, id);
    return TeamParKOurReward.EndTeamParKOurReward(builder);
  }

  public static void StartTeamParKOurReward(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddReward(FlatBufferBuilder builder, int reward) { builder.AddInt(2, reward, 0); }
  public static void AddRewardThreshold(FlatBufferBuilder builder, int rewardThreshold) { builder.AddInt(3, rewardThreshold, 0); }
  public static void AddTaskTitle(FlatBufferBuilder builder, StringOffset taskTitleOffset) { builder.AddOffset(4, taskTitleOffset.Value, 0); }
  public static Offset<WWParser.Defs.TeamParKOurReward> EndTeamParKOurReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.TeamParKOurReward>(o);
  }
  public TeamParKOurRewardT UnPack() {
    var _o = new TeamParKOurRewardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TeamParKOurRewardT _o) {
    _o.Id = this.Id;
    _o.ActivityId = this.ActivityId;
    _o.Reward = this.Reward;
    _o.RewardThreshold = this.RewardThreshold;
    _o.TaskTitle = this.TaskTitle;
  }
  public static Offset<WWParser.Defs.TeamParKOurReward> Pack(FlatBufferBuilder builder, TeamParKOurRewardT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.TeamParKOurReward>);
    var _task_title = _o.TaskTitle == null ? default(StringOffset) : builder.CreateString(_o.TaskTitle);
    return CreateTeamParKOurReward(
      builder,
      _o.Id,
      _o.ActivityId,
      _o.Reward,
      _o.RewardThreshold,
      _task_title);
  }
}

public class TeamParKOurRewardT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("reward")]
  public int Reward { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_threshold")]
  public int RewardThreshold { get; set; }
  [Newtonsoft.Json.JsonProperty("task_title")]
  public string TaskTitle { get; set; }

  public TeamParKOurRewardT() {
    this.Id = 0;
    this.ActivityId = 0;
    this.Reward = 0;
    this.RewardThreshold = 0;
    this.TaskTitle = null;
  }
}


static public class TeamParKOurRewardVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Reward*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*RewardThreshold*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*TaskTitle*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
