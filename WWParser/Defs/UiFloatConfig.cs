// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct UiFloatConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static UiFloatConfig GetRootAsUiFloatConfig(ByteBuffer _bb) { return GetRootAsUiFloatConfig(_bb, new UiFloatConfig()); }
  public static UiFloatConfig GetRootAsUiFloatConfig(ByteBuffer _bb, UiFloatConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UiFloatConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ViewName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetViewNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetViewNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetViewNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Area { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAreaBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetAreaBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetAreaArray() { return __p.__vector_as_array<byte>(6); }
  public int Priority { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool OnlyShowInMain { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int RootItemIndex { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public bool IsWaitNormal { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool HideInPureMode { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.UiFloatConfig> CreateUiFloatConfig(FlatBufferBuilder builder,
      StringOffset view_nameOffset = default(StringOffset),
      StringOffset areaOffset = default(StringOffset),
      int priority = 0,
      bool only_show_in_main = false,
      int root_item_index = 1,
      bool is_wait_normal = false,
      bool hide_in_pure_mode = false) {
    builder.StartTable(7);
    UiFloatConfig.AddRootItemIndex(builder, root_item_index);
    UiFloatConfig.AddPriority(builder, priority);
    UiFloatConfig.AddArea(builder, areaOffset);
    UiFloatConfig.AddViewName(builder, view_nameOffset);
    UiFloatConfig.AddHideInPureMode(builder, hide_in_pure_mode);
    UiFloatConfig.AddIsWaitNormal(builder, is_wait_normal);
    UiFloatConfig.AddOnlyShowInMain(builder, only_show_in_main);
    return UiFloatConfig.EndUiFloatConfig(builder);
  }

  public static void StartUiFloatConfig(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddViewName(FlatBufferBuilder builder, StringOffset viewNameOffset) { builder.AddOffset(0, viewNameOffset.Value, 0); }
  public static void AddArea(FlatBufferBuilder builder, StringOffset areaOffset) { builder.AddOffset(1, areaOffset.Value, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(2, priority, 0); }
  public static void AddOnlyShowInMain(FlatBufferBuilder builder, bool onlyShowInMain) { builder.AddBool(3, onlyShowInMain, false); }
  public static void AddRootItemIndex(FlatBufferBuilder builder, int rootItemIndex) { builder.AddInt(4, rootItemIndex, 1); }
  public static void AddIsWaitNormal(FlatBufferBuilder builder, bool isWaitNormal) { builder.AddBool(5, isWaitNormal, false); }
  public static void AddHideInPureMode(FlatBufferBuilder builder, bool hideInPureMode) { builder.AddBool(6, hideInPureMode, false); }
  public static Offset<WWParser.Defs.UiFloatConfig> EndUiFloatConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.UiFloatConfig>(o);
  }
  public UiFloatConfigT UnPack() {
    var _o = new UiFloatConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(UiFloatConfigT _o) {
    _o.ViewName = this.ViewName;
    _o.Area = this.Area;
    _o.Priority = this.Priority;
    _o.OnlyShowInMain = this.OnlyShowInMain;
    _o.RootItemIndex = this.RootItemIndex;
    _o.IsWaitNormal = this.IsWaitNormal;
    _o.HideInPureMode = this.HideInPureMode;
  }
  public static Offset<WWParser.Defs.UiFloatConfig> Pack(FlatBufferBuilder builder, UiFloatConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.UiFloatConfig>);
    var _view_name = _o.ViewName == null ? default(StringOffset) : builder.CreateString(_o.ViewName);
    var _area = _o.Area == null ? default(StringOffset) : builder.CreateString(_o.Area);
    return CreateUiFloatConfig(
      builder,
      _view_name,
      _area,
      _o.Priority,
      _o.OnlyShowInMain,
      _o.RootItemIndex,
      _o.IsWaitNormal,
      _o.HideInPureMode);
  }
}

public class UiFloatConfigT
{
  [Newtonsoft.Json.JsonProperty("view_name")]
  public string ViewName { get; set; }
  [Newtonsoft.Json.JsonProperty("area")]
  public string Area { get; set; }
  [Newtonsoft.Json.JsonProperty("priority")]
  public int Priority { get; set; }
  [Newtonsoft.Json.JsonProperty("only_show_in_main")]
  public bool OnlyShowInMain { get; set; }
  [Newtonsoft.Json.JsonProperty("root_item_index")]
  public int RootItemIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("is_wait_normal")]
  public bool IsWaitNormal { get; set; }
  [Newtonsoft.Json.JsonProperty("hide_in_pure_mode")]
  public bool HideInPureMode { get; set; }

  public UiFloatConfigT() {
    this.ViewName = null;
    this.Area = null;
    this.Priority = 0;
    this.OnlyShowInMain = false;
    this.RootItemIndex = 1;
    this.IsWaitNormal = false;
    this.HideInPureMode = false;
  }
}


static public class UiFloatConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*ViewName*/, false)
      && verifier.VerifyString(tablePos, 6 /*Area*/, false)
      && verifier.VerifyField(tablePos, 8 /*Priority*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*OnlyShowInMain*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*RootItemIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*IsWaitNormal*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*HideInPureMode*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
