// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DangoMonopolyDice : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DangoMonopolyDice GetRootAsDangoMonopolyDice(ByteBuffer _bb) { return GetRootAsDangoMonopolyDice(_bb, new DangoMonopolyDice()); }
  public static DangoMonopolyDice GetRootAsDangoMonopolyDice(ByteBuffer _bb, DangoMonopolyDice obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DangoMonopolyDice __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int DiceNum { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.DangoMonopolyDice> CreateDangoMonopolyDice(FlatBufferBuilder builder,
      int dice_num = 0) {
    builder.StartTable(1);
    DangoMonopolyDice.AddDiceNum(builder, dice_num);
    return DangoMonopolyDice.EndDangoMonopolyDice(builder);
  }

  public static void StartDangoMonopolyDice(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDiceNum(FlatBufferBuilder builder, int diceNum) { builder.AddInt(0, diceNum, 0); }
  public static Offset<WWParser.Defs.DangoMonopolyDice> EndDangoMonopolyDice(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DangoMonopolyDice>(o);
  }
  public DangoMonopolyDiceT UnPack() {
    var _o = new DangoMonopolyDiceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DangoMonopolyDiceT _o) {
    _o.DiceNum = this.DiceNum;
  }
  public static Offset<WWParser.Defs.DangoMonopolyDice> Pack(FlatBufferBuilder builder, DangoMonopolyDiceT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DangoMonopolyDice>);
    return CreateDangoMonopolyDice(
      builder,
      _o.DiceNum);
  }
}

public class DangoMonopolyDiceT
{
  [Newtonsoft.Json.JsonProperty("dice_num")]
  public int DiceNum { get; set; }

  public DangoMonopolyDiceT() {
    this.DiceNum = 0;
  }
}


static public class DangoMonopolyDiceVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*DiceNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
