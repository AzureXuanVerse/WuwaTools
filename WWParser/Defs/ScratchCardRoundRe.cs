// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ScratchCardRoundRe : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ScratchCardRoundRe GetRootAsScratchCardRoundRe(ByteBuffer _bb) { return GetRootAsScratchCardRoundRe(_bb, new ScratchCardRoundRe()); }
  public static ScratchCardRoundRe GetRootAsScratchCardRoundRe(ByteBuffer _bb, ScratchCardRoundRe obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScratchCardRoundRe __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int RoundId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PreRoundId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Size { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardSortList(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RewardSortListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRewardSortListBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetRewardSortListBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetRewardSortListArray() { return __p.__vector_as_array<int>(12); }
  public string YellowRoundIcon { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetYellowRoundIconBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetYellowRoundIconBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetYellowRoundIconArray() { return __p.__vector_as_array<byte>(14); }
  public string BlackRoundIcon { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBlackRoundIconBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetBlackRoundIconBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetBlackRoundIconArray() { return __p.__vector_as_array<byte>(16); }
  public string TogRoundIcon { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTogRoundIconBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTogRoundIconBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTogRoundIconArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<WWParser.Defs.ScratchCardRoundRe> CreateScratchCardRoundRe(FlatBufferBuilder builder,
      int round_id = 0,
      int activity_id = 0,
      int pre_round_id = 0,
      int size = 0,
      VectorOffset reward_sort_listOffset = default(VectorOffset),
      StringOffset yellow_round_iconOffset = default(StringOffset),
      StringOffset black_round_iconOffset = default(StringOffset),
      StringOffset tog_round_iconOffset = default(StringOffset)) {
    builder.StartTable(8);
    ScratchCardRoundRe.AddTogRoundIcon(builder, tog_round_iconOffset);
    ScratchCardRoundRe.AddBlackRoundIcon(builder, black_round_iconOffset);
    ScratchCardRoundRe.AddYellowRoundIcon(builder, yellow_round_iconOffset);
    ScratchCardRoundRe.AddRewardSortList(builder, reward_sort_listOffset);
    ScratchCardRoundRe.AddSize(builder, size);
    ScratchCardRoundRe.AddPreRoundId(builder, pre_round_id);
    ScratchCardRoundRe.AddActivityId(builder, activity_id);
    ScratchCardRoundRe.AddRoundId(builder, round_id);
    return ScratchCardRoundRe.EndScratchCardRoundRe(builder);
  }

  public static void StartScratchCardRoundRe(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddRoundId(FlatBufferBuilder builder, int roundId) { builder.AddInt(0, roundId, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddPreRoundId(FlatBufferBuilder builder, int preRoundId) { builder.AddInt(2, preRoundId, 0); }
  public static void AddSize(FlatBufferBuilder builder, int size) { builder.AddInt(3, size, 0); }
  public static void AddRewardSortList(FlatBufferBuilder builder, VectorOffset rewardSortListOffset) { builder.AddOffset(4, rewardSortListOffset.Value, 0); }
  public static VectorOffset CreateRewardSortListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardSortListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardSortListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardSortListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardSortListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddYellowRoundIcon(FlatBufferBuilder builder, StringOffset yellowRoundIconOffset) { builder.AddOffset(5, yellowRoundIconOffset.Value, 0); }
  public static void AddBlackRoundIcon(FlatBufferBuilder builder, StringOffset blackRoundIconOffset) { builder.AddOffset(6, blackRoundIconOffset.Value, 0); }
  public static void AddTogRoundIcon(FlatBufferBuilder builder, StringOffset togRoundIconOffset) { builder.AddOffset(7, togRoundIconOffset.Value, 0); }
  public static Offset<WWParser.Defs.ScratchCardRoundRe> EndScratchCardRoundRe(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ScratchCardRoundRe>(o);
  }
  public ScratchCardRoundReT UnPack() {
    var _o = new ScratchCardRoundReT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ScratchCardRoundReT _o) {
    _o.RoundId = this.RoundId;
    _o.ActivityId = this.ActivityId;
    _o.PreRoundId = this.PreRoundId;
    _o.Size = this.Size;
    _o.RewardSortList = new List<int>();
    for (var _j = 0; _j < this.RewardSortListLength; ++_j) {_o.RewardSortList.Add(this.RewardSortList(_j));}
    _o.YellowRoundIcon = this.YellowRoundIcon;
    _o.BlackRoundIcon = this.BlackRoundIcon;
    _o.TogRoundIcon = this.TogRoundIcon;
  }
  public static Offset<WWParser.Defs.ScratchCardRoundRe> Pack(FlatBufferBuilder builder, ScratchCardRoundReT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ScratchCardRoundRe>);
    var _reward_sort_list = default(VectorOffset);
    if (_o.RewardSortList != null) {
      var __reward_sort_list = _o.RewardSortList.ToArray();
      _reward_sort_list = CreateRewardSortListVector(builder, __reward_sort_list);
    }
    var _yellow_round_icon = _o.YellowRoundIcon == null ? default(StringOffset) : builder.CreateString(_o.YellowRoundIcon);
    var _black_round_icon = _o.BlackRoundIcon == null ? default(StringOffset) : builder.CreateString(_o.BlackRoundIcon);
    var _tog_round_icon = _o.TogRoundIcon == null ? default(StringOffset) : builder.CreateString(_o.TogRoundIcon);
    return CreateScratchCardRoundRe(
      builder,
      _o.RoundId,
      _o.ActivityId,
      _o.PreRoundId,
      _o.Size,
      _reward_sort_list,
      _yellow_round_icon,
      _black_round_icon,
      _tog_round_icon);
  }
}

public class ScratchCardRoundReT
{
  [Newtonsoft.Json.JsonProperty("round_id")]
  public int RoundId { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("pre_round_id")]
  public int PreRoundId { get; set; }
  [Newtonsoft.Json.JsonProperty("size")]
  public int Size { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_sort_list")]
  public List<int> RewardSortList { get; set; }
  [Newtonsoft.Json.JsonProperty("yellow_round_icon")]
  public string YellowRoundIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("black_round_icon")]
  public string BlackRoundIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("tog_round_icon")]
  public string TogRoundIcon { get; set; }

  public ScratchCardRoundReT() {
    this.RoundId = 0;
    this.ActivityId = 0;
    this.PreRoundId = 0;
    this.Size = 0;
    this.RewardSortList = null;
    this.YellowRoundIcon = null;
    this.BlackRoundIcon = null;
    this.TogRoundIcon = null;
  }
}


static public class ScratchCardRoundReVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*RoundId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*PreRoundId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Size*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*RewardSortList*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 14 /*YellowRoundIcon*/, false)
      && verifier.VerifyString(tablePos, 16 /*BlackRoundIcon*/, false)
      && verifier.VerifyString(tablePos, 18 /*TogRoundIcon*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
