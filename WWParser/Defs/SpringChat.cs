// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SpringChat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SpringChat GetRootAsSpringChat(ByteBuffer _bb) { return GetRootAsSpringChat(_bb, new SpringChat()); }
  public static SpringChat GetRootAsSpringChat(ByteBuffer _bb, SpringChat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SpringChat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ContentList(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ContentListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int PosList(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PosListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPosListBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetPosListBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetPosListArray() { return __p.__vector_as_array<int>(8); }
  public string AnimNameList(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AnimNameListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string LeftSpineAtlas { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLeftSpineAtlasBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetLeftSpineAtlasBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetLeftSpineAtlasArray() { return __p.__vector_as_array<byte>(12); }
  public string LeftSpineSkeletonData { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLeftSpineSkeletonDataBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetLeftSpineSkeletonDataBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetLeftSpineSkeletonDataArray() { return __p.__vector_as_array<byte>(14); }
  public string RightSpineAtlas { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRightSpineAtlasBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetRightSpineAtlasBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetRightSpineAtlasArray() { return __p.__vector_as_array<byte>(16); }
  public string RightSpineSkeletonData { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRightSpineSkeletonDataBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetRightSpineSkeletonDataBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetRightSpineSkeletonDataArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<WWParser.Defs.SpringChat> CreateSpringChat(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset content_listOffset = default(VectorOffset),
      VectorOffset pos_listOffset = default(VectorOffset),
      VectorOffset anim_name_listOffset = default(VectorOffset),
      StringOffset left_spine_atlasOffset = default(StringOffset),
      StringOffset left_spine_skeleton_dataOffset = default(StringOffset),
      StringOffset right_spine_atlasOffset = default(StringOffset),
      StringOffset right_spine_skeleton_dataOffset = default(StringOffset)) {
    builder.StartTable(8);
    SpringChat.AddRightSpineSkeletonData(builder, right_spine_skeleton_dataOffset);
    SpringChat.AddRightSpineAtlas(builder, right_spine_atlasOffset);
    SpringChat.AddLeftSpineSkeletonData(builder, left_spine_skeleton_dataOffset);
    SpringChat.AddLeftSpineAtlas(builder, left_spine_atlasOffset);
    SpringChat.AddAnimNameList(builder, anim_name_listOffset);
    SpringChat.AddPosList(builder, pos_listOffset);
    SpringChat.AddContentList(builder, content_listOffset);
    SpringChat.AddId(builder, id);
    return SpringChat.EndSpringChat(builder);
  }

  public static void StartSpringChat(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddContentList(FlatBufferBuilder builder, VectorOffset contentListOffset) { builder.AddOffset(1, contentListOffset.Value, 0); }
  public static VectorOffset CreateContentListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateContentListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateContentListVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateContentListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartContentListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPosList(FlatBufferBuilder builder, VectorOffset posListOffset) { builder.AddOffset(2, posListOffset.Value, 0); }
  public static VectorOffset CreatePosListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePosListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePosListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePosListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPosListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAnimNameList(FlatBufferBuilder builder, VectorOffset animNameListOffset) { builder.AddOffset(3, animNameListOffset.Value, 0); }
  public static VectorOffset CreateAnimNameListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAnimNameListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAnimNameListVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAnimNameListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAnimNameListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLeftSpineAtlas(FlatBufferBuilder builder, StringOffset leftSpineAtlasOffset) { builder.AddOffset(4, leftSpineAtlasOffset.Value, 0); }
  public static void AddLeftSpineSkeletonData(FlatBufferBuilder builder, StringOffset leftSpineSkeletonDataOffset) { builder.AddOffset(5, leftSpineSkeletonDataOffset.Value, 0); }
  public static void AddRightSpineAtlas(FlatBufferBuilder builder, StringOffset rightSpineAtlasOffset) { builder.AddOffset(6, rightSpineAtlasOffset.Value, 0); }
  public static void AddRightSpineSkeletonData(FlatBufferBuilder builder, StringOffset rightSpineSkeletonDataOffset) { builder.AddOffset(7, rightSpineSkeletonDataOffset.Value, 0); }
  public static Offset<WWParser.Defs.SpringChat> EndSpringChat(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SpringChat>(o);
  }
  public SpringChatT UnPack() {
    var _o = new SpringChatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SpringChatT _o) {
    _o.Id = this.Id;
    _o.ContentList = new List<string>();
    for (var _j = 0; _j < this.ContentListLength; ++_j) {_o.ContentList.Add(this.ContentList(_j));}
    _o.PosList = new List<int>();
    for (var _j = 0; _j < this.PosListLength; ++_j) {_o.PosList.Add(this.PosList(_j));}
    _o.AnimNameList = new List<string>();
    for (var _j = 0; _j < this.AnimNameListLength; ++_j) {_o.AnimNameList.Add(this.AnimNameList(_j));}
    _o.LeftSpineAtlas = this.LeftSpineAtlas;
    _o.LeftSpineSkeletonData = this.LeftSpineSkeletonData;
    _o.RightSpineAtlas = this.RightSpineAtlas;
    _o.RightSpineSkeletonData = this.RightSpineSkeletonData;
  }
  public static Offset<WWParser.Defs.SpringChat> Pack(FlatBufferBuilder builder, SpringChatT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SpringChat>);
    var _content_list = default(VectorOffset);
    if (_o.ContentList != null) {
      var __content_list = new StringOffset[_o.ContentList.Count];
      for (var _j = 0; _j < __content_list.Length; ++_j) { __content_list[_j] = builder.CreateString(_o.ContentList[_j]); }
      _content_list = CreateContentListVector(builder, __content_list);
    }
    var _pos_list = default(VectorOffset);
    if (_o.PosList != null) {
      var __pos_list = _o.PosList.ToArray();
      _pos_list = CreatePosListVector(builder, __pos_list);
    }
    var _anim_name_list = default(VectorOffset);
    if (_o.AnimNameList != null) {
      var __anim_name_list = new StringOffset[_o.AnimNameList.Count];
      for (var _j = 0; _j < __anim_name_list.Length; ++_j) { __anim_name_list[_j] = builder.CreateString(_o.AnimNameList[_j]); }
      _anim_name_list = CreateAnimNameListVector(builder, __anim_name_list);
    }
    var _left_spine_atlas = _o.LeftSpineAtlas == null ? default(StringOffset) : builder.CreateString(_o.LeftSpineAtlas);
    var _left_spine_skeleton_data = _o.LeftSpineSkeletonData == null ? default(StringOffset) : builder.CreateString(_o.LeftSpineSkeletonData);
    var _right_spine_atlas = _o.RightSpineAtlas == null ? default(StringOffset) : builder.CreateString(_o.RightSpineAtlas);
    var _right_spine_skeleton_data = _o.RightSpineSkeletonData == null ? default(StringOffset) : builder.CreateString(_o.RightSpineSkeletonData);
    return CreateSpringChat(
      builder,
      _o.Id,
      _content_list,
      _pos_list,
      _anim_name_list,
      _left_spine_atlas,
      _left_spine_skeleton_data,
      _right_spine_atlas,
      _right_spine_skeleton_data);
  }
}

public class SpringChatT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("content_list")]
  public List<string> ContentList { get; set; }
  [Newtonsoft.Json.JsonProperty("pos_list")]
  public List<int> PosList { get; set; }
  [Newtonsoft.Json.JsonProperty("anim_name_list")]
  public List<string> AnimNameList { get; set; }
  [Newtonsoft.Json.JsonProperty("left_spine_atlas")]
  public string LeftSpineAtlas { get; set; }
  [Newtonsoft.Json.JsonProperty("left_spine_skeleton_data")]
  public string LeftSpineSkeletonData { get; set; }
  [Newtonsoft.Json.JsonProperty("right_spine_atlas")]
  public string RightSpineAtlas { get; set; }
  [Newtonsoft.Json.JsonProperty("right_spine_skeleton_data")]
  public string RightSpineSkeletonData { get; set; }

  public SpringChatT() {
    this.Id = 0;
    this.ContentList = null;
    this.PosList = null;
    this.AnimNameList = null;
    this.LeftSpineAtlas = null;
    this.LeftSpineSkeletonData = null;
    this.RightSpineAtlas = null;
    this.RightSpineSkeletonData = null;
  }
}


static public class SpringChatVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 6 /*ContentList*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*PosList*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*AnimNameList*/, false)
      && verifier.VerifyString(tablePos, 12 /*LeftSpineAtlas*/, false)
      && verifier.VerifyString(tablePos, 14 /*LeftSpineSkeletonData*/, false)
      && verifier.VerifyString(tablePos, 16 /*RightSpineAtlas*/, false)
      && verifier.VerifyString(tablePos, 18 /*RightSpineSkeletonData*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
