// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SynthesisFormula : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SynthesisFormula GetRootAsSynthesisFormula(ByteBuffer _bb) { return GetRootAsSynthesisFormula(_bb, new SynthesisFormula()); }
  public static SynthesisFormula GetRootAsSynthesisFormula(ByteBuffer _bb, SynthesisFormula obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SynthesisFormula __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FormulaItemId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FormulaType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)3; } }
  public int ItemGroup { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(14); }
  public WWParser.Defs.OneItemConfig? ConsumeItems(int j) { int o = __p.__offset(16); return o != 0 ? (WWParser.Defs.OneItemConfig?)(new WWParser.Defs.OneItemConfig()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConsumeItemsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int SortId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockCondition { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Proficiency { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxProficiencyCount { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TypeId { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Unlock { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int LimitCount { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool PermanentLimit { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int RoleList(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RoleListLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRoleListBytes() { return __p.__vector_as_span<int>(34, 4); }
#else
  public ArraySegment<byte>? GetRoleListBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public int[] GetRoleListArray() { return __p.__vector_as_array<int>(34); }
  public string ComposeContent { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetComposeContentBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetComposeContentBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetComposeContentArray() { return __p.__vector_as_array<byte>(36); }
  public string ComposeBackground { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetComposeBackgroundBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetComposeBackgroundBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetComposeBackgroundArray() { return __p.__vector_as_array<byte>(38); }

  public static Offset<WWParser.Defs.SynthesisFormula> CreateSynthesisFormula(FlatBufferBuilder builder,
      int id = 0,
      int formula_item_id = 0,
      int item_id = 0,
      int formula_type = 3,
      int item_group = 0,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset consume_itemsOffset = default(VectorOffset),
      int sort_id = 0,
      int unlock_condition = 0,
      int proficiency = 0,
      int max_proficiency_count = 0,
      int type_id = 0,
      bool unlock = false,
      int limit_count = 0,
      bool permanent_limit = false,
      VectorOffset role_listOffset = default(VectorOffset),
      StringOffset compose_contentOffset = default(StringOffset),
      StringOffset compose_backgroundOffset = default(StringOffset)) {
    builder.StartTable(18);
    SynthesisFormula.AddComposeBackground(builder, compose_backgroundOffset);
    SynthesisFormula.AddComposeContent(builder, compose_contentOffset);
    SynthesisFormula.AddRoleList(builder, role_listOffset);
    SynthesisFormula.AddLimitCount(builder, limit_count);
    SynthesisFormula.AddTypeId(builder, type_id);
    SynthesisFormula.AddMaxProficiencyCount(builder, max_proficiency_count);
    SynthesisFormula.AddProficiency(builder, proficiency);
    SynthesisFormula.AddUnlockCondition(builder, unlock_condition);
    SynthesisFormula.AddSortId(builder, sort_id);
    SynthesisFormula.AddConsumeItems(builder, consume_itemsOffset);
    SynthesisFormula.AddName(builder, nameOffset);
    SynthesisFormula.AddItemGroup(builder, item_group);
    SynthesisFormula.AddFormulaType(builder, formula_type);
    SynthesisFormula.AddItemId(builder, item_id);
    SynthesisFormula.AddFormulaItemId(builder, formula_item_id);
    SynthesisFormula.AddId(builder, id);
    SynthesisFormula.AddPermanentLimit(builder, permanent_limit);
    SynthesisFormula.AddUnlock(builder, unlock);
    return SynthesisFormula.EndSynthesisFormula(builder);
  }

  public static void StartSynthesisFormula(FlatBufferBuilder builder) { builder.StartTable(18); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddFormulaItemId(FlatBufferBuilder builder, int formulaItemId) { builder.AddInt(1, formulaItemId, 0); }
  public static void AddItemId(FlatBufferBuilder builder, int itemId) { builder.AddInt(2, itemId, 0); }
  public static void AddFormulaType(FlatBufferBuilder builder, int formulaType) { builder.AddInt(3, formulaType, 3); }
  public static void AddItemGroup(FlatBufferBuilder builder, int itemGroup) { builder.AddInt(4, itemGroup, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(5, nameOffset.Value, 0); }
  public static void AddConsumeItems(FlatBufferBuilder builder, VectorOffset consumeItemsOffset) { builder.AddOffset(6, consumeItemsOffset.Value, 0); }
  public static VectorOffset CreateConsumeItemsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.OneItemConfig>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConsumeItemsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.OneItemConfig>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConsumeItemsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.OneItemConfig>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConsumeItemsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.OneItemConfig>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConsumeItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSortId(FlatBufferBuilder builder, int sortId) { builder.AddInt(7, sortId, 0); }
  public static void AddUnlockCondition(FlatBufferBuilder builder, int unlockCondition) { builder.AddInt(8, unlockCondition, 0); }
  public static void AddProficiency(FlatBufferBuilder builder, int proficiency) { builder.AddInt(9, proficiency, 0); }
  public static void AddMaxProficiencyCount(FlatBufferBuilder builder, int maxProficiencyCount) { builder.AddInt(10, maxProficiencyCount, 0); }
  public static void AddTypeId(FlatBufferBuilder builder, int typeId) { builder.AddInt(11, typeId, 0); }
  public static void AddUnlock(FlatBufferBuilder builder, bool unlock) { builder.AddBool(12, unlock, false); }
  public static void AddLimitCount(FlatBufferBuilder builder, int limitCount) { builder.AddInt(13, limitCount, 0); }
  public static void AddPermanentLimit(FlatBufferBuilder builder, bool permanentLimit) { builder.AddBool(14, permanentLimit, false); }
  public static void AddRoleList(FlatBufferBuilder builder, VectorOffset roleListOffset) { builder.AddOffset(15, roleListOffset.Value, 0); }
  public static VectorOffset CreateRoleListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRoleListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRoleListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRoleListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRoleListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddComposeContent(FlatBufferBuilder builder, StringOffset composeContentOffset) { builder.AddOffset(16, composeContentOffset.Value, 0); }
  public static void AddComposeBackground(FlatBufferBuilder builder, StringOffset composeBackgroundOffset) { builder.AddOffset(17, composeBackgroundOffset.Value, 0); }
  public static Offset<WWParser.Defs.SynthesisFormula> EndSynthesisFormula(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SynthesisFormula>(o);
  }
  public SynthesisFormulaT UnPack() {
    var _o = new SynthesisFormulaT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SynthesisFormulaT _o) {
    _o.Id = this.Id;
    _o.FormulaItemId = this.FormulaItemId;
    _o.ItemId = this.ItemId;
    _o.FormulaType = this.FormulaType;
    _o.ItemGroup = this.ItemGroup;
    _o.Name = this.Name;
    _o.ConsumeItems = new List<WWParser.Defs.OneItemConfigT>();
    for (var _j = 0; _j < this.ConsumeItemsLength; ++_j) {_o.ConsumeItems.Add(this.ConsumeItems(_j).HasValue ? this.ConsumeItems(_j).Value.UnPack() : null);}
    _o.SortId = this.SortId;
    _o.UnlockCondition = this.UnlockCondition;
    _o.Proficiency = this.Proficiency;
    _o.MaxProficiencyCount = this.MaxProficiencyCount;
    _o.TypeId = this.TypeId;
    _o.Unlock = this.Unlock;
    _o.LimitCount = this.LimitCount;
    _o.PermanentLimit = this.PermanentLimit;
    _o.RoleList = new List<int>();
    for (var _j = 0; _j < this.RoleListLength; ++_j) {_o.RoleList.Add(this.RoleList(_j));}
    _o.ComposeContent = this.ComposeContent;
    _o.ComposeBackground = this.ComposeBackground;
  }
  public static Offset<WWParser.Defs.SynthesisFormula> Pack(FlatBufferBuilder builder, SynthesisFormulaT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SynthesisFormula>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _consume_items = default(VectorOffset);
    if (_o.ConsumeItems != null) {
      var __consume_items = new Offset<WWParser.Defs.OneItemConfig>[_o.ConsumeItems.Count];
      for (var _j = 0; _j < __consume_items.Length; ++_j) { __consume_items[_j] = WWParser.Defs.OneItemConfig.Pack(builder, _o.ConsumeItems[_j]); }
      _consume_items = CreateConsumeItemsVector(builder, __consume_items);
    }
    var _role_list = default(VectorOffset);
    if (_o.RoleList != null) {
      var __role_list = _o.RoleList.ToArray();
      _role_list = CreateRoleListVector(builder, __role_list);
    }
    var _compose_content = _o.ComposeContent == null ? default(StringOffset) : builder.CreateString(_o.ComposeContent);
    var _compose_background = _o.ComposeBackground == null ? default(StringOffset) : builder.CreateString(_o.ComposeBackground);
    return CreateSynthesisFormula(
      builder,
      _o.Id,
      _o.FormulaItemId,
      _o.ItemId,
      _o.FormulaType,
      _o.ItemGroup,
      _name,
      _consume_items,
      _o.SortId,
      _o.UnlockCondition,
      _o.Proficiency,
      _o.MaxProficiencyCount,
      _o.TypeId,
      _o.Unlock,
      _o.LimitCount,
      _o.PermanentLimit,
      _role_list,
      _compose_content,
      _compose_background);
  }
}

public class SynthesisFormulaT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("formula_item_id")]
  public int FormulaItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("item_id")]
  public int ItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("formula_type")]
  public int FormulaType { get; set; }
  [Newtonsoft.Json.JsonProperty("item_group")]
  public int ItemGroup { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("consume_items")]
  public List<WWParser.Defs.OneItemConfigT> ConsumeItems { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_id")]
  public int SortId { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_condition")]
  public int UnlockCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("proficiency")]
  public int Proficiency { get; set; }
  [Newtonsoft.Json.JsonProperty("max_proficiency_count")]
  public int MaxProficiencyCount { get; set; }
  [Newtonsoft.Json.JsonProperty("type_id")]
  public int TypeId { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock")]
  public bool Unlock { get; set; }
  [Newtonsoft.Json.JsonProperty("limit_count")]
  public int LimitCount { get; set; }
  [Newtonsoft.Json.JsonProperty("permanent_limit")]
  public bool PermanentLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("role_list")]
  public List<int> RoleList { get; set; }
  [Newtonsoft.Json.JsonProperty("compose_content")]
  public string ComposeContent { get; set; }
  [Newtonsoft.Json.JsonProperty("compose_background")]
  public string ComposeBackground { get; set; }

  public SynthesisFormulaT() {
    this.Id = 0;
    this.FormulaItemId = 0;
    this.ItemId = 0;
    this.FormulaType = 3;
    this.ItemGroup = 0;
    this.Name = null;
    this.ConsumeItems = null;
    this.SortId = 0;
    this.UnlockCondition = 0;
    this.Proficiency = 0;
    this.MaxProficiencyCount = 0;
    this.TypeId = 0;
    this.Unlock = false;
    this.LimitCount = 0;
    this.PermanentLimit = false;
    this.RoleList = null;
    this.ComposeContent = null;
    this.ComposeBackground = null;
  }
}


static public class SynthesisFormulaVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*FormulaItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*FormulaType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*ItemGroup*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*Name*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 16 /*ConsumeItems*/, WWParser.Defs.OneItemConfigVerify.Verify, false)
      && verifier.VerifyField(tablePos, 18 /*SortId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*UnlockCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*Proficiency*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*MaxProficiencyCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*TypeId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*Unlock*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 30 /*LimitCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*PermanentLimit*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 34 /*RoleList*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 36 /*ComposeContent*/, false)
      && verifier.VerifyString(tablePos, 38 /*ComposeBackground*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
