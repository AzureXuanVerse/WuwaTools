// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PhantomItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PhantomItem GetRootAsPhantomItem(ByteBuffer _bb) { return GetRootAsPhantomItem(_bb, new PhantomItem()); }
  public static PhantomItem GetRootAsPhantomItem(ByteBuffer _bb, PhantomItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PhantomItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ItemId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MonsterId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MonsterName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMonsterNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMonsterNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMonsterNameArray() { return __p.__vector_as_array<byte>(8); }
  public int ElementType(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ElementTypeLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetElementTypeBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetElementTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetElementTypeArray() { return __p.__vector_as_array<int>(10); }
  public WWParser.Defs.PhantomPropRandom? MainProp { get { int o = __p.__offset(12); return o != 0 ? (WWParser.Defs.PhantomPropRandom?)(new WWParser.Defs.PhantomPropRandom()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int LevelUpGroupId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public double CalabashBuffs(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int CalabashBuffsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetCalabashBuffsBytes() { return __p.__vector_as_span<double>(18, 8); }
#else
  public ArraySegment<byte>? GetCalabashBuffsBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public double[] GetCalabashBuffsArray() { return __p.__vector_as_array<double>(18); }
  public int Rarity { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MeshId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Zoom(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ZoomLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetZoomBytes() { return __p.__vector_as_span<float>(24, 4); }
#else
  public ArraySegment<byte>? GetZoomBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public float[] GetZoomArray() { return __p.__vector_as_array<float>(24); }
  public float Location(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int LocationLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetLocationBytes() { return __p.__vector_as_span<float>(26, 4); }
#else
  public ArraySegment<byte>? GetLocationBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public float[] GetLocationArray() { return __p.__vector_as_array<float>(26); }
  public float Rotator(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int RotatorLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetRotatorBytes() { return __p.__vector_as_span<float>(28, 4); }
#else
  public ArraySegment<byte>? GetRotatorBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public float[] GetRotatorArray() { return __p.__vector_as_array<float>(28); }
  public string StandAnim { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStandAnimBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetStandAnimBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetStandAnimArray() { return __p.__vector_as_array<byte>(30); }
  public string TypeDescription { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeDescriptionBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetTypeDescriptionBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetTypeDescriptionArray() { return __p.__vector_as_array<byte>(32); }
  public string AttributesDescription { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributesDescriptionBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetAttributesDescriptionBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetAttributesDescriptionArray() { return __p.__vector_as_array<byte>(34); }
  public string Icon { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(36); }
  public string IconMiddle { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconMiddleBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetIconMiddleBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetIconMiddleArray() { return __p.__vector_as_array<byte>(38); }
  public string IconSmall { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconSmallBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetIconSmallBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetIconSmallArray() { return __p.__vector_as_array<byte>(40); }
  public string Mesh { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMeshBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetMeshBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetMeshArray() { return __p.__vector_as_array<byte>(42); }
  public int QualityId { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxCapcity { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)999999999; } }
  public int ItemAccess(int j) { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ItemAccessLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItemAccessBytes() { return __p.__vector_as_span<int>(48, 4); }
#else
  public ArraySegment<byte>? GetItemAccessBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public int[] GetItemAccessArray() { return __p.__vector_as_array<int>(48); }
  public int ObtainedShow { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ObtainedShowDescription { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObtainedShowDescriptionBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetObtainedShowDescriptionBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetObtainedShowDescriptionArray() { return __p.__vector_as_array<byte>(52); }
  public int NumLimit { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ShowInBag { get { int o = __p.__offset(56); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int SortIndex { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SkillIcon { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillIconBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetSkillIconBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetSkillIconArray() { return __p.__vector_as_array<byte>(60); }
  public bool Destructible { get { int o = __p.__offset(62); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int RedDotDisableRule { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FetterGroup(int j) { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FetterGroupLength { get { int o = __p.__offset(66); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFetterGroupBytes() { return __p.__vector_as_span<int>(66, 4); }
#else
  public ArraySegment<byte>? GetFetterGroupBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public int[] GetFetterGroupArray() { return __p.__vector_as_array<int>(66); }
  public int PhantomType { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int ParentMonsterId { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.PhantomItem> CreatePhantomItem(FlatBufferBuilder builder,
      int item_id = 0,
      int monster_id = 0,
      StringOffset monster_nameOffset = default(StringOffset),
      VectorOffset element_typeOffset = default(VectorOffset),
      Offset<WWParser.Defs.PhantomPropRandom> main_propOffset = default(Offset<WWParser.Defs.PhantomPropRandom>),
      int level_up_group_id = 0,
      int skill_id = 0,
      VectorOffset calabash_buffsOffset = default(VectorOffset),
      int rarity = 0,
      int mesh_id = 0,
      VectorOffset zoomOffset = default(VectorOffset),
      VectorOffset locationOffset = default(VectorOffset),
      VectorOffset rotatorOffset = default(VectorOffset),
      StringOffset stand_animOffset = default(StringOffset),
      StringOffset type_descriptionOffset = default(StringOffset),
      StringOffset attributes_descriptionOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset icon_middleOffset = default(StringOffset),
      StringOffset icon_smallOffset = default(StringOffset),
      StringOffset meshOffset = default(StringOffset),
      int quality_id = 0,
      int max_capcity = 999999999,
      VectorOffset item_accessOffset = default(VectorOffset),
      int obtained_show = 0,
      StringOffset obtained_show_descriptionOffset = default(StringOffset),
      int num_limit = 0,
      bool show_in_bag = false,
      int sort_index = 0,
      StringOffset skill_iconOffset = default(StringOffset),
      bool destructible = false,
      int red_dot_disable_rule = 0,
      VectorOffset fetter_groupOffset = default(VectorOffset),
      int phantom_type = 1,
      int parent_monster_id = 0) {
    builder.StartTable(34);
    PhantomItem.AddParentMonsterId(builder, parent_monster_id);
    PhantomItem.AddPhantomType(builder, phantom_type);
    PhantomItem.AddFetterGroup(builder, fetter_groupOffset);
    PhantomItem.AddRedDotDisableRule(builder, red_dot_disable_rule);
    PhantomItem.AddSkillIcon(builder, skill_iconOffset);
    PhantomItem.AddSortIndex(builder, sort_index);
    PhantomItem.AddNumLimit(builder, num_limit);
    PhantomItem.AddObtainedShowDescription(builder, obtained_show_descriptionOffset);
    PhantomItem.AddObtainedShow(builder, obtained_show);
    PhantomItem.AddItemAccess(builder, item_accessOffset);
    PhantomItem.AddMaxCapcity(builder, max_capcity);
    PhantomItem.AddQualityId(builder, quality_id);
    PhantomItem.AddMesh(builder, meshOffset);
    PhantomItem.AddIconSmall(builder, icon_smallOffset);
    PhantomItem.AddIconMiddle(builder, icon_middleOffset);
    PhantomItem.AddIcon(builder, iconOffset);
    PhantomItem.AddAttributesDescription(builder, attributes_descriptionOffset);
    PhantomItem.AddTypeDescription(builder, type_descriptionOffset);
    PhantomItem.AddStandAnim(builder, stand_animOffset);
    PhantomItem.AddRotator(builder, rotatorOffset);
    PhantomItem.AddLocation(builder, locationOffset);
    PhantomItem.AddZoom(builder, zoomOffset);
    PhantomItem.AddMeshId(builder, mesh_id);
    PhantomItem.AddRarity(builder, rarity);
    PhantomItem.AddCalabashBuffs(builder, calabash_buffsOffset);
    PhantomItem.AddSkillId(builder, skill_id);
    PhantomItem.AddLevelUpGroupId(builder, level_up_group_id);
    PhantomItem.AddMainProp(builder, main_propOffset);
    PhantomItem.AddElementType(builder, element_typeOffset);
    PhantomItem.AddMonsterName(builder, monster_nameOffset);
    PhantomItem.AddMonsterId(builder, monster_id);
    PhantomItem.AddItemId(builder, item_id);
    PhantomItem.AddDestructible(builder, destructible);
    PhantomItem.AddShowInBag(builder, show_in_bag);
    return PhantomItem.EndPhantomItem(builder);
  }

  public static void StartPhantomItem(FlatBufferBuilder builder) { builder.StartTable(34); }
  public static void AddItemId(FlatBufferBuilder builder, int itemId) { builder.AddInt(0, itemId, 0); }
  public static void AddMonsterId(FlatBufferBuilder builder, int monsterId) { builder.AddInt(1, monsterId, 0); }
  public static void AddMonsterName(FlatBufferBuilder builder, StringOffset monsterNameOffset) { builder.AddOffset(2, monsterNameOffset.Value, 0); }
  public static void AddElementType(FlatBufferBuilder builder, VectorOffset elementTypeOffset) { builder.AddOffset(3, elementTypeOffset.Value, 0); }
  public static VectorOffset CreateElementTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateElementTypeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElementTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElementTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartElementTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMainProp(FlatBufferBuilder builder, Offset<WWParser.Defs.PhantomPropRandom> mainPropOffset) { builder.AddOffset(4, mainPropOffset.Value, 0); }
  public static void AddLevelUpGroupId(FlatBufferBuilder builder, int levelUpGroupId) { builder.AddInt(5, levelUpGroupId, 0); }
  public static void AddSkillId(FlatBufferBuilder builder, int skillId) { builder.AddInt(6, skillId, 0); }
  public static void AddCalabashBuffs(FlatBufferBuilder builder, VectorOffset calabashBuffsOffset) { builder.AddOffset(7, calabashBuffsOffset.Value, 0); }
  public static VectorOffset CreateCalabashBuffsVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCalabashBuffsVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCalabashBuffsVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCalabashBuffsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCalabashBuffsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRarity(FlatBufferBuilder builder, int rarity) { builder.AddInt(8, rarity, 0); }
  public static void AddMeshId(FlatBufferBuilder builder, int meshId) { builder.AddInt(9, meshId, 0); }
  public static void AddZoom(FlatBufferBuilder builder, VectorOffset zoomOffset) { builder.AddOffset(10, zoomOffset.Value, 0); }
  public static VectorOffset CreateZoomVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateZoomVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZoomVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZoomVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartZoomVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLocation(FlatBufferBuilder builder, VectorOffset locationOffset) { builder.AddOffset(11, locationOffset.Value, 0); }
  public static VectorOffset CreateLocationVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLocationVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLocationVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLocationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLocationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRotator(FlatBufferBuilder builder, VectorOffset rotatorOffset) { builder.AddOffset(12, rotatorOffset.Value, 0); }
  public static VectorOffset CreateRotatorVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRotatorVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRotatorVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRotatorVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRotatorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStandAnim(FlatBufferBuilder builder, StringOffset standAnimOffset) { builder.AddOffset(13, standAnimOffset.Value, 0); }
  public static void AddTypeDescription(FlatBufferBuilder builder, StringOffset typeDescriptionOffset) { builder.AddOffset(14, typeDescriptionOffset.Value, 0); }
  public static void AddAttributesDescription(FlatBufferBuilder builder, StringOffset attributesDescriptionOffset) { builder.AddOffset(15, attributesDescriptionOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(16, iconOffset.Value, 0); }
  public static void AddIconMiddle(FlatBufferBuilder builder, StringOffset iconMiddleOffset) { builder.AddOffset(17, iconMiddleOffset.Value, 0); }
  public static void AddIconSmall(FlatBufferBuilder builder, StringOffset iconSmallOffset) { builder.AddOffset(18, iconSmallOffset.Value, 0); }
  public static void AddMesh(FlatBufferBuilder builder, StringOffset meshOffset) { builder.AddOffset(19, meshOffset.Value, 0); }
  public static void AddQualityId(FlatBufferBuilder builder, int qualityId) { builder.AddInt(20, qualityId, 0); }
  public static void AddMaxCapcity(FlatBufferBuilder builder, int maxCapcity) { builder.AddInt(21, maxCapcity, 999999999); }
  public static void AddItemAccess(FlatBufferBuilder builder, VectorOffset itemAccessOffset) { builder.AddOffset(22, itemAccessOffset.Value, 0); }
  public static VectorOffset CreateItemAccessVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItemAccessVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemAccessVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemAccessVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartItemAccessVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddObtainedShow(FlatBufferBuilder builder, int obtainedShow) { builder.AddInt(23, obtainedShow, 0); }
  public static void AddObtainedShowDescription(FlatBufferBuilder builder, StringOffset obtainedShowDescriptionOffset) { builder.AddOffset(24, obtainedShowDescriptionOffset.Value, 0); }
  public static void AddNumLimit(FlatBufferBuilder builder, int numLimit) { builder.AddInt(25, numLimit, 0); }
  public static void AddShowInBag(FlatBufferBuilder builder, bool showInBag) { builder.AddBool(26, showInBag, false); }
  public static void AddSortIndex(FlatBufferBuilder builder, int sortIndex) { builder.AddInt(27, sortIndex, 0); }
  public static void AddSkillIcon(FlatBufferBuilder builder, StringOffset skillIconOffset) { builder.AddOffset(28, skillIconOffset.Value, 0); }
  public static void AddDestructible(FlatBufferBuilder builder, bool destructible) { builder.AddBool(29, destructible, false); }
  public static void AddRedDotDisableRule(FlatBufferBuilder builder, int redDotDisableRule) { builder.AddInt(30, redDotDisableRule, 0); }
  public static void AddFetterGroup(FlatBufferBuilder builder, VectorOffset fetterGroupOffset) { builder.AddOffset(31, fetterGroupOffset.Value, 0); }
  public static VectorOffset CreateFetterGroupVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFetterGroupVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFetterGroupVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFetterGroupVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFetterGroupVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPhantomType(FlatBufferBuilder builder, int phantomType) { builder.AddInt(32, phantomType, 1); }
  public static void AddParentMonsterId(FlatBufferBuilder builder, int parentMonsterId) { builder.AddInt(33, parentMonsterId, 0); }
  public static Offset<WWParser.Defs.PhantomItem> EndPhantomItem(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PhantomItem>(o);
  }
  public PhantomItemT UnPack() {
    var _o = new PhantomItemT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PhantomItemT _o) {
    _o.ItemId = this.ItemId;
    _o.MonsterId = this.MonsterId;
    _o.MonsterName = this.MonsterName;
    _o.ElementType = new List<int>();
    for (var _j = 0; _j < this.ElementTypeLength; ++_j) {_o.ElementType.Add(this.ElementType(_j));}
    _o.MainProp = this.MainProp.HasValue ? this.MainProp.Value.UnPack() : null;
    _o.LevelUpGroupId = this.LevelUpGroupId;
    _o.SkillId = this.SkillId;
    _o.CalabashBuffs = new List<double>();
    for (var _j = 0; _j < this.CalabashBuffsLength; ++_j) {_o.CalabashBuffs.Add(this.CalabashBuffs(_j));}
    _o.Rarity = this.Rarity;
    _o.MeshId = this.MeshId;
    _o.Zoom = new List<float>();
    for (var _j = 0; _j < this.ZoomLength; ++_j) {_o.Zoom.Add(this.Zoom(_j));}
    _o.Location = new List<float>();
    for (var _j = 0; _j < this.LocationLength; ++_j) {_o.Location.Add(this.Location(_j));}
    _o.Rotator = new List<float>();
    for (var _j = 0; _j < this.RotatorLength; ++_j) {_o.Rotator.Add(this.Rotator(_j));}
    _o.StandAnim = this.StandAnim;
    _o.TypeDescription = this.TypeDescription;
    _o.AttributesDescription = this.AttributesDescription;
    _o.Icon = this.Icon;
    _o.IconMiddle = this.IconMiddle;
    _o.IconSmall = this.IconSmall;
    _o.Mesh = this.Mesh;
    _o.QualityId = this.QualityId;
    _o.MaxCapcity = this.MaxCapcity;
    _o.ItemAccess = new List<int>();
    for (var _j = 0; _j < this.ItemAccessLength; ++_j) {_o.ItemAccess.Add(this.ItemAccess(_j));}
    _o.ObtainedShow = this.ObtainedShow;
    _o.ObtainedShowDescription = this.ObtainedShowDescription;
    _o.NumLimit = this.NumLimit;
    _o.ShowInBag = this.ShowInBag;
    _o.SortIndex = this.SortIndex;
    _o.SkillIcon = this.SkillIcon;
    _o.Destructible = this.Destructible;
    _o.RedDotDisableRule = this.RedDotDisableRule;
    _o.FetterGroup = new List<int>();
    for (var _j = 0; _j < this.FetterGroupLength; ++_j) {_o.FetterGroup.Add(this.FetterGroup(_j));}
    _o.PhantomType = this.PhantomType;
    _o.ParentMonsterId = this.ParentMonsterId;
  }
  public static Offset<WWParser.Defs.PhantomItem> Pack(FlatBufferBuilder builder, PhantomItemT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PhantomItem>);
    var _monster_name = _o.MonsterName == null ? default(StringOffset) : builder.CreateString(_o.MonsterName);
    var _element_type = default(VectorOffset);
    if (_o.ElementType != null) {
      var __element_type = _o.ElementType.ToArray();
      _element_type = CreateElementTypeVector(builder, __element_type);
    }
    var _main_prop = _o.MainProp == null ? default(Offset<WWParser.Defs.PhantomPropRandom>) : WWParser.Defs.PhantomPropRandom.Pack(builder, _o.MainProp);
    var _calabash_buffs = default(VectorOffset);
    if (_o.CalabashBuffs != null) {
      var __calabash_buffs = _o.CalabashBuffs.ToArray();
      _calabash_buffs = CreateCalabashBuffsVector(builder, __calabash_buffs);
    }
    var _zoom = default(VectorOffset);
    if (_o.Zoom != null) {
      var __zoom = _o.Zoom.ToArray();
      _zoom = CreateZoomVector(builder, __zoom);
    }
    var _location = default(VectorOffset);
    if (_o.Location != null) {
      var __location = _o.Location.ToArray();
      _location = CreateLocationVector(builder, __location);
    }
    var _rotator = default(VectorOffset);
    if (_o.Rotator != null) {
      var __rotator = _o.Rotator.ToArray();
      _rotator = CreateRotatorVector(builder, __rotator);
    }
    var _stand_anim = _o.StandAnim == null ? default(StringOffset) : builder.CreateString(_o.StandAnim);
    var _type_description = _o.TypeDescription == null ? default(StringOffset) : builder.CreateString(_o.TypeDescription);
    var _attributes_description = _o.AttributesDescription == null ? default(StringOffset) : builder.CreateString(_o.AttributesDescription);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _icon_middle = _o.IconMiddle == null ? default(StringOffset) : builder.CreateString(_o.IconMiddle);
    var _icon_small = _o.IconSmall == null ? default(StringOffset) : builder.CreateString(_o.IconSmall);
    var _mesh = _o.Mesh == null ? default(StringOffset) : builder.CreateString(_o.Mesh);
    var _item_access = default(VectorOffset);
    if (_o.ItemAccess != null) {
      var __item_access = _o.ItemAccess.ToArray();
      _item_access = CreateItemAccessVector(builder, __item_access);
    }
    var _obtained_show_description = _o.ObtainedShowDescription == null ? default(StringOffset) : builder.CreateString(_o.ObtainedShowDescription);
    var _skill_icon = _o.SkillIcon == null ? default(StringOffset) : builder.CreateString(_o.SkillIcon);
    var _fetter_group = default(VectorOffset);
    if (_o.FetterGroup != null) {
      var __fetter_group = _o.FetterGroup.ToArray();
      _fetter_group = CreateFetterGroupVector(builder, __fetter_group);
    }
    return CreatePhantomItem(
      builder,
      _o.ItemId,
      _o.MonsterId,
      _monster_name,
      _element_type,
      _main_prop,
      _o.LevelUpGroupId,
      _o.SkillId,
      _calabash_buffs,
      _o.Rarity,
      _o.MeshId,
      _zoom,
      _location,
      _rotator,
      _stand_anim,
      _type_description,
      _attributes_description,
      _icon,
      _icon_middle,
      _icon_small,
      _mesh,
      _o.QualityId,
      _o.MaxCapcity,
      _item_access,
      _o.ObtainedShow,
      _obtained_show_description,
      _o.NumLimit,
      _o.ShowInBag,
      _o.SortIndex,
      _skill_icon,
      _o.Destructible,
      _o.RedDotDisableRule,
      _fetter_group,
      _o.PhantomType,
      _o.ParentMonsterId);
  }
}

public class PhantomItemT
{
  [Newtonsoft.Json.JsonProperty("item_id")]
  public int ItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_id")]
  public int MonsterId { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_name")]
  public string MonsterName { get; set; }
  [Newtonsoft.Json.JsonProperty("element_type")]
  public List<int> ElementType { get; set; }
  [Newtonsoft.Json.JsonProperty("main_prop")]
  public WWParser.Defs.PhantomPropRandomT MainProp { get; set; }
  [Newtonsoft.Json.JsonProperty("level_up_group_id")]
  public int LevelUpGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_id")]
  public int SkillId { get; set; }
  [Newtonsoft.Json.JsonProperty("calabash_buffs")]
  public List<double> CalabashBuffs { get; set; }
  [Newtonsoft.Json.JsonProperty("rarity")]
  public int Rarity { get; set; }
  [Newtonsoft.Json.JsonProperty("mesh_id")]
  public int MeshId { get; set; }
  [Newtonsoft.Json.JsonProperty("zoom")]
  public List<float> Zoom { get; set; }
  [Newtonsoft.Json.JsonProperty("location")]
  public List<float> Location { get; set; }
  [Newtonsoft.Json.JsonProperty("rotator")]
  public List<float> Rotator { get; set; }
  [Newtonsoft.Json.JsonProperty("stand_anim")]
  public string StandAnim { get; set; }
  [Newtonsoft.Json.JsonProperty("type_description")]
  public string TypeDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("attributes_description")]
  public string AttributesDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_middle")]
  public string IconMiddle { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_small")]
  public string IconSmall { get; set; }
  [Newtonsoft.Json.JsonProperty("mesh")]
  public string Mesh { get; set; }
  [Newtonsoft.Json.JsonProperty("quality_id")]
  public int QualityId { get; set; }
  [Newtonsoft.Json.JsonProperty("max_capcity")]
  public int MaxCapcity { get; set; }
  [Newtonsoft.Json.JsonProperty("item_access")]
  public List<int> ItemAccess { get; set; }
  [Newtonsoft.Json.JsonProperty("obtained_show")]
  public int ObtainedShow { get; set; }
  [Newtonsoft.Json.JsonProperty("obtained_show_description")]
  public string ObtainedShowDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("num_limit")]
  public int NumLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("show_in_bag")]
  public bool ShowInBag { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_index")]
  public int SortIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_icon")]
  public string SkillIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("destructible")]
  public bool Destructible { get; set; }
  [Newtonsoft.Json.JsonProperty("red_dot_disable_rule")]
  public int RedDotDisableRule { get; set; }
  [Newtonsoft.Json.JsonProperty("fetter_group")]
  public List<int> FetterGroup { get; set; }
  [Newtonsoft.Json.JsonProperty("phantom_type")]
  public int PhantomType { get; set; }
  [Newtonsoft.Json.JsonProperty("parent_monster_id")]
  public int ParentMonsterId { get; set; }

  public PhantomItemT() {
    this.ItemId = 0;
    this.MonsterId = 0;
    this.MonsterName = null;
    this.ElementType = null;
    this.MainProp = null;
    this.LevelUpGroupId = 0;
    this.SkillId = 0;
    this.CalabashBuffs = null;
    this.Rarity = 0;
    this.MeshId = 0;
    this.Zoom = null;
    this.Location = null;
    this.Rotator = null;
    this.StandAnim = null;
    this.TypeDescription = null;
    this.AttributesDescription = null;
    this.Icon = null;
    this.IconMiddle = null;
    this.IconSmall = null;
    this.Mesh = null;
    this.QualityId = 0;
    this.MaxCapcity = 999999999;
    this.ItemAccess = null;
    this.ObtainedShow = 0;
    this.ObtainedShowDescription = null;
    this.NumLimit = 0;
    this.ShowInBag = false;
    this.SortIndex = 0;
    this.SkillIcon = null;
    this.Destructible = false;
    this.RedDotDisableRule = 0;
    this.FetterGroup = null;
    this.PhantomType = 1;
    this.ParentMonsterId = 0;
  }
}


static public class PhantomItemVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MonsterId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*MonsterName*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*ElementType*/, 4 /*int*/, false)
      && verifier.VerifyTable(tablePos, 12 /*MainProp*/, WWParser.Defs.PhantomPropRandomVerify.Verify, false)
      && verifier.VerifyField(tablePos, 14 /*LevelUpGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*SkillId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*CalabashBuffs*/, 8 /*double*/, false)
      && verifier.VerifyField(tablePos, 20 /*Rarity*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*MeshId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 24 /*Zoom*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*Location*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 28 /*Rotator*/, 4 /*float*/, false)
      && verifier.VerifyString(tablePos, 30 /*StandAnim*/, false)
      && verifier.VerifyString(tablePos, 32 /*TypeDescription*/, false)
      && verifier.VerifyString(tablePos, 34 /*AttributesDescription*/, false)
      && verifier.VerifyString(tablePos, 36 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 38 /*IconMiddle*/, false)
      && verifier.VerifyString(tablePos, 40 /*IconSmall*/, false)
      && verifier.VerifyString(tablePos, 42 /*Mesh*/, false)
      && verifier.VerifyField(tablePos, 44 /*QualityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*MaxCapcity*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 48 /*ItemAccess*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 50 /*ObtainedShow*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 52 /*ObtainedShowDescription*/, false)
      && verifier.VerifyField(tablePos, 54 /*NumLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*ShowInBag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 58 /*SortIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 60 /*SkillIcon*/, false)
      && verifier.VerifyField(tablePos, 62 /*Destructible*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 64 /*RedDotDisableRule*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 66 /*FetterGroup*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 68 /*PhantomType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 70 /*ParentMonsterId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
