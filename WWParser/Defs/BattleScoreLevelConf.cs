// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BattleScoreLevelConf : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BattleScoreLevelConf GetRootAsBattleScoreLevelConf(ByteBuffer _bb) { return GetRootAsBattleScoreLevelConf(_bb, new BattleScoreLevelConf()); }
  public static BattleScoreLevelConf GetRootAsBattleScoreLevelConf(ByteBuffer _bb, BattleScoreLevelConf obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BattleScoreLevelConf __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LowerUpperLimits(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LowerUpperLimitsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLowerUpperLimitsBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetLowerUpperLimitsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetLowerUpperLimitsArray() { return __p.__vector_as_array<int>(10); }
  public string Bgm { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgmBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetBgmBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetBgmArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<WWParser.Defs.BattleScoreLevelConf> CreateBattleScoreLevelConf(FlatBufferBuilder builder,
      int id = 0,
      int group_id = 0,
      int level = 0,
      VectorOffset lower_upper_limitsOffset = default(VectorOffset),
      StringOffset bgmOffset = default(StringOffset)) {
    builder.StartTable(5);
    BattleScoreLevelConf.AddBgm(builder, bgmOffset);
    BattleScoreLevelConf.AddLowerUpperLimits(builder, lower_upper_limitsOffset);
    BattleScoreLevelConf.AddLevel(builder, level);
    BattleScoreLevelConf.AddGroupId(builder, group_id);
    BattleScoreLevelConf.AddId(builder, id);
    return BattleScoreLevelConf.EndBattleScoreLevelConf(builder);
  }

  public static void StartBattleScoreLevelConf(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, int groupId) { builder.AddInt(1, groupId, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(2, level, 0); }
  public static void AddLowerUpperLimits(FlatBufferBuilder builder, VectorOffset lowerUpperLimitsOffset) { builder.AddOffset(3, lowerUpperLimitsOffset.Value, 0); }
  public static VectorOffset CreateLowerUpperLimitsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLowerUpperLimitsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLowerUpperLimitsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLowerUpperLimitsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLowerUpperLimitsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBgm(FlatBufferBuilder builder, StringOffset bgmOffset) { builder.AddOffset(4, bgmOffset.Value, 0); }
  public static Offset<WWParser.Defs.BattleScoreLevelConf> EndBattleScoreLevelConf(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BattleScoreLevelConf>(o);
  }
  public BattleScoreLevelConfT UnPack() {
    var _o = new BattleScoreLevelConfT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BattleScoreLevelConfT _o) {
    _o.Id = this.Id;
    _o.GroupId = this.GroupId;
    _o.Level = this.Level;
    _o.LowerUpperLimits = new List<int>();
    for (var _j = 0; _j < this.LowerUpperLimitsLength; ++_j) {_o.LowerUpperLimits.Add(this.LowerUpperLimits(_j));}
    _o.Bgm = this.Bgm;
  }
  public static Offset<WWParser.Defs.BattleScoreLevelConf> Pack(FlatBufferBuilder builder, BattleScoreLevelConfT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BattleScoreLevelConf>);
    var _lower_upper_limits = default(VectorOffset);
    if (_o.LowerUpperLimits != null) {
      var __lower_upper_limits = _o.LowerUpperLimits.ToArray();
      _lower_upper_limits = CreateLowerUpperLimitsVector(builder, __lower_upper_limits);
    }
    var _bgm = _o.Bgm == null ? default(StringOffset) : builder.CreateString(_o.Bgm);
    return CreateBattleScoreLevelConf(
      builder,
      _o.Id,
      _o.GroupId,
      _o.Level,
      _lower_upper_limits,
      _bgm);
  }
}

public class BattleScoreLevelConfT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("group_id")]
  public int GroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("level")]
  public int Level { get; set; }
  [Newtonsoft.Json.JsonProperty("lower_upper_limits")]
  public List<int> LowerUpperLimits { get; set; }
  [Newtonsoft.Json.JsonProperty("bgm")]
  public string Bgm { get; set; }

  public BattleScoreLevelConfT() {
    this.Id = 0;
    this.GroupId = 0;
    this.Level = 0;
    this.LowerUpperLimits = null;
    this.Bgm = null;
  }
}


static public class BattleScoreLevelConfVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*GroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*LowerUpperLimits*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 12 /*Bgm*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
