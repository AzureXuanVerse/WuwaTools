// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueSeason : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueSeason GetRootAsRogueSeason(ByteBuffer _bb) { return GetRootAsRogueSeason(_bb, new RogueSeason()); }
  public static RogueSeason GetRootAsRogueSeason(ByteBuffer _bb, RogueSeason obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueSeason __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SeasonName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSeasonNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSeasonNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSeasonNameArray() { return __p.__vector_as_array<byte>(8); }
  public int PointItem { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstanceDungeonEntrance { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TabIcon { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTabIconBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTabIconBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTabIconArray() { return __p.__vector_as_array<byte>(14); }
  public WWParser.Defs.DicIntInt? FirstPassRewardMap(int j) { int o = __p.__offset(16); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FirstPassRewardMapLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int ShopId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Achievement { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ParamId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string RogueThemeType { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRogueThemeTypeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetRogueThemeTypeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetRogueThemeTypeArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<WWParser.Defs.RogueSeason> CreateRogueSeason(FlatBufferBuilder builder,
      int id = 0,
      int activity_id = 0,
      StringOffset season_nameOffset = default(StringOffset),
      int point_item = 0,
      int instance_dungeon_entrance = 0,
      StringOffset tab_iconOffset = default(StringOffset),
      VectorOffset first_pass_reward_mapOffset = default(VectorOffset),
      int shop_id = 0,
      int achievement = 0,
      int param_id = 0,
      StringOffset rogue_theme_typeOffset = default(StringOffset)) {
    builder.StartTable(11);
    RogueSeason.AddRogueThemeType(builder, rogue_theme_typeOffset);
    RogueSeason.AddParamId(builder, param_id);
    RogueSeason.AddAchievement(builder, achievement);
    RogueSeason.AddShopId(builder, shop_id);
    RogueSeason.AddFirstPassRewardMap(builder, first_pass_reward_mapOffset);
    RogueSeason.AddTabIcon(builder, tab_iconOffset);
    RogueSeason.AddInstanceDungeonEntrance(builder, instance_dungeon_entrance);
    RogueSeason.AddPointItem(builder, point_item);
    RogueSeason.AddSeasonName(builder, season_nameOffset);
    RogueSeason.AddActivityId(builder, activity_id);
    RogueSeason.AddId(builder, id);
    return RogueSeason.EndRogueSeason(builder);
  }

  public static void StartRogueSeason(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddSeasonName(FlatBufferBuilder builder, StringOffset seasonNameOffset) { builder.AddOffset(2, seasonNameOffset.Value, 0); }
  public static void AddPointItem(FlatBufferBuilder builder, int pointItem) { builder.AddInt(3, pointItem, 0); }
  public static void AddInstanceDungeonEntrance(FlatBufferBuilder builder, int instanceDungeonEntrance) { builder.AddInt(4, instanceDungeonEntrance, 0); }
  public static void AddTabIcon(FlatBufferBuilder builder, StringOffset tabIconOffset) { builder.AddOffset(5, tabIconOffset.Value, 0); }
  public static void AddFirstPassRewardMap(FlatBufferBuilder builder, VectorOffset firstPassRewardMapOffset) { builder.AddOffset(6, firstPassRewardMapOffset.Value, 0); }
  public static VectorOffset CreateFirstPassRewardMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFirstPassRewardMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFirstPassRewardMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFirstPassRewardMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFirstPassRewardMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShopId(FlatBufferBuilder builder, int shopId) { builder.AddInt(7, shopId, 0); }
  public static void AddAchievement(FlatBufferBuilder builder, int achievement) { builder.AddInt(8, achievement, 0); }
  public static void AddParamId(FlatBufferBuilder builder, int paramId) { builder.AddInt(9, paramId, 0); }
  public static void AddRogueThemeType(FlatBufferBuilder builder, StringOffset rogueThemeTypeOffset) { builder.AddOffset(10, rogueThemeTypeOffset.Value, 0); }
  public static Offset<WWParser.Defs.RogueSeason> EndRogueSeason(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueSeason>(o);
  }
  public RogueSeasonT UnPack() {
    var _o = new RogueSeasonT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueSeasonT _o) {
    _o.Id = this.Id;
    _o.ActivityId = this.ActivityId;
    _o.SeasonName = this.SeasonName;
    _o.PointItem = this.PointItem;
    _o.InstanceDungeonEntrance = this.InstanceDungeonEntrance;
    _o.TabIcon = this.TabIcon;
    _o.FirstPassRewardMap = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.FirstPassRewardMapLength; ++_j) {_o.FirstPassRewardMap.Add(this.FirstPassRewardMap(_j).HasValue ? this.FirstPassRewardMap(_j).Value.UnPack() : null);}
    _o.ShopId = this.ShopId;
    _o.Achievement = this.Achievement;
    _o.ParamId = this.ParamId;
    _o.RogueThemeType = this.RogueThemeType;
  }
  public static Offset<WWParser.Defs.RogueSeason> Pack(FlatBufferBuilder builder, RogueSeasonT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueSeason>);
    var _season_name = _o.SeasonName == null ? default(StringOffset) : builder.CreateString(_o.SeasonName);
    var _tab_icon = _o.TabIcon == null ? default(StringOffset) : builder.CreateString(_o.TabIcon);
    var _first_pass_reward_map = default(VectorOffset);
    if (_o.FirstPassRewardMap != null) {
      var __first_pass_reward_map = new Offset<WWParser.Defs.DicIntInt>[_o.FirstPassRewardMap.Count];
      for (var _j = 0; _j < __first_pass_reward_map.Length; ++_j) { __first_pass_reward_map[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.FirstPassRewardMap[_j]); }
      _first_pass_reward_map = CreateFirstPassRewardMapVector(builder, __first_pass_reward_map);
    }
    var _rogue_theme_type = _o.RogueThemeType == null ? default(StringOffset) : builder.CreateString(_o.RogueThemeType);
    return CreateRogueSeason(
      builder,
      _o.Id,
      _o.ActivityId,
      _season_name,
      _o.PointItem,
      _o.InstanceDungeonEntrance,
      _tab_icon,
      _first_pass_reward_map,
      _o.ShopId,
      _o.Achievement,
      _o.ParamId,
      _rogue_theme_type);
  }
}

public class RogueSeasonT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("season_name")]
  public string SeasonName { get; set; }
  [Newtonsoft.Json.JsonProperty("point_item")]
  public int PointItem { get; set; }
  [Newtonsoft.Json.JsonProperty("instance_dungeon_entrance")]
  public int InstanceDungeonEntrance { get; set; }
  [Newtonsoft.Json.JsonProperty("tab_icon")]
  public string TabIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("first_pass_reward_map")]
  public List<WWParser.Defs.DicIntIntT> FirstPassRewardMap { get; set; }
  [Newtonsoft.Json.JsonProperty("shop_id")]
  public int ShopId { get; set; }
  [Newtonsoft.Json.JsonProperty("achievement")]
  public int Achievement { get; set; }
  [Newtonsoft.Json.JsonProperty("param_id")]
  public int ParamId { get; set; }
  [Newtonsoft.Json.JsonProperty("rogue_theme_type")]
  public string RogueThemeType { get; set; }

  public RogueSeasonT() {
    this.Id = 0;
    this.ActivityId = 0;
    this.SeasonName = null;
    this.PointItem = 0;
    this.InstanceDungeonEntrance = 0;
    this.TabIcon = null;
    this.FirstPassRewardMap = null;
    this.ShopId = 0;
    this.Achievement = 0;
    this.ParamId = 0;
    this.RogueThemeType = null;
  }
}


static public class RogueSeasonVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*SeasonName*/, false)
      && verifier.VerifyField(tablePos, 10 /*PointItem*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*InstanceDungeonEntrance*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*TabIcon*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 16 /*FirstPassRewardMap*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 18 /*ShopId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*Achievement*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*ParamId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 24 /*RogueThemeType*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
