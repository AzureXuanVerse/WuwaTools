// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RiskHarvestInst : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RiskHarvestInst GetRootAsRiskHarvestInst(ByteBuffer _bb) { return GetRootAsRiskHarvestInst(_bb, new RiskHarvestInst()); }
  public static RiskHarvestInst GetRootAsRiskHarvestInst(ByteBuffer _bb, RiskHarvestInst obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RiskHarvestInst __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstanceId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockDay { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockInst { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockScore { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardScore { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxScore { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HarvestBuff { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Reward { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Difficulty { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string DifficultyName { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDifficultyNameBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetDifficultyNameBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetDifficultyNameArray() { return __p.__vector_as_array<byte>(26); }
  public string MonsterRatio { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMonsterRatioBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetMonsterRatioBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetMonsterRatioArray() { return __p.__vector_as_array<byte>(28); }
  public string TimePointName { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTimePointNameBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetTimePointNameBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetTimePointNameArray() { return __p.__vector_as_array<byte>(30); }
  public string ScorePointName { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScorePointNameBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetScorePointNameBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetScorePointNameArray() { return __p.__vector_as_array<byte>(32); }
  public string TimeScoreValidName { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTimeScoreValidNameBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetTimeScoreValidNameBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetTimeScoreValidNameArray() { return __p.__vector_as_array<byte>(34); }
  public int MaxTimeScore { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.IntPair? StarRewardList(int j) { int o = __p.__offset(38); return o != 0 ? (WWParser.Defs.IntPair?)(new WWParser.Defs.IntPair()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int StarRewardListLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool Accumulate { get { int o = __p.__offset(40); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Desc { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(42); }
  public string StarRewardDesc { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStarRewardDescBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetStarRewardDescBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetStarRewardDescArray() { return __p.__vector_as_array<byte>(44); }

  public static Offset<WWParser.Defs.RiskHarvestInst> CreateRiskHarvestInst(FlatBufferBuilder builder,
      int id = 0,
      int activity_id = 0,
      int instance_id = 0,
      int unlock_day = 0,
      int unlock_inst = 0,
      int unlock_score = 0,
      int reward_score = 0,
      int max_score = 0,
      int harvest_buff = 0,
      int reward = 0,
      int difficulty = 0,
      StringOffset difficulty_nameOffset = default(StringOffset),
      StringOffset monster_ratioOffset = default(StringOffset),
      StringOffset time_point_nameOffset = default(StringOffset),
      StringOffset score_point_nameOffset = default(StringOffset),
      StringOffset time_score_valid_nameOffset = default(StringOffset),
      int max_time_score = 0,
      VectorOffset star_reward_listOffset = default(VectorOffset),
      bool accumulate = false,
      StringOffset descOffset = default(StringOffset),
      StringOffset star_reward_descOffset = default(StringOffset)) {
    builder.StartTable(21);
    RiskHarvestInst.AddStarRewardDesc(builder, star_reward_descOffset);
    RiskHarvestInst.AddDesc(builder, descOffset);
    RiskHarvestInst.AddStarRewardList(builder, star_reward_listOffset);
    RiskHarvestInst.AddMaxTimeScore(builder, max_time_score);
    RiskHarvestInst.AddTimeScoreValidName(builder, time_score_valid_nameOffset);
    RiskHarvestInst.AddScorePointName(builder, score_point_nameOffset);
    RiskHarvestInst.AddTimePointName(builder, time_point_nameOffset);
    RiskHarvestInst.AddMonsterRatio(builder, monster_ratioOffset);
    RiskHarvestInst.AddDifficultyName(builder, difficulty_nameOffset);
    RiskHarvestInst.AddDifficulty(builder, difficulty);
    RiskHarvestInst.AddReward(builder, reward);
    RiskHarvestInst.AddHarvestBuff(builder, harvest_buff);
    RiskHarvestInst.AddMaxScore(builder, max_score);
    RiskHarvestInst.AddRewardScore(builder, reward_score);
    RiskHarvestInst.AddUnlockScore(builder, unlock_score);
    RiskHarvestInst.AddUnlockInst(builder, unlock_inst);
    RiskHarvestInst.AddUnlockDay(builder, unlock_day);
    RiskHarvestInst.AddInstanceId(builder, instance_id);
    RiskHarvestInst.AddActivityId(builder, activity_id);
    RiskHarvestInst.AddId(builder, id);
    RiskHarvestInst.AddAccumulate(builder, accumulate);
    return RiskHarvestInst.EndRiskHarvestInst(builder);
  }

  public static void StartRiskHarvestInst(FlatBufferBuilder builder) { builder.StartTable(21); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddInstanceId(FlatBufferBuilder builder, int instanceId) { builder.AddInt(2, instanceId, 0); }
  public static void AddUnlockDay(FlatBufferBuilder builder, int unlockDay) { builder.AddInt(3, unlockDay, 0); }
  public static void AddUnlockInst(FlatBufferBuilder builder, int unlockInst) { builder.AddInt(4, unlockInst, 0); }
  public static void AddUnlockScore(FlatBufferBuilder builder, int unlockScore) { builder.AddInt(5, unlockScore, 0); }
  public static void AddRewardScore(FlatBufferBuilder builder, int rewardScore) { builder.AddInt(6, rewardScore, 0); }
  public static void AddMaxScore(FlatBufferBuilder builder, int maxScore) { builder.AddInt(7, maxScore, 0); }
  public static void AddHarvestBuff(FlatBufferBuilder builder, int harvestBuff) { builder.AddInt(8, harvestBuff, 0); }
  public static void AddReward(FlatBufferBuilder builder, int reward) { builder.AddInt(9, reward, 0); }
  public static void AddDifficulty(FlatBufferBuilder builder, int difficulty) { builder.AddInt(10, difficulty, 0); }
  public static void AddDifficultyName(FlatBufferBuilder builder, StringOffset difficultyNameOffset) { builder.AddOffset(11, difficultyNameOffset.Value, 0); }
  public static void AddMonsterRatio(FlatBufferBuilder builder, StringOffset monsterRatioOffset) { builder.AddOffset(12, monsterRatioOffset.Value, 0); }
  public static void AddTimePointName(FlatBufferBuilder builder, StringOffset timePointNameOffset) { builder.AddOffset(13, timePointNameOffset.Value, 0); }
  public static void AddScorePointName(FlatBufferBuilder builder, StringOffset scorePointNameOffset) { builder.AddOffset(14, scorePointNameOffset.Value, 0); }
  public static void AddTimeScoreValidName(FlatBufferBuilder builder, StringOffset timeScoreValidNameOffset) { builder.AddOffset(15, timeScoreValidNameOffset.Value, 0); }
  public static void AddMaxTimeScore(FlatBufferBuilder builder, int maxTimeScore) { builder.AddInt(16, maxTimeScore, 0); }
  public static void AddStarRewardList(FlatBufferBuilder builder, VectorOffset starRewardListOffset) { builder.AddOffset(17, starRewardListOffset.Value, 0); }
  public static VectorOffset CreateStarRewardListVector(FlatBufferBuilder builder, Offset<WWParser.Defs.IntPair>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStarRewardListVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.IntPair>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarRewardListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.IntPair>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarRewardListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.IntPair>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStarRewardListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAccumulate(FlatBufferBuilder builder, bool accumulate) { builder.AddBool(18, accumulate, false); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(19, descOffset.Value, 0); }
  public static void AddStarRewardDesc(FlatBufferBuilder builder, StringOffset starRewardDescOffset) { builder.AddOffset(20, starRewardDescOffset.Value, 0); }
  public static Offset<WWParser.Defs.RiskHarvestInst> EndRiskHarvestInst(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RiskHarvestInst>(o);
  }
  public RiskHarvestInstT UnPack() {
    var _o = new RiskHarvestInstT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RiskHarvestInstT _o) {
    _o.Id = this.Id;
    _o.ActivityId = this.ActivityId;
    _o.InstanceId = this.InstanceId;
    _o.UnlockDay = this.UnlockDay;
    _o.UnlockInst = this.UnlockInst;
    _o.UnlockScore = this.UnlockScore;
    _o.RewardScore = this.RewardScore;
    _o.MaxScore = this.MaxScore;
    _o.HarvestBuff = this.HarvestBuff;
    _o.Reward = this.Reward;
    _o.Difficulty = this.Difficulty;
    _o.DifficultyName = this.DifficultyName;
    _o.MonsterRatio = this.MonsterRatio;
    _o.TimePointName = this.TimePointName;
    _o.ScorePointName = this.ScorePointName;
    _o.TimeScoreValidName = this.TimeScoreValidName;
    _o.MaxTimeScore = this.MaxTimeScore;
    _o.StarRewardList = new List<WWParser.Defs.IntPairT>();
    for (var _j = 0; _j < this.StarRewardListLength; ++_j) {_o.StarRewardList.Add(this.StarRewardList(_j).HasValue ? this.StarRewardList(_j).Value.UnPack() : null);}
    _o.Accumulate = this.Accumulate;
    _o.Desc = this.Desc;
    _o.StarRewardDesc = this.StarRewardDesc;
  }
  public static Offset<WWParser.Defs.RiskHarvestInst> Pack(FlatBufferBuilder builder, RiskHarvestInstT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RiskHarvestInst>);
    var _difficulty_name = _o.DifficultyName == null ? default(StringOffset) : builder.CreateString(_o.DifficultyName);
    var _monster_ratio = _o.MonsterRatio == null ? default(StringOffset) : builder.CreateString(_o.MonsterRatio);
    var _time_point_name = _o.TimePointName == null ? default(StringOffset) : builder.CreateString(_o.TimePointName);
    var _score_point_name = _o.ScorePointName == null ? default(StringOffset) : builder.CreateString(_o.ScorePointName);
    var _time_score_valid_name = _o.TimeScoreValidName == null ? default(StringOffset) : builder.CreateString(_o.TimeScoreValidName);
    var _star_reward_list = default(VectorOffset);
    if (_o.StarRewardList != null) {
      var __star_reward_list = new Offset<WWParser.Defs.IntPair>[_o.StarRewardList.Count];
      for (var _j = 0; _j < __star_reward_list.Length; ++_j) { __star_reward_list[_j] = WWParser.Defs.IntPair.Pack(builder, _o.StarRewardList[_j]); }
      _star_reward_list = CreateStarRewardListVector(builder, __star_reward_list);
    }
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    var _star_reward_desc = _o.StarRewardDesc == null ? default(StringOffset) : builder.CreateString(_o.StarRewardDesc);
    return CreateRiskHarvestInst(
      builder,
      _o.Id,
      _o.ActivityId,
      _o.InstanceId,
      _o.UnlockDay,
      _o.UnlockInst,
      _o.UnlockScore,
      _o.RewardScore,
      _o.MaxScore,
      _o.HarvestBuff,
      _o.Reward,
      _o.Difficulty,
      _difficulty_name,
      _monster_ratio,
      _time_point_name,
      _score_point_name,
      _time_score_valid_name,
      _o.MaxTimeScore,
      _star_reward_list,
      _o.Accumulate,
      _desc,
      _star_reward_desc);
  }
}

public class RiskHarvestInstT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("instance_id")]
  public int InstanceId { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_day")]
  public int UnlockDay { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_inst")]
  public int UnlockInst { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_score")]
  public int UnlockScore { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_score")]
  public int RewardScore { get; set; }
  [Newtonsoft.Json.JsonProperty("max_score")]
  public int MaxScore { get; set; }
  [Newtonsoft.Json.JsonProperty("harvest_buff")]
  public int HarvestBuff { get; set; }
  [Newtonsoft.Json.JsonProperty("reward")]
  public int Reward { get; set; }
  [Newtonsoft.Json.JsonProperty("difficulty")]
  public int Difficulty { get; set; }
  [Newtonsoft.Json.JsonProperty("difficulty_name")]
  public string DifficultyName { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_ratio")]
  public string MonsterRatio { get; set; }
  [Newtonsoft.Json.JsonProperty("time_point_name")]
  public string TimePointName { get; set; }
  [Newtonsoft.Json.JsonProperty("score_point_name")]
  public string ScorePointName { get; set; }
  [Newtonsoft.Json.JsonProperty("time_score_valid_name")]
  public string TimeScoreValidName { get; set; }
  [Newtonsoft.Json.JsonProperty("max_time_score")]
  public int MaxTimeScore { get; set; }
  [Newtonsoft.Json.JsonProperty("star_reward_list")]
  public List<WWParser.Defs.IntPairT> StarRewardList { get; set; }
  [Newtonsoft.Json.JsonProperty("accumulate")]
  public bool Accumulate { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }
  [Newtonsoft.Json.JsonProperty("star_reward_desc")]
  public string StarRewardDesc { get; set; }

  public RiskHarvestInstT() {
    this.Id = 0;
    this.ActivityId = 0;
    this.InstanceId = 0;
    this.UnlockDay = 0;
    this.UnlockInst = 0;
    this.UnlockScore = 0;
    this.RewardScore = 0;
    this.MaxScore = 0;
    this.HarvestBuff = 0;
    this.Reward = 0;
    this.Difficulty = 0;
    this.DifficultyName = null;
    this.MonsterRatio = null;
    this.TimePointName = null;
    this.ScorePointName = null;
    this.TimeScoreValidName = null;
    this.MaxTimeScore = 0;
    this.StarRewardList = null;
    this.Accumulate = false;
    this.Desc = null;
    this.StarRewardDesc = null;
  }
}


static public class RiskHarvestInstVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*InstanceId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*UnlockDay*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*UnlockInst*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*UnlockScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*RewardScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*MaxScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*HarvestBuff*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*Reward*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*Difficulty*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 26 /*DifficultyName*/, false)
      && verifier.VerifyString(tablePos, 28 /*MonsterRatio*/, false)
      && verifier.VerifyString(tablePos, 30 /*TimePointName*/, false)
      && verifier.VerifyString(tablePos, 32 /*ScorePointName*/, false)
      && verifier.VerifyString(tablePos, 34 /*TimeScoreValidName*/, false)
      && verifier.VerifyField(tablePos, 36 /*MaxTimeScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 38 /*StarRewardList*/, WWParser.Defs.IntPairVerify.Verify, false)
      && verifier.VerifyField(tablePos, 40 /*Accumulate*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 42 /*Desc*/, false)
      && verifier.VerifyString(tablePos, 44 /*StarRewardDesc*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
