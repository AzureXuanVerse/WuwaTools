// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueBuffPool : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueBuffPool GetRootAsRogueBuffPool(ByteBuffer _bb) { return GetRootAsRogueBuffPool(_bb, new RogueBuffPool()); }
  public static RogueBuffPool GetRootAsRogueBuffPool(ByteBuffer _bb, RogueBuffPool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueBuffPool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public double BuffId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public int PerIds(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PerIdsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPerIdsBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetPerIdsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetPerIdsArray() { return __p.__vector_as_array<int>(8); }
  public int EffectId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PerkType { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Quality { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)3; } }
  public WWParser.Defs.DicIntInt? BuffElement(int j) { int o = __p.__offset(16); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BuffElementLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string BuffIcon { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffIconBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetBuffIconBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetBuffIconArray() { return __p.__vector_as_array<byte>(18); }
  public string BuffDesc { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffDescBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetBuffDescBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetBuffDescArray() { return __p.__vector_as_array<byte>(20); }
  public string BuffDescParam(int j) { int o = __p.__offset(22); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BuffDescParamLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string BuffDescSimple { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffDescSimpleBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetBuffDescSimpleBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetBuffDescSimpleArray() { return __p.__vector_as_array<byte>(24); }
  public string BuffName { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffNameBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetBuffNameBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetBuffNameArray() { return __p.__vector_as_array<byte>(26); }
  public int RoleId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TrialRoleId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.RogueBuffPool> CreateRogueBuffPool(FlatBufferBuilder builder,
      int id = 0,
      double buff_id = 0.0,
      VectorOffset per_idsOffset = default(VectorOffset),
      int effect_id = 0,
      int perk_type = 0,
      int quality = 3,
      VectorOffset buff_elementOffset = default(VectorOffset),
      StringOffset buff_iconOffset = default(StringOffset),
      StringOffset buff_descOffset = default(StringOffset),
      VectorOffset buff_desc_paramOffset = default(VectorOffset),
      StringOffset buff_desc_simpleOffset = default(StringOffset),
      StringOffset buff_nameOffset = default(StringOffset),
      int role_id = 0,
      int trial_role_id = 0) {
    builder.StartTable(14);
    RogueBuffPool.AddBuffId(builder, buff_id);
    RogueBuffPool.AddTrialRoleId(builder, trial_role_id);
    RogueBuffPool.AddRoleId(builder, role_id);
    RogueBuffPool.AddBuffName(builder, buff_nameOffset);
    RogueBuffPool.AddBuffDescSimple(builder, buff_desc_simpleOffset);
    RogueBuffPool.AddBuffDescParam(builder, buff_desc_paramOffset);
    RogueBuffPool.AddBuffDesc(builder, buff_descOffset);
    RogueBuffPool.AddBuffIcon(builder, buff_iconOffset);
    RogueBuffPool.AddBuffElement(builder, buff_elementOffset);
    RogueBuffPool.AddQuality(builder, quality);
    RogueBuffPool.AddPerkType(builder, perk_type);
    RogueBuffPool.AddEffectId(builder, effect_id);
    RogueBuffPool.AddPerIds(builder, per_idsOffset);
    RogueBuffPool.AddId(builder, id);
    return RogueBuffPool.EndRogueBuffPool(builder);
  }

  public static void StartRogueBuffPool(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddBuffId(FlatBufferBuilder builder, double buffId) { builder.AddDouble(1, buffId, 0.0); }
  public static void AddPerIds(FlatBufferBuilder builder, VectorOffset perIdsOffset) { builder.AddOffset(2, perIdsOffset.Value, 0); }
  public static VectorOffset CreatePerIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePerIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePerIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePerIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPerIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEffectId(FlatBufferBuilder builder, int effectId) { builder.AddInt(3, effectId, 0); }
  public static void AddPerkType(FlatBufferBuilder builder, int perkType) { builder.AddInt(4, perkType, 0); }
  public static void AddQuality(FlatBufferBuilder builder, int quality) { builder.AddInt(5, quality, 3); }
  public static void AddBuffElement(FlatBufferBuilder builder, VectorOffset buffElementOffset) { builder.AddOffset(6, buffElementOffset.Value, 0); }
  public static VectorOffset CreateBuffElementVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBuffElementVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffElementVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffElementVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffElementVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffIcon(FlatBufferBuilder builder, StringOffset buffIconOffset) { builder.AddOffset(7, buffIconOffset.Value, 0); }
  public static void AddBuffDesc(FlatBufferBuilder builder, StringOffset buffDescOffset) { builder.AddOffset(8, buffDescOffset.Value, 0); }
  public static void AddBuffDescParam(FlatBufferBuilder builder, VectorOffset buffDescParamOffset) { builder.AddOffset(9, buffDescParamOffset.Value, 0); }
  public static VectorOffset CreateBuffDescParamVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBuffDescParamVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffDescParamVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffDescParamVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffDescParamVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffDescSimple(FlatBufferBuilder builder, StringOffset buffDescSimpleOffset) { builder.AddOffset(10, buffDescSimpleOffset.Value, 0); }
  public static void AddBuffName(FlatBufferBuilder builder, StringOffset buffNameOffset) { builder.AddOffset(11, buffNameOffset.Value, 0); }
  public static void AddRoleId(FlatBufferBuilder builder, int roleId) { builder.AddInt(12, roleId, 0); }
  public static void AddTrialRoleId(FlatBufferBuilder builder, int trialRoleId) { builder.AddInt(13, trialRoleId, 0); }
  public static Offset<WWParser.Defs.RogueBuffPool> EndRogueBuffPool(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueBuffPool>(o);
  }
  public RogueBuffPoolT UnPack() {
    var _o = new RogueBuffPoolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueBuffPoolT _o) {
    _o.Id = this.Id;
    _o.BuffId = this.BuffId;
    _o.PerIds = new List<int>();
    for (var _j = 0; _j < this.PerIdsLength; ++_j) {_o.PerIds.Add(this.PerIds(_j));}
    _o.EffectId = this.EffectId;
    _o.PerkType = this.PerkType;
    _o.Quality = this.Quality;
    _o.BuffElement = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.BuffElementLength; ++_j) {_o.BuffElement.Add(this.BuffElement(_j).HasValue ? this.BuffElement(_j).Value.UnPack() : null);}
    _o.BuffIcon = this.BuffIcon;
    _o.BuffDesc = this.BuffDesc;
    _o.BuffDescParam = new List<string>();
    for (var _j = 0; _j < this.BuffDescParamLength; ++_j) {_o.BuffDescParam.Add(this.BuffDescParam(_j));}
    _o.BuffDescSimple = this.BuffDescSimple;
    _o.BuffName = this.BuffName;
    _o.RoleId = this.RoleId;
    _o.TrialRoleId = this.TrialRoleId;
  }
  public static Offset<WWParser.Defs.RogueBuffPool> Pack(FlatBufferBuilder builder, RogueBuffPoolT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueBuffPool>);
    var _per_ids = default(VectorOffset);
    if (_o.PerIds != null) {
      var __per_ids = _o.PerIds.ToArray();
      _per_ids = CreatePerIdsVector(builder, __per_ids);
    }
    var _buff_element = default(VectorOffset);
    if (_o.BuffElement != null) {
      var __buff_element = new Offset<WWParser.Defs.DicIntInt>[_o.BuffElement.Count];
      for (var _j = 0; _j < __buff_element.Length; ++_j) { __buff_element[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.BuffElement[_j]); }
      _buff_element = CreateBuffElementVector(builder, __buff_element);
    }
    var _buff_icon = _o.BuffIcon == null ? default(StringOffset) : builder.CreateString(_o.BuffIcon);
    var _buff_desc = _o.BuffDesc == null ? default(StringOffset) : builder.CreateString(_o.BuffDesc);
    var _buff_desc_param = default(VectorOffset);
    if (_o.BuffDescParam != null) {
      var __buff_desc_param = new StringOffset[_o.BuffDescParam.Count];
      for (var _j = 0; _j < __buff_desc_param.Length; ++_j) { __buff_desc_param[_j] = builder.CreateString(_o.BuffDescParam[_j]); }
      _buff_desc_param = CreateBuffDescParamVector(builder, __buff_desc_param);
    }
    var _buff_desc_simple = _o.BuffDescSimple == null ? default(StringOffset) : builder.CreateString(_o.BuffDescSimple);
    var _buff_name = _o.BuffName == null ? default(StringOffset) : builder.CreateString(_o.BuffName);
    return CreateRogueBuffPool(
      builder,
      _o.Id,
      _o.BuffId,
      _per_ids,
      _o.EffectId,
      _o.PerkType,
      _o.Quality,
      _buff_element,
      _buff_icon,
      _buff_desc,
      _buff_desc_param,
      _buff_desc_simple,
      _buff_name,
      _o.RoleId,
      _o.TrialRoleId);
  }
}

public class RogueBuffPoolT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_id")]
  public double BuffId { get; set; }
  [Newtonsoft.Json.JsonProperty("per_ids")]
  public List<int> PerIds { get; set; }
  [Newtonsoft.Json.JsonProperty("effect_id")]
  public int EffectId { get; set; }
  [Newtonsoft.Json.JsonProperty("perk_type")]
  public int PerkType { get; set; }
  [Newtonsoft.Json.JsonProperty("quality")]
  public int Quality { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_element")]
  public List<WWParser.Defs.DicIntIntT> BuffElement { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_icon")]
  public string BuffIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_desc")]
  public string BuffDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_desc_param")]
  public List<string> BuffDescParam { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_desc_simple")]
  public string BuffDescSimple { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_name")]
  public string BuffName { get; set; }
  [Newtonsoft.Json.JsonProperty("role_id")]
  public int RoleId { get; set; }
  [Newtonsoft.Json.JsonProperty("trial_role_id")]
  public int TrialRoleId { get; set; }

  public RogueBuffPoolT() {
    this.Id = 0;
    this.BuffId = 0.0;
    this.PerIds = null;
    this.EffectId = 0;
    this.PerkType = 0;
    this.Quality = 3;
    this.BuffElement = null;
    this.BuffIcon = null;
    this.BuffDesc = null;
    this.BuffDescParam = null;
    this.BuffDescSimple = null;
    this.BuffName = null;
    this.RoleId = 0;
    this.TrialRoleId = 0;
  }
}


static public class RogueBuffPoolVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*BuffId*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*PerIds*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 10 /*EffectId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*PerkType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*Quality*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 16 /*BuffElement*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyString(tablePos, 18 /*BuffIcon*/, false)
      && verifier.VerifyString(tablePos, 20 /*BuffDesc*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 22 /*BuffDescParam*/, false)
      && verifier.VerifyString(tablePos, 24 /*BuffDescSimple*/, false)
      && verifier.VerifyString(tablePos, 26 /*BuffName*/, false)
      && verifier.VerifyField(tablePos, 28 /*RoleId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*TrialRoleId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
