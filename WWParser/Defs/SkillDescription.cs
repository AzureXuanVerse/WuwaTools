// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SkillDescription : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SkillDescription GetRootAsSkillDescription(ByteBuffer _bb) { return GetRootAsSkillDescription(_bb, new SkillDescription()); }
  public static SkillDescription GetRootAsSkillDescription(ByteBuffer _bb, SkillDescription obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillDescription __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillLevelGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string AttributeName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributeNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAttributeNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAttributeNameArray() { return __p.__vector_as_array<byte>(8); }
  public WWParser.Defs.StringArray? SkillDetailNum(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.StringArray?)(new WWParser.Defs.StringArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SkillDetailNumLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Description { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(12); }
  public int Order { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.SkillDescription> CreateSkillDescription(FlatBufferBuilder builder,
      int id = 0,
      int skill_level_group_id = 0,
      StringOffset attribute_nameOffset = default(StringOffset),
      VectorOffset skill_detail_numOffset = default(VectorOffset),
      StringOffset descriptionOffset = default(StringOffset),
      int order = 0) {
    builder.StartTable(6);
    SkillDescription.AddOrder(builder, order);
    SkillDescription.AddDescription(builder, descriptionOffset);
    SkillDescription.AddSkillDetailNum(builder, skill_detail_numOffset);
    SkillDescription.AddAttributeName(builder, attribute_nameOffset);
    SkillDescription.AddSkillLevelGroupId(builder, skill_level_group_id);
    SkillDescription.AddId(builder, id);
    return SkillDescription.EndSkillDescription(builder);
  }

  public static void StartSkillDescription(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddSkillLevelGroupId(FlatBufferBuilder builder, int skillLevelGroupId) { builder.AddInt(1, skillLevelGroupId, 0); }
  public static void AddAttributeName(FlatBufferBuilder builder, StringOffset attributeNameOffset) { builder.AddOffset(2, attributeNameOffset.Value, 0); }
  public static void AddSkillDetailNum(FlatBufferBuilder builder, VectorOffset skillDetailNumOffset) { builder.AddOffset(3, skillDetailNumOffset.Value, 0); }
  public static VectorOffset CreateSkillDetailNumVector(FlatBufferBuilder builder, Offset<WWParser.Defs.StringArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSkillDetailNumVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.StringArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillDetailNumVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.StringArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillDetailNumVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.StringArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSkillDetailNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(4, descriptionOffset.Value, 0); }
  public static void AddOrder(FlatBufferBuilder builder, int order) { builder.AddInt(5, order, 0); }
  public static Offset<WWParser.Defs.SkillDescription> EndSkillDescription(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SkillDescription>(o);
  }
  public SkillDescriptionT UnPack() {
    var _o = new SkillDescriptionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillDescriptionT _o) {
    _o.Id = this.Id;
    _o.SkillLevelGroupId = this.SkillLevelGroupId;
    _o.AttributeName = this.AttributeName;
    _o.SkillDetailNum = new List<WWParser.Defs.StringArrayT>();
    for (var _j = 0; _j < this.SkillDetailNumLength; ++_j) {_o.SkillDetailNum.Add(this.SkillDetailNum(_j).HasValue ? this.SkillDetailNum(_j).Value.UnPack() : null);}
    _o.Description = this.Description;
    _o.Order = this.Order;
  }
  public static Offset<WWParser.Defs.SkillDescription> Pack(FlatBufferBuilder builder, SkillDescriptionT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SkillDescription>);
    var _attribute_name = _o.AttributeName == null ? default(StringOffset) : builder.CreateString(_o.AttributeName);
    var _skill_detail_num = default(VectorOffset);
    if (_o.SkillDetailNum != null) {
      var __skill_detail_num = new Offset<WWParser.Defs.StringArray>[_o.SkillDetailNum.Count];
      for (var _j = 0; _j < __skill_detail_num.Length; ++_j) { __skill_detail_num[_j] = WWParser.Defs.StringArray.Pack(builder, _o.SkillDetailNum[_j]); }
      _skill_detail_num = CreateSkillDetailNumVector(builder, __skill_detail_num);
    }
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    return CreateSkillDescription(
      builder,
      _o.Id,
      _o.SkillLevelGroupId,
      _attribute_name,
      _skill_detail_num,
      _description,
      _o.Order);
  }
}

public class SkillDescriptionT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_level_group_id")]
  public int SkillLevelGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("attribute_name")]
  public string AttributeName { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_detail_num")]
  public List<WWParser.Defs.StringArrayT> SkillDetailNum { get; set; }
  [Newtonsoft.Json.JsonProperty("description")]
  public string Description { get; set; }
  [Newtonsoft.Json.JsonProperty("order")]
  public int Order { get; set; }

  public SkillDescriptionT() {
    this.Id = 0;
    this.SkillLevelGroupId = 0;
    this.AttributeName = null;
    this.SkillDetailNum = null;
    this.Description = null;
    this.Order = 0;
  }
}


static public class SkillDescriptionVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SkillLevelGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*AttributeName*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*SkillDetailNum*/, WWParser.Defs.StringArrayVerify.Verify, false)
      && verifier.VerifyString(tablePos, 12 /*Description*/, false)
      && verifier.VerifyField(tablePos, 14 /*Order*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
