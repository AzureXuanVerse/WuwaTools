// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Long54Array : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Long54Array GetRootAsLong54Array(ByteBuffer _bb) { return GetRootAsLong54Array(_bb, new Long54Array()); }
  public static Long54Array GetRootAsLong54Array(ByteBuffer _bb, Long54Array obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Long54Array __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double ArrayLong(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int ArrayLongLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetArrayLongBytes() { return __p.__vector_as_span<double>(4, 8); }
#else
  public ArraySegment<byte>? GetArrayLongBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public double[] GetArrayLongArray() { return __p.__vector_as_array<double>(4); }

  public static Offset<WWParser.Defs.Long54Array> CreateLong54Array(FlatBufferBuilder builder,
      VectorOffset array_longOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Long54Array.AddArrayLong(builder, array_longOffset);
    return Long54Array.EndLong54Array(builder);
  }

  public static void StartLong54Array(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddArrayLong(FlatBufferBuilder builder, VectorOffset arrayLongOffset) { builder.AddOffset(0, arrayLongOffset.Value, 0); }
  public static VectorOffset CreateArrayLongVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateArrayLongVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArrayLongVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArrayLongVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartArrayLongVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<WWParser.Defs.Long54Array> EndLong54Array(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Long54Array>(o);
  }
  public Long54ArrayT UnPack() {
    var _o = new Long54ArrayT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Long54ArrayT _o) {
    _o.ArrayLong = new List<double>();
    for (var _j = 0; _j < this.ArrayLongLength; ++_j) {_o.ArrayLong.Add(this.ArrayLong(_j));}
  }
  public static Offset<WWParser.Defs.Long54Array> Pack(FlatBufferBuilder builder, Long54ArrayT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Long54Array>);
    var _array_long = default(VectorOffset);
    if (_o.ArrayLong != null) {
      var __array_long = _o.ArrayLong.ToArray();
      _array_long = CreateArrayLongVector(builder, __array_long);
    }
    return CreateLong54Array(
      builder,
      _array_long);
  }
}

public class Long54ArrayT
{
  [Newtonsoft.Json.JsonProperty("array_long")]
  public List<double> ArrayLong { get; set; }

  public Long54ArrayT() {
    this.ArrayLong = null;
  }
}


static public class Long54ArrayVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*ArrayLong*/, 8 /*double*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
