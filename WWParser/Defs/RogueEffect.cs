// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueEffect : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueEffect GetRootAsRogueEffect(ByteBuffer _bb) { return GetRootAsRogueEffect(_bb, new RogueEffect()); }
  public static RogueEffect GetRootAsRogueEffect(ByteBuffer _bb, RogueEffect obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueEffect __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MainEffectType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Condition { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConditionArgs(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ConditionArgsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetConditionArgsBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetConditionArgsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetConditionArgsArray() { return __p.__vector_as_array<int>(10); }
  public int Count { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RoomCount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public double BuffArray1(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int BuffArray1Length { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetBuffArray1Bytes() { return __p.__vector_as_span<double>(16, 8); }
#else
  public ArraySegment<byte>? GetBuffArray1Bytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public double[] GetBuffArray1Array() { return __p.__vector_as_array<double>(16); }
  public string ExtraEffectTypeArray1(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExtraEffectTypeArray1Length { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ExtraEffectTypeArgsArray1(int j) { int o = __p.__offset(20); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExtraEffectTypeArgsArray1Length { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public double BuffArray2(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int BuffArray2Length { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetBuffArray2Bytes() { return __p.__vector_as_span<double>(22, 8); }
#else
  public ArraySegment<byte>? GetBuffArray2Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public double[] GetBuffArray2Array() { return __p.__vector_as_array<double>(22); }
  public string ExtraEffectTypeArray2(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExtraEffectTypeArray2Length { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ExtraEffectTypeArgsArray2(int j) { int o = __p.__offset(26); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExtraEffectTypeArgsArray2Length { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.RogueEffect> CreateRogueEffect(FlatBufferBuilder builder,
      int id = 0,
      int main_effect_type = 0,
      int condition = 0,
      VectorOffset condition_argsOffset = default(VectorOffset),
      int count = 0,
      int room_count = 0,
      VectorOffset buff_array1Offset = default(VectorOffset),
      VectorOffset extra_effect_type_array1Offset = default(VectorOffset),
      VectorOffset extra_effect_type_args_array1Offset = default(VectorOffset),
      VectorOffset buff_array2Offset = default(VectorOffset),
      VectorOffset extra_effect_type_array2Offset = default(VectorOffset),
      VectorOffset extra_effect_type_args_array2Offset = default(VectorOffset)) {
    builder.StartTable(12);
    RogueEffect.AddExtraEffectTypeArgsArray2(builder, extra_effect_type_args_array2Offset);
    RogueEffect.AddExtraEffectTypeArray2(builder, extra_effect_type_array2Offset);
    RogueEffect.AddBuffArray2(builder, buff_array2Offset);
    RogueEffect.AddExtraEffectTypeArgsArray1(builder, extra_effect_type_args_array1Offset);
    RogueEffect.AddExtraEffectTypeArray1(builder, extra_effect_type_array1Offset);
    RogueEffect.AddBuffArray1(builder, buff_array1Offset);
    RogueEffect.AddRoomCount(builder, room_count);
    RogueEffect.AddCount(builder, count);
    RogueEffect.AddConditionArgs(builder, condition_argsOffset);
    RogueEffect.AddCondition(builder, condition);
    RogueEffect.AddMainEffectType(builder, main_effect_type);
    RogueEffect.AddId(builder, id);
    return RogueEffect.EndRogueEffect(builder);
  }

  public static void StartRogueEffect(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMainEffectType(FlatBufferBuilder builder, int mainEffectType) { builder.AddInt(1, mainEffectType, 0); }
  public static void AddCondition(FlatBufferBuilder builder, int condition) { builder.AddInt(2, condition, 0); }
  public static void AddConditionArgs(FlatBufferBuilder builder, VectorOffset conditionArgsOffset) { builder.AddOffset(3, conditionArgsOffset.Value, 0); }
  public static VectorOffset CreateConditionArgsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionArgsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionArgsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionArgsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionArgsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCount(FlatBufferBuilder builder, int count) { builder.AddInt(4, count, 0); }
  public static void AddRoomCount(FlatBufferBuilder builder, int roomCount) { builder.AddInt(5, roomCount, 0); }
  public static void AddBuffArray1(FlatBufferBuilder builder, VectorOffset buffArray1Offset) { builder.AddOffset(6, buffArray1Offset.Value, 0); }
  public static VectorOffset CreateBuffArray1Vector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffArray1VectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffArray1VectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffArray1VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffArray1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddExtraEffectTypeArray1(FlatBufferBuilder builder, VectorOffset extraEffectTypeArray1Offset) { builder.AddOffset(7, extraEffectTypeArray1Offset.Value, 0); }
  public static VectorOffset CreateExtraEffectTypeArray1Vector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectTypeArray1VectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectTypeArray1VectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectTypeArray1VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtraEffectTypeArray1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExtraEffectTypeArgsArray1(FlatBufferBuilder builder, VectorOffset extraEffectTypeArgsArray1Offset) { builder.AddOffset(8, extraEffectTypeArgsArray1Offset.Value, 0); }
  public static VectorOffset CreateExtraEffectTypeArgsArray1Vector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectTypeArgsArray1VectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectTypeArgsArray1VectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectTypeArgsArray1VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtraEffectTypeArgsArray1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffArray2(FlatBufferBuilder builder, VectorOffset buffArray2Offset) { builder.AddOffset(9, buffArray2Offset.Value, 0); }
  public static VectorOffset CreateBuffArray2Vector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffArray2VectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffArray2VectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffArray2VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffArray2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddExtraEffectTypeArray2(FlatBufferBuilder builder, VectorOffset extraEffectTypeArray2Offset) { builder.AddOffset(10, extraEffectTypeArray2Offset.Value, 0); }
  public static VectorOffset CreateExtraEffectTypeArray2Vector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectTypeArray2VectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectTypeArray2VectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectTypeArray2VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtraEffectTypeArray2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExtraEffectTypeArgsArray2(FlatBufferBuilder builder, VectorOffset extraEffectTypeArgsArray2Offset) { builder.AddOffset(11, extraEffectTypeArgsArray2Offset.Value, 0); }
  public static VectorOffset CreateExtraEffectTypeArgsArray2Vector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectTypeArgsArray2VectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectTypeArgsArray2VectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraEffectTypeArgsArray2VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtraEffectTypeArgsArray2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.RogueEffect> EndRogueEffect(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueEffect>(o);
  }
  public RogueEffectT UnPack() {
    var _o = new RogueEffectT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueEffectT _o) {
    _o.Id = this.Id;
    _o.MainEffectType = this.MainEffectType;
    _o.Condition = this.Condition;
    _o.ConditionArgs = new List<int>();
    for (var _j = 0; _j < this.ConditionArgsLength; ++_j) {_o.ConditionArgs.Add(this.ConditionArgs(_j));}
    _o.Count = this.Count;
    _o.RoomCount = this.RoomCount;
    _o.BuffArray1 = new List<double>();
    for (var _j = 0; _j < this.BuffArray1Length; ++_j) {_o.BuffArray1.Add(this.BuffArray1(_j));}
    _o.ExtraEffectTypeArray1 = new List<string>();
    for (var _j = 0; _j < this.ExtraEffectTypeArray1Length; ++_j) {_o.ExtraEffectTypeArray1.Add(this.ExtraEffectTypeArray1(_j));}
    _o.ExtraEffectTypeArgsArray1 = new List<string>();
    for (var _j = 0; _j < this.ExtraEffectTypeArgsArray1Length; ++_j) {_o.ExtraEffectTypeArgsArray1.Add(this.ExtraEffectTypeArgsArray1(_j));}
    _o.BuffArray2 = new List<double>();
    for (var _j = 0; _j < this.BuffArray2Length; ++_j) {_o.BuffArray2.Add(this.BuffArray2(_j));}
    _o.ExtraEffectTypeArray2 = new List<string>();
    for (var _j = 0; _j < this.ExtraEffectTypeArray2Length; ++_j) {_o.ExtraEffectTypeArray2.Add(this.ExtraEffectTypeArray2(_j));}
    _o.ExtraEffectTypeArgsArray2 = new List<string>();
    for (var _j = 0; _j < this.ExtraEffectTypeArgsArray2Length; ++_j) {_o.ExtraEffectTypeArgsArray2.Add(this.ExtraEffectTypeArgsArray2(_j));}
  }
  public static Offset<WWParser.Defs.RogueEffect> Pack(FlatBufferBuilder builder, RogueEffectT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueEffect>);
    var _condition_args = default(VectorOffset);
    if (_o.ConditionArgs != null) {
      var __condition_args = _o.ConditionArgs.ToArray();
      _condition_args = CreateConditionArgsVector(builder, __condition_args);
    }
    var _buff_array1 = default(VectorOffset);
    if (_o.BuffArray1 != null) {
      var __buff_array1 = _o.BuffArray1.ToArray();
      _buff_array1 = CreateBuffArray1Vector(builder, __buff_array1);
    }
    var _extra_effect_type_array1 = default(VectorOffset);
    if (_o.ExtraEffectTypeArray1 != null) {
      var __extra_effect_type_array1 = new StringOffset[_o.ExtraEffectTypeArray1.Count];
      for (var _j = 0; _j < __extra_effect_type_array1.Length; ++_j) { __extra_effect_type_array1[_j] = builder.CreateString(_o.ExtraEffectTypeArray1[_j]); }
      _extra_effect_type_array1 = CreateExtraEffectTypeArray1Vector(builder, __extra_effect_type_array1);
    }
    var _extra_effect_type_args_array1 = default(VectorOffset);
    if (_o.ExtraEffectTypeArgsArray1 != null) {
      var __extra_effect_type_args_array1 = new StringOffset[_o.ExtraEffectTypeArgsArray1.Count];
      for (var _j = 0; _j < __extra_effect_type_args_array1.Length; ++_j) { __extra_effect_type_args_array1[_j] = builder.CreateString(_o.ExtraEffectTypeArgsArray1[_j]); }
      _extra_effect_type_args_array1 = CreateExtraEffectTypeArgsArray1Vector(builder, __extra_effect_type_args_array1);
    }
    var _buff_array2 = default(VectorOffset);
    if (_o.BuffArray2 != null) {
      var __buff_array2 = _o.BuffArray2.ToArray();
      _buff_array2 = CreateBuffArray2Vector(builder, __buff_array2);
    }
    var _extra_effect_type_array2 = default(VectorOffset);
    if (_o.ExtraEffectTypeArray2 != null) {
      var __extra_effect_type_array2 = new StringOffset[_o.ExtraEffectTypeArray2.Count];
      for (var _j = 0; _j < __extra_effect_type_array2.Length; ++_j) { __extra_effect_type_array2[_j] = builder.CreateString(_o.ExtraEffectTypeArray2[_j]); }
      _extra_effect_type_array2 = CreateExtraEffectTypeArray2Vector(builder, __extra_effect_type_array2);
    }
    var _extra_effect_type_args_array2 = default(VectorOffset);
    if (_o.ExtraEffectTypeArgsArray2 != null) {
      var __extra_effect_type_args_array2 = new StringOffset[_o.ExtraEffectTypeArgsArray2.Count];
      for (var _j = 0; _j < __extra_effect_type_args_array2.Length; ++_j) { __extra_effect_type_args_array2[_j] = builder.CreateString(_o.ExtraEffectTypeArgsArray2[_j]); }
      _extra_effect_type_args_array2 = CreateExtraEffectTypeArgsArray2Vector(builder, __extra_effect_type_args_array2);
    }
    return CreateRogueEffect(
      builder,
      _o.Id,
      _o.MainEffectType,
      _o.Condition,
      _condition_args,
      _o.Count,
      _o.RoomCount,
      _buff_array1,
      _extra_effect_type_array1,
      _extra_effect_type_args_array1,
      _buff_array2,
      _extra_effect_type_array2,
      _extra_effect_type_args_array2);
  }
}

public class RogueEffectT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("main_effect_type")]
  public int MainEffectType { get; set; }
  [Newtonsoft.Json.JsonProperty("condition")]
  public int Condition { get; set; }
  [Newtonsoft.Json.JsonProperty("condition_args")]
  public List<int> ConditionArgs { get; set; }
  [Newtonsoft.Json.JsonProperty("count")]
  public int Count { get; set; }
  [Newtonsoft.Json.JsonProperty("room_count")]
  public int RoomCount { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_array1")]
  public List<double> BuffArray1 { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_effect_type_array1")]
  public List<string> ExtraEffectTypeArray1 { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_effect_type_args_array1")]
  public List<string> ExtraEffectTypeArgsArray1 { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_array2")]
  public List<double> BuffArray2 { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_effect_type_array2")]
  public List<string> ExtraEffectTypeArray2 { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_effect_type_args_array2")]
  public List<string> ExtraEffectTypeArgsArray2 { get; set; }

  public RogueEffectT() {
    this.Id = 0;
    this.MainEffectType = 0;
    this.Condition = 0;
    this.ConditionArgs = null;
    this.Count = 0;
    this.RoomCount = 0;
    this.BuffArray1 = null;
    this.ExtraEffectTypeArray1 = null;
    this.ExtraEffectTypeArgsArray1 = null;
    this.BuffArray2 = null;
    this.ExtraEffectTypeArray2 = null;
    this.ExtraEffectTypeArgsArray2 = null;
  }
}


static public class RogueEffectVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MainEffectType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Condition*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*ConditionArgs*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 12 /*Count*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*RoomCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*BuffArray1*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*ExtraEffectTypeArray1*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 20 /*ExtraEffectTypeArgsArray1*/, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*BuffArray2*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 24 /*ExtraEffectTypeArray2*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 26 /*ExtraEffectTypeArgsArray2*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
