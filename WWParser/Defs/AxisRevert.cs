// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AxisRevert : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AxisRevert GetRootAsAxisRevert(ByteBuffer _bb) { return GetRootAsAxisRevert(_bb, new AxisRevert()); }
  public static AxisRevert GetRootAsAxisRevert(ByteBuffer _bb, AxisRevert obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AxisRevert __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RevertType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string AxisName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAxisNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAxisNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAxisNameArray() { return __p.__vector_as_array<byte>(8); }
  public WWParser.Defs.DicStringInt? RevertInfo(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.DicStringInt?)(new WWParser.Defs.DicStringInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RevertInfoLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.AxisRevert> CreateAxisRevert(FlatBufferBuilder builder,
      int id = 0,
      int revert_type = 0,
      StringOffset axis_nameOffset = default(StringOffset),
      VectorOffset revert_infoOffset = default(VectorOffset)) {
    builder.StartTable(4);
    AxisRevert.AddRevertInfo(builder, revert_infoOffset);
    AxisRevert.AddAxisName(builder, axis_nameOffset);
    AxisRevert.AddRevertType(builder, revert_type);
    AxisRevert.AddId(builder, id);
    return AxisRevert.EndAxisRevert(builder);
  }

  public static void StartAxisRevert(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddRevertType(FlatBufferBuilder builder, int revertType) { builder.AddInt(1, revertType, 0); }
  public static void AddAxisName(FlatBufferBuilder builder, StringOffset axisNameOffset) { builder.AddOffset(2, axisNameOffset.Value, 0); }
  public static void AddRevertInfo(FlatBufferBuilder builder, VectorOffset revertInfoOffset) { builder.AddOffset(3, revertInfoOffset.Value, 0); }
  public static VectorOffset CreateRevertInfoVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRevertInfoVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRevertInfoVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicStringInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRevertInfoVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicStringInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRevertInfoVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.AxisRevert> EndAxisRevert(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AxisRevert>(o);
  }
  public AxisRevertT UnPack() {
    var _o = new AxisRevertT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AxisRevertT _o) {
    _o.Id = this.Id;
    _o.RevertType = this.RevertType;
    _o.AxisName = this.AxisName;
    _o.RevertInfo = new List<WWParser.Defs.DicStringIntT>();
    for (var _j = 0; _j < this.RevertInfoLength; ++_j) {_o.RevertInfo.Add(this.RevertInfo(_j).HasValue ? this.RevertInfo(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.AxisRevert> Pack(FlatBufferBuilder builder, AxisRevertT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AxisRevert>);
    var _axis_name = _o.AxisName == null ? default(StringOffset) : builder.CreateString(_o.AxisName);
    var _revert_info = default(VectorOffset);
    if (_o.RevertInfo != null) {
      var __revert_info = new Offset<WWParser.Defs.DicStringInt>[_o.RevertInfo.Count];
      for (var _j = 0; _j < __revert_info.Length; ++_j) { __revert_info[_j] = WWParser.Defs.DicStringInt.Pack(builder, _o.RevertInfo[_j]); }
      _revert_info = CreateRevertInfoVector(builder, __revert_info);
    }
    return CreateAxisRevert(
      builder,
      _o.Id,
      _o.RevertType,
      _axis_name,
      _revert_info);
  }
}

public class AxisRevertT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("revert_type")]
  public int RevertType { get; set; }
  [Newtonsoft.Json.JsonProperty("axis_name")]
  public string AxisName { get; set; }
  [Newtonsoft.Json.JsonProperty("revert_info")]
  public List<WWParser.Defs.DicStringIntT> RevertInfo { get; set; }

  public AxisRevertT() {
    this.Id = 0;
    this.RevertType = 0;
    this.AxisName = null;
    this.RevertInfo = null;
  }
}


static public class AxisRevertVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*RevertType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*AxisName*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*RevertInfo*/, WWParser.Defs.DicStringIntVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
