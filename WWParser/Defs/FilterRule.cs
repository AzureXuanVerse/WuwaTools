// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FilterRule : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FilterRule GetRootAsFilterRule(ByteBuffer _bb) { return GetRootAsFilterRule(_bb, new FilterRule()); }
  public static FilterRule GetRootAsFilterRule(ByteBuffer _bb, FilterRule obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FilterRule __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FilterType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(8); }
  public int IdList(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int IdListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetIdListBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetIdListBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetIdListArray() { return __p.__vector_as_array<int>(10); }
  public bool NeedChangeColor { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.FilterRule> CreateFilterRule(FlatBufferBuilder builder,
      int id = 0,
      int filter_type = 0,
      StringOffset titleOffset = default(StringOffset),
      VectorOffset id_listOffset = default(VectorOffset),
      bool need_change_color = false) {
    builder.StartTable(5);
    FilterRule.AddIdList(builder, id_listOffset);
    FilterRule.AddTitle(builder, titleOffset);
    FilterRule.AddFilterType(builder, filter_type);
    FilterRule.AddId(builder, id);
    FilterRule.AddNeedChangeColor(builder, need_change_color);
    return FilterRule.EndFilterRule(builder);
  }

  public static void StartFilterRule(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddFilterType(FlatBufferBuilder builder, int filterType) { builder.AddInt(1, filterType, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(2, titleOffset.Value, 0); }
  public static void AddIdList(FlatBufferBuilder builder, VectorOffset idListOffset) { builder.AddOffset(3, idListOffset.Value, 0); }
  public static VectorOffset CreateIdListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIdListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIdListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNeedChangeColor(FlatBufferBuilder builder, bool needChangeColor) { builder.AddBool(4, needChangeColor, false); }
  public static Offset<WWParser.Defs.FilterRule> EndFilterRule(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FilterRule>(o);
  }
  public FilterRuleT UnPack() {
    var _o = new FilterRuleT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FilterRuleT _o) {
    _o.Id = this.Id;
    _o.FilterType = this.FilterType;
    _o.Title = this.Title;
    _o.IdList = new List<int>();
    for (var _j = 0; _j < this.IdListLength; ++_j) {_o.IdList.Add(this.IdList(_j));}
    _o.NeedChangeColor = this.NeedChangeColor;
  }
  public static Offset<WWParser.Defs.FilterRule> Pack(FlatBufferBuilder builder, FilterRuleT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FilterRule>);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _id_list = default(VectorOffset);
    if (_o.IdList != null) {
      var __id_list = _o.IdList.ToArray();
      _id_list = CreateIdListVector(builder, __id_list);
    }
    return CreateFilterRule(
      builder,
      _o.Id,
      _o.FilterType,
      _title,
      _id_list,
      _o.NeedChangeColor);
  }
}

public class FilterRuleT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("filter_type")]
  public int FilterType { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("id_list")]
  public List<int> IdList { get; set; }
  [Newtonsoft.Json.JsonProperty("need_change_color")]
  public bool NeedChangeColor { get; set; }

  public FilterRuleT() {
    this.Id = 0;
    this.FilterType = 0;
    this.Title = null;
    this.IdList = null;
    this.NeedChangeColor = false;
  }
}


static public class FilterRuleVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*FilterType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Title*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*IdList*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 12 /*NeedChangeColor*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
