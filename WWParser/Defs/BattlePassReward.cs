// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BattlePassReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BattlePassReward GetRootAsBattlePassReward(ByteBuffer _bb) { return GetRootAsBattlePassReward(_bb, new BattlePassReward()); }
  public static BattlePassReward GetRootAsBattlePassReward(ByteBuffer _bb, BattlePassReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BattlePassReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int BattlePassId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? FreeReward(int j) { int o = __p.__offset(8); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FreeRewardLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntInt? PayReward(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PayRewardLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool IsMilestone { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsRemind { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.BattlePassReward> CreateBattlePassReward(FlatBufferBuilder builder,
      int battle_pass_id = 0,
      int level = 0,
      VectorOffset free_rewardOffset = default(VectorOffset),
      VectorOffset pay_rewardOffset = default(VectorOffset),
      bool is_milestone = false,
      bool is_remind = false) {
    builder.StartTable(6);
    BattlePassReward.AddPayReward(builder, pay_rewardOffset);
    BattlePassReward.AddFreeReward(builder, free_rewardOffset);
    BattlePassReward.AddLevel(builder, level);
    BattlePassReward.AddBattlePassId(builder, battle_pass_id);
    BattlePassReward.AddIsRemind(builder, is_remind);
    BattlePassReward.AddIsMilestone(builder, is_milestone);
    return BattlePassReward.EndBattlePassReward(builder);
  }

  public static void StartBattlePassReward(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddBattlePassId(FlatBufferBuilder builder, int battlePassId) { builder.AddInt(0, battlePassId, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(1, level, 0); }
  public static void AddFreeReward(FlatBufferBuilder builder, VectorOffset freeRewardOffset) { builder.AddOffset(2, freeRewardOffset.Value, 0); }
  public static VectorOffset CreateFreeRewardVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFreeRewardVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFreeRewardVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFreeRewardVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFreeRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPayReward(FlatBufferBuilder builder, VectorOffset payRewardOffset) { builder.AddOffset(3, payRewardOffset.Value, 0); }
  public static VectorOffset CreatePayRewardVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePayRewardVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePayRewardVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePayRewardVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPayRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsMilestone(FlatBufferBuilder builder, bool isMilestone) { builder.AddBool(4, isMilestone, false); }
  public static void AddIsRemind(FlatBufferBuilder builder, bool isRemind) { builder.AddBool(5, isRemind, false); }
  public static Offset<WWParser.Defs.BattlePassReward> EndBattlePassReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BattlePassReward>(o);
  }
  public BattlePassRewardT UnPack() {
    var _o = new BattlePassRewardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BattlePassRewardT _o) {
    _o.BattlePassId = this.BattlePassId;
    _o.Level = this.Level;
    _o.FreeReward = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.FreeRewardLength; ++_j) {_o.FreeReward.Add(this.FreeReward(_j).HasValue ? this.FreeReward(_j).Value.UnPack() : null);}
    _o.PayReward = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.PayRewardLength; ++_j) {_o.PayReward.Add(this.PayReward(_j).HasValue ? this.PayReward(_j).Value.UnPack() : null);}
    _o.IsMilestone = this.IsMilestone;
    _o.IsRemind = this.IsRemind;
  }
  public static Offset<WWParser.Defs.BattlePassReward> Pack(FlatBufferBuilder builder, BattlePassRewardT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BattlePassReward>);
    var _free_reward = default(VectorOffset);
    if (_o.FreeReward != null) {
      var __free_reward = new Offset<WWParser.Defs.DicIntInt>[_o.FreeReward.Count];
      for (var _j = 0; _j < __free_reward.Length; ++_j) { __free_reward[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.FreeReward[_j]); }
      _free_reward = CreateFreeRewardVector(builder, __free_reward);
    }
    var _pay_reward = default(VectorOffset);
    if (_o.PayReward != null) {
      var __pay_reward = new Offset<WWParser.Defs.DicIntInt>[_o.PayReward.Count];
      for (var _j = 0; _j < __pay_reward.Length; ++_j) { __pay_reward[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.PayReward[_j]); }
      _pay_reward = CreatePayRewardVector(builder, __pay_reward);
    }
    return CreateBattlePassReward(
      builder,
      _o.BattlePassId,
      _o.Level,
      _free_reward,
      _pay_reward,
      _o.IsMilestone,
      _o.IsRemind);
  }
}

public class BattlePassRewardT
{
  [Newtonsoft.Json.JsonProperty("battle_pass_id")]
  public int BattlePassId { get; set; }
  [Newtonsoft.Json.JsonProperty("level")]
  public int Level { get; set; }
  [Newtonsoft.Json.JsonProperty("free_reward")]
  public List<WWParser.Defs.DicIntIntT> FreeReward { get; set; }
  [Newtonsoft.Json.JsonProperty("pay_reward")]
  public List<WWParser.Defs.DicIntIntT> PayReward { get; set; }
  [Newtonsoft.Json.JsonProperty("is_milestone")]
  public bool IsMilestone { get; set; }
  [Newtonsoft.Json.JsonProperty("is_remind")]
  public bool IsRemind { get; set; }

  public BattlePassRewardT() {
    this.BattlePassId = 0;
    this.Level = 0;
    this.FreeReward = null;
    this.PayReward = null;
    this.IsMilestone = false;
    this.IsRemind = false;
  }
}


static public class BattlePassRewardVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*BattlePassId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*FreeReward*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*PayReward*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 12 /*IsMilestone*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*IsRemind*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
