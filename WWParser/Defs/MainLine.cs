// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MainLine : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MainLine GetRootAsMainLine(ByteBuffer _bb) { return GetRootAsMainLine(_bb, new MainLine()); }
  public static MainLine GetRootAsMainLine(ByteBuffer _bb, MainLine obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MainLine __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TaskId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PrevTaskId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Icon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(10); }
  public string UnlockTip { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnlockTipBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetUnlockTipBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetUnlockTipArray() { return __p.__vector_as_array<byte>(12); }
  public string TaskName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTaskNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTaskNameArray() { return __p.__vector_as_array<byte>(14); }
  public int TaskType { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.MainLine> CreateMainLine(FlatBufferBuilder builder,
      int id = 0,
      int task_id = 0,
      int prev_task_id = 0,
      StringOffset iconOffset = default(StringOffset),
      StringOffset unlock_tipOffset = default(StringOffset),
      StringOffset task_nameOffset = default(StringOffset),
      int task_type = 0) {
    builder.StartTable(7);
    MainLine.AddTaskType(builder, task_type);
    MainLine.AddTaskName(builder, task_nameOffset);
    MainLine.AddUnlockTip(builder, unlock_tipOffset);
    MainLine.AddIcon(builder, iconOffset);
    MainLine.AddPrevTaskId(builder, prev_task_id);
    MainLine.AddTaskId(builder, task_id);
    MainLine.AddId(builder, id);
    return MainLine.EndMainLine(builder);
  }

  public static void StartMainLine(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTaskId(FlatBufferBuilder builder, int taskId) { builder.AddInt(1, taskId, 0); }
  public static void AddPrevTaskId(FlatBufferBuilder builder, int prevTaskId) { builder.AddInt(2, prevTaskId, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(3, iconOffset.Value, 0); }
  public static void AddUnlockTip(FlatBufferBuilder builder, StringOffset unlockTipOffset) { builder.AddOffset(4, unlockTipOffset.Value, 0); }
  public static void AddTaskName(FlatBufferBuilder builder, StringOffset taskNameOffset) { builder.AddOffset(5, taskNameOffset.Value, 0); }
  public static void AddTaskType(FlatBufferBuilder builder, int taskType) { builder.AddInt(6, taskType, 0); }
  public static Offset<WWParser.Defs.MainLine> EndMainLine(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MainLine>(o);
  }
  public MainLineT UnPack() {
    var _o = new MainLineT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MainLineT _o) {
    _o.Id = this.Id;
    _o.TaskId = this.TaskId;
    _o.PrevTaskId = this.PrevTaskId;
    _o.Icon = this.Icon;
    _o.UnlockTip = this.UnlockTip;
    _o.TaskName = this.TaskName;
    _o.TaskType = this.TaskType;
  }
  public static Offset<WWParser.Defs.MainLine> Pack(FlatBufferBuilder builder, MainLineT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MainLine>);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _unlock_tip = _o.UnlockTip == null ? default(StringOffset) : builder.CreateString(_o.UnlockTip);
    var _task_name = _o.TaskName == null ? default(StringOffset) : builder.CreateString(_o.TaskName);
    return CreateMainLine(
      builder,
      _o.Id,
      _o.TaskId,
      _o.PrevTaskId,
      _icon,
      _unlock_tip,
      _task_name,
      _o.TaskType);
  }
}

public class MainLineT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("task_id")]
  public int TaskId { get; set; }
  [Newtonsoft.Json.JsonProperty("prev_task_id")]
  public int PrevTaskId { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_tip")]
  public string UnlockTip { get; set; }
  [Newtonsoft.Json.JsonProperty("task_name")]
  public string TaskName { get; set; }
  [Newtonsoft.Json.JsonProperty("task_type")]
  public int TaskType { get; set; }

  public MainLineT() {
    this.Id = 0;
    this.TaskId = 0;
    this.PrevTaskId = 0;
    this.Icon = null;
    this.UnlockTip = null;
    this.TaskName = null;
    this.TaskType = 0;
  }
}


static public class MainLineVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*TaskId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*PrevTaskId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 12 /*UnlockTip*/, false)
      && verifier.VerifyString(tablePos, 14 /*TaskName*/, false)
      && verifier.VerifyField(tablePos, 16 /*TaskType*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
