// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Dice : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Dice GetRootAsDice(ByteBuffer _bb) { return GetRootAsDice(_bb, new Dice()); }
  public static Dice GetRootAsDice(ByteBuffer _bb, Dice obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Dice __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Icon { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(6); }
  public int Num { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string DicePointOneIcon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDicePointOneIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDicePointOneIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDicePointOneIconArray() { return __p.__vector_as_array<byte>(10); }
  public string DicePointTwoIcon { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDicePointTwoIconBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDicePointTwoIconBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDicePointTwoIconArray() { return __p.__vector_as_array<byte>(12); }
  public string DicePointThreeIcon { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDicePointThreeIconBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetDicePointThreeIconBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDicePointThreeIconArray() { return __p.__vector_as_array<byte>(14); }
  public string DiceBackgroundIcon { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDiceBackgroundIconBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetDiceBackgroundIconBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetDiceBackgroundIconArray() { return __p.__vector_as_array<byte>(16); }
  public string RollDiceBackgroundIcon { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRollDiceBackgroundIconBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetRollDiceBackgroundIconBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetRollDiceBackgroundIconArray() { return __p.__vector_as_array<byte>(18); }
  public string DiceColor { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDiceColorBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetDiceColorBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetDiceColorArray() { return __p.__vector_as_array<byte>(20); }
  public string DiceNumColor { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDiceNumColorBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetDiceNumColorBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDiceNumColorArray() { return __p.__vector_as_array<byte>(22); }
  public string DiceHighLightColor { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDiceHighLightColorBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetDiceHighLightColorBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetDiceHighLightColorArray() { return __p.__vector_as_array<byte>(24); }
  public int FacesNum { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.Dice> CreateDice(FlatBufferBuilder builder,
      int id = 0,
      StringOffset iconOffset = default(StringOffset),
      int num = 0,
      StringOffset dice_point_one_iconOffset = default(StringOffset),
      StringOffset dice_point_two_iconOffset = default(StringOffset),
      StringOffset dice_point_three_iconOffset = default(StringOffset),
      StringOffset dice_background_iconOffset = default(StringOffset),
      StringOffset roll_dice_background_iconOffset = default(StringOffset),
      StringOffset dice_colorOffset = default(StringOffset),
      StringOffset dice_num_colorOffset = default(StringOffset),
      StringOffset dice_high_light_colorOffset = default(StringOffset),
      int faces_num = 0) {
    builder.StartTable(12);
    Dice.AddFacesNum(builder, faces_num);
    Dice.AddDiceHighLightColor(builder, dice_high_light_colorOffset);
    Dice.AddDiceNumColor(builder, dice_num_colorOffset);
    Dice.AddDiceColor(builder, dice_colorOffset);
    Dice.AddRollDiceBackgroundIcon(builder, roll_dice_background_iconOffset);
    Dice.AddDiceBackgroundIcon(builder, dice_background_iconOffset);
    Dice.AddDicePointThreeIcon(builder, dice_point_three_iconOffset);
    Dice.AddDicePointTwoIcon(builder, dice_point_two_iconOffset);
    Dice.AddDicePointOneIcon(builder, dice_point_one_iconOffset);
    Dice.AddNum(builder, num);
    Dice.AddIcon(builder, iconOffset);
    Dice.AddId(builder, id);
    return Dice.EndDice(builder);
  }

  public static void StartDice(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(1, iconOffset.Value, 0); }
  public static void AddNum(FlatBufferBuilder builder, int num) { builder.AddInt(2, num, 0); }
  public static void AddDicePointOneIcon(FlatBufferBuilder builder, StringOffset dicePointOneIconOffset) { builder.AddOffset(3, dicePointOneIconOffset.Value, 0); }
  public static void AddDicePointTwoIcon(FlatBufferBuilder builder, StringOffset dicePointTwoIconOffset) { builder.AddOffset(4, dicePointTwoIconOffset.Value, 0); }
  public static void AddDicePointThreeIcon(FlatBufferBuilder builder, StringOffset dicePointThreeIconOffset) { builder.AddOffset(5, dicePointThreeIconOffset.Value, 0); }
  public static void AddDiceBackgroundIcon(FlatBufferBuilder builder, StringOffset diceBackgroundIconOffset) { builder.AddOffset(6, diceBackgroundIconOffset.Value, 0); }
  public static void AddRollDiceBackgroundIcon(FlatBufferBuilder builder, StringOffset rollDiceBackgroundIconOffset) { builder.AddOffset(7, rollDiceBackgroundIconOffset.Value, 0); }
  public static void AddDiceColor(FlatBufferBuilder builder, StringOffset diceColorOffset) { builder.AddOffset(8, diceColorOffset.Value, 0); }
  public static void AddDiceNumColor(FlatBufferBuilder builder, StringOffset diceNumColorOffset) { builder.AddOffset(9, diceNumColorOffset.Value, 0); }
  public static void AddDiceHighLightColor(FlatBufferBuilder builder, StringOffset diceHighLightColorOffset) { builder.AddOffset(10, diceHighLightColorOffset.Value, 0); }
  public static void AddFacesNum(FlatBufferBuilder builder, int facesNum) { builder.AddInt(11, facesNum, 0); }
  public static Offset<WWParser.Defs.Dice> EndDice(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Dice>(o);
  }
  public DiceT UnPack() {
    var _o = new DiceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DiceT _o) {
    _o.Id = this.Id;
    _o.Icon = this.Icon;
    _o.Num = this.Num;
    _o.DicePointOneIcon = this.DicePointOneIcon;
    _o.DicePointTwoIcon = this.DicePointTwoIcon;
    _o.DicePointThreeIcon = this.DicePointThreeIcon;
    _o.DiceBackgroundIcon = this.DiceBackgroundIcon;
    _o.RollDiceBackgroundIcon = this.RollDiceBackgroundIcon;
    _o.DiceColor = this.DiceColor;
    _o.DiceNumColor = this.DiceNumColor;
    _o.DiceHighLightColor = this.DiceHighLightColor;
    _o.FacesNum = this.FacesNum;
  }
  public static Offset<WWParser.Defs.Dice> Pack(FlatBufferBuilder builder, DiceT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Dice>);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _dice_point_one_icon = _o.DicePointOneIcon == null ? default(StringOffset) : builder.CreateString(_o.DicePointOneIcon);
    var _dice_point_two_icon = _o.DicePointTwoIcon == null ? default(StringOffset) : builder.CreateString(_o.DicePointTwoIcon);
    var _dice_point_three_icon = _o.DicePointThreeIcon == null ? default(StringOffset) : builder.CreateString(_o.DicePointThreeIcon);
    var _dice_background_icon = _o.DiceBackgroundIcon == null ? default(StringOffset) : builder.CreateString(_o.DiceBackgroundIcon);
    var _roll_dice_background_icon = _o.RollDiceBackgroundIcon == null ? default(StringOffset) : builder.CreateString(_o.RollDiceBackgroundIcon);
    var _dice_color = _o.DiceColor == null ? default(StringOffset) : builder.CreateString(_o.DiceColor);
    var _dice_num_color = _o.DiceNumColor == null ? default(StringOffset) : builder.CreateString(_o.DiceNumColor);
    var _dice_high_light_color = _o.DiceHighLightColor == null ? default(StringOffset) : builder.CreateString(_o.DiceHighLightColor);
    return CreateDice(
      builder,
      _o.Id,
      _icon,
      _o.Num,
      _dice_point_one_icon,
      _dice_point_two_icon,
      _dice_point_three_icon,
      _dice_background_icon,
      _roll_dice_background_icon,
      _dice_color,
      _dice_num_color,
      _dice_high_light_color,
      _o.FacesNum);
  }
}

public class DiceT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("num")]
  public int Num { get; set; }
  [Newtonsoft.Json.JsonProperty("dice_point_one_icon")]
  public string DicePointOneIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("dice_point_two_icon")]
  public string DicePointTwoIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("dice_point_three_icon")]
  public string DicePointThreeIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("dice_background_icon")]
  public string DiceBackgroundIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("roll_dice_background_icon")]
  public string RollDiceBackgroundIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("dice_color")]
  public string DiceColor { get; set; }
  [Newtonsoft.Json.JsonProperty("dice_num_color")]
  public string DiceNumColor { get; set; }
  [Newtonsoft.Json.JsonProperty("dice_high_light_color")]
  public string DiceHighLightColor { get; set; }
  [Newtonsoft.Json.JsonProperty("faces_num")]
  public int FacesNum { get; set; }

  public DiceT() {
    this.Id = 0;
    this.Icon = null;
    this.Num = 0;
    this.DicePointOneIcon = null;
    this.DicePointTwoIcon = null;
    this.DicePointThreeIcon = null;
    this.DiceBackgroundIcon = null;
    this.RollDiceBackgroundIcon = null;
    this.DiceColor = null;
    this.DiceNumColor = null;
    this.DiceHighLightColor = null;
    this.FacesNum = 0;
  }
}


static public class DiceVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Icon*/, false)
      && verifier.VerifyField(tablePos, 8 /*Num*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*DicePointOneIcon*/, false)
      && verifier.VerifyString(tablePos, 12 /*DicePointTwoIcon*/, false)
      && verifier.VerifyString(tablePos, 14 /*DicePointThreeIcon*/, false)
      && verifier.VerifyString(tablePos, 16 /*DiceBackgroundIcon*/, false)
      && verifier.VerifyString(tablePos, 18 /*RollDiceBackgroundIcon*/, false)
      && verifier.VerifyString(tablePos, 20 /*DiceColor*/, false)
      && verifier.VerifyString(tablePos, 22 /*DiceNumColor*/, false)
      && verifier.VerifyString(tablePos, 24 /*DiceHighLightColor*/, false)
      && verifier.VerifyField(tablePos, 26 /*FacesNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
