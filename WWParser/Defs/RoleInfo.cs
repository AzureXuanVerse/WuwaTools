// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RoleInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RoleInfo GetRootAsRoleInfo(ByteBuffer _bb) { return GetRootAsRoleInfo(_bb, new RoleInfo()); }
  public static RoleInfo GetRootAsRoleInfo(ByteBuffer _bb, RoleInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoleInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QualityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RoleType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsTrial { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Name { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(12); }
  public string NickName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNickNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNickNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNickNameArray() { return __p.__vector_as_array<byte>(14); }
  public string Introduction { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIntroductionBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIntroductionBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIntroductionArray() { return __p.__vector_as_array<byte>(16); }
  public int Tag(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TagLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTagBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetTagBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetTagArray() { return __p.__vector_as_array<int>(18); }
  public int ParentId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Priority { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PropertyId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShowProperty(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ShowPropertyLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetShowPropertyBytes() { return __p.__vector_as_span<int>(26, 4); }
#else
  public ArraySegment<byte>? GetShowPropertyBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public int[] GetShowPropertyArray() { return __p.__vector_as_array<int>(26); }
  public int ElementId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkinId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string RoleHeadIconCircle { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoleHeadIconCircleBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetRoleHeadIconCircleBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetRoleHeadIconCircleArray() { return __p.__vector_as_array<byte>(32); }
  public string RoleHeadIconLarge { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoleHeadIconLargeBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetRoleHeadIconLargeBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetRoleHeadIconLargeArray() { return __p.__vector_as_array<byte>(34); }
  public string RoleHeadIconBig { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoleHeadIconBigBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetRoleHeadIconBigBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetRoleHeadIconBigArray() { return __p.__vector_as_array<byte>(36); }
  public string Card { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCardBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetCardBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetCardArray() { return __p.__vector_as_array<byte>(38); }
  public string RoleHeadIcon { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoleHeadIconBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetRoleHeadIconBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetRoleHeadIconArray() { return __p.__vector_as_array<byte>(40); }
  public string FormationRoleCard { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFormationRoleCardBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetFormationRoleCardBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetFormationRoleCardArray() { return __p.__vector_as_array<byte>(42); }
  public string RoleStand { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoleStandBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetRoleStandBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetRoleStandArray() { return __p.__vector_as_array<byte>(44); }
  public string RolePortrait { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRolePortraitBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetRolePortraitBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetRolePortraitArray() { return __p.__vector_as_array<byte>(46); }
  public WWParser.Defs.DicIntInt? SpilloverItem(int j) { int o = __p.__offset(48); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SpilloverItemLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int MeshId { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UiMeshId { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string RoleBody { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoleBodyBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetRoleBodyBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetRoleBodyArray() { return __p.__vector_as_array<byte>(54); }
  public int BreachModel { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpecialEnergyBarId { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string CameraConfig { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCameraConfigBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetCameraConfigBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetCameraConfigArray() { return __p.__vector_as_array<byte>(60); }
  public float CameraFloatHeight { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int EntityProperty { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxLevel { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LevelConsumeId { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BreachId { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillId { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillTreeGroupId { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ResonanceId { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ResonantChainGroupId { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsShow { get { int o = __p.__offset(80); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public WWParser.Defs.DicIntInt? ExchangeConsume(int j) { int o = __p.__offset(82); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ExchangeConsumeLength { get { int o = __p.__offset(82); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int InitWeaponItemId { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WeaponType { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SkillDaPath { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillDaPathBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetSkillDaPathBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetSkillDaPathArray() { return __p.__vector_as_array<byte>(88); }
  public string SkillLockDaPath { get { int o = __p.__offset(90); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillLockDaPathBytes() { return __p.__vector_as_span<byte>(90, 1); }
#else
  public ArraySegment<byte>? GetSkillLockDaPathBytes() { return __p.__vector_as_arraysegment(90); }
#endif
  public byte[] GetSkillLockDaPathArray() { return __p.__vector_as_array<byte>(90); }
  public string UiScenePerformanceAbp { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUiScenePerformanceAbpBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetUiScenePerformanceAbpBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetUiScenePerformanceAbpArray() { return __p.__vector_as_array<byte>(92); }
  public int LockOnDefaultId { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LockOnLookOnId { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SkillEffectDa { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillEffectDaBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetSkillEffectDaBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetSkillEffectDaArray() { return __p.__vector_as_array<byte>(98); }
  public string FootStepState { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFootStepStateBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetFootStepStateBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetFootStepStateArray() { return __p.__vector_as_array<byte>(100); }
  public int PartyId { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string AttributesDescription { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributesDescriptionBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetAttributesDescriptionBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetAttributesDescriptionArray() { return __p.__vector_as_array<byte>(104); }
  public string Icon { get { int o = __p.__offset(106); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(106, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(106); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(106); }
  public int ItemQualityId { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ObtainedShowDescription { get { int o = __p.__offset(110); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObtainedShowDescriptionBytes() { return __p.__vector_as_span<byte>(110, 1); }
#else
  public ArraySegment<byte>? GetObtainedShowDescriptionBytes() { return __p.__vector_as_arraysegment(110); }
#endif
  public byte[] GetObtainedShowDescriptionArray() { return __p.__vector_as_array<byte>(110); }
  public int NumLimit { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ShowInBag { get { int o = __p.__offset(114); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float WeaponScale(int j) { int o = __p.__offset(116); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int WeaponScaleLength { get { int o = __p.__offset(116); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetWeaponScaleBytes() { return __p.__vector_as_span<float>(116, 4); }
#else
  public ArraySegment<byte>? GetWeaponScaleBytes() { return __p.__vector_as_arraysegment(116); }
#endif
  public float[] GetWeaponScaleArray() { return __p.__vector_as_array<float>(116); }
  public bool Intervene { get { int o = __p.__offset(118); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string CharacterVoice { get { int o = __p.__offset(120); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharacterVoiceBytes() { return __p.__vector_as_span<byte>(120, 1); }
#else
  public ArraySegment<byte>? GetCharacterVoiceBytes() { return __p.__vector_as_arraysegment(120); }
#endif
  public byte[] GetCharacterVoiceArray() { return __p.__vector_as_array<byte>(120); }
  public int TrialRole { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsAim { get { int o = __p.__offset(124); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int RoleGuide { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RedDotDisableRule { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SkinDamage(int j) { int o = __p.__offset(130); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SkinDamageLength { get { int o = __p.__offset(130); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool HideHuLu { get { int o = __p.__offset(132); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.RoleInfo> CreateRoleInfo(FlatBufferBuilder builder,
      int id = 0,
      int quality_id = 0,
      int role_type = 0,
      bool is_trial = false,
      StringOffset nameOffset = default(StringOffset),
      StringOffset nick_nameOffset = default(StringOffset),
      StringOffset introductionOffset = default(StringOffset),
      VectorOffset tagOffset = default(VectorOffset),
      int parent_id = 0,
      int priority = 0,
      int property_id = 0,
      VectorOffset show_propertyOffset = default(VectorOffset),
      int element_id = 0,
      int skin_id = 0,
      StringOffset role_head_icon_circleOffset = default(StringOffset),
      StringOffset role_head_icon_largeOffset = default(StringOffset),
      StringOffset role_head_icon_bigOffset = default(StringOffset),
      StringOffset cardOffset = default(StringOffset),
      StringOffset role_head_iconOffset = default(StringOffset),
      StringOffset formation_role_cardOffset = default(StringOffset),
      StringOffset role_standOffset = default(StringOffset),
      StringOffset role_portraitOffset = default(StringOffset),
      VectorOffset spillover_itemOffset = default(VectorOffset),
      int mesh_id = 0,
      int ui_mesh_id = 0,
      StringOffset role_bodyOffset = default(StringOffset),
      int breach_model = 0,
      int special_energy_bar_id = 0,
      StringOffset camera_configOffset = default(StringOffset),
      float camera_float_height = 0.0f,
      int entity_property = 0,
      int max_level = 0,
      int level_consume_id = 0,
      int breach_id = 0,
      int skill_id = 0,
      int skill_tree_group_id = 0,
      int resonance_id = 0,
      int resonant_chain_group_id = 0,
      bool is_show = false,
      VectorOffset exchange_consumeOffset = default(VectorOffset),
      int init_weapon_item_id = 0,
      int weapon_type = 0,
      StringOffset skill_da_pathOffset = default(StringOffset),
      StringOffset skill_lock_da_pathOffset = default(StringOffset),
      StringOffset ui_scene_performance_abpOffset = default(StringOffset),
      int lock_on_default_id = 0,
      int lock_on_look_on_id = 0,
      StringOffset skill_effect_daOffset = default(StringOffset),
      StringOffset foot_step_stateOffset = default(StringOffset),
      int party_id = 0,
      StringOffset attributes_descriptionOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      int item_quality_id = 0,
      StringOffset obtained_show_descriptionOffset = default(StringOffset),
      int num_limit = 0,
      bool show_in_bag = false,
      VectorOffset weapon_scaleOffset = default(VectorOffset),
      bool intervene = false,
      StringOffset character_voiceOffset = default(StringOffset),
      int trial_role = 0,
      bool is_aim = false,
      int role_guide = 0,
      int red_dot_disable_rule = 0,
      VectorOffset skin_damageOffset = default(VectorOffset),
      bool hide_hu_lu = false) {
    builder.StartTable(65);
    RoleInfo.AddSkinDamage(builder, skin_damageOffset);
    RoleInfo.AddRedDotDisableRule(builder, red_dot_disable_rule);
    RoleInfo.AddRoleGuide(builder, role_guide);
    RoleInfo.AddTrialRole(builder, trial_role);
    RoleInfo.AddCharacterVoice(builder, character_voiceOffset);
    RoleInfo.AddWeaponScale(builder, weapon_scaleOffset);
    RoleInfo.AddNumLimit(builder, num_limit);
    RoleInfo.AddObtainedShowDescription(builder, obtained_show_descriptionOffset);
    RoleInfo.AddItemQualityId(builder, item_quality_id);
    RoleInfo.AddIcon(builder, iconOffset);
    RoleInfo.AddAttributesDescription(builder, attributes_descriptionOffset);
    RoleInfo.AddPartyId(builder, party_id);
    RoleInfo.AddFootStepState(builder, foot_step_stateOffset);
    RoleInfo.AddSkillEffectDa(builder, skill_effect_daOffset);
    RoleInfo.AddLockOnLookOnId(builder, lock_on_look_on_id);
    RoleInfo.AddLockOnDefaultId(builder, lock_on_default_id);
    RoleInfo.AddUiScenePerformanceAbp(builder, ui_scene_performance_abpOffset);
    RoleInfo.AddSkillLockDaPath(builder, skill_lock_da_pathOffset);
    RoleInfo.AddSkillDaPath(builder, skill_da_pathOffset);
    RoleInfo.AddWeaponType(builder, weapon_type);
    RoleInfo.AddInitWeaponItemId(builder, init_weapon_item_id);
    RoleInfo.AddExchangeConsume(builder, exchange_consumeOffset);
    RoleInfo.AddResonantChainGroupId(builder, resonant_chain_group_id);
    RoleInfo.AddResonanceId(builder, resonance_id);
    RoleInfo.AddSkillTreeGroupId(builder, skill_tree_group_id);
    RoleInfo.AddSkillId(builder, skill_id);
    RoleInfo.AddBreachId(builder, breach_id);
    RoleInfo.AddLevelConsumeId(builder, level_consume_id);
    RoleInfo.AddMaxLevel(builder, max_level);
    RoleInfo.AddEntityProperty(builder, entity_property);
    RoleInfo.AddCameraFloatHeight(builder, camera_float_height);
    RoleInfo.AddCameraConfig(builder, camera_configOffset);
    RoleInfo.AddSpecialEnergyBarId(builder, special_energy_bar_id);
    RoleInfo.AddBreachModel(builder, breach_model);
    RoleInfo.AddRoleBody(builder, role_bodyOffset);
    RoleInfo.AddUiMeshId(builder, ui_mesh_id);
    RoleInfo.AddMeshId(builder, mesh_id);
    RoleInfo.AddSpilloverItem(builder, spillover_itemOffset);
    RoleInfo.AddRolePortrait(builder, role_portraitOffset);
    RoleInfo.AddRoleStand(builder, role_standOffset);
    RoleInfo.AddFormationRoleCard(builder, formation_role_cardOffset);
    RoleInfo.AddRoleHeadIcon(builder, role_head_iconOffset);
    RoleInfo.AddCard(builder, cardOffset);
    RoleInfo.AddRoleHeadIconBig(builder, role_head_icon_bigOffset);
    RoleInfo.AddRoleHeadIconLarge(builder, role_head_icon_largeOffset);
    RoleInfo.AddRoleHeadIconCircle(builder, role_head_icon_circleOffset);
    RoleInfo.AddSkinId(builder, skin_id);
    RoleInfo.AddElementId(builder, element_id);
    RoleInfo.AddShowProperty(builder, show_propertyOffset);
    RoleInfo.AddPropertyId(builder, property_id);
    RoleInfo.AddPriority(builder, priority);
    RoleInfo.AddParentId(builder, parent_id);
    RoleInfo.AddTag(builder, tagOffset);
    RoleInfo.AddIntroduction(builder, introductionOffset);
    RoleInfo.AddNickName(builder, nick_nameOffset);
    RoleInfo.AddName(builder, nameOffset);
    RoleInfo.AddRoleType(builder, role_type);
    RoleInfo.AddQualityId(builder, quality_id);
    RoleInfo.AddId(builder, id);
    RoleInfo.AddHideHuLu(builder, hide_hu_lu);
    RoleInfo.AddIsAim(builder, is_aim);
    RoleInfo.AddIntervene(builder, intervene);
    RoleInfo.AddShowInBag(builder, show_in_bag);
    RoleInfo.AddIsShow(builder, is_show);
    RoleInfo.AddIsTrial(builder, is_trial);
    return RoleInfo.EndRoleInfo(builder);
  }

  public static void StartRoleInfo(FlatBufferBuilder builder) { builder.StartTable(65); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddQualityId(FlatBufferBuilder builder, int qualityId) { builder.AddInt(1, qualityId, 0); }
  public static void AddRoleType(FlatBufferBuilder builder, int roleType) { builder.AddInt(2, roleType, 0); }
  public static void AddIsTrial(FlatBufferBuilder builder, bool isTrial) { builder.AddBool(3, isTrial, false); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(4, nameOffset.Value, 0); }
  public static void AddNickName(FlatBufferBuilder builder, StringOffset nickNameOffset) { builder.AddOffset(5, nickNameOffset.Value, 0); }
  public static void AddIntroduction(FlatBufferBuilder builder, StringOffset introductionOffset) { builder.AddOffset(6, introductionOffset.Value, 0); }
  public static void AddTag(FlatBufferBuilder builder, VectorOffset tagOffset) { builder.AddOffset(7, tagOffset.Value, 0); }
  public static VectorOffset CreateTagVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTagVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddParentId(FlatBufferBuilder builder, int parentId) { builder.AddInt(8, parentId, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(9, priority, 0); }
  public static void AddPropertyId(FlatBufferBuilder builder, int propertyId) { builder.AddInt(10, propertyId, 0); }
  public static void AddShowProperty(FlatBufferBuilder builder, VectorOffset showPropertyOffset) { builder.AddOffset(11, showPropertyOffset.Value, 0); }
  public static VectorOffset CreateShowPropertyVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateShowPropertyVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowPropertyVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowPropertyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShowPropertyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddElementId(FlatBufferBuilder builder, int elementId) { builder.AddInt(12, elementId, 0); }
  public static void AddSkinId(FlatBufferBuilder builder, int skinId) { builder.AddInt(13, skinId, 0); }
  public static void AddRoleHeadIconCircle(FlatBufferBuilder builder, StringOffset roleHeadIconCircleOffset) { builder.AddOffset(14, roleHeadIconCircleOffset.Value, 0); }
  public static void AddRoleHeadIconLarge(FlatBufferBuilder builder, StringOffset roleHeadIconLargeOffset) { builder.AddOffset(15, roleHeadIconLargeOffset.Value, 0); }
  public static void AddRoleHeadIconBig(FlatBufferBuilder builder, StringOffset roleHeadIconBigOffset) { builder.AddOffset(16, roleHeadIconBigOffset.Value, 0); }
  public static void AddCard(FlatBufferBuilder builder, StringOffset cardOffset) { builder.AddOffset(17, cardOffset.Value, 0); }
  public static void AddRoleHeadIcon(FlatBufferBuilder builder, StringOffset roleHeadIconOffset) { builder.AddOffset(18, roleHeadIconOffset.Value, 0); }
  public static void AddFormationRoleCard(FlatBufferBuilder builder, StringOffset formationRoleCardOffset) { builder.AddOffset(19, formationRoleCardOffset.Value, 0); }
  public static void AddRoleStand(FlatBufferBuilder builder, StringOffset roleStandOffset) { builder.AddOffset(20, roleStandOffset.Value, 0); }
  public static void AddRolePortrait(FlatBufferBuilder builder, StringOffset rolePortraitOffset) { builder.AddOffset(21, rolePortraitOffset.Value, 0); }
  public static void AddSpilloverItem(FlatBufferBuilder builder, VectorOffset spilloverItemOffset) { builder.AddOffset(22, spilloverItemOffset.Value, 0); }
  public static VectorOffset CreateSpilloverItemVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSpilloverItemVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpilloverItemVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpilloverItemVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpilloverItemVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMeshId(FlatBufferBuilder builder, int meshId) { builder.AddInt(23, meshId, 0); }
  public static void AddUiMeshId(FlatBufferBuilder builder, int uiMeshId) { builder.AddInt(24, uiMeshId, 0); }
  public static void AddRoleBody(FlatBufferBuilder builder, StringOffset roleBodyOffset) { builder.AddOffset(25, roleBodyOffset.Value, 0); }
  public static void AddBreachModel(FlatBufferBuilder builder, int breachModel) { builder.AddInt(26, breachModel, 0); }
  public static void AddSpecialEnergyBarId(FlatBufferBuilder builder, int specialEnergyBarId) { builder.AddInt(27, specialEnergyBarId, 0); }
  public static void AddCameraConfig(FlatBufferBuilder builder, StringOffset cameraConfigOffset) { builder.AddOffset(28, cameraConfigOffset.Value, 0); }
  public static void AddCameraFloatHeight(FlatBufferBuilder builder, float cameraFloatHeight) { builder.AddFloat(29, cameraFloatHeight, 0.0f); }
  public static void AddEntityProperty(FlatBufferBuilder builder, int entityProperty) { builder.AddInt(30, entityProperty, 0); }
  public static void AddMaxLevel(FlatBufferBuilder builder, int maxLevel) { builder.AddInt(31, maxLevel, 0); }
  public static void AddLevelConsumeId(FlatBufferBuilder builder, int levelConsumeId) { builder.AddInt(32, levelConsumeId, 0); }
  public static void AddBreachId(FlatBufferBuilder builder, int breachId) { builder.AddInt(33, breachId, 0); }
  public static void AddSkillId(FlatBufferBuilder builder, int skillId) { builder.AddInt(34, skillId, 0); }
  public static void AddSkillTreeGroupId(FlatBufferBuilder builder, int skillTreeGroupId) { builder.AddInt(35, skillTreeGroupId, 0); }
  public static void AddResonanceId(FlatBufferBuilder builder, int resonanceId) { builder.AddInt(36, resonanceId, 0); }
  public static void AddResonantChainGroupId(FlatBufferBuilder builder, int resonantChainGroupId) { builder.AddInt(37, resonantChainGroupId, 0); }
  public static void AddIsShow(FlatBufferBuilder builder, bool isShow) { builder.AddBool(38, isShow, false); }
  public static void AddExchangeConsume(FlatBufferBuilder builder, VectorOffset exchangeConsumeOffset) { builder.AddOffset(39, exchangeConsumeOffset.Value, 0); }
  public static VectorOffset CreateExchangeConsumeVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExchangeConsumeVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExchangeConsumeVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExchangeConsumeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExchangeConsumeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInitWeaponItemId(FlatBufferBuilder builder, int initWeaponItemId) { builder.AddInt(40, initWeaponItemId, 0); }
  public static void AddWeaponType(FlatBufferBuilder builder, int weaponType) { builder.AddInt(41, weaponType, 0); }
  public static void AddSkillDaPath(FlatBufferBuilder builder, StringOffset skillDaPathOffset) { builder.AddOffset(42, skillDaPathOffset.Value, 0); }
  public static void AddSkillLockDaPath(FlatBufferBuilder builder, StringOffset skillLockDaPathOffset) { builder.AddOffset(43, skillLockDaPathOffset.Value, 0); }
  public static void AddUiScenePerformanceAbp(FlatBufferBuilder builder, StringOffset uiScenePerformanceAbpOffset) { builder.AddOffset(44, uiScenePerformanceAbpOffset.Value, 0); }
  public static void AddLockOnDefaultId(FlatBufferBuilder builder, int lockOnDefaultId) { builder.AddInt(45, lockOnDefaultId, 0); }
  public static void AddLockOnLookOnId(FlatBufferBuilder builder, int lockOnLookOnId) { builder.AddInt(46, lockOnLookOnId, 0); }
  public static void AddSkillEffectDa(FlatBufferBuilder builder, StringOffset skillEffectDaOffset) { builder.AddOffset(47, skillEffectDaOffset.Value, 0); }
  public static void AddFootStepState(FlatBufferBuilder builder, StringOffset footStepStateOffset) { builder.AddOffset(48, footStepStateOffset.Value, 0); }
  public static void AddPartyId(FlatBufferBuilder builder, int partyId) { builder.AddInt(49, partyId, 0); }
  public static void AddAttributesDescription(FlatBufferBuilder builder, StringOffset attributesDescriptionOffset) { builder.AddOffset(50, attributesDescriptionOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(51, iconOffset.Value, 0); }
  public static void AddItemQualityId(FlatBufferBuilder builder, int itemQualityId) { builder.AddInt(52, itemQualityId, 0); }
  public static void AddObtainedShowDescription(FlatBufferBuilder builder, StringOffset obtainedShowDescriptionOffset) { builder.AddOffset(53, obtainedShowDescriptionOffset.Value, 0); }
  public static void AddNumLimit(FlatBufferBuilder builder, int numLimit) { builder.AddInt(54, numLimit, 0); }
  public static void AddShowInBag(FlatBufferBuilder builder, bool showInBag) { builder.AddBool(55, showInBag, false); }
  public static void AddWeaponScale(FlatBufferBuilder builder, VectorOffset weaponScaleOffset) { builder.AddOffset(56, weaponScaleOffset.Value, 0); }
  public static VectorOffset CreateWeaponScaleVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateWeaponScaleVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponScaleVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponScaleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartWeaponScaleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIntervene(FlatBufferBuilder builder, bool intervene) { builder.AddBool(57, intervene, false); }
  public static void AddCharacterVoice(FlatBufferBuilder builder, StringOffset characterVoiceOffset) { builder.AddOffset(58, characterVoiceOffset.Value, 0); }
  public static void AddTrialRole(FlatBufferBuilder builder, int trialRole) { builder.AddInt(59, trialRole, 0); }
  public static void AddIsAim(FlatBufferBuilder builder, bool isAim) { builder.AddBool(60, isAim, false); }
  public static void AddRoleGuide(FlatBufferBuilder builder, int roleGuide) { builder.AddInt(61, roleGuide, 0); }
  public static void AddRedDotDisableRule(FlatBufferBuilder builder, int redDotDisableRule) { builder.AddInt(62, redDotDisableRule, 0); }
  public static void AddSkinDamage(FlatBufferBuilder builder, VectorOffset skinDamageOffset) { builder.AddOffset(63, skinDamageOffset.Value, 0); }
  public static VectorOffset CreateSkinDamageVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSkinDamageVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkinDamageVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkinDamageVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSkinDamageVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHideHuLu(FlatBufferBuilder builder, bool hideHuLu) { builder.AddBool(64, hideHuLu, false); }
  public static Offset<WWParser.Defs.RoleInfo> EndRoleInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RoleInfo>(o);
  }
  public RoleInfoT UnPack() {
    var _o = new RoleInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RoleInfoT _o) {
    _o.Id = this.Id;
    _o.QualityId = this.QualityId;
    _o.RoleType = this.RoleType;
    _o.IsTrial = this.IsTrial;
    _o.Name = this.Name;
    _o.NickName = this.NickName;
    _o.Introduction = this.Introduction;
    _o.Tag = new List<int>();
    for (var _j = 0; _j < this.TagLength; ++_j) {_o.Tag.Add(this.Tag(_j));}
    _o.ParentId = this.ParentId;
    _o.Priority = this.Priority;
    _o.PropertyId = this.PropertyId;
    _o.ShowProperty = new List<int>();
    for (var _j = 0; _j < this.ShowPropertyLength; ++_j) {_o.ShowProperty.Add(this.ShowProperty(_j));}
    _o.ElementId = this.ElementId;
    _o.SkinId = this.SkinId;
    _o.RoleHeadIconCircle = this.RoleHeadIconCircle;
    _o.RoleHeadIconLarge = this.RoleHeadIconLarge;
    _o.RoleHeadIconBig = this.RoleHeadIconBig;
    _o.Card = this.Card;
    _o.RoleHeadIcon = this.RoleHeadIcon;
    _o.FormationRoleCard = this.FormationRoleCard;
    _o.RoleStand = this.RoleStand;
    _o.RolePortrait = this.RolePortrait;
    _o.SpilloverItem = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.SpilloverItemLength; ++_j) {_o.SpilloverItem.Add(this.SpilloverItem(_j).HasValue ? this.SpilloverItem(_j).Value.UnPack() : null);}
    _o.MeshId = this.MeshId;
    _o.UiMeshId = this.UiMeshId;
    _o.RoleBody = this.RoleBody;
    _o.BreachModel = this.BreachModel;
    _o.SpecialEnergyBarId = this.SpecialEnergyBarId;
    _o.CameraConfig = this.CameraConfig;
    _o.CameraFloatHeight = this.CameraFloatHeight;
    _o.EntityProperty = this.EntityProperty;
    _o.MaxLevel = this.MaxLevel;
    _o.LevelConsumeId = this.LevelConsumeId;
    _o.BreachId = this.BreachId;
    _o.SkillId = this.SkillId;
    _o.SkillTreeGroupId = this.SkillTreeGroupId;
    _o.ResonanceId = this.ResonanceId;
    _o.ResonantChainGroupId = this.ResonantChainGroupId;
    _o.IsShow = this.IsShow;
    _o.ExchangeConsume = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.ExchangeConsumeLength; ++_j) {_o.ExchangeConsume.Add(this.ExchangeConsume(_j).HasValue ? this.ExchangeConsume(_j).Value.UnPack() : null);}
    _o.InitWeaponItemId = this.InitWeaponItemId;
    _o.WeaponType = this.WeaponType;
    _o.SkillDaPath = this.SkillDaPath;
    _o.SkillLockDaPath = this.SkillLockDaPath;
    _o.UiScenePerformanceAbp = this.UiScenePerformanceAbp;
    _o.LockOnDefaultId = this.LockOnDefaultId;
    _o.LockOnLookOnId = this.LockOnLookOnId;
    _o.SkillEffectDa = this.SkillEffectDa;
    _o.FootStepState = this.FootStepState;
    _o.PartyId = this.PartyId;
    _o.AttributesDescription = this.AttributesDescription;
    _o.Icon = this.Icon;
    _o.ItemQualityId = this.ItemQualityId;
    _o.ObtainedShowDescription = this.ObtainedShowDescription;
    _o.NumLimit = this.NumLimit;
    _o.ShowInBag = this.ShowInBag;
    _o.WeaponScale = new List<float>();
    for (var _j = 0; _j < this.WeaponScaleLength; ++_j) {_o.WeaponScale.Add(this.WeaponScale(_j));}
    _o.Intervene = this.Intervene;
    _o.CharacterVoice = this.CharacterVoice;
    _o.TrialRole = this.TrialRole;
    _o.IsAim = this.IsAim;
    _o.RoleGuide = this.RoleGuide;
    _o.RedDotDisableRule = this.RedDotDisableRule;
    _o.SkinDamage = new List<string>();
    for (var _j = 0; _j < this.SkinDamageLength; ++_j) {_o.SkinDamage.Add(this.SkinDamage(_j));}
    _o.HideHuLu = this.HideHuLu;
  }
  public static Offset<WWParser.Defs.RoleInfo> Pack(FlatBufferBuilder builder, RoleInfoT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RoleInfo>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _nick_name = _o.NickName == null ? default(StringOffset) : builder.CreateString(_o.NickName);
    var _introduction = _o.Introduction == null ? default(StringOffset) : builder.CreateString(_o.Introduction);
    var _tag = default(VectorOffset);
    if (_o.Tag != null) {
      var __tag = _o.Tag.ToArray();
      _tag = CreateTagVector(builder, __tag);
    }
    var _show_property = default(VectorOffset);
    if (_o.ShowProperty != null) {
      var __show_property = _o.ShowProperty.ToArray();
      _show_property = CreateShowPropertyVector(builder, __show_property);
    }
    var _role_head_icon_circle = _o.RoleHeadIconCircle == null ? default(StringOffset) : builder.CreateString(_o.RoleHeadIconCircle);
    var _role_head_icon_large = _o.RoleHeadIconLarge == null ? default(StringOffset) : builder.CreateString(_o.RoleHeadIconLarge);
    var _role_head_icon_big = _o.RoleHeadIconBig == null ? default(StringOffset) : builder.CreateString(_o.RoleHeadIconBig);
    var _card = _o.Card == null ? default(StringOffset) : builder.CreateString(_o.Card);
    var _role_head_icon = _o.RoleHeadIcon == null ? default(StringOffset) : builder.CreateString(_o.RoleHeadIcon);
    var _formation_role_card = _o.FormationRoleCard == null ? default(StringOffset) : builder.CreateString(_o.FormationRoleCard);
    var _role_stand = _o.RoleStand == null ? default(StringOffset) : builder.CreateString(_o.RoleStand);
    var _role_portrait = _o.RolePortrait == null ? default(StringOffset) : builder.CreateString(_o.RolePortrait);
    var _spillover_item = default(VectorOffset);
    if (_o.SpilloverItem != null) {
      var __spillover_item = new Offset<WWParser.Defs.DicIntInt>[_o.SpilloverItem.Count];
      for (var _j = 0; _j < __spillover_item.Length; ++_j) { __spillover_item[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.SpilloverItem[_j]); }
      _spillover_item = CreateSpilloverItemVector(builder, __spillover_item);
    }
    var _role_body = _o.RoleBody == null ? default(StringOffset) : builder.CreateString(_o.RoleBody);
    var _camera_config = _o.CameraConfig == null ? default(StringOffset) : builder.CreateString(_o.CameraConfig);
    var _exchange_consume = default(VectorOffset);
    if (_o.ExchangeConsume != null) {
      var __exchange_consume = new Offset<WWParser.Defs.DicIntInt>[_o.ExchangeConsume.Count];
      for (var _j = 0; _j < __exchange_consume.Length; ++_j) { __exchange_consume[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.ExchangeConsume[_j]); }
      _exchange_consume = CreateExchangeConsumeVector(builder, __exchange_consume);
    }
    var _skill_da_path = _o.SkillDaPath == null ? default(StringOffset) : builder.CreateString(_o.SkillDaPath);
    var _skill_lock_da_path = _o.SkillLockDaPath == null ? default(StringOffset) : builder.CreateString(_o.SkillLockDaPath);
    var _ui_scene_performance_abp = _o.UiScenePerformanceAbp == null ? default(StringOffset) : builder.CreateString(_o.UiScenePerformanceAbp);
    var _skill_effect_da = _o.SkillEffectDa == null ? default(StringOffset) : builder.CreateString(_o.SkillEffectDa);
    var _foot_step_state = _o.FootStepState == null ? default(StringOffset) : builder.CreateString(_o.FootStepState);
    var _attributes_description = _o.AttributesDescription == null ? default(StringOffset) : builder.CreateString(_o.AttributesDescription);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _obtained_show_description = _o.ObtainedShowDescription == null ? default(StringOffset) : builder.CreateString(_o.ObtainedShowDescription);
    var _weapon_scale = default(VectorOffset);
    if (_o.WeaponScale != null) {
      var __weapon_scale = _o.WeaponScale.ToArray();
      _weapon_scale = CreateWeaponScaleVector(builder, __weapon_scale);
    }
    var _character_voice = _o.CharacterVoice == null ? default(StringOffset) : builder.CreateString(_o.CharacterVoice);
    var _skin_damage = default(VectorOffset);
    if (_o.SkinDamage != null) {
      var __skin_damage = new StringOffset[_o.SkinDamage.Count];
      for (var _j = 0; _j < __skin_damage.Length; ++_j) { __skin_damage[_j] = builder.CreateString(_o.SkinDamage[_j]); }
      _skin_damage = CreateSkinDamageVector(builder, __skin_damage);
    }
    return CreateRoleInfo(
      builder,
      _o.Id,
      _o.QualityId,
      _o.RoleType,
      _o.IsTrial,
      _name,
      _nick_name,
      _introduction,
      _tag,
      _o.ParentId,
      _o.Priority,
      _o.PropertyId,
      _show_property,
      _o.ElementId,
      _o.SkinId,
      _role_head_icon_circle,
      _role_head_icon_large,
      _role_head_icon_big,
      _card,
      _role_head_icon,
      _formation_role_card,
      _role_stand,
      _role_portrait,
      _spillover_item,
      _o.MeshId,
      _o.UiMeshId,
      _role_body,
      _o.BreachModel,
      _o.SpecialEnergyBarId,
      _camera_config,
      _o.CameraFloatHeight,
      _o.EntityProperty,
      _o.MaxLevel,
      _o.LevelConsumeId,
      _o.BreachId,
      _o.SkillId,
      _o.SkillTreeGroupId,
      _o.ResonanceId,
      _o.ResonantChainGroupId,
      _o.IsShow,
      _exchange_consume,
      _o.InitWeaponItemId,
      _o.WeaponType,
      _skill_da_path,
      _skill_lock_da_path,
      _ui_scene_performance_abp,
      _o.LockOnDefaultId,
      _o.LockOnLookOnId,
      _skill_effect_da,
      _foot_step_state,
      _o.PartyId,
      _attributes_description,
      _icon,
      _o.ItemQualityId,
      _obtained_show_description,
      _o.NumLimit,
      _o.ShowInBag,
      _weapon_scale,
      _o.Intervene,
      _character_voice,
      _o.TrialRole,
      _o.IsAim,
      _o.RoleGuide,
      _o.RedDotDisableRule,
      _skin_damage,
      _o.HideHuLu);
  }
}

public class RoleInfoT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("quality_id")]
  public int QualityId { get; set; }
  [Newtonsoft.Json.JsonProperty("role_type")]
  public int RoleType { get; set; }
  [Newtonsoft.Json.JsonProperty("is_trial")]
  public bool IsTrial { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("nick_name")]
  public string NickName { get; set; }
  [Newtonsoft.Json.JsonProperty("introduction")]
  public string Introduction { get; set; }
  [Newtonsoft.Json.JsonProperty("tag")]
  public List<int> Tag { get; set; }
  [Newtonsoft.Json.JsonProperty("parent_id")]
  public int ParentId { get; set; }
  [Newtonsoft.Json.JsonProperty("priority")]
  public int Priority { get; set; }
  [Newtonsoft.Json.JsonProperty("property_id")]
  public int PropertyId { get; set; }
  [Newtonsoft.Json.JsonProperty("show_property")]
  public List<int> ShowProperty { get; set; }
  [Newtonsoft.Json.JsonProperty("element_id")]
  public int ElementId { get; set; }
  [Newtonsoft.Json.JsonProperty("skin_id")]
  public int SkinId { get; set; }
  [Newtonsoft.Json.JsonProperty("role_head_icon_circle")]
  public string RoleHeadIconCircle { get; set; }
  [Newtonsoft.Json.JsonProperty("role_head_icon_large")]
  public string RoleHeadIconLarge { get; set; }
  [Newtonsoft.Json.JsonProperty("role_head_icon_big")]
  public string RoleHeadIconBig { get; set; }
  [Newtonsoft.Json.JsonProperty("card")]
  public string Card { get; set; }
  [Newtonsoft.Json.JsonProperty("role_head_icon")]
  public string RoleHeadIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("formation_role_card")]
  public string FormationRoleCard { get; set; }
  [Newtonsoft.Json.JsonProperty("role_stand")]
  public string RoleStand { get; set; }
  [Newtonsoft.Json.JsonProperty("role_portrait")]
  public string RolePortrait { get; set; }
  [Newtonsoft.Json.JsonProperty("spillover_item")]
  public List<WWParser.Defs.DicIntIntT> SpilloverItem { get; set; }
  [Newtonsoft.Json.JsonProperty("mesh_id")]
  public int MeshId { get; set; }
  [Newtonsoft.Json.JsonProperty("ui_mesh_id")]
  public int UiMeshId { get; set; }
  [Newtonsoft.Json.JsonProperty("role_body")]
  public string RoleBody { get; set; }
  [Newtonsoft.Json.JsonProperty("breach_model")]
  public int BreachModel { get; set; }
  [Newtonsoft.Json.JsonProperty("special_energy_bar_id")]
  public int SpecialEnergyBarId { get; set; }
  [Newtonsoft.Json.JsonProperty("camera_config")]
  public string CameraConfig { get; set; }
  [Newtonsoft.Json.JsonProperty("camera_float_height")]
  public float CameraFloatHeight { get; set; }
  [Newtonsoft.Json.JsonProperty("entity_property")]
  public int EntityProperty { get; set; }
  [Newtonsoft.Json.JsonProperty("max_level")]
  public int MaxLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("level_consume_id")]
  public int LevelConsumeId { get; set; }
  [Newtonsoft.Json.JsonProperty("breach_id")]
  public int BreachId { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_id")]
  public int SkillId { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_tree_group_id")]
  public int SkillTreeGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("resonance_id")]
  public int ResonanceId { get; set; }
  [Newtonsoft.Json.JsonProperty("resonant_chain_group_id")]
  public int ResonantChainGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("is_show")]
  public bool IsShow { get; set; }
  [Newtonsoft.Json.JsonProperty("exchange_consume")]
  public List<WWParser.Defs.DicIntIntT> ExchangeConsume { get; set; }
  [Newtonsoft.Json.JsonProperty("init_weapon_item_id")]
  public int InitWeaponItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("weapon_type")]
  public int WeaponType { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_da_path")]
  public string SkillDaPath { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_lock_da_path")]
  public string SkillLockDaPath { get; set; }
  [Newtonsoft.Json.JsonProperty("ui_scene_performance_abp")]
  public string UiScenePerformanceAbp { get; set; }
  [Newtonsoft.Json.JsonProperty("lock_on_default_id")]
  public int LockOnDefaultId { get; set; }
  [Newtonsoft.Json.JsonProperty("lock_on_look_on_id")]
  public int LockOnLookOnId { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_effect_da")]
  public string SkillEffectDa { get; set; }
  [Newtonsoft.Json.JsonProperty("foot_step_state")]
  public string FootStepState { get; set; }
  [Newtonsoft.Json.JsonProperty("party_id")]
  public int PartyId { get; set; }
  [Newtonsoft.Json.JsonProperty("attributes_description")]
  public string AttributesDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("item_quality_id")]
  public int ItemQualityId { get; set; }
  [Newtonsoft.Json.JsonProperty("obtained_show_description")]
  public string ObtainedShowDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("num_limit")]
  public int NumLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("show_in_bag")]
  public bool ShowInBag { get; set; }
  [Newtonsoft.Json.JsonProperty("weapon_scale")]
  public List<float> WeaponScale { get; set; }
  [Newtonsoft.Json.JsonProperty("intervene")]
  public bool Intervene { get; set; }
  [Newtonsoft.Json.JsonProperty("character_voice")]
  public string CharacterVoice { get; set; }
  [Newtonsoft.Json.JsonProperty("trial_role")]
  public int TrialRole { get; set; }
  [Newtonsoft.Json.JsonProperty("is_aim")]
  public bool IsAim { get; set; }
  [Newtonsoft.Json.JsonProperty("role_guide")]
  public int RoleGuide { get; set; }
  [Newtonsoft.Json.JsonProperty("red_dot_disable_rule")]
  public int RedDotDisableRule { get; set; }
  [Newtonsoft.Json.JsonProperty("skin_damage")]
  public List<string> SkinDamage { get; set; }
  [Newtonsoft.Json.JsonProperty("hide_hu_lu")]
  public bool HideHuLu { get; set; }

  public RoleInfoT() {
    this.Id = 0;
    this.QualityId = 0;
    this.RoleType = 0;
    this.IsTrial = false;
    this.Name = null;
    this.NickName = null;
    this.Introduction = null;
    this.Tag = null;
    this.ParentId = 0;
    this.Priority = 0;
    this.PropertyId = 0;
    this.ShowProperty = null;
    this.ElementId = 0;
    this.SkinId = 0;
    this.RoleHeadIconCircle = null;
    this.RoleHeadIconLarge = null;
    this.RoleHeadIconBig = null;
    this.Card = null;
    this.RoleHeadIcon = null;
    this.FormationRoleCard = null;
    this.RoleStand = null;
    this.RolePortrait = null;
    this.SpilloverItem = null;
    this.MeshId = 0;
    this.UiMeshId = 0;
    this.RoleBody = null;
    this.BreachModel = 0;
    this.SpecialEnergyBarId = 0;
    this.CameraConfig = null;
    this.CameraFloatHeight = 0.0f;
    this.EntityProperty = 0;
    this.MaxLevel = 0;
    this.LevelConsumeId = 0;
    this.BreachId = 0;
    this.SkillId = 0;
    this.SkillTreeGroupId = 0;
    this.ResonanceId = 0;
    this.ResonantChainGroupId = 0;
    this.IsShow = false;
    this.ExchangeConsume = null;
    this.InitWeaponItemId = 0;
    this.WeaponType = 0;
    this.SkillDaPath = null;
    this.SkillLockDaPath = null;
    this.UiScenePerformanceAbp = null;
    this.LockOnDefaultId = 0;
    this.LockOnLookOnId = 0;
    this.SkillEffectDa = null;
    this.FootStepState = null;
    this.PartyId = 0;
    this.AttributesDescription = null;
    this.Icon = null;
    this.ItemQualityId = 0;
    this.ObtainedShowDescription = null;
    this.NumLimit = 0;
    this.ShowInBag = false;
    this.WeaponScale = null;
    this.Intervene = false;
    this.CharacterVoice = null;
    this.TrialRole = 0;
    this.IsAim = false;
    this.RoleGuide = 0;
    this.RedDotDisableRule = 0;
    this.SkinDamage = null;
    this.HideHuLu = false;
  }
}


static public class RoleInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*QualityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*RoleType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*IsTrial*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 12 /*Name*/, false)
      && verifier.VerifyString(tablePos, 14 /*NickName*/, false)
      && verifier.VerifyString(tablePos, 16 /*Introduction*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*Tag*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 20 /*ParentId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*Priority*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*PropertyId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*ShowProperty*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 28 /*ElementId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*SkinId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 32 /*RoleHeadIconCircle*/, false)
      && verifier.VerifyString(tablePos, 34 /*RoleHeadIconLarge*/, false)
      && verifier.VerifyString(tablePos, 36 /*RoleHeadIconBig*/, false)
      && verifier.VerifyString(tablePos, 38 /*Card*/, false)
      && verifier.VerifyString(tablePos, 40 /*RoleHeadIcon*/, false)
      && verifier.VerifyString(tablePos, 42 /*FormationRoleCard*/, false)
      && verifier.VerifyString(tablePos, 44 /*RoleStand*/, false)
      && verifier.VerifyString(tablePos, 46 /*RolePortrait*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 48 /*SpilloverItem*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 50 /*MeshId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*UiMeshId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 54 /*RoleBody*/, false)
      && verifier.VerifyField(tablePos, 56 /*BreachModel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*SpecialEnergyBarId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 60 /*CameraConfig*/, false)
      && verifier.VerifyField(tablePos, 62 /*CameraFloatHeight*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*EntityProperty*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 66 /*MaxLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 68 /*LevelConsumeId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 70 /*BreachId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 72 /*SkillId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 74 /*SkillTreeGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 76 /*ResonanceId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 78 /*ResonantChainGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 80 /*IsShow*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfTables(tablePos, 82 /*ExchangeConsume*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 84 /*InitWeaponItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*WeaponType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 88 /*SkillDaPath*/, false)
      && verifier.VerifyString(tablePos, 90 /*SkillLockDaPath*/, false)
      && verifier.VerifyString(tablePos, 92 /*UiScenePerformanceAbp*/, false)
      && verifier.VerifyField(tablePos, 94 /*LockOnDefaultId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 96 /*LockOnLookOnId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 98 /*SkillEffectDa*/, false)
      && verifier.VerifyString(tablePos, 100 /*FootStepState*/, false)
      && verifier.VerifyField(tablePos, 102 /*PartyId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 104 /*AttributesDescription*/, false)
      && verifier.VerifyString(tablePos, 106 /*Icon*/, false)
      && verifier.VerifyField(tablePos, 108 /*ItemQualityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 110 /*ObtainedShowDescription*/, false)
      && verifier.VerifyField(tablePos, 112 /*NumLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 114 /*ShowInBag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 116 /*WeaponScale*/, 4 /*float*/, false)
      && verifier.VerifyField(tablePos, 118 /*Intervene*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 120 /*CharacterVoice*/, false)
      && verifier.VerifyField(tablePos, 122 /*TrialRole*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 124 /*IsAim*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 126 /*RoleGuide*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 128 /*RedDotDisableRule*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 130 /*SkinDamage*/, false)
      && verifier.VerifyField(tablePos, 132 /*HideHuLu*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
