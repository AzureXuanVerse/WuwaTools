// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BabelTowerDifficulty : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BabelTowerDifficulty GetRootAsBabelTowerDifficulty(ByteBuffer _bb) { return GetRootAsBabelTowerDifficulty(_bb, new BabelTowerDifficulty()); }
  public static BabelTowerDifficulty GetRootAsBabelTowerDifficulty(ByteBuffer _bb, BabelTowerDifficulty obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BabelTowerDifficulty __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DifficultyId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StarNum { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TextBgColor { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextBgColorBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTextBgColorBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTextBgColorArray() { return __p.__vector_as_array<byte>(12); }
  public string DifficultyTextKey { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDifficultyTextKeyBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetDifficultyTextKeyBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDifficultyTextKeyArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<WWParser.Defs.BabelTowerDifficulty> CreateBabelTowerDifficulty(FlatBufferBuilder builder,
      int id = 0,
      int activity_id = 0,
      int difficulty_id = 0,
      int star_num = 0,
      StringOffset text_bg_colorOffset = default(StringOffset),
      StringOffset difficulty_text_keyOffset = default(StringOffset)) {
    builder.StartTable(6);
    BabelTowerDifficulty.AddDifficultyTextKey(builder, difficulty_text_keyOffset);
    BabelTowerDifficulty.AddTextBgColor(builder, text_bg_colorOffset);
    BabelTowerDifficulty.AddStarNum(builder, star_num);
    BabelTowerDifficulty.AddDifficultyId(builder, difficulty_id);
    BabelTowerDifficulty.AddActivityId(builder, activity_id);
    BabelTowerDifficulty.AddId(builder, id);
    return BabelTowerDifficulty.EndBabelTowerDifficulty(builder);
  }

  public static void StartBabelTowerDifficulty(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddDifficultyId(FlatBufferBuilder builder, int difficultyId) { builder.AddInt(2, difficultyId, 0); }
  public static void AddStarNum(FlatBufferBuilder builder, int starNum) { builder.AddInt(3, starNum, 0); }
  public static void AddTextBgColor(FlatBufferBuilder builder, StringOffset textBgColorOffset) { builder.AddOffset(4, textBgColorOffset.Value, 0); }
  public static void AddDifficultyTextKey(FlatBufferBuilder builder, StringOffset difficultyTextKeyOffset) { builder.AddOffset(5, difficultyTextKeyOffset.Value, 0); }
  public static Offset<WWParser.Defs.BabelTowerDifficulty> EndBabelTowerDifficulty(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BabelTowerDifficulty>(o);
  }
  public BabelTowerDifficultyT UnPack() {
    var _o = new BabelTowerDifficultyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BabelTowerDifficultyT _o) {
    _o.Id = this.Id;
    _o.ActivityId = this.ActivityId;
    _o.DifficultyId = this.DifficultyId;
    _o.StarNum = this.StarNum;
    _o.TextBgColor = this.TextBgColor;
    _o.DifficultyTextKey = this.DifficultyTextKey;
  }
  public static Offset<WWParser.Defs.BabelTowerDifficulty> Pack(FlatBufferBuilder builder, BabelTowerDifficultyT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BabelTowerDifficulty>);
    var _text_bg_color = _o.TextBgColor == null ? default(StringOffset) : builder.CreateString(_o.TextBgColor);
    var _difficulty_text_key = _o.DifficultyTextKey == null ? default(StringOffset) : builder.CreateString(_o.DifficultyTextKey);
    return CreateBabelTowerDifficulty(
      builder,
      _o.Id,
      _o.ActivityId,
      _o.DifficultyId,
      _o.StarNum,
      _text_bg_color,
      _difficulty_text_key);
  }
}

public class BabelTowerDifficultyT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("difficulty_id")]
  public int DifficultyId { get; set; }
  [Newtonsoft.Json.JsonProperty("star_num")]
  public int StarNum { get; set; }
  [Newtonsoft.Json.JsonProperty("text_bg_color")]
  public string TextBgColor { get; set; }
  [Newtonsoft.Json.JsonProperty("difficulty_text_key")]
  public string DifficultyTextKey { get; set; }

  public BabelTowerDifficultyT() {
    this.Id = 0;
    this.ActivityId = 0;
    this.DifficultyId = 0;
    this.StarNum = 0;
    this.TextBgColor = null;
    this.DifficultyTextKey = null;
  }
}


static public class BabelTowerDifficultyVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*DifficultyId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*StarNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*TextBgColor*/, false)
      && verifier.VerifyString(tablePos, 14 /*DifficultyTextKey*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
