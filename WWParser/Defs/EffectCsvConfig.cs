// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EffectCsvConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EffectCsvConfig GetRootAsEffectCsvConfig(ByteBuffer _bb) { return GetRootAsEffectCsvConfig(_bb, new EffectCsvConfig()); }
  public static EffectCsvConfig GetRootAsEffectCsvConfig(ByteBuffer _bb, EffectCsvConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EffectCsvConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int Type { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Data { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<WWParser.Defs.EffectCsvConfig> CreateEffectCsvConfig(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      int type = 0,
      StringOffset dataOffset = default(StringOffset)) {
    builder.StartTable(4);
    EffectCsvConfig.AddData(builder, dataOffset);
    EffectCsvConfig.AddType(builder, type);
    EffectCsvConfig.AddName(builder, nameOffset);
    EffectCsvConfig.AddId(builder, id);
    return EffectCsvConfig.EndEffectCsvConfig(builder);
  }

  public static void StartEffectCsvConfig(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(2, type, 0); }
  public static void AddData(FlatBufferBuilder builder, StringOffset dataOffset) { builder.AddOffset(3, dataOffset.Value, 0); }
  public static Offset<WWParser.Defs.EffectCsvConfig> EndEffectCsvConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.EffectCsvConfig>(o);
  }
  public EffectCsvConfigT UnPack() {
    var _o = new EffectCsvConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EffectCsvConfigT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.Type = this.Type;
    _o.Data = this.Data;
  }
  public static Offset<WWParser.Defs.EffectCsvConfig> Pack(FlatBufferBuilder builder, EffectCsvConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.EffectCsvConfig>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _data = _o.Data == null ? default(StringOffset) : builder.CreateString(_o.Data);
    return CreateEffectCsvConfig(
      builder,
      _o.Id,
      _name,
      _o.Type,
      _data);
  }
}

public class EffectCsvConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("data")]
  public string Data { get; set; }

  public EffectCsvConfigT() {
    this.Id = 0;
    this.Name = null;
    this.Type = 0;
    this.Data = null;
  }
}


static public class EffectCsvConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Data*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
