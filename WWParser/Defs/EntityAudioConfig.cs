// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EntityAudioConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EntityAudioConfig GetRootAsEntityAudioConfig(ByteBuffer _bb) { return GetRootAsEntityAudioConfig(_bb, new EntityAudioConfig()); }
  public static EntityAudioConfig GetRootAsEntityAudioConfig(ByteBuffer _bb, EntityAudioConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntityAudioConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public bool EnableVb { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string RtpcName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRtpcNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetRtpcNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetRtpcNameArray() { return __p.__vector_as_array<byte>(10); }
  public float TriggerDistance { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)500.0f; } }
  public string BoneHiddenSwitch(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BoneHiddenSwitchLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.EntityAudioConfig> CreateEntityAudioConfig(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      bool enable_vb = false,
      StringOffset rtpc_nameOffset = default(StringOffset),
      float trigger_distance = 500.0f,
      VectorOffset bone_hidden_switchOffset = default(VectorOffset)) {
    builder.StartTable(6);
    EntityAudioConfig.AddBoneHiddenSwitch(builder, bone_hidden_switchOffset);
    EntityAudioConfig.AddTriggerDistance(builder, trigger_distance);
    EntityAudioConfig.AddRtpcName(builder, rtpc_nameOffset);
    EntityAudioConfig.AddName(builder, nameOffset);
    EntityAudioConfig.AddId(builder, idOffset);
    EntityAudioConfig.AddEnableVb(builder, enable_vb);
    return EntityAudioConfig.EndEntityAudioConfig(builder);
  }

  public static void StartEntityAudioConfig(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddEnableVb(FlatBufferBuilder builder, bool enableVb) { builder.AddBool(2, enableVb, false); }
  public static void AddRtpcName(FlatBufferBuilder builder, StringOffset rtpcNameOffset) { builder.AddOffset(3, rtpcNameOffset.Value, 0); }
  public static void AddTriggerDistance(FlatBufferBuilder builder, float triggerDistance) { builder.AddFloat(4, triggerDistance, 500.0f); }
  public static void AddBoneHiddenSwitch(FlatBufferBuilder builder, VectorOffset boneHiddenSwitchOffset) { builder.AddOffset(5, boneHiddenSwitchOffset.Value, 0); }
  public static VectorOffset CreateBoneHiddenSwitchVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBoneHiddenSwitchVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBoneHiddenSwitchVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBoneHiddenSwitchVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBoneHiddenSwitchVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.EntityAudioConfig> EndEntityAudioConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.EntityAudioConfig>(o);
  }
  public EntityAudioConfigT UnPack() {
    var _o = new EntityAudioConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntityAudioConfigT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.EnableVb = this.EnableVb;
    _o.RtpcName = this.RtpcName;
    _o.TriggerDistance = this.TriggerDistance;
    _o.BoneHiddenSwitch = new List<string>();
    for (var _j = 0; _j < this.BoneHiddenSwitchLength; ++_j) {_o.BoneHiddenSwitch.Add(this.BoneHiddenSwitch(_j));}
  }
  public static Offset<WWParser.Defs.EntityAudioConfig> Pack(FlatBufferBuilder builder, EntityAudioConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.EntityAudioConfig>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _rtpc_name = _o.RtpcName == null ? default(StringOffset) : builder.CreateString(_o.RtpcName);
    var _bone_hidden_switch = default(VectorOffset);
    if (_o.BoneHiddenSwitch != null) {
      var __bone_hidden_switch = new StringOffset[_o.BoneHiddenSwitch.Count];
      for (var _j = 0; _j < __bone_hidden_switch.Length; ++_j) { __bone_hidden_switch[_j] = builder.CreateString(_o.BoneHiddenSwitch[_j]); }
      _bone_hidden_switch = CreateBoneHiddenSwitchVector(builder, __bone_hidden_switch);
    }
    return CreateEntityAudioConfig(
      builder,
      _id,
      _name,
      _o.EnableVb,
      _rtpc_name,
      _o.TriggerDistance,
      _bone_hidden_switch);
  }
}

public class EntityAudioConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("enable_vb")]
  public bool EnableVb { get; set; }
  [Newtonsoft.Json.JsonProperty("rtpc_name")]
  public string RtpcName { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_distance")]
  public float TriggerDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("bone_hidden_switch")]
  public List<string> BoneHiddenSwitch { get; set; }

  public EntityAudioConfigT() {
    this.Id = null;
    this.Name = null;
    this.EnableVb = false;
    this.RtpcName = null;
    this.TriggerDistance = 500.0f;
    this.BoneHiddenSwitch = null;
  }
}


static public class EntityAudioConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*EnableVb*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 10 /*RtpcName*/, false)
      && verifier.VerifyField(tablePos, 12 /*TriggerDistance*/, 4 /*float*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*BoneHiddenSwitch*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
