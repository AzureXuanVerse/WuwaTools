// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GamePlayScan : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GamePlayScan GetRootAsGamePlayScan(ByteBuffer _bb) { return GetRootAsGamePlayScan(_bb, new GamePlayScan()); }
  public static GamePlayScan GetRootAsGamePlayScan(ByteBuffer _bb, GamePlayScan obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GamePlayScan __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int UId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string IconPath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconPathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIconPathArray() { return __p.__vector_as_array<byte>(6); }
  public float Interval { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)8.0f; } }
  public WWParser.Defs.Vector? Offset { get { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.Vector?)(new WWParser.Defs.Vector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string ResourcePath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourcePathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetResourcePathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetResourcePathArray() { return __p.__vector_as_array<byte>(12); }
  public int Color { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.GamePlayScan> CreateGamePlayScan(FlatBufferBuilder builder,
      int u_id = 0,
      StringOffset icon_pathOffset = default(StringOffset),
      float interval = 8.0f,
      Offset<WWParser.Defs.Vector> offsetOffset = default(Offset<WWParser.Defs.Vector>),
      StringOffset resource_pathOffset = default(StringOffset),
      int color = 0) {
    builder.StartTable(6);
    GamePlayScan.AddColor(builder, color);
    GamePlayScan.AddResourcePath(builder, resource_pathOffset);
    GamePlayScan.AddOffset(builder, offsetOffset);
    GamePlayScan.AddInterval(builder, interval);
    GamePlayScan.AddIconPath(builder, icon_pathOffset);
    GamePlayScan.AddUId(builder, u_id);
    return GamePlayScan.EndGamePlayScan(builder);
  }

  public static void StartGamePlayScan(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddUId(FlatBufferBuilder builder, int uId) { builder.AddInt(0, uId, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset iconPathOffset) { builder.AddOffset(1, iconPathOffset.Value, 0); }
  public static void AddInterval(FlatBufferBuilder builder, float interval) { builder.AddFloat(2, interval, 8.0f); }
  public static void AddOffset(FlatBufferBuilder builder, Offset<WWParser.Defs.Vector> offsetOffset) { builder.AddOffset(3, offsetOffset.Value, 0); }
  public static void AddResourcePath(FlatBufferBuilder builder, StringOffset resourcePathOffset) { builder.AddOffset(4, resourcePathOffset.Value, 0); }
  public static void AddColor(FlatBufferBuilder builder, int color) { builder.AddInt(5, color, 0); }
  public static Offset<WWParser.Defs.GamePlayScan> EndGamePlayScan(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.GamePlayScan>(o);
  }
  public GamePlayScanT UnPack() {
    var _o = new GamePlayScanT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GamePlayScanT _o) {
    _o.UId = this.UId;
    _o.IconPath = this.IconPath;
    _o.Interval = this.Interval;
    _o.Offset = this.Offset.HasValue ? this.Offset.Value.UnPack() : null;
    _o.ResourcePath = this.ResourcePath;
    _o.Color = this.Color;
  }
  public static Offset<WWParser.Defs.GamePlayScan> Pack(FlatBufferBuilder builder, GamePlayScanT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.GamePlayScan>);
    var _icon_path = _o.IconPath == null ? default(StringOffset) : builder.CreateString(_o.IconPath);
    var _offset = _o.Offset == null ? default(Offset<WWParser.Defs.Vector>) : WWParser.Defs.Vector.Pack(builder, _o.Offset);
    var _resource_path = _o.ResourcePath == null ? default(StringOffset) : builder.CreateString(_o.ResourcePath);
    return CreateGamePlayScan(
      builder,
      _o.UId,
      _icon_path,
      _o.Interval,
      _offset,
      _resource_path,
      _o.Color);
  }
}

public class GamePlayScanT
{
  [Newtonsoft.Json.JsonProperty("u_id")]
  public int UId { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_path")]
  public string IconPath { get; set; }
  [Newtonsoft.Json.JsonProperty("interval")]
  public float Interval { get; set; }
  [Newtonsoft.Json.JsonProperty("offset")]
  public WWParser.Defs.VectorT Offset { get; set; }
  [Newtonsoft.Json.JsonProperty("resource_path")]
  public string ResourcePath { get; set; }
  [Newtonsoft.Json.JsonProperty("color")]
  public int Color { get; set; }

  public GamePlayScanT() {
    this.UId = 0;
    this.IconPath = null;
    this.Interval = 8.0f;
    this.Offset = null;
    this.ResourcePath = null;
    this.Color = 0;
  }
}


static public class GamePlayScanVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*IconPath*/, false)
      && verifier.VerifyField(tablePos, 8 /*Interval*/, 4 /*float*/, 4, false)
      && verifier.VerifyTable(tablePos, 10 /*Offset*/, WWParser.Defs.VectorVerify.Verify, false)
      && verifier.VerifyString(tablePos, 12 /*ResourcePath*/, false)
      && verifier.VerifyField(tablePos, 14 /*Color*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
