// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MonsterInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MonsterInfo GetRootAsMonsterInfo(ByteBuffer _bb) { return GetRootAsMonsterInfo(_bb, new MonsterInfo()); }
  public static MonsterInfo GetRootAsMonsterInfo(ByteBuffer _bb, MonsterInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MonsterInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int RarityId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Icon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(10); }
  public string BigIcon { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBigIconBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetBigIconBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetBigIconArray() { return __p.__vector_as_array<byte>(12); }
  public string Tachine { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTachineBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTachineBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTachineArray() { return __p.__vector_as_array<byte>(14); }
  public int ElementIdArray(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ElementIdArrayLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetElementIdArrayBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetElementIdArrayBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetElementIdArrayArray() { return __p.__vector_as_array<int>(16); }
  public string MonsterEntityId { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMonsterEntityIdBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetMonsterEntityIdBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetMonsterEntityIdArray() { return __p.__vector_as_array<byte>(18); }
  public string MonsterPose { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMonsterPoseBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetMonsterPoseBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetMonsterPoseArray() { return __p.__vector_as_array<byte>(20); }
  public string UndiscoveredDes { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUndiscoveredDesBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetUndiscoveredDesBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetUndiscoveredDesArray() { return __p.__vector_as_array<byte>(22); }
  public string DiscoveredDes { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDiscoveredDesBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetDiscoveredDesBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetDiscoveredDesArray() { return __p.__vector_as_array<byte>(24); }
  public int PerchId(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PerchIdLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPerchIdBytes() { return __p.__vector_as_span<int>(26, 4); }
#else
  public ArraySegment<byte>? GetPerchIdBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public int[] GetPerchIdArray() { return __p.__vector_as_array<int>(26); }

  public static Offset<WWParser.Defs.MonsterInfo> CreateMonsterInfo(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      int rarity_id = 0,
      StringOffset iconOffset = default(StringOffset),
      StringOffset big_iconOffset = default(StringOffset),
      StringOffset tachineOffset = default(StringOffset),
      VectorOffset element_id_arrayOffset = default(VectorOffset),
      StringOffset monster_entity_idOffset = default(StringOffset),
      StringOffset monster_poseOffset = default(StringOffset),
      StringOffset undiscovered_desOffset = default(StringOffset),
      StringOffset discovered_desOffset = default(StringOffset),
      VectorOffset perch_idOffset = default(VectorOffset)) {
    builder.StartTable(12);
    MonsterInfo.AddPerchId(builder, perch_idOffset);
    MonsterInfo.AddDiscoveredDes(builder, discovered_desOffset);
    MonsterInfo.AddUndiscoveredDes(builder, undiscovered_desOffset);
    MonsterInfo.AddMonsterPose(builder, monster_poseOffset);
    MonsterInfo.AddMonsterEntityId(builder, monster_entity_idOffset);
    MonsterInfo.AddElementIdArray(builder, element_id_arrayOffset);
    MonsterInfo.AddTachine(builder, tachineOffset);
    MonsterInfo.AddBigIcon(builder, big_iconOffset);
    MonsterInfo.AddIcon(builder, iconOffset);
    MonsterInfo.AddRarityId(builder, rarity_id);
    MonsterInfo.AddName(builder, nameOffset);
    MonsterInfo.AddId(builder, id);
    return MonsterInfo.EndMonsterInfo(builder);
  }

  public static void StartMonsterInfo(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddRarityId(FlatBufferBuilder builder, int rarityId) { builder.AddInt(2, rarityId, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(3, iconOffset.Value, 0); }
  public static void AddBigIcon(FlatBufferBuilder builder, StringOffset bigIconOffset) { builder.AddOffset(4, bigIconOffset.Value, 0); }
  public static void AddTachine(FlatBufferBuilder builder, StringOffset tachineOffset) { builder.AddOffset(5, tachineOffset.Value, 0); }
  public static void AddElementIdArray(FlatBufferBuilder builder, VectorOffset elementIdArrayOffset) { builder.AddOffset(6, elementIdArrayOffset.Value, 0); }
  public static VectorOffset CreateElementIdArrayVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateElementIdArrayVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElementIdArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElementIdArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartElementIdArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMonsterEntityId(FlatBufferBuilder builder, StringOffset monsterEntityIdOffset) { builder.AddOffset(7, monsterEntityIdOffset.Value, 0); }
  public static void AddMonsterPose(FlatBufferBuilder builder, StringOffset monsterPoseOffset) { builder.AddOffset(8, monsterPoseOffset.Value, 0); }
  public static void AddUndiscoveredDes(FlatBufferBuilder builder, StringOffset undiscoveredDesOffset) { builder.AddOffset(9, undiscoveredDesOffset.Value, 0); }
  public static void AddDiscoveredDes(FlatBufferBuilder builder, StringOffset discoveredDesOffset) { builder.AddOffset(10, discoveredDesOffset.Value, 0); }
  public static void AddPerchId(FlatBufferBuilder builder, VectorOffset perchIdOffset) { builder.AddOffset(11, perchIdOffset.Value, 0); }
  public static VectorOffset CreatePerchIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePerchIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePerchIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePerchIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPerchIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.MonsterInfo> EndMonsterInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MonsterInfo>(o);
  }
  public MonsterInfoT UnPack() {
    var _o = new MonsterInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MonsterInfoT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.RarityId = this.RarityId;
    _o.Icon = this.Icon;
    _o.BigIcon = this.BigIcon;
    _o.Tachine = this.Tachine;
    _o.ElementIdArray = new List<int>();
    for (var _j = 0; _j < this.ElementIdArrayLength; ++_j) {_o.ElementIdArray.Add(this.ElementIdArray(_j));}
    _o.MonsterEntityId = this.MonsterEntityId;
    _o.MonsterPose = this.MonsterPose;
    _o.UndiscoveredDes = this.UndiscoveredDes;
    _o.DiscoveredDes = this.DiscoveredDes;
    _o.PerchId = new List<int>();
    for (var _j = 0; _j < this.PerchIdLength; ++_j) {_o.PerchId.Add(this.PerchId(_j));}
  }
  public static Offset<WWParser.Defs.MonsterInfo> Pack(FlatBufferBuilder builder, MonsterInfoT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MonsterInfo>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _big_icon = _o.BigIcon == null ? default(StringOffset) : builder.CreateString(_o.BigIcon);
    var _tachine = _o.Tachine == null ? default(StringOffset) : builder.CreateString(_o.Tachine);
    var _element_id_array = default(VectorOffset);
    if (_o.ElementIdArray != null) {
      var __element_id_array = _o.ElementIdArray.ToArray();
      _element_id_array = CreateElementIdArrayVector(builder, __element_id_array);
    }
    var _monster_entity_id = _o.MonsterEntityId == null ? default(StringOffset) : builder.CreateString(_o.MonsterEntityId);
    var _monster_pose = _o.MonsterPose == null ? default(StringOffset) : builder.CreateString(_o.MonsterPose);
    var _undiscovered_des = _o.UndiscoveredDes == null ? default(StringOffset) : builder.CreateString(_o.UndiscoveredDes);
    var _discovered_des = _o.DiscoveredDes == null ? default(StringOffset) : builder.CreateString(_o.DiscoveredDes);
    var _perch_id = default(VectorOffset);
    if (_o.PerchId != null) {
      var __perch_id = _o.PerchId.ToArray();
      _perch_id = CreatePerchIdVector(builder, __perch_id);
    }
    return CreateMonsterInfo(
      builder,
      _o.Id,
      _name,
      _o.RarityId,
      _icon,
      _big_icon,
      _tachine,
      _element_id_array,
      _monster_entity_id,
      _monster_pose,
      _undiscovered_des,
      _discovered_des,
      _perch_id);
  }
}

public class MonsterInfoT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("rarity_id")]
  public int RarityId { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("big_icon")]
  public string BigIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("tachine")]
  public string Tachine { get; set; }
  [Newtonsoft.Json.JsonProperty("element_id_array")]
  public List<int> ElementIdArray { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_entity_id")]
  public string MonsterEntityId { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_pose")]
  public string MonsterPose { get; set; }
  [Newtonsoft.Json.JsonProperty("undiscovered_des")]
  public string UndiscoveredDes { get; set; }
  [Newtonsoft.Json.JsonProperty("discovered_des")]
  public string DiscoveredDes { get; set; }
  [Newtonsoft.Json.JsonProperty("perch_id")]
  public List<int> PerchId { get; set; }

  public MonsterInfoT() {
    this.Id = 0;
    this.Name = null;
    this.RarityId = 0;
    this.Icon = null;
    this.BigIcon = null;
    this.Tachine = null;
    this.ElementIdArray = null;
    this.MonsterEntityId = null;
    this.MonsterPose = null;
    this.UndiscoveredDes = null;
    this.DiscoveredDes = null;
    this.PerchId = null;
  }
}


static public class MonsterInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*RarityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 12 /*BigIcon*/, false)
      && verifier.VerifyString(tablePos, 14 /*Tachine*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*ElementIdArray*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 18 /*MonsterEntityId*/, false)
      && verifier.VerifyString(tablePos, 20 /*MonsterPose*/, false)
      && verifier.VerifyString(tablePos, 22 /*UndiscoveredDes*/, false)
      && verifier.VerifyString(tablePos, 24 /*DiscoveredDes*/, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*PerchId*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
