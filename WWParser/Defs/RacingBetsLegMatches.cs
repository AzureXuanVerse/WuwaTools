// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RacingBetsLegMatches : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RacingBetsLegMatches GetRootAsRacingBetsLegMatches(ByteBuffer _bb) { return GetRootAsRacingBetsLegMatches(_bb, new RacingBetsLegMatches()); }
  public static RacingBetsLegMatches GetRootAsRacingBetsLegMatches(ByteBuffer _bb, RacingBetsLegMatches obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RacingBetsLegMatches __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MatchId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public int Type { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EndPoint { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DiceTypeList(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DiceTypeListLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDiceTypeListBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetDiceTypeListBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetDiceTypeListArray() { return __p.__vector_as_array<int>(14); }
  public string BtnBgPath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBtnBgPathBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetBtnBgPathBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetBtnBgPathArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<WWParser.Defs.RacingBetsLegMatches> CreateRacingBetsLegMatches(FlatBufferBuilder builder,
      int id = 0,
      int match_id = 0,
      StringOffset nameOffset = default(StringOffset),
      int type = 0,
      int end_point = 0,
      VectorOffset dice_type_listOffset = default(VectorOffset),
      StringOffset btn_bg_pathOffset = default(StringOffset)) {
    builder.StartTable(7);
    RacingBetsLegMatches.AddBtnBgPath(builder, btn_bg_pathOffset);
    RacingBetsLegMatches.AddDiceTypeList(builder, dice_type_listOffset);
    RacingBetsLegMatches.AddEndPoint(builder, end_point);
    RacingBetsLegMatches.AddType(builder, type);
    RacingBetsLegMatches.AddName(builder, nameOffset);
    RacingBetsLegMatches.AddMatchId(builder, match_id);
    RacingBetsLegMatches.AddId(builder, id);
    return RacingBetsLegMatches.EndRacingBetsLegMatches(builder);
  }

  public static void StartRacingBetsLegMatches(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMatchId(FlatBufferBuilder builder, int matchId) { builder.AddInt(1, matchId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(3, type, 0); }
  public static void AddEndPoint(FlatBufferBuilder builder, int endPoint) { builder.AddInt(4, endPoint, 0); }
  public static void AddDiceTypeList(FlatBufferBuilder builder, VectorOffset diceTypeListOffset) { builder.AddOffset(5, diceTypeListOffset.Value, 0); }
  public static VectorOffset CreateDiceTypeListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDiceTypeListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDiceTypeListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDiceTypeListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDiceTypeListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBtnBgPath(FlatBufferBuilder builder, StringOffset btnBgPathOffset) { builder.AddOffset(6, btnBgPathOffset.Value, 0); }
  public static Offset<WWParser.Defs.RacingBetsLegMatches> EndRacingBetsLegMatches(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RacingBetsLegMatches>(o);
  }
  public RacingBetsLegMatchesT UnPack() {
    var _o = new RacingBetsLegMatchesT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RacingBetsLegMatchesT _o) {
    _o.Id = this.Id;
    _o.MatchId = this.MatchId;
    _o.Name = this.Name;
    _o.Type = this.Type;
    _o.EndPoint = this.EndPoint;
    _o.DiceTypeList = new List<int>();
    for (var _j = 0; _j < this.DiceTypeListLength; ++_j) {_o.DiceTypeList.Add(this.DiceTypeList(_j));}
    _o.BtnBgPath = this.BtnBgPath;
  }
  public static Offset<WWParser.Defs.RacingBetsLegMatches> Pack(FlatBufferBuilder builder, RacingBetsLegMatchesT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RacingBetsLegMatches>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _dice_type_list = default(VectorOffset);
    if (_o.DiceTypeList != null) {
      var __dice_type_list = _o.DiceTypeList.ToArray();
      _dice_type_list = CreateDiceTypeListVector(builder, __dice_type_list);
    }
    var _btn_bg_path = _o.BtnBgPath == null ? default(StringOffset) : builder.CreateString(_o.BtnBgPath);
    return CreateRacingBetsLegMatches(
      builder,
      _o.Id,
      _o.MatchId,
      _name,
      _o.Type,
      _o.EndPoint,
      _dice_type_list,
      _btn_bg_path);
  }
}

public class RacingBetsLegMatchesT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("match_id")]
  public int MatchId { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("end_point")]
  public int EndPoint { get; set; }
  [Newtonsoft.Json.JsonProperty("dice_type_list")]
  public List<int> DiceTypeList { get; set; }
  [Newtonsoft.Json.JsonProperty("btn_bg_path")]
  public string BtnBgPath { get; set; }

  public RacingBetsLegMatchesT() {
    this.Id = 0;
    this.MatchId = 0;
    this.Name = null;
    this.Type = 0;
    this.EndPoint = 0;
    this.DiceTypeList = null;
    this.BtnBgPath = null;
  }
}


static public class RacingBetsLegMatchesVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MatchId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyField(tablePos, 10 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*EndPoint*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*DiceTypeList*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 16 /*BtnBgPath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
