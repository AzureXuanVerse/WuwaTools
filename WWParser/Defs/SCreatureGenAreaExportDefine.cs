// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SCreatureGenAreaExportDefine : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SCreatureGenAreaExportDefine GetRootAsSCreatureGenAreaExportDefine(ByteBuffer _bb) { return GetRootAsSCreatureGenAreaExportDefine(_bb, new SCreatureGenAreaExportDefine()); }
  public static SCreatureGenAreaExportDefine GetRootAsSCreatureGenAreaExportDefine(ByteBuffer _bb, SCreatureGenAreaExportDefine obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SCreatureGenAreaExportDefine __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ShapeType { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.IntVector? Transforms(int j) { int o = __p.__offset(6); return o != 0 ? (WWParser.Defs.IntVector?)(new WWParser.Defs.IntVector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TransformsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public float Weight { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<WWParser.Defs.SCreatureGenAreaExportDefine> CreateSCreatureGenAreaExportDefine(FlatBufferBuilder builder,
      int shape_type = 0,
      VectorOffset transformsOffset = default(VectorOffset),
      float weight = 0.0f) {
    builder.StartTable(3);
    SCreatureGenAreaExportDefine.AddWeight(builder, weight);
    SCreatureGenAreaExportDefine.AddTransforms(builder, transformsOffset);
    SCreatureGenAreaExportDefine.AddShapeType(builder, shape_type);
    return SCreatureGenAreaExportDefine.EndSCreatureGenAreaExportDefine(builder);
  }

  public static void StartSCreatureGenAreaExportDefine(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddShapeType(FlatBufferBuilder builder, int shapeType) { builder.AddInt(0, shapeType, 0); }
  public static void AddTransforms(FlatBufferBuilder builder, VectorOffset transformsOffset) { builder.AddOffset(1, transformsOffset.Value, 0); }
  public static VectorOffset CreateTransformsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.IntVector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTransformsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.IntVector>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTransformsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.IntVector>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTransformsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.IntVector>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTransformsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWeight(FlatBufferBuilder builder, float weight) { builder.AddFloat(2, weight, 0.0f); }
  public static Offset<WWParser.Defs.SCreatureGenAreaExportDefine> EndSCreatureGenAreaExportDefine(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SCreatureGenAreaExportDefine>(o);
  }
  public SCreatureGenAreaExportDefineT UnPack() {
    var _o = new SCreatureGenAreaExportDefineT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SCreatureGenAreaExportDefineT _o) {
    _o.ShapeType = this.ShapeType;
    _o.Transforms = new List<WWParser.Defs.IntVectorT>();
    for (var _j = 0; _j < this.TransformsLength; ++_j) {_o.Transforms.Add(this.Transforms(_j).HasValue ? this.Transforms(_j).Value.UnPack() : null);}
    _o.Weight = this.Weight;
  }
  public static Offset<WWParser.Defs.SCreatureGenAreaExportDefine> Pack(FlatBufferBuilder builder, SCreatureGenAreaExportDefineT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SCreatureGenAreaExportDefine>);
    var _transforms = default(VectorOffset);
    if (_o.Transforms != null) {
      var __transforms = new Offset<WWParser.Defs.IntVector>[_o.Transforms.Count];
      for (var _j = 0; _j < __transforms.Length; ++_j) { __transforms[_j] = WWParser.Defs.IntVector.Pack(builder, _o.Transforms[_j]); }
      _transforms = CreateTransformsVector(builder, __transforms);
    }
    return CreateSCreatureGenAreaExportDefine(
      builder,
      _o.ShapeType,
      _transforms,
      _o.Weight);
  }
}

public class SCreatureGenAreaExportDefineT
{
  [Newtonsoft.Json.JsonProperty("shape_type")]
  public int ShapeType { get; set; }
  [Newtonsoft.Json.JsonProperty("transforms")]
  public List<WWParser.Defs.IntVectorT> Transforms { get; set; }
  [Newtonsoft.Json.JsonProperty("weight")]
  public float Weight { get; set; }

  public SCreatureGenAreaExportDefineT() {
    this.ShapeType = 0;
    this.Transforms = null;
    this.Weight = 0.0f;
  }
}


static public class SCreatureGenAreaExportDefineVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ShapeType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Transforms*/, WWParser.Defs.IntVectorVerify.Verify, false)
      && verifier.VerifyField(tablePos, 8 /*Weight*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
