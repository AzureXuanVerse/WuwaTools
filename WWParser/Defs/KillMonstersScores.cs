// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct KillMonstersScores : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static KillMonstersScores GetRootAsKillMonstersScores(ByteBuffer _bb) { return GetRootAsKillMonstersScores(_bb, new KillMonstersScores()); }
  public static KillMonstersScores GetRootAsKillMonstersScores(ByteBuffer _bb, KillMonstersScores obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KillMonstersScores __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstanceId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ScoreMin { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ScoreMax { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Reward { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DifficultyOptions(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DifficultyOptionsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDifficultyOptionsBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetDifficultyOptionsBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetDifficultyOptionsArray() { return __p.__vector_as_array<int>(14); }
  public string Desc { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<WWParser.Defs.KillMonstersScores> CreateKillMonstersScores(FlatBufferBuilder builder,
      int id = 0,
      int instance_id = 0,
      int score_min = 0,
      int score_max = 0,
      int reward = 0,
      VectorOffset difficulty_optionsOffset = default(VectorOffset),
      StringOffset descOffset = default(StringOffset)) {
    builder.StartTable(7);
    KillMonstersScores.AddDesc(builder, descOffset);
    KillMonstersScores.AddDifficultyOptions(builder, difficulty_optionsOffset);
    KillMonstersScores.AddReward(builder, reward);
    KillMonstersScores.AddScoreMax(builder, score_max);
    KillMonstersScores.AddScoreMin(builder, score_min);
    KillMonstersScores.AddInstanceId(builder, instance_id);
    KillMonstersScores.AddId(builder, id);
    return KillMonstersScores.EndKillMonstersScores(builder);
  }

  public static void StartKillMonstersScores(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddInstanceId(FlatBufferBuilder builder, int instanceId) { builder.AddInt(1, instanceId, 0); }
  public static void AddScoreMin(FlatBufferBuilder builder, int scoreMin) { builder.AddInt(2, scoreMin, 0); }
  public static void AddScoreMax(FlatBufferBuilder builder, int scoreMax) { builder.AddInt(3, scoreMax, 0); }
  public static void AddReward(FlatBufferBuilder builder, int reward) { builder.AddInt(4, reward, 0); }
  public static void AddDifficultyOptions(FlatBufferBuilder builder, VectorOffset difficultyOptionsOffset) { builder.AddOffset(5, difficultyOptionsOffset.Value, 0); }
  public static VectorOffset CreateDifficultyOptionsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyOptionsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyOptionsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyOptionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDifficultyOptionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(6, descOffset.Value, 0); }
  public static Offset<WWParser.Defs.KillMonstersScores> EndKillMonstersScores(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.KillMonstersScores>(o);
  }
  public KillMonstersScoresT UnPack() {
    var _o = new KillMonstersScoresT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(KillMonstersScoresT _o) {
    _o.Id = this.Id;
    _o.InstanceId = this.InstanceId;
    _o.ScoreMin = this.ScoreMin;
    _o.ScoreMax = this.ScoreMax;
    _o.Reward = this.Reward;
    _o.DifficultyOptions = new List<int>();
    for (var _j = 0; _j < this.DifficultyOptionsLength; ++_j) {_o.DifficultyOptions.Add(this.DifficultyOptions(_j));}
    _o.Desc = this.Desc;
  }
  public static Offset<WWParser.Defs.KillMonstersScores> Pack(FlatBufferBuilder builder, KillMonstersScoresT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.KillMonstersScores>);
    var _difficulty_options = default(VectorOffset);
    if (_o.DifficultyOptions != null) {
      var __difficulty_options = _o.DifficultyOptions.ToArray();
      _difficulty_options = CreateDifficultyOptionsVector(builder, __difficulty_options);
    }
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    return CreateKillMonstersScores(
      builder,
      _o.Id,
      _o.InstanceId,
      _o.ScoreMin,
      _o.ScoreMax,
      _o.Reward,
      _difficulty_options,
      _desc);
  }
}

public class KillMonstersScoresT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("instance_id")]
  public int InstanceId { get; set; }
  [Newtonsoft.Json.JsonProperty("score_min")]
  public int ScoreMin { get; set; }
  [Newtonsoft.Json.JsonProperty("score_max")]
  public int ScoreMax { get; set; }
  [Newtonsoft.Json.JsonProperty("reward")]
  public int Reward { get; set; }
  [Newtonsoft.Json.JsonProperty("difficulty_options")]
  public List<int> DifficultyOptions { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }

  public KillMonstersScoresT() {
    this.Id = 0;
    this.InstanceId = 0;
    this.ScoreMin = 0;
    this.ScoreMax = 0;
    this.Reward = 0;
    this.DifficultyOptions = null;
    this.Desc = null;
  }
}


static public class KillMonstersScoresVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*InstanceId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ScoreMin*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ScoreMax*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Reward*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*DifficultyOptions*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 16 /*Desc*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
