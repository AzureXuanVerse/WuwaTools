// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FloatArray : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FloatArray GetRootAsFloatArray(ByteBuffer _bb) { return GetRootAsFloatArray(_bb, new FloatArray()); }
  public static FloatArray GetRootAsFloatArray(ByteBuffer _bb, FloatArray obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FloatArray __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float ArrayFloat(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ArrayFloatLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetArrayFloatBytes() { return __p.__vector_as_span<float>(4, 4); }
#else
  public ArraySegment<byte>? GetArrayFloatBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public float[] GetArrayFloatArray() { return __p.__vector_as_array<float>(4); }

  public static Offset<WWParser.Defs.FloatArray> CreateFloatArray(FlatBufferBuilder builder,
      VectorOffset array_floatOffset = default(VectorOffset)) {
    builder.StartTable(1);
    FloatArray.AddArrayFloat(builder, array_floatOffset);
    return FloatArray.EndFloatArray(builder);
  }

  public static void StartFloatArray(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddArrayFloat(FlatBufferBuilder builder, VectorOffset arrayFloatOffset) { builder.AddOffset(0, arrayFloatOffset.Value, 0); }
  public static VectorOffset CreateArrayFloatVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateArrayFloatVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArrayFloatVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArrayFloatVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartArrayFloatVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.FloatArray> EndFloatArray(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FloatArray>(o);
  }
  public FloatArrayT UnPack() {
    var _o = new FloatArrayT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FloatArrayT _o) {
    _o.ArrayFloat = new List<float>();
    for (var _j = 0; _j < this.ArrayFloatLength; ++_j) {_o.ArrayFloat.Add(this.ArrayFloat(_j));}
  }
  public static Offset<WWParser.Defs.FloatArray> Pack(FlatBufferBuilder builder, FloatArrayT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FloatArray>);
    var _array_float = default(VectorOffset);
    if (_o.ArrayFloat != null) {
      var __array_float = _o.ArrayFloat.ToArray();
      _array_float = CreateArrayFloatVector(builder, __array_float);
    }
    return CreateFloatArray(
      builder,
      _array_float);
  }
}

public class FloatArrayT
{
  [Newtonsoft.Json.JsonProperty("array_float")]
  public List<float> ArrayFloat { get; set; }

  public FloatArrayT() {
    this.ArrayFloat = null;
  }
}


static public class FloatArrayVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*ArrayFloat*/, 4 /*float*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
