// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PhonographMusic : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PhonographMusic GetRootAsPhonographMusic(ByteBuffer _bb) { return GetRootAsPhonographMusic(_bb, new PhonographMusic()); }
  public static PhonographMusic GetRootAsPhonographMusic(ByteBuffer _bb, PhonographMusic obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PhonographMusic __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MusicEvent { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMusicEventBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMusicEventBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMusicEventArray() { return __p.__vector_as_array<byte>(8); }
  public int Album(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AlbumLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAlbumBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetAlbumBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetAlbumArray() { return __p.__vector_as_array<int>(10); }
  public bool Lock { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float Duration { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string Desc { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(16); }
  public string Title { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(18); }
  public string UnlockConditionText { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnlockConditionTextBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetUnlockConditionTextBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetUnlockConditionTextArray() { return __p.__vector_as_array<byte>(20); }

  public static Offset<WWParser.Defs.PhonographMusic> CreatePhonographMusic(FlatBufferBuilder builder,
      int id = 0,
      int item_id = 0,
      StringOffset music_eventOffset = default(StringOffset),
      VectorOffset albumOffset = default(VectorOffset),
      bool @lock = false,
      float duration = 0.0f,
      StringOffset descOffset = default(StringOffset),
      StringOffset titleOffset = default(StringOffset),
      StringOffset unlock_condition_textOffset = default(StringOffset)) {
    builder.StartTable(9);
    PhonographMusic.AddUnlockConditionText(builder, unlock_condition_textOffset);
    PhonographMusic.AddTitle(builder, titleOffset);
    PhonographMusic.AddDesc(builder, descOffset);
    PhonographMusic.AddDuration(builder, duration);
    PhonographMusic.AddAlbum(builder, albumOffset);
    PhonographMusic.AddMusicEvent(builder, music_eventOffset);
    PhonographMusic.AddItemId(builder, item_id);
    PhonographMusic.AddId(builder, id);
    PhonographMusic.AddLock(builder, @lock);
    return PhonographMusic.EndPhonographMusic(builder);
  }

  public static void StartPhonographMusic(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddItemId(FlatBufferBuilder builder, int itemId) { builder.AddInt(1, itemId, 0); }
  public static void AddMusicEvent(FlatBufferBuilder builder, StringOffset musicEventOffset) { builder.AddOffset(2, musicEventOffset.Value, 0); }
  public static void AddAlbum(FlatBufferBuilder builder, VectorOffset albumOffset) { builder.AddOffset(3, albumOffset.Value, 0); }
  public static VectorOffset CreateAlbumVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAlbumVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAlbumVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAlbumVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAlbumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLock(FlatBufferBuilder builder, bool @lock) { builder.AddBool(4, @lock, false); }
  public static void AddDuration(FlatBufferBuilder builder, float duration) { builder.AddFloat(5, duration, 0.0f); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(6, descOffset.Value, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(7, titleOffset.Value, 0); }
  public static void AddUnlockConditionText(FlatBufferBuilder builder, StringOffset unlockConditionTextOffset) { builder.AddOffset(8, unlockConditionTextOffset.Value, 0); }
  public static Offset<WWParser.Defs.PhonographMusic> EndPhonographMusic(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PhonographMusic>(o);
  }
  public PhonographMusicT UnPack() {
    var _o = new PhonographMusicT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PhonographMusicT _o) {
    _o.Id = this.Id;
    _o.ItemId = this.ItemId;
    _o.MusicEvent = this.MusicEvent;
    _o.Album = new List<int>();
    for (var _j = 0; _j < this.AlbumLength; ++_j) {_o.Album.Add(this.Album(_j));}
    _o.Lock = this.Lock;
    _o.Duration = this.Duration;
    _o.Desc = this.Desc;
    _o.Title = this.Title;
    _o.UnlockConditionText = this.UnlockConditionText;
  }
  public static Offset<WWParser.Defs.PhonographMusic> Pack(FlatBufferBuilder builder, PhonographMusicT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PhonographMusic>);
    var _music_event = _o.MusicEvent == null ? default(StringOffset) : builder.CreateString(_o.MusicEvent);
    var _album = default(VectorOffset);
    if (_o.Album != null) {
      var __album = _o.Album.ToArray();
      _album = CreateAlbumVector(builder, __album);
    }
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _unlock_condition_text = _o.UnlockConditionText == null ? default(StringOffset) : builder.CreateString(_o.UnlockConditionText);
    return CreatePhonographMusic(
      builder,
      _o.Id,
      _o.ItemId,
      _music_event,
      _album,
      _o.Lock,
      _o.Duration,
      _desc,
      _title,
      _unlock_condition_text);
  }
}

public class PhonographMusicT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("item_id")]
  public int ItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("music_event")]
  public string MusicEvent { get; set; }
  [Newtonsoft.Json.JsonProperty("album")]
  public List<int> Album { get; set; }
  [Newtonsoft.Json.JsonProperty("lock")]
  public bool Lock { get; set; }
  [Newtonsoft.Json.JsonProperty("duration")]
  public float Duration { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_condition_text")]
  public string UnlockConditionText { get; set; }

  public PhonographMusicT() {
    this.Id = 0;
    this.ItemId = 0;
    this.MusicEvent = null;
    this.Album = null;
    this.Lock = false;
    this.Duration = 0.0f;
    this.Desc = null;
    this.Title = null;
    this.UnlockConditionText = null;
  }
}


static public class PhonographMusicVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*MusicEvent*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*Album*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 12 /*Lock*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*Duration*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*Desc*/, false)
      && verifier.VerifyString(tablePos, 18 /*Title*/, false)
      && verifier.VerifyString(tablePos, 20 /*UnlockConditionText*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
