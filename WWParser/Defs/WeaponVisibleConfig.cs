// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct WeaponVisibleConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static WeaponVisibleConfig GetRootAsWeaponVisibleConfig(ByteBuffer _bb) { return GetRootAsWeaponVisibleConfig(_bb, new WeaponVisibleConfig()); }
  public static WeaponVisibleConfig GetRootAsWeaponVisibleConfig(ByteBuffer _bb, WeaponVisibleConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WeaponVisibleConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BaseType(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BaseTypeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBaseTypeBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetBaseTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetBaseTypeArray() { return __p.__vector_as_array<int>(6); }
  public string VisibleTags(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int VisibleTagsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string HiddenTags(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int HiddenTagsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.WeaponVisibleConfig> CreateWeaponVisibleConfig(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset base_typeOffset = default(VectorOffset),
      VectorOffset visible_tagsOffset = default(VectorOffset),
      VectorOffset hidden_tagsOffset = default(VectorOffset)) {
    builder.StartTable(4);
    WeaponVisibleConfig.AddHiddenTags(builder, hidden_tagsOffset);
    WeaponVisibleConfig.AddVisibleTags(builder, visible_tagsOffset);
    WeaponVisibleConfig.AddBaseType(builder, base_typeOffset);
    WeaponVisibleConfig.AddId(builder, id);
    return WeaponVisibleConfig.EndWeaponVisibleConfig(builder);
  }

  public static void StartWeaponVisibleConfig(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddBaseType(FlatBufferBuilder builder, VectorOffset baseTypeOffset) { builder.AddOffset(1, baseTypeOffset.Value, 0); }
  public static VectorOffset CreateBaseTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBaseTypeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBaseTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBaseTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBaseTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVisibleTags(FlatBufferBuilder builder, VectorOffset visibleTagsOffset) { builder.AddOffset(2, visibleTagsOffset.Value, 0); }
  public static VectorOffset CreateVisibleTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVisibleTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVisibleTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVisibleTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVisibleTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHiddenTags(FlatBufferBuilder builder, VectorOffset hiddenTagsOffset) { builder.AddOffset(3, hiddenTagsOffset.Value, 0); }
  public static VectorOffset CreateHiddenTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateHiddenTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHiddenTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHiddenTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartHiddenTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.WeaponVisibleConfig> EndWeaponVisibleConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.WeaponVisibleConfig>(o);
  }
  public WeaponVisibleConfigT UnPack() {
    var _o = new WeaponVisibleConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WeaponVisibleConfigT _o) {
    _o.Id = this.Id;
    _o.BaseType = new List<int>();
    for (var _j = 0; _j < this.BaseTypeLength; ++_j) {_o.BaseType.Add(this.BaseType(_j));}
    _o.VisibleTags = new List<string>();
    for (var _j = 0; _j < this.VisibleTagsLength; ++_j) {_o.VisibleTags.Add(this.VisibleTags(_j));}
    _o.HiddenTags = new List<string>();
    for (var _j = 0; _j < this.HiddenTagsLength; ++_j) {_o.HiddenTags.Add(this.HiddenTags(_j));}
  }
  public static Offset<WWParser.Defs.WeaponVisibleConfig> Pack(FlatBufferBuilder builder, WeaponVisibleConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.WeaponVisibleConfig>);
    var _base_type = default(VectorOffset);
    if (_o.BaseType != null) {
      var __base_type = _o.BaseType.ToArray();
      _base_type = CreateBaseTypeVector(builder, __base_type);
    }
    var _visible_tags = default(VectorOffset);
    if (_o.VisibleTags != null) {
      var __visible_tags = new StringOffset[_o.VisibleTags.Count];
      for (var _j = 0; _j < __visible_tags.Length; ++_j) { __visible_tags[_j] = builder.CreateString(_o.VisibleTags[_j]); }
      _visible_tags = CreateVisibleTagsVector(builder, __visible_tags);
    }
    var _hidden_tags = default(VectorOffset);
    if (_o.HiddenTags != null) {
      var __hidden_tags = new StringOffset[_o.HiddenTags.Count];
      for (var _j = 0; _j < __hidden_tags.Length; ++_j) { __hidden_tags[_j] = builder.CreateString(_o.HiddenTags[_j]); }
      _hidden_tags = CreateHiddenTagsVector(builder, __hidden_tags);
    }
    return CreateWeaponVisibleConfig(
      builder,
      _o.Id,
      _base_type,
      _visible_tags,
      _hidden_tags);
  }
}

public class WeaponVisibleConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("base_type")]
  public List<int> BaseType { get; set; }
  [Newtonsoft.Json.JsonProperty("visible_tags")]
  public List<string> VisibleTags { get; set; }
  [Newtonsoft.Json.JsonProperty("hidden_tags")]
  public List<string> HiddenTags { get; set; }

  public WeaponVisibleConfigT() {
    this.Id = 0;
    this.BaseType = null;
    this.VisibleTags = null;
    this.HiddenTags = null;
  }
}


static public class WeaponVisibleConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*BaseType*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*VisibleTags*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*HiddenTags*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
