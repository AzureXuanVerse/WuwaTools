// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ScratchCardTimesRe : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ScratchCardTimesRe GetRootAsScratchCardTimesRe(ByteBuffer _bb) { return GetRootAsScratchCardTimesRe(_bb, new ScratchCardTimesRe()); }
  public static ScratchCardTimesRe GetRootAsScratchCardTimesRe(ByteBuffer _bb, ScratchCardTimesRe obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScratchCardTimesRe __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TaskId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TaskName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTaskNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTaskNameArray() { return __p.__vector_as_array<byte>(6); }
  public int TaskType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TaskTypeName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskTypeNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTaskTypeNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTaskTypeNameArray() { return __p.__vector_as_array<byte>(10); }
  public int TaskReward { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TaskParams(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TaskParamsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTaskParamsBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetTaskParamsBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetTaskParamsArray() { return __p.__vector_as_array<int>(14); }
  public int RefreshTimesLimit { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.ScratchCardTimesRe> CreateScratchCardTimesRe(FlatBufferBuilder builder,
      int task_id = 0,
      StringOffset task_nameOffset = default(StringOffset),
      int task_type = 0,
      StringOffset task_type_nameOffset = default(StringOffset),
      int task_reward = 0,
      VectorOffset task_paramsOffset = default(VectorOffset),
      int refresh_times_limit = 0) {
    builder.StartTable(7);
    ScratchCardTimesRe.AddRefreshTimesLimit(builder, refresh_times_limit);
    ScratchCardTimesRe.AddTaskParams(builder, task_paramsOffset);
    ScratchCardTimesRe.AddTaskReward(builder, task_reward);
    ScratchCardTimesRe.AddTaskTypeName(builder, task_type_nameOffset);
    ScratchCardTimesRe.AddTaskType(builder, task_type);
    ScratchCardTimesRe.AddTaskName(builder, task_nameOffset);
    ScratchCardTimesRe.AddTaskId(builder, task_id);
    return ScratchCardTimesRe.EndScratchCardTimesRe(builder);
  }

  public static void StartScratchCardTimesRe(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddTaskId(FlatBufferBuilder builder, int taskId) { builder.AddInt(0, taskId, 0); }
  public static void AddTaskName(FlatBufferBuilder builder, StringOffset taskNameOffset) { builder.AddOffset(1, taskNameOffset.Value, 0); }
  public static void AddTaskType(FlatBufferBuilder builder, int taskType) { builder.AddInt(2, taskType, 0); }
  public static void AddTaskTypeName(FlatBufferBuilder builder, StringOffset taskTypeNameOffset) { builder.AddOffset(3, taskTypeNameOffset.Value, 0); }
  public static void AddTaskReward(FlatBufferBuilder builder, int taskReward) { builder.AddInt(4, taskReward, 0); }
  public static void AddTaskParams(FlatBufferBuilder builder, VectorOffset taskParamsOffset) { builder.AddOffset(5, taskParamsOffset.Value, 0); }
  public static VectorOffset CreateTaskParamsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTaskParamsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTaskParamsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTaskParamsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTaskParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRefreshTimesLimit(FlatBufferBuilder builder, int refreshTimesLimit) { builder.AddInt(6, refreshTimesLimit, 0); }
  public static Offset<WWParser.Defs.ScratchCardTimesRe> EndScratchCardTimesRe(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ScratchCardTimesRe>(o);
  }
  public ScratchCardTimesReT UnPack() {
    var _o = new ScratchCardTimesReT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ScratchCardTimesReT _o) {
    _o.TaskId = this.TaskId;
    _o.TaskName = this.TaskName;
    _o.TaskType = this.TaskType;
    _o.TaskTypeName = this.TaskTypeName;
    _o.TaskReward = this.TaskReward;
    _o.TaskParams = new List<int>();
    for (var _j = 0; _j < this.TaskParamsLength; ++_j) {_o.TaskParams.Add(this.TaskParams(_j));}
    _o.RefreshTimesLimit = this.RefreshTimesLimit;
  }
  public static Offset<WWParser.Defs.ScratchCardTimesRe> Pack(FlatBufferBuilder builder, ScratchCardTimesReT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ScratchCardTimesRe>);
    var _task_name = _o.TaskName == null ? default(StringOffset) : builder.CreateString(_o.TaskName);
    var _task_type_name = _o.TaskTypeName == null ? default(StringOffset) : builder.CreateString(_o.TaskTypeName);
    var _task_params = default(VectorOffset);
    if (_o.TaskParams != null) {
      var __task_params = _o.TaskParams.ToArray();
      _task_params = CreateTaskParamsVector(builder, __task_params);
    }
    return CreateScratchCardTimesRe(
      builder,
      _o.TaskId,
      _task_name,
      _o.TaskType,
      _task_type_name,
      _o.TaskReward,
      _task_params,
      _o.RefreshTimesLimit);
  }
}

public class ScratchCardTimesReT
{
  [Newtonsoft.Json.JsonProperty("task_id")]
  public int TaskId { get; set; }
  [Newtonsoft.Json.JsonProperty("task_name")]
  public string TaskName { get; set; }
  [Newtonsoft.Json.JsonProperty("task_type")]
  public int TaskType { get; set; }
  [Newtonsoft.Json.JsonProperty("task_type_name")]
  public string TaskTypeName { get; set; }
  [Newtonsoft.Json.JsonProperty("task_reward")]
  public int TaskReward { get; set; }
  [Newtonsoft.Json.JsonProperty("task_params")]
  public List<int> TaskParams { get; set; }
  [Newtonsoft.Json.JsonProperty("refresh_times_limit")]
  public int RefreshTimesLimit { get; set; }

  public ScratchCardTimesReT() {
    this.TaskId = 0;
    this.TaskName = null;
    this.TaskType = 0;
    this.TaskTypeName = null;
    this.TaskReward = 0;
    this.TaskParams = null;
    this.RefreshTimesLimit = 0;
  }
}


static public class ScratchCardTimesReVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TaskId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*TaskName*/, false)
      && verifier.VerifyField(tablePos, 8 /*TaskType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*TaskTypeName*/, false)
      && verifier.VerifyField(tablePos, 12 /*TaskReward*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*TaskParams*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 16 /*RefreshTimesLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
