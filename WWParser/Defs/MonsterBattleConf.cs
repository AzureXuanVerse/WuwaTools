// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MonsterBattleConf : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MonsterBattleConf GetRootAsMonsterBattleConf(ByteBuffer _bb) { return GetRootAsMonsterBattleConf(_bb, new MonsterBattleConf()); }
  public static MonsterBattleConf GetRootAsMonsterBattleConf(ByteBuffer _bb, MonsterBattleConf obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MonsterBattleConf __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RoleMappingId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExecutionId(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ExecutionIdLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetExecutionIdBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetExecutionIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetExecutionIdArray() { return __p.__vector_as_array<int>(8); }
  public float ExecutionRadius { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)3.0f; } }
  public float ForceLockOnCoefficient { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int MonsterSizeId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int MonsterPerformanceId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool FixedLocation { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.MonsterBattleConf> CreateMonsterBattleConf(FlatBufferBuilder builder,
      int id = 0,
      int role_mapping_id = 0,
      VectorOffset execution_idOffset = default(VectorOffset),
      float execution_radius = 3.0f,
      float force_lock_on_coefficient = 0.0f,
      int monster_size_id = 1,
      int monster_performance_id = 0,
      bool fixed_location = false) {
    builder.StartTable(8);
    MonsterBattleConf.AddMonsterPerformanceId(builder, monster_performance_id);
    MonsterBattleConf.AddMonsterSizeId(builder, monster_size_id);
    MonsterBattleConf.AddForceLockOnCoefficient(builder, force_lock_on_coefficient);
    MonsterBattleConf.AddExecutionRadius(builder, execution_radius);
    MonsterBattleConf.AddExecutionId(builder, execution_idOffset);
    MonsterBattleConf.AddRoleMappingId(builder, role_mapping_id);
    MonsterBattleConf.AddId(builder, id);
    MonsterBattleConf.AddFixedLocation(builder, fixed_location);
    return MonsterBattleConf.EndMonsterBattleConf(builder);
  }

  public static void StartMonsterBattleConf(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddRoleMappingId(FlatBufferBuilder builder, int roleMappingId) { builder.AddInt(1, roleMappingId, 0); }
  public static void AddExecutionId(FlatBufferBuilder builder, VectorOffset executionIdOffset) { builder.AddOffset(2, executionIdOffset.Value, 0); }
  public static VectorOffset CreateExecutionIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateExecutionIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExecutionIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExecutionIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExecutionIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExecutionRadius(FlatBufferBuilder builder, float executionRadius) { builder.AddFloat(3, executionRadius, 3.0f); }
  public static void AddForceLockOnCoefficient(FlatBufferBuilder builder, float forceLockOnCoefficient) { builder.AddFloat(4, forceLockOnCoefficient, 0.0f); }
  public static void AddMonsterSizeId(FlatBufferBuilder builder, int monsterSizeId) { builder.AddInt(5, monsterSizeId, 1); }
  public static void AddMonsterPerformanceId(FlatBufferBuilder builder, int monsterPerformanceId) { builder.AddInt(6, monsterPerformanceId, 0); }
  public static void AddFixedLocation(FlatBufferBuilder builder, bool fixedLocation) { builder.AddBool(7, fixedLocation, false); }
  public static Offset<WWParser.Defs.MonsterBattleConf> EndMonsterBattleConf(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MonsterBattleConf>(o);
  }
  public MonsterBattleConfT UnPack() {
    var _o = new MonsterBattleConfT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MonsterBattleConfT _o) {
    _o.Id = this.Id;
    _o.RoleMappingId = this.RoleMappingId;
    _o.ExecutionId = new List<int>();
    for (var _j = 0; _j < this.ExecutionIdLength; ++_j) {_o.ExecutionId.Add(this.ExecutionId(_j));}
    _o.ExecutionRadius = this.ExecutionRadius;
    _o.ForceLockOnCoefficient = this.ForceLockOnCoefficient;
    _o.MonsterSizeId = this.MonsterSizeId;
    _o.MonsterPerformanceId = this.MonsterPerformanceId;
    _o.FixedLocation = this.FixedLocation;
  }
  public static Offset<WWParser.Defs.MonsterBattleConf> Pack(FlatBufferBuilder builder, MonsterBattleConfT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MonsterBattleConf>);
    var _execution_id = default(VectorOffset);
    if (_o.ExecutionId != null) {
      var __execution_id = _o.ExecutionId.ToArray();
      _execution_id = CreateExecutionIdVector(builder, __execution_id);
    }
    return CreateMonsterBattleConf(
      builder,
      _o.Id,
      _o.RoleMappingId,
      _execution_id,
      _o.ExecutionRadius,
      _o.ForceLockOnCoefficient,
      _o.MonsterSizeId,
      _o.MonsterPerformanceId,
      _o.FixedLocation);
  }
}

public class MonsterBattleConfT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("role_mapping_id")]
  public int RoleMappingId { get; set; }
  [Newtonsoft.Json.JsonProperty("execution_id")]
  public List<int> ExecutionId { get; set; }
  [Newtonsoft.Json.JsonProperty("execution_radius")]
  public float ExecutionRadius { get; set; }
  [Newtonsoft.Json.JsonProperty("force_lock_on_coefficient")]
  public float ForceLockOnCoefficient { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_size_id")]
  public int MonsterSizeId { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_performance_id")]
  public int MonsterPerformanceId { get; set; }
  [Newtonsoft.Json.JsonProperty("fixed_location")]
  public bool FixedLocation { get; set; }

  public MonsterBattleConfT() {
    this.Id = 0;
    this.RoleMappingId = 0;
    this.ExecutionId = null;
    this.ExecutionRadius = 3.0f;
    this.ForceLockOnCoefficient = 0.0f;
    this.MonsterSizeId = 1;
    this.MonsterPerformanceId = 0;
    this.FixedLocation = false;
  }
}


static public class MonsterBattleConfVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*RoleMappingId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*ExecutionId*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 10 /*ExecutionRadius*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*ForceLockOnCoefficient*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*MonsterSizeId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*MonsterPerformanceId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*FixedLocation*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
