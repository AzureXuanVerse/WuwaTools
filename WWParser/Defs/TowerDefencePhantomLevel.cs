// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TowerDefencePhantomLevel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TowerDefencePhantomLevel GetRootAsTowerDefencePhantomLevel(ByteBuffer _bb) { return GetRootAsTowerDefencePhantomLevel(_bb, new TowerDefencePhantomLevel()); }
  public static TowerDefencePhantomLevel GetRootAsTowerDefencePhantomLevel(ByteBuffer _bb, TowerDefencePhantomLevel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TowerDefencePhantomLevel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public double SkillId(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int SkillIdLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetSkillIdBytes() { return __p.__vector_as_span<double>(10, 8); }
#else
  public ArraySegment<byte>? GetSkillIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public double[] GetSkillIdArray() { return __p.__vector_as_array<double>(10); }
  public string Title { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(12); }
  public string Description { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(14); }
  public int ExpLevel { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.TowerDefencePhantomLevel> CreateTowerDefencePhantomLevel(FlatBufferBuilder builder,
      int id = 0,
      int group_id = 0,
      int level = 0,
      VectorOffset skill_idOffset = default(VectorOffset),
      StringOffset titleOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      int exp_level = 0) {
    builder.StartTable(7);
    TowerDefencePhantomLevel.AddExpLevel(builder, exp_level);
    TowerDefencePhantomLevel.AddDescription(builder, descriptionOffset);
    TowerDefencePhantomLevel.AddTitle(builder, titleOffset);
    TowerDefencePhantomLevel.AddSkillId(builder, skill_idOffset);
    TowerDefencePhantomLevel.AddLevel(builder, level);
    TowerDefencePhantomLevel.AddGroupId(builder, group_id);
    TowerDefencePhantomLevel.AddId(builder, id);
    return TowerDefencePhantomLevel.EndTowerDefencePhantomLevel(builder);
  }

  public static void StartTowerDefencePhantomLevel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, int groupId) { builder.AddInt(1, groupId, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(2, level, 0); }
  public static void AddSkillId(FlatBufferBuilder builder, VectorOffset skillIdOffset) { builder.AddOffset(3, skillIdOffset.Value, 0); }
  public static VectorOffset CreateSkillIdVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSkillIdVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillIdVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSkillIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(4, titleOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(5, descriptionOffset.Value, 0); }
  public static void AddExpLevel(FlatBufferBuilder builder, int expLevel) { builder.AddInt(6, expLevel, 0); }
  public static Offset<WWParser.Defs.TowerDefencePhantomLevel> EndTowerDefencePhantomLevel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.TowerDefencePhantomLevel>(o);
  }
  public TowerDefencePhantomLevelT UnPack() {
    var _o = new TowerDefencePhantomLevelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TowerDefencePhantomLevelT _o) {
    _o.Id = this.Id;
    _o.GroupId = this.GroupId;
    _o.Level = this.Level;
    _o.SkillId = new List<double>();
    for (var _j = 0; _j < this.SkillIdLength; ++_j) {_o.SkillId.Add(this.SkillId(_j));}
    _o.Title = this.Title;
    _o.Description = this.Description;
    _o.ExpLevel = this.ExpLevel;
  }
  public static Offset<WWParser.Defs.TowerDefencePhantomLevel> Pack(FlatBufferBuilder builder, TowerDefencePhantomLevelT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.TowerDefencePhantomLevel>);
    var _skill_id = default(VectorOffset);
    if (_o.SkillId != null) {
      var __skill_id = _o.SkillId.ToArray();
      _skill_id = CreateSkillIdVector(builder, __skill_id);
    }
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    return CreateTowerDefencePhantomLevel(
      builder,
      _o.Id,
      _o.GroupId,
      _o.Level,
      _skill_id,
      _title,
      _description,
      _o.ExpLevel);
  }
}

public class TowerDefencePhantomLevelT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("group_id")]
  public int GroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("level")]
  public int Level { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_id")]
  public List<double> SkillId { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("description")]
  public string Description { get; set; }
  [Newtonsoft.Json.JsonProperty("exp_level")]
  public int ExpLevel { get; set; }

  public TowerDefencePhantomLevelT() {
    this.Id = 0;
    this.GroupId = 0;
    this.Level = 0;
    this.SkillId = null;
    this.Title = null;
    this.Description = null;
    this.ExpLevel = 0;
  }
}


static public class TowerDefencePhantomLevelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*GroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*SkillId*/, 8 /*double*/, false)
      && verifier.VerifyString(tablePos, 12 /*Title*/, false)
      && verifier.VerifyString(tablePos, 14 /*Description*/, false)
      && verifier.VerifyField(tablePos, 16 /*ExpLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
