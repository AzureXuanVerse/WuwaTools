// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SlashAndTowerCfg : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SlashAndTowerCfg GetRootAsSlashAndTowerCfg(ByteBuffer _bb) { return GetRootAsSlashAndTowerCfg(_bb, new SlashAndTowerCfg()); }
  public static SlashAndTowerCfg GetRootAsSlashAndTowerCfg(ByteBuffer _bb, SlashAndTowerCfg obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SlashAndTowerCfg __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Season { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EndLess { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int InstIds(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int InstIdsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetInstIdsBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetInstIdsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetInstIdsArray() { return __p.__vector_as_array<int>(10); }
  public int PreLevel(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PreLevelLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPreLevelBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetPreLevelBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetPreLevelArray() { return __p.__vector_as_array<int>(12); }
  public int PassScore { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LevelPassReward { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(18); }
  public string Desc { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(20); }
  public int TargetScore(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TargetScoreLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTargetScoreBytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetTargetScoreBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetTargetScoreArray() { return __p.__vector_as_array<int>(22); }
  public string ScoreStage(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ScoreStageLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.SlashAndTowerCfg> CreateSlashAndTowerCfg(FlatBufferBuilder builder,
      int id = 0,
      int season = 0,
      bool end_less = false,
      VectorOffset inst_idsOffset = default(VectorOffset),
      VectorOffset pre_levelOffset = default(VectorOffset),
      int pass_score = 0,
      int level_pass_reward = 0,
      StringOffset titleOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      VectorOffset target_scoreOffset = default(VectorOffset),
      VectorOffset score_stageOffset = default(VectorOffset)) {
    builder.StartTable(11);
    SlashAndTowerCfg.AddScoreStage(builder, score_stageOffset);
    SlashAndTowerCfg.AddTargetScore(builder, target_scoreOffset);
    SlashAndTowerCfg.AddDesc(builder, descOffset);
    SlashAndTowerCfg.AddTitle(builder, titleOffset);
    SlashAndTowerCfg.AddLevelPassReward(builder, level_pass_reward);
    SlashAndTowerCfg.AddPassScore(builder, pass_score);
    SlashAndTowerCfg.AddPreLevel(builder, pre_levelOffset);
    SlashAndTowerCfg.AddInstIds(builder, inst_idsOffset);
    SlashAndTowerCfg.AddSeason(builder, season);
    SlashAndTowerCfg.AddId(builder, id);
    SlashAndTowerCfg.AddEndLess(builder, end_less);
    return SlashAndTowerCfg.EndSlashAndTowerCfg(builder);
  }

  public static void StartSlashAndTowerCfg(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddSeason(FlatBufferBuilder builder, int season) { builder.AddInt(1, season, 0); }
  public static void AddEndLess(FlatBufferBuilder builder, bool endLess) { builder.AddBool(2, endLess, false); }
  public static void AddInstIds(FlatBufferBuilder builder, VectorOffset instIdsOffset) { builder.AddOffset(3, instIdsOffset.Value, 0); }
  public static VectorOffset CreateInstIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInstIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInstIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInstIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInstIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPreLevel(FlatBufferBuilder builder, VectorOffset preLevelOffset) { builder.AddOffset(4, preLevelOffset.Value, 0); }
  public static VectorOffset CreatePreLevelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePreLevelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePreLevelVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePreLevelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPreLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPassScore(FlatBufferBuilder builder, int passScore) { builder.AddInt(5, passScore, 0); }
  public static void AddLevelPassReward(FlatBufferBuilder builder, int levelPassReward) { builder.AddInt(6, levelPassReward, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(7, titleOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(8, descOffset.Value, 0); }
  public static void AddTargetScore(FlatBufferBuilder builder, VectorOffset targetScoreOffset) { builder.AddOffset(9, targetScoreOffset.Value, 0); }
  public static VectorOffset CreateTargetScoreVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTargetScoreVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTargetScoreVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTargetScoreVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTargetScoreVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddScoreStage(FlatBufferBuilder builder, VectorOffset scoreStageOffset) { builder.AddOffset(10, scoreStageOffset.Value, 0); }
  public static VectorOffset CreateScoreStageVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateScoreStageVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateScoreStageVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateScoreStageVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartScoreStageVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.SlashAndTowerCfg> EndSlashAndTowerCfg(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SlashAndTowerCfg>(o);
  }
  public SlashAndTowerCfgT UnPack() {
    var _o = new SlashAndTowerCfgT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SlashAndTowerCfgT _o) {
    _o.Id = this.Id;
    _o.Season = this.Season;
    _o.EndLess = this.EndLess;
    _o.InstIds = new List<int>();
    for (var _j = 0; _j < this.InstIdsLength; ++_j) {_o.InstIds.Add(this.InstIds(_j));}
    _o.PreLevel = new List<int>();
    for (var _j = 0; _j < this.PreLevelLength; ++_j) {_o.PreLevel.Add(this.PreLevel(_j));}
    _o.PassScore = this.PassScore;
    _o.LevelPassReward = this.LevelPassReward;
    _o.Title = this.Title;
    _o.Desc = this.Desc;
    _o.TargetScore = new List<int>();
    for (var _j = 0; _j < this.TargetScoreLength; ++_j) {_o.TargetScore.Add(this.TargetScore(_j));}
    _o.ScoreStage = new List<string>();
    for (var _j = 0; _j < this.ScoreStageLength; ++_j) {_o.ScoreStage.Add(this.ScoreStage(_j));}
  }
  public static Offset<WWParser.Defs.SlashAndTowerCfg> Pack(FlatBufferBuilder builder, SlashAndTowerCfgT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SlashAndTowerCfg>);
    var _inst_ids = default(VectorOffset);
    if (_o.InstIds != null) {
      var __inst_ids = _o.InstIds.ToArray();
      _inst_ids = CreateInstIdsVector(builder, __inst_ids);
    }
    var _pre_level = default(VectorOffset);
    if (_o.PreLevel != null) {
      var __pre_level = _o.PreLevel.ToArray();
      _pre_level = CreatePreLevelVector(builder, __pre_level);
    }
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    var _target_score = default(VectorOffset);
    if (_o.TargetScore != null) {
      var __target_score = _o.TargetScore.ToArray();
      _target_score = CreateTargetScoreVector(builder, __target_score);
    }
    var _score_stage = default(VectorOffset);
    if (_o.ScoreStage != null) {
      var __score_stage = new StringOffset[_o.ScoreStage.Count];
      for (var _j = 0; _j < __score_stage.Length; ++_j) { __score_stage[_j] = builder.CreateString(_o.ScoreStage[_j]); }
      _score_stage = CreateScoreStageVector(builder, __score_stage);
    }
    return CreateSlashAndTowerCfg(
      builder,
      _o.Id,
      _o.Season,
      _o.EndLess,
      _inst_ids,
      _pre_level,
      _o.PassScore,
      _o.LevelPassReward,
      _title,
      _desc,
      _target_score,
      _score_stage);
  }
}

public class SlashAndTowerCfgT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("season")]
  public int Season { get; set; }
  [Newtonsoft.Json.JsonProperty("end_less")]
  public bool EndLess { get; set; }
  [Newtonsoft.Json.JsonProperty("inst_ids")]
  public List<int> InstIds { get; set; }
  [Newtonsoft.Json.JsonProperty("pre_level")]
  public List<int> PreLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("pass_score")]
  public int PassScore { get; set; }
  [Newtonsoft.Json.JsonProperty("level_pass_reward")]
  public int LevelPassReward { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }
  [Newtonsoft.Json.JsonProperty("target_score")]
  public List<int> TargetScore { get; set; }
  [Newtonsoft.Json.JsonProperty("score_stage")]
  public List<string> ScoreStage { get; set; }

  public SlashAndTowerCfgT() {
    this.Id = 0;
    this.Season = 0;
    this.EndLess = false;
    this.InstIds = null;
    this.PreLevel = null;
    this.PassScore = 0;
    this.LevelPassReward = 0;
    this.Title = null;
    this.Desc = null;
    this.TargetScore = null;
    this.ScoreStage = null;
  }
}


static public class SlashAndTowerCfgVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Season*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*EndLess*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*InstIds*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*PreLevel*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 14 /*PassScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*LevelPassReward*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*Title*/, false)
      && verifier.VerifyString(tablePos, 20 /*Desc*/, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*TargetScore*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 24 /*ScoreStage*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
