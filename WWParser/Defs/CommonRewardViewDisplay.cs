// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CommonRewardViewDisplay : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CommonRewardViewDisplay GetRootAsCommonRewardViewDisplay(ByteBuffer _bb) { return GetRootAsCommonRewardViewDisplay(_bb, new CommonRewardViewDisplay()); }
  public static CommonRewardViewDisplay GetRootAsCommonRewardViewDisplay(ByteBuffer _bb, CommonRewardViewDisplay obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CommonRewardViewDisplay __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(6); }
  public string ContinueText { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContinueTextBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetContinueTextBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetContinueTextArray() { return __p.__vector_as_array<byte>(8); }
  public bool IsItemVisible { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsSuccess { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string AudioId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAudioIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetAudioIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetAudioIdArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<WWParser.Defs.CommonRewardViewDisplay> CreateCommonRewardViewDisplay(FlatBufferBuilder builder,
      int id = 0,
      StringOffset titleOffset = default(StringOffset),
      StringOffset continue_textOffset = default(StringOffset),
      bool is_item_visible = false,
      bool is_success = false,
      StringOffset audio_idOffset = default(StringOffset)) {
    builder.StartTable(6);
    CommonRewardViewDisplay.AddAudioId(builder, audio_idOffset);
    CommonRewardViewDisplay.AddContinueText(builder, continue_textOffset);
    CommonRewardViewDisplay.AddTitle(builder, titleOffset);
    CommonRewardViewDisplay.AddId(builder, id);
    CommonRewardViewDisplay.AddIsSuccess(builder, is_success);
    CommonRewardViewDisplay.AddIsItemVisible(builder, is_item_visible);
    return CommonRewardViewDisplay.EndCommonRewardViewDisplay(builder);
  }

  public static void StartCommonRewardViewDisplay(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(1, titleOffset.Value, 0); }
  public static void AddContinueText(FlatBufferBuilder builder, StringOffset continueTextOffset) { builder.AddOffset(2, continueTextOffset.Value, 0); }
  public static void AddIsItemVisible(FlatBufferBuilder builder, bool isItemVisible) { builder.AddBool(3, isItemVisible, false); }
  public static void AddIsSuccess(FlatBufferBuilder builder, bool isSuccess) { builder.AddBool(4, isSuccess, false); }
  public static void AddAudioId(FlatBufferBuilder builder, StringOffset audioIdOffset) { builder.AddOffset(5, audioIdOffset.Value, 0); }
  public static Offset<WWParser.Defs.CommonRewardViewDisplay> EndCommonRewardViewDisplay(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.CommonRewardViewDisplay>(o);
  }
  public CommonRewardViewDisplayT UnPack() {
    var _o = new CommonRewardViewDisplayT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CommonRewardViewDisplayT _o) {
    _o.Id = this.Id;
    _o.Title = this.Title;
    _o.ContinueText = this.ContinueText;
    _o.IsItemVisible = this.IsItemVisible;
    _o.IsSuccess = this.IsSuccess;
    _o.AudioId = this.AudioId;
  }
  public static Offset<WWParser.Defs.CommonRewardViewDisplay> Pack(FlatBufferBuilder builder, CommonRewardViewDisplayT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.CommonRewardViewDisplay>);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _continue_text = _o.ContinueText == null ? default(StringOffset) : builder.CreateString(_o.ContinueText);
    var _audio_id = _o.AudioId == null ? default(StringOffset) : builder.CreateString(_o.AudioId);
    return CreateCommonRewardViewDisplay(
      builder,
      _o.Id,
      _title,
      _continue_text,
      _o.IsItemVisible,
      _o.IsSuccess,
      _audio_id);
  }
}

public class CommonRewardViewDisplayT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("continue_text")]
  public string ContinueText { get; set; }
  [Newtonsoft.Json.JsonProperty("is_item_visible")]
  public bool IsItemVisible { get; set; }
  [Newtonsoft.Json.JsonProperty("is_success")]
  public bool IsSuccess { get; set; }
  [Newtonsoft.Json.JsonProperty("audio_id")]
  public string AudioId { get; set; }

  public CommonRewardViewDisplayT() {
    this.Id = 0;
    this.Title = null;
    this.ContinueText = null;
    this.IsItemVisible = false;
    this.IsSuccess = false;
    this.AudioId = null;
  }
}


static public class CommonRewardViewDisplayVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Title*/, false)
      && verifier.VerifyString(tablePos, 8 /*ContinueText*/, false)
      && verifier.VerifyField(tablePos, 10 /*IsItemVisible*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*IsSuccess*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 14 /*AudioId*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
