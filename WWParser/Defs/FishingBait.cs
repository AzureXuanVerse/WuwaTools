// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FishingBait : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FishingBait GetRootAsFishingBait(ByteBuffer _bb) { return GetRootAsFishingBait(_bb, new FishingBait()); }
  public static FishingBait GetRootAsFishingBait(ByteBuffer _bb, FishingBait obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FishingBait __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExploreToolId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AreaId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GamePlayId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CountLimit { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.FishingBait> CreateFishingBait(FlatBufferBuilder builder,
      int id = 0,
      int explore_tool_id = 0,
      int area_id = 0,
      int game_play_id = 0,
      int item_id = 0,
      int count_limit = 0) {
    builder.StartTable(6);
    FishingBait.AddCountLimit(builder, count_limit);
    FishingBait.AddItemId(builder, item_id);
    FishingBait.AddGamePlayId(builder, game_play_id);
    FishingBait.AddAreaId(builder, area_id);
    FishingBait.AddExploreToolId(builder, explore_tool_id);
    FishingBait.AddId(builder, id);
    return FishingBait.EndFishingBait(builder);
  }

  public static void StartFishingBait(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddExploreToolId(FlatBufferBuilder builder, int exploreToolId) { builder.AddInt(1, exploreToolId, 0); }
  public static void AddAreaId(FlatBufferBuilder builder, int areaId) { builder.AddInt(2, areaId, 0); }
  public static void AddGamePlayId(FlatBufferBuilder builder, int gamePlayId) { builder.AddInt(3, gamePlayId, 0); }
  public static void AddItemId(FlatBufferBuilder builder, int itemId) { builder.AddInt(4, itemId, 0); }
  public static void AddCountLimit(FlatBufferBuilder builder, int countLimit) { builder.AddInt(5, countLimit, 0); }
  public static Offset<WWParser.Defs.FishingBait> EndFishingBait(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FishingBait>(o);
  }
  public FishingBaitT UnPack() {
    var _o = new FishingBaitT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FishingBaitT _o) {
    _o.Id = this.Id;
    _o.ExploreToolId = this.ExploreToolId;
    _o.AreaId = this.AreaId;
    _o.GamePlayId = this.GamePlayId;
    _o.ItemId = this.ItemId;
    _o.CountLimit = this.CountLimit;
  }
  public static Offset<WWParser.Defs.FishingBait> Pack(FlatBufferBuilder builder, FishingBaitT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FishingBait>);
    return CreateFishingBait(
      builder,
      _o.Id,
      _o.ExploreToolId,
      _o.AreaId,
      _o.GamePlayId,
      _o.ItemId,
      _o.CountLimit);
  }
}

public class FishingBaitT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("explore_tool_id")]
  public int ExploreToolId { get; set; }
  [Newtonsoft.Json.JsonProperty("area_id")]
  public int AreaId { get; set; }
  [Newtonsoft.Json.JsonProperty("game_play_id")]
  public int GamePlayId { get; set; }
  [Newtonsoft.Json.JsonProperty("item_id")]
  public int ItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("count_limit")]
  public int CountLimit { get; set; }

  public FishingBaitT() {
    this.Id = 0;
    this.ExploreToolId = 0;
    this.AreaId = 0;
    this.GamePlayId = 0;
    this.ItemId = 0;
    this.CountLimit = 0;
  }
}


static public class FishingBaitVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ExploreToolId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*AreaId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*GamePlayId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*ItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*CountLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
