// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FishingTech : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FishingTech GetRootAsFishingTech(ByteBuffer _bb) { return GetRootAsFishingTech(_bb, new FishingTech()); }
  public static FishingTech GetRootAsFishingTech(ByteBuffer _bb, FishingTech obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FishingTech __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int Type { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TreeLevel { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Area { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IndexId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PreNode { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockCondition { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Effect(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EffectLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEffectBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetEffectBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetEffectArray() { return __p.__vector_as_array<int>(20); }
  public string Icon { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(22); }
  public string TagName { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTagNameBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetTagNameBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetTagNameArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<WWParser.Defs.FishingTech> CreateFishingTech(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      int type = 0,
      int tree_level = 0,
      int area = 0,
      int index_id = 0,
      int pre_node = 0,
      int unlock_condition = 0,
      VectorOffset effectOffset = default(VectorOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset tag_nameOffset = default(StringOffset)) {
    builder.StartTable(11);
    FishingTech.AddTagName(builder, tag_nameOffset);
    FishingTech.AddIcon(builder, iconOffset);
    FishingTech.AddEffect(builder, effectOffset);
    FishingTech.AddUnlockCondition(builder, unlock_condition);
    FishingTech.AddPreNode(builder, pre_node);
    FishingTech.AddIndexId(builder, index_id);
    FishingTech.AddArea(builder, area);
    FishingTech.AddTreeLevel(builder, tree_level);
    FishingTech.AddType(builder, type);
    FishingTech.AddName(builder, nameOffset);
    FishingTech.AddId(builder, id);
    return FishingTech.EndFishingTech(builder);
  }

  public static void StartFishingTech(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(2, type, 0); }
  public static void AddTreeLevel(FlatBufferBuilder builder, int treeLevel) { builder.AddInt(3, treeLevel, 0); }
  public static void AddArea(FlatBufferBuilder builder, int area) { builder.AddInt(4, area, 0); }
  public static void AddIndexId(FlatBufferBuilder builder, int indexId) { builder.AddInt(5, indexId, 0); }
  public static void AddPreNode(FlatBufferBuilder builder, int preNode) { builder.AddInt(6, preNode, 0); }
  public static void AddUnlockCondition(FlatBufferBuilder builder, int unlockCondition) { builder.AddInt(7, unlockCondition, 0); }
  public static void AddEffect(FlatBufferBuilder builder, VectorOffset effectOffset) { builder.AddOffset(8, effectOffset.Value, 0); }
  public static VectorOffset CreateEffectVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEffectVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEffectVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEffectVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEffectVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(9, iconOffset.Value, 0); }
  public static void AddTagName(FlatBufferBuilder builder, StringOffset tagNameOffset) { builder.AddOffset(10, tagNameOffset.Value, 0); }
  public static Offset<WWParser.Defs.FishingTech> EndFishingTech(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FishingTech>(o);
  }
  public FishingTechT UnPack() {
    var _o = new FishingTechT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FishingTechT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.Type = this.Type;
    _o.TreeLevel = this.TreeLevel;
    _o.Area = this.Area;
    _o.IndexId = this.IndexId;
    _o.PreNode = this.PreNode;
    _o.UnlockCondition = this.UnlockCondition;
    _o.Effect = new List<int>();
    for (var _j = 0; _j < this.EffectLength; ++_j) {_o.Effect.Add(this.Effect(_j));}
    _o.Icon = this.Icon;
    _o.TagName = this.TagName;
  }
  public static Offset<WWParser.Defs.FishingTech> Pack(FlatBufferBuilder builder, FishingTechT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FishingTech>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _effect = default(VectorOffset);
    if (_o.Effect != null) {
      var __effect = _o.Effect.ToArray();
      _effect = CreateEffectVector(builder, __effect);
    }
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _tag_name = _o.TagName == null ? default(StringOffset) : builder.CreateString(_o.TagName);
    return CreateFishingTech(
      builder,
      _o.Id,
      _name,
      _o.Type,
      _o.TreeLevel,
      _o.Area,
      _o.IndexId,
      _o.PreNode,
      _o.UnlockCondition,
      _effect,
      _icon,
      _tag_name);
  }
}

public class FishingTechT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("tree_level")]
  public int TreeLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("area")]
  public int Area { get; set; }
  [Newtonsoft.Json.JsonProperty("index_id")]
  public int IndexId { get; set; }
  [Newtonsoft.Json.JsonProperty("pre_node")]
  public int PreNode { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_condition")]
  public int UnlockCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("effect")]
  public List<int> Effect { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("tag_name")]
  public string TagName { get; set; }

  public FishingTechT() {
    this.Id = 0;
    this.Name = null;
    this.Type = 0;
    this.TreeLevel = 0;
    this.Area = 0;
    this.IndexId = 0;
    this.PreNode = 0;
    this.UnlockCondition = 0;
    this.Effect = null;
    this.Icon = null;
    this.TagName = null;
  }
}


static public class FishingTechVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*TreeLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Area*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*IndexId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*PreNode*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*UnlockCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*Effect*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 22 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 24 /*TagName*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
