// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DragonPool : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DragonPool GetRootAsDragonPool(ByteBuffer _bb) { return GetRootAsDragonPool(_bb, new DragonPool()); }
  public static DragonPool GetRootAsDragonPool(ByteBuffer _bb, DragonPool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DragonPool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CoreId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Goal(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int GoalLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetGoalBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetGoalBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetGoalArray() { return __p.__vector_as_array<int>(8); }
  public int DropIds(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DropIdsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDropIdsBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetDropIdsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetDropIdsArray() { return __p.__vector_as_array<int>(10); }
  public int DarkCoastDeliveryList(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DarkCoastDeliveryListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDarkCoastDeliveryListBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetDarkCoastDeliveryListBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetDarkCoastDeliveryListArray() { return __p.__vector_as_array<int>(12); }
  public bool AutoTake { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.DragonPool> CreateDragonPool(FlatBufferBuilder builder,
      int id = 0,
      int core_id = 0,
      VectorOffset goalOffset = default(VectorOffset),
      VectorOffset drop_idsOffset = default(VectorOffset),
      VectorOffset dark_coast_delivery_listOffset = default(VectorOffset),
      bool auto_take = false) {
    builder.StartTable(6);
    DragonPool.AddDarkCoastDeliveryList(builder, dark_coast_delivery_listOffset);
    DragonPool.AddDropIds(builder, drop_idsOffset);
    DragonPool.AddGoal(builder, goalOffset);
    DragonPool.AddCoreId(builder, core_id);
    DragonPool.AddId(builder, id);
    DragonPool.AddAutoTake(builder, auto_take);
    return DragonPool.EndDragonPool(builder);
  }

  public static void StartDragonPool(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddCoreId(FlatBufferBuilder builder, int coreId) { builder.AddInt(1, coreId, 0); }
  public static void AddGoal(FlatBufferBuilder builder, VectorOffset goalOffset) { builder.AddOffset(2, goalOffset.Value, 0); }
  public static VectorOffset CreateGoalVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGoalVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGoalVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGoalVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGoalVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDropIds(FlatBufferBuilder builder, VectorOffset dropIdsOffset) { builder.AddOffset(3, dropIdsOffset.Value, 0); }
  public static VectorOffset CreateDropIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDropIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDropIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDropIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDropIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDarkCoastDeliveryList(FlatBufferBuilder builder, VectorOffset darkCoastDeliveryListOffset) { builder.AddOffset(4, darkCoastDeliveryListOffset.Value, 0); }
  public static VectorOffset CreateDarkCoastDeliveryListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDarkCoastDeliveryListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDarkCoastDeliveryListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDarkCoastDeliveryListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDarkCoastDeliveryListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAutoTake(FlatBufferBuilder builder, bool autoTake) { builder.AddBool(5, autoTake, false); }
  public static Offset<WWParser.Defs.DragonPool> EndDragonPool(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DragonPool>(o);
  }
  public DragonPoolT UnPack() {
    var _o = new DragonPoolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DragonPoolT _o) {
    _o.Id = this.Id;
    _o.CoreId = this.CoreId;
    _o.Goal = new List<int>();
    for (var _j = 0; _j < this.GoalLength; ++_j) {_o.Goal.Add(this.Goal(_j));}
    _o.DropIds = new List<int>();
    for (var _j = 0; _j < this.DropIdsLength; ++_j) {_o.DropIds.Add(this.DropIds(_j));}
    _o.DarkCoastDeliveryList = new List<int>();
    for (var _j = 0; _j < this.DarkCoastDeliveryListLength; ++_j) {_o.DarkCoastDeliveryList.Add(this.DarkCoastDeliveryList(_j));}
    _o.AutoTake = this.AutoTake;
  }
  public static Offset<WWParser.Defs.DragonPool> Pack(FlatBufferBuilder builder, DragonPoolT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DragonPool>);
    var _goal = default(VectorOffset);
    if (_o.Goal != null) {
      var __goal = _o.Goal.ToArray();
      _goal = CreateGoalVector(builder, __goal);
    }
    var _drop_ids = default(VectorOffset);
    if (_o.DropIds != null) {
      var __drop_ids = _o.DropIds.ToArray();
      _drop_ids = CreateDropIdsVector(builder, __drop_ids);
    }
    var _dark_coast_delivery_list = default(VectorOffset);
    if (_o.DarkCoastDeliveryList != null) {
      var __dark_coast_delivery_list = _o.DarkCoastDeliveryList.ToArray();
      _dark_coast_delivery_list = CreateDarkCoastDeliveryListVector(builder, __dark_coast_delivery_list);
    }
    return CreateDragonPool(
      builder,
      _o.Id,
      _o.CoreId,
      _goal,
      _drop_ids,
      _dark_coast_delivery_list,
      _o.AutoTake);
  }
}

public class DragonPoolT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("core_id")]
  public int CoreId { get; set; }
  [Newtonsoft.Json.JsonProperty("goal")]
  public List<int> Goal { get; set; }
  [Newtonsoft.Json.JsonProperty("drop_ids")]
  public List<int> DropIds { get; set; }
  [Newtonsoft.Json.JsonProperty("dark_coast_delivery_list")]
  public List<int> DarkCoastDeliveryList { get; set; }
  [Newtonsoft.Json.JsonProperty("auto_take")]
  public bool AutoTake { get; set; }

  public DragonPoolT() {
    this.Id = 0;
    this.CoreId = 0;
    this.Goal = null;
    this.DropIds = null;
    this.DarkCoastDeliveryList = null;
    this.AutoTake = false;
  }
}


static public class DragonPoolVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*CoreId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*Goal*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*DropIds*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*DarkCoastDeliveryList*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 14 /*AutoTake*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
