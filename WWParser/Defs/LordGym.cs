// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LordGym : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static LordGym GetRootAsLordGym(ByteBuffer _bb) { return GetRootAsLordGym(_bb, new LordGym()); }
  public static LordGym GetRootAsLordGym(ByteBuffer _bb, LordGym obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LordGym __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Difficulty { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int RewardId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PlayId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string GymTitle { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGymTitleBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetGymTitleBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetGymTitleArray() { return __p.__vector_as_array<byte>(12); }
  public string NewGymTitle { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNewGymTitleBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNewGymTitleBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNewGymTitleArray() { return __p.__vector_as_array<byte>(14); }
  public string IconPath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconPathBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIconPathArray() { return __p.__vector_as_array<byte>(16); }
  public string PlayDescription { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlayDescriptionBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetPlayDescriptionBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetPlayDescriptionArray() { return __p.__vector_as_array<byte>(18); }
  public int HelpId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MonsterList(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MonsterListLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetMonsterListBytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetMonsterListBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetMonsterListArray() { return __p.__vector_as_array<int>(22); }
  public int MonsterLevel { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LockCon { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string LockDescription { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLockDescriptionBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetLockDescriptionBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetLockDescriptionArray() { return __p.__vector_as_array<byte>(28); }
  public int FilterType { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public bool IsNew { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsDebug { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.LordGym> CreateLordGym(FlatBufferBuilder builder,
      int id = 0,
      int difficulty = 1,
      int reward_id = 0,
      int play_id = 0,
      StringOffset gym_titleOffset = default(StringOffset),
      StringOffset new_gym_titleOffset = default(StringOffset),
      StringOffset icon_pathOffset = default(StringOffset),
      StringOffset play_descriptionOffset = default(StringOffset),
      int help_id = 0,
      VectorOffset monster_listOffset = default(VectorOffset),
      int monster_level = 0,
      int lock_con = 0,
      StringOffset lock_descriptionOffset = default(StringOffset),
      int filter_type = 1,
      bool is_new = false,
      bool is_debug = false) {
    builder.StartTable(16);
    LordGym.AddFilterType(builder, filter_type);
    LordGym.AddLockDescription(builder, lock_descriptionOffset);
    LordGym.AddLockCon(builder, lock_con);
    LordGym.AddMonsterLevel(builder, monster_level);
    LordGym.AddMonsterList(builder, monster_listOffset);
    LordGym.AddHelpId(builder, help_id);
    LordGym.AddPlayDescription(builder, play_descriptionOffset);
    LordGym.AddIconPath(builder, icon_pathOffset);
    LordGym.AddNewGymTitle(builder, new_gym_titleOffset);
    LordGym.AddGymTitle(builder, gym_titleOffset);
    LordGym.AddPlayId(builder, play_id);
    LordGym.AddRewardId(builder, reward_id);
    LordGym.AddDifficulty(builder, difficulty);
    LordGym.AddId(builder, id);
    LordGym.AddIsDebug(builder, is_debug);
    LordGym.AddIsNew(builder, is_new);
    return LordGym.EndLordGym(builder);
  }

  public static void StartLordGym(FlatBufferBuilder builder) { builder.StartTable(16); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDifficulty(FlatBufferBuilder builder, int difficulty) { builder.AddInt(1, difficulty, 1); }
  public static void AddRewardId(FlatBufferBuilder builder, int rewardId) { builder.AddInt(2, rewardId, 0); }
  public static void AddPlayId(FlatBufferBuilder builder, int playId) { builder.AddInt(3, playId, 0); }
  public static void AddGymTitle(FlatBufferBuilder builder, StringOffset gymTitleOffset) { builder.AddOffset(4, gymTitleOffset.Value, 0); }
  public static void AddNewGymTitle(FlatBufferBuilder builder, StringOffset newGymTitleOffset) { builder.AddOffset(5, newGymTitleOffset.Value, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset iconPathOffset) { builder.AddOffset(6, iconPathOffset.Value, 0); }
  public static void AddPlayDescription(FlatBufferBuilder builder, StringOffset playDescriptionOffset) { builder.AddOffset(7, playDescriptionOffset.Value, 0); }
  public static void AddHelpId(FlatBufferBuilder builder, int helpId) { builder.AddInt(8, helpId, 0); }
  public static void AddMonsterList(FlatBufferBuilder builder, VectorOffset monsterListOffset) { builder.AddOffset(9, monsterListOffset.Value, 0); }
  public static VectorOffset CreateMonsterListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMonsterListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMonsterListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMonsterListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMonsterListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMonsterLevel(FlatBufferBuilder builder, int monsterLevel) { builder.AddInt(10, monsterLevel, 0); }
  public static void AddLockCon(FlatBufferBuilder builder, int lockCon) { builder.AddInt(11, lockCon, 0); }
  public static void AddLockDescription(FlatBufferBuilder builder, StringOffset lockDescriptionOffset) { builder.AddOffset(12, lockDescriptionOffset.Value, 0); }
  public static void AddFilterType(FlatBufferBuilder builder, int filterType) { builder.AddInt(13, filterType, 1); }
  public static void AddIsNew(FlatBufferBuilder builder, bool isNew) { builder.AddBool(14, isNew, false); }
  public static void AddIsDebug(FlatBufferBuilder builder, bool isDebug) { builder.AddBool(15, isDebug, false); }
  public static Offset<WWParser.Defs.LordGym> EndLordGym(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.LordGym>(o);
  }
  public LordGymT UnPack() {
    var _o = new LordGymT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LordGymT _o) {
    _o.Id = this.Id;
    _o.Difficulty = this.Difficulty;
    _o.RewardId = this.RewardId;
    _o.PlayId = this.PlayId;
    _o.GymTitle = this.GymTitle;
    _o.NewGymTitle = this.NewGymTitle;
    _o.IconPath = this.IconPath;
    _o.PlayDescription = this.PlayDescription;
    _o.HelpId = this.HelpId;
    _o.MonsterList = new List<int>();
    for (var _j = 0; _j < this.MonsterListLength; ++_j) {_o.MonsterList.Add(this.MonsterList(_j));}
    _o.MonsterLevel = this.MonsterLevel;
    _o.LockCon = this.LockCon;
    _o.LockDescription = this.LockDescription;
    _o.FilterType = this.FilterType;
    _o.IsNew = this.IsNew;
    _o.IsDebug = this.IsDebug;
  }
  public static Offset<WWParser.Defs.LordGym> Pack(FlatBufferBuilder builder, LordGymT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.LordGym>);
    var _gym_title = _o.GymTitle == null ? default(StringOffset) : builder.CreateString(_o.GymTitle);
    var _new_gym_title = _o.NewGymTitle == null ? default(StringOffset) : builder.CreateString(_o.NewGymTitle);
    var _icon_path = _o.IconPath == null ? default(StringOffset) : builder.CreateString(_o.IconPath);
    var _play_description = _o.PlayDescription == null ? default(StringOffset) : builder.CreateString(_o.PlayDescription);
    var _monster_list = default(VectorOffset);
    if (_o.MonsterList != null) {
      var __monster_list = _o.MonsterList.ToArray();
      _monster_list = CreateMonsterListVector(builder, __monster_list);
    }
    var _lock_description = _o.LockDescription == null ? default(StringOffset) : builder.CreateString(_o.LockDescription);
    return CreateLordGym(
      builder,
      _o.Id,
      _o.Difficulty,
      _o.RewardId,
      _o.PlayId,
      _gym_title,
      _new_gym_title,
      _icon_path,
      _play_description,
      _o.HelpId,
      _monster_list,
      _o.MonsterLevel,
      _o.LockCon,
      _lock_description,
      _o.FilterType,
      _o.IsNew,
      _o.IsDebug);
  }
}

public class LordGymT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("difficulty")]
  public int Difficulty { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_id")]
  public int RewardId { get; set; }
  [Newtonsoft.Json.JsonProperty("play_id")]
  public int PlayId { get; set; }
  [Newtonsoft.Json.JsonProperty("gym_title")]
  public string GymTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("new_gym_title")]
  public string NewGymTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_path")]
  public string IconPath { get; set; }
  [Newtonsoft.Json.JsonProperty("play_description")]
  public string PlayDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("help_id")]
  public int HelpId { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_list")]
  public List<int> MonsterList { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_level")]
  public int MonsterLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("lock_con")]
  public int LockCon { get; set; }
  [Newtonsoft.Json.JsonProperty("lock_description")]
  public string LockDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("filter_type")]
  public int FilterType { get; set; }
  [Newtonsoft.Json.JsonProperty("is_new")]
  public bool IsNew { get; set; }
  [Newtonsoft.Json.JsonProperty("is_debug")]
  public bool IsDebug { get; set; }

  public LordGymT() {
    this.Id = 0;
    this.Difficulty = 1;
    this.RewardId = 0;
    this.PlayId = 0;
    this.GymTitle = null;
    this.NewGymTitle = null;
    this.IconPath = null;
    this.PlayDescription = null;
    this.HelpId = 0;
    this.MonsterList = null;
    this.MonsterLevel = 0;
    this.LockCon = 0;
    this.LockDescription = null;
    this.FilterType = 1;
    this.IsNew = false;
    this.IsDebug = false;
  }
}


static public class LordGymVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Difficulty*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*RewardId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*PlayId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*GymTitle*/, false)
      && verifier.VerifyString(tablePos, 14 /*NewGymTitle*/, false)
      && verifier.VerifyString(tablePos, 16 /*IconPath*/, false)
      && verifier.VerifyString(tablePos, 18 /*PlayDescription*/, false)
      && verifier.VerifyField(tablePos, 20 /*HelpId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*MonsterList*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 24 /*MonsterLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*LockCon*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 28 /*LockDescription*/, false)
      && verifier.VerifyField(tablePos, 30 /*FilterType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*IsNew*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 34 /*IsDebug*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
