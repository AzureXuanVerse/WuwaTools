// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct InteractData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static InteractData GetRootAsInteractData(ByteBuffer _bb) { return GetRootAsInteractData(_bb, new InteractData()); }
  public static InteractData GetRootAsInteractData(ByteBuffer _bb, InteractData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InteractData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Guid { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGuidBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetGuidBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetGuidArray() { return __p.__vector_as_array<byte>(4); }
  public string Type { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(6); }
  public string Icon { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(8); }
  public string TidContent { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTidContentBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTidContentBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTidContentArray() { return __p.__vector_as_array<byte>(10); }
  public string Condition { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConditionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetConditionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetConditionArray() { return __p.__vector_as_array<byte>(12); }
  public string UniquenessTest { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUniquenessTestBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetUniquenessTestBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetUniquenessTestArray() { return __p.__vector_as_array<byte>(14); }
  public string DoIntactType { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDoIntactTypeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetDoIntactTypeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetDoIntactTypeArray() { return __p.__vector_as_array<byte>(16); }
  public int Range { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Duration { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDurationBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetDurationBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetDurationArray() { return __p.__vector_as_array<byte>(20); }

  public static Offset<WWParser.Defs.InteractData> CreateInteractData(FlatBufferBuilder builder,
      StringOffset guidOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset tid_contentOffset = default(StringOffset),
      StringOffset conditionOffset = default(StringOffset),
      StringOffset uniqueness_testOffset = default(StringOffset),
      StringOffset do_intact_typeOffset = default(StringOffset),
      int range = 0,
      StringOffset durationOffset = default(StringOffset)) {
    builder.StartTable(9);
    InteractData.AddDuration(builder, durationOffset);
    InteractData.AddRange(builder, range);
    InteractData.AddDoIntactType(builder, do_intact_typeOffset);
    InteractData.AddUniquenessTest(builder, uniqueness_testOffset);
    InteractData.AddCondition(builder, conditionOffset);
    InteractData.AddTidContent(builder, tid_contentOffset);
    InteractData.AddIcon(builder, iconOffset);
    InteractData.AddType(builder, typeOffset);
    InteractData.AddGuid(builder, guidOffset);
    return InteractData.EndInteractData(builder);
  }

  public static void StartInteractData(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddGuid(FlatBufferBuilder builder, StringOffset guidOffset) { builder.AddOffset(0, guidOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(2, iconOffset.Value, 0); }
  public static void AddTidContent(FlatBufferBuilder builder, StringOffset tidContentOffset) { builder.AddOffset(3, tidContentOffset.Value, 0); }
  public static void AddCondition(FlatBufferBuilder builder, StringOffset conditionOffset) { builder.AddOffset(4, conditionOffset.Value, 0); }
  public static void AddUniquenessTest(FlatBufferBuilder builder, StringOffset uniquenessTestOffset) { builder.AddOffset(5, uniquenessTestOffset.Value, 0); }
  public static void AddDoIntactType(FlatBufferBuilder builder, StringOffset doIntactTypeOffset) { builder.AddOffset(6, doIntactTypeOffset.Value, 0); }
  public static void AddRange(FlatBufferBuilder builder, int range) { builder.AddInt(7, range, 0); }
  public static void AddDuration(FlatBufferBuilder builder, StringOffset durationOffset) { builder.AddOffset(8, durationOffset.Value, 0); }
  public static Offset<WWParser.Defs.InteractData> EndInteractData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.InteractData>(o);
  }
  public InteractDataT UnPack() {
    var _o = new InteractDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InteractDataT _o) {
    _o.Guid = this.Guid;
    _o.Type = this.Type;
    _o.Icon = this.Icon;
    _o.TidContent = this.TidContent;
    _o.Condition = this.Condition;
    _o.UniquenessTest = this.UniquenessTest;
    _o.DoIntactType = this.DoIntactType;
    _o.Range = this.Range;
    _o.Duration = this.Duration;
  }
  public static Offset<WWParser.Defs.InteractData> Pack(FlatBufferBuilder builder, InteractDataT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.InteractData>);
    var _guid = _o.Guid == null ? default(StringOffset) : builder.CreateString(_o.Guid);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _tid_content = _o.TidContent == null ? default(StringOffset) : builder.CreateString(_o.TidContent);
    var _condition = _o.Condition == null ? default(StringOffset) : builder.CreateString(_o.Condition);
    var _uniqueness_test = _o.UniquenessTest == null ? default(StringOffset) : builder.CreateString(_o.UniquenessTest);
    var _do_intact_type = _o.DoIntactType == null ? default(StringOffset) : builder.CreateString(_o.DoIntactType);
    var _duration = _o.Duration == null ? default(StringOffset) : builder.CreateString(_o.Duration);
    return CreateInteractData(
      builder,
      _guid,
      _type,
      _icon,
      _tid_content,
      _condition,
      _uniqueness_test,
      _do_intact_type,
      _o.Range,
      _duration);
  }
}

public class InteractDataT
{
  [Newtonsoft.Json.JsonProperty("guid")]
  public string Guid { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public string Type { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("tid_content")]
  public string TidContent { get; set; }
  [Newtonsoft.Json.JsonProperty("condition")]
  public string Condition { get; set; }
  [Newtonsoft.Json.JsonProperty("uniqueness_test")]
  public string UniquenessTest { get; set; }
  [Newtonsoft.Json.JsonProperty("do_intact_type")]
  public string DoIntactType { get; set; }
  [Newtonsoft.Json.JsonProperty("range")]
  public int Range { get; set; }
  [Newtonsoft.Json.JsonProperty("duration")]
  public string Duration { get; set; }

  public InteractDataT() {
    this.Guid = null;
    this.Type = null;
    this.Icon = null;
    this.TidContent = null;
    this.Condition = null;
    this.UniquenessTest = null;
    this.DoIntactType = null;
    this.Range = 0;
    this.Duration = null;
  }
}


static public class InteractDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Guid*/, false)
      && verifier.VerifyString(tablePos, 6 /*Type*/, false)
      && verifier.VerifyString(tablePos, 8 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 10 /*TidContent*/, false)
      && verifier.VerifyString(tablePos, 12 /*Condition*/, false)
      && verifier.VerifyString(tablePos, 14 /*UniquenessTest*/, false)
      && verifier.VerifyString(tablePos, 16 /*DoIntactType*/, false)
      && verifier.VerifyField(tablePos, 18 /*Range*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*Duration*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
