// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Area : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Area GetRootAsArea(ByteBuffer _bb) { return GetRootAsArea(_bb, new Area()); }
  public static Area GetRootAsArea(ByteBuffer _bb, Area obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Area __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int AreaId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CountryId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DeliveryMarkId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string AreaName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAreaNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetAreaNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetAreaNameArray() { return __p.__vector_as_array<byte>(12); }
  public int MapConfigId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)8; } }
  public int DungeonId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)8; } }
  public string Title { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(18); }
  public int Father { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Tag(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TagLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTagBytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetTagBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetTagArray() { return __p.__vector_as_array<int>(22); }
  public int Record { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Tips { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsInitActived { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public WWParser.Defs.DicIntInt? WorldMonsterLevelMax(int j) { int o = __p.__offset(30); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int WorldMonsterLevelMaxLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int WuYinQuId { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StateId { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AtmosphereId { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string EdgeWallName { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEdgeWallNameBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetEdgeWallNameBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetEdgeWallNameArray() { return __p.__vector_as_array<byte>(38); }
  public int DeliveryMarkType { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SortIndex { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? EnterAreaTags(int j) { int o = __p.__offset(44); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EnterAreaTagsLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntInt? LeaveAreaTags(int j) { int o = __p.__offset(46); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int LeaveAreaTagsLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.Area> CreateArea(FlatBufferBuilder builder,
      int area_id = 0,
      int level = 0,
      int country_id = 0,
      int delivery_mark_id = 0,
      StringOffset area_nameOffset = default(StringOffset),
      int map_config_id = 8,
      int dungeon_id = 8,
      StringOffset titleOffset = default(StringOffset),
      int father = 0,
      VectorOffset tagOffset = default(VectorOffset),
      int record = 0,
      int tips = 0,
      bool is_init_actived = false,
      VectorOffset world_monster_level_maxOffset = default(VectorOffset),
      int wu_yin_qu_id = 0,
      int state_id = 0,
      int atmosphere_id = 0,
      StringOffset edge_wall_nameOffset = default(StringOffset),
      int delivery_mark_type = 0,
      int sort_index = 0,
      VectorOffset enter_area_tagsOffset = default(VectorOffset),
      VectorOffset leave_area_tagsOffset = default(VectorOffset)) {
    builder.StartTable(22);
    Area.AddLeaveAreaTags(builder, leave_area_tagsOffset);
    Area.AddEnterAreaTags(builder, enter_area_tagsOffset);
    Area.AddSortIndex(builder, sort_index);
    Area.AddDeliveryMarkType(builder, delivery_mark_type);
    Area.AddEdgeWallName(builder, edge_wall_nameOffset);
    Area.AddAtmosphereId(builder, atmosphere_id);
    Area.AddStateId(builder, state_id);
    Area.AddWuYinQuId(builder, wu_yin_qu_id);
    Area.AddWorldMonsterLevelMax(builder, world_monster_level_maxOffset);
    Area.AddTips(builder, tips);
    Area.AddRecord(builder, record);
    Area.AddTag(builder, tagOffset);
    Area.AddFather(builder, father);
    Area.AddTitle(builder, titleOffset);
    Area.AddDungeonId(builder, dungeon_id);
    Area.AddMapConfigId(builder, map_config_id);
    Area.AddAreaName(builder, area_nameOffset);
    Area.AddDeliveryMarkId(builder, delivery_mark_id);
    Area.AddCountryId(builder, country_id);
    Area.AddLevel(builder, level);
    Area.AddAreaId(builder, area_id);
    Area.AddIsInitActived(builder, is_init_actived);
    return Area.EndArea(builder);
  }

  public static void StartArea(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddAreaId(FlatBufferBuilder builder, int areaId) { builder.AddInt(0, areaId, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(1, level, 0); }
  public static void AddCountryId(FlatBufferBuilder builder, int countryId) { builder.AddInt(2, countryId, 0); }
  public static void AddDeliveryMarkId(FlatBufferBuilder builder, int deliveryMarkId) { builder.AddInt(3, deliveryMarkId, 0); }
  public static void AddAreaName(FlatBufferBuilder builder, StringOffset areaNameOffset) { builder.AddOffset(4, areaNameOffset.Value, 0); }
  public static void AddMapConfigId(FlatBufferBuilder builder, int mapConfigId) { builder.AddInt(5, mapConfigId, 8); }
  public static void AddDungeonId(FlatBufferBuilder builder, int dungeonId) { builder.AddInt(6, dungeonId, 8); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(7, titleOffset.Value, 0); }
  public static void AddFather(FlatBufferBuilder builder, int father) { builder.AddInt(8, father, 0); }
  public static void AddTag(FlatBufferBuilder builder, VectorOffset tagOffset) { builder.AddOffset(9, tagOffset.Value, 0); }
  public static VectorOffset CreateTagVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTagVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRecord(FlatBufferBuilder builder, int record) { builder.AddInt(10, record, 0); }
  public static void AddTips(FlatBufferBuilder builder, int tips) { builder.AddInt(11, tips, 0); }
  public static void AddIsInitActived(FlatBufferBuilder builder, bool isInitActived) { builder.AddBool(12, isInitActived, false); }
  public static void AddWorldMonsterLevelMax(FlatBufferBuilder builder, VectorOffset worldMonsterLevelMaxOffset) { builder.AddOffset(13, worldMonsterLevelMaxOffset.Value, 0); }
  public static VectorOffset CreateWorldMonsterLevelMaxVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateWorldMonsterLevelMaxVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWorldMonsterLevelMaxVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWorldMonsterLevelMaxVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartWorldMonsterLevelMaxVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWuYinQuId(FlatBufferBuilder builder, int wuYinQuId) { builder.AddInt(14, wuYinQuId, 0); }
  public static void AddStateId(FlatBufferBuilder builder, int stateId) { builder.AddInt(15, stateId, 0); }
  public static void AddAtmosphereId(FlatBufferBuilder builder, int atmosphereId) { builder.AddInt(16, atmosphereId, 0); }
  public static void AddEdgeWallName(FlatBufferBuilder builder, StringOffset edgeWallNameOffset) { builder.AddOffset(17, edgeWallNameOffset.Value, 0); }
  public static void AddDeliveryMarkType(FlatBufferBuilder builder, int deliveryMarkType) { builder.AddInt(18, deliveryMarkType, 0); }
  public static void AddSortIndex(FlatBufferBuilder builder, int sortIndex) { builder.AddInt(19, sortIndex, 0); }
  public static void AddEnterAreaTags(FlatBufferBuilder builder, VectorOffset enterAreaTagsOffset) { builder.AddOffset(20, enterAreaTagsOffset.Value, 0); }
  public static VectorOffset CreateEnterAreaTagsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEnterAreaTagsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnterAreaTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnterAreaTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnterAreaTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLeaveAreaTags(FlatBufferBuilder builder, VectorOffset leaveAreaTagsOffset) { builder.AddOffset(21, leaveAreaTagsOffset.Value, 0); }
  public static VectorOffset CreateLeaveAreaTagsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLeaveAreaTagsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLeaveAreaTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLeaveAreaTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLeaveAreaTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.Area> EndArea(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Area>(o);
  }
  public AreaT UnPack() {
    var _o = new AreaT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AreaT _o) {
    _o.AreaId = this.AreaId;
    _o.Level = this.Level;
    _o.CountryId = this.CountryId;
    _o.DeliveryMarkId = this.DeliveryMarkId;
    _o.AreaName = this.AreaName;
    _o.MapConfigId = this.MapConfigId;
    _o.DungeonId = this.DungeonId;
    _o.Title = this.Title;
    _o.Father = this.Father;
    _o.Tag = new List<int>();
    for (var _j = 0; _j < this.TagLength; ++_j) {_o.Tag.Add(this.Tag(_j));}
    _o.Record = this.Record;
    _o.Tips = this.Tips;
    _o.IsInitActived = this.IsInitActived;
    _o.WorldMonsterLevelMax = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.WorldMonsterLevelMaxLength; ++_j) {_o.WorldMonsterLevelMax.Add(this.WorldMonsterLevelMax(_j).HasValue ? this.WorldMonsterLevelMax(_j).Value.UnPack() : null);}
    _o.WuYinQuId = this.WuYinQuId;
    _o.StateId = this.StateId;
    _o.AtmosphereId = this.AtmosphereId;
    _o.EdgeWallName = this.EdgeWallName;
    _o.DeliveryMarkType = this.DeliveryMarkType;
    _o.SortIndex = this.SortIndex;
    _o.EnterAreaTags = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.EnterAreaTagsLength; ++_j) {_o.EnterAreaTags.Add(this.EnterAreaTags(_j).HasValue ? this.EnterAreaTags(_j).Value.UnPack() : null);}
    _o.LeaveAreaTags = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.LeaveAreaTagsLength; ++_j) {_o.LeaveAreaTags.Add(this.LeaveAreaTags(_j).HasValue ? this.LeaveAreaTags(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.Area> Pack(FlatBufferBuilder builder, AreaT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Area>);
    var _area_name = _o.AreaName == null ? default(StringOffset) : builder.CreateString(_o.AreaName);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _tag = default(VectorOffset);
    if (_o.Tag != null) {
      var __tag = _o.Tag.ToArray();
      _tag = CreateTagVector(builder, __tag);
    }
    var _world_monster_level_max = default(VectorOffset);
    if (_o.WorldMonsterLevelMax != null) {
      var __world_monster_level_max = new Offset<WWParser.Defs.DicIntInt>[_o.WorldMonsterLevelMax.Count];
      for (var _j = 0; _j < __world_monster_level_max.Length; ++_j) { __world_monster_level_max[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.WorldMonsterLevelMax[_j]); }
      _world_monster_level_max = CreateWorldMonsterLevelMaxVector(builder, __world_monster_level_max);
    }
    var _edge_wall_name = _o.EdgeWallName == null ? default(StringOffset) : builder.CreateString(_o.EdgeWallName);
    var _enter_area_tags = default(VectorOffset);
    if (_o.EnterAreaTags != null) {
      var __enter_area_tags = new Offset<WWParser.Defs.DicIntInt>[_o.EnterAreaTags.Count];
      for (var _j = 0; _j < __enter_area_tags.Length; ++_j) { __enter_area_tags[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.EnterAreaTags[_j]); }
      _enter_area_tags = CreateEnterAreaTagsVector(builder, __enter_area_tags);
    }
    var _leave_area_tags = default(VectorOffset);
    if (_o.LeaveAreaTags != null) {
      var __leave_area_tags = new Offset<WWParser.Defs.DicIntInt>[_o.LeaveAreaTags.Count];
      for (var _j = 0; _j < __leave_area_tags.Length; ++_j) { __leave_area_tags[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.LeaveAreaTags[_j]); }
      _leave_area_tags = CreateLeaveAreaTagsVector(builder, __leave_area_tags);
    }
    return CreateArea(
      builder,
      _o.AreaId,
      _o.Level,
      _o.CountryId,
      _o.DeliveryMarkId,
      _area_name,
      _o.MapConfigId,
      _o.DungeonId,
      _title,
      _o.Father,
      _tag,
      _o.Record,
      _o.Tips,
      _o.IsInitActived,
      _world_monster_level_max,
      _o.WuYinQuId,
      _o.StateId,
      _o.AtmosphereId,
      _edge_wall_name,
      _o.DeliveryMarkType,
      _o.SortIndex,
      _enter_area_tags,
      _leave_area_tags);
  }
}

public class AreaT
{
  [Newtonsoft.Json.JsonProperty("area_id")]
  public int AreaId { get; set; }
  [Newtonsoft.Json.JsonProperty("level")]
  public int Level { get; set; }
  [Newtonsoft.Json.JsonProperty("country_id")]
  public int CountryId { get; set; }
  [Newtonsoft.Json.JsonProperty("delivery_mark_id")]
  public int DeliveryMarkId { get; set; }
  [Newtonsoft.Json.JsonProperty("area_name")]
  public string AreaName { get; set; }
  [Newtonsoft.Json.JsonProperty("map_config_id")]
  public int MapConfigId { get; set; }
  [Newtonsoft.Json.JsonProperty("dungeon_id")]
  public int DungeonId { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("father")]
  public int Father { get; set; }
  [Newtonsoft.Json.JsonProperty("tag")]
  public List<int> Tag { get; set; }
  [Newtonsoft.Json.JsonProperty("record")]
  public int Record { get; set; }
  [Newtonsoft.Json.JsonProperty("tips")]
  public int Tips { get; set; }
  [Newtonsoft.Json.JsonProperty("is_init_actived")]
  public bool IsInitActived { get; set; }
  [Newtonsoft.Json.JsonProperty("world_monster_level_max")]
  public List<WWParser.Defs.DicIntIntT> WorldMonsterLevelMax { get; set; }
  [Newtonsoft.Json.JsonProperty("wu_yin_qu_id")]
  public int WuYinQuId { get; set; }
  [Newtonsoft.Json.JsonProperty("state_id")]
  public int StateId { get; set; }
  [Newtonsoft.Json.JsonProperty("atmosphere_id")]
  public int AtmosphereId { get; set; }
  [Newtonsoft.Json.JsonProperty("edge_wall_name")]
  public string EdgeWallName { get; set; }
  [Newtonsoft.Json.JsonProperty("delivery_mark_type")]
  public int DeliveryMarkType { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_index")]
  public int SortIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("enter_area_tags")]
  public List<WWParser.Defs.DicIntIntT> EnterAreaTags { get; set; }
  [Newtonsoft.Json.JsonProperty("leave_area_tags")]
  public List<WWParser.Defs.DicIntIntT> LeaveAreaTags { get; set; }

  public AreaT() {
    this.AreaId = 0;
    this.Level = 0;
    this.CountryId = 0;
    this.DeliveryMarkId = 0;
    this.AreaName = null;
    this.MapConfigId = 8;
    this.DungeonId = 8;
    this.Title = null;
    this.Father = 0;
    this.Tag = null;
    this.Record = 0;
    this.Tips = 0;
    this.IsInitActived = false;
    this.WorldMonsterLevelMax = null;
    this.WuYinQuId = 0;
    this.StateId = 0;
    this.AtmosphereId = 0;
    this.EdgeWallName = null;
    this.DeliveryMarkType = 0;
    this.SortIndex = 0;
    this.EnterAreaTags = null;
    this.LeaveAreaTags = null;
  }
}


static public class AreaVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*AreaId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*CountryId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*DeliveryMarkId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*AreaName*/, false)
      && verifier.VerifyField(tablePos, 14 /*MapConfigId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*DungeonId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*Title*/, false)
      && verifier.VerifyField(tablePos, 20 /*Father*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*Tag*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 24 /*Record*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*Tips*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*IsInitActived*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfTables(tablePos, 30 /*WorldMonsterLevelMax*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 32 /*WuYinQuId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*StateId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*AtmosphereId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 38 /*EdgeWallName*/, false)
      && verifier.VerifyField(tablePos, 40 /*DeliveryMarkType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*SortIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 44 /*EnterAreaTags*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 46 /*LeaveAreaTags*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
