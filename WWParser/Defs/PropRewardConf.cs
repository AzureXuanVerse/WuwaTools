// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PropRewardConf : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PropRewardConf GetRootAsPropRewardConf(ByteBuffer _bb) { return GetRootAsPropRewardConf(_bb, new PropRewardConf()); }
  public static PropRewardConf GetRootAsPropRewardConf(ByteBuffer _bb, PropRewardConf obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PropRewardConf __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.ConfigPropValue? Props(int j) { int o = __p.__offset(6); return o != 0 ? (WWParser.Defs.ConfigPropValue?)(new WWParser.Defs.ConfigPropValue()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PropsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicStringInt? Tips(int j) { int o = __p.__offset(8); return o != 0 ? (WWParser.Defs.DicStringInt?)(new WWParser.Defs.DicStringInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TipsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool IsFormation { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.PropRewardConf> CreatePropRewardConf(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset propsOffset = default(VectorOffset),
      VectorOffset tipsOffset = default(VectorOffset),
      bool is_formation = false) {
    builder.StartTable(4);
    PropRewardConf.AddTips(builder, tipsOffset);
    PropRewardConf.AddProps(builder, propsOffset);
    PropRewardConf.AddId(builder, id);
    PropRewardConf.AddIsFormation(builder, is_formation);
    return PropRewardConf.EndPropRewardConf(builder);
  }

  public static void StartPropRewardConf(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddProps(FlatBufferBuilder builder, VectorOffset propsOffset) { builder.AddOffset(1, propsOffset.Value, 0); }
  public static VectorOffset CreatePropsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.ConfigPropValue>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePropsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.ConfigPropValue>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePropsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.ConfigPropValue>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePropsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.ConfigPropValue>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPropsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTips(FlatBufferBuilder builder, VectorOffset tipsOffset) { builder.AddOffset(2, tipsOffset.Value, 0); }
  public static VectorOffset CreateTipsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTipsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTipsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicStringInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTipsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicStringInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTipsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsFormation(FlatBufferBuilder builder, bool isFormation) { builder.AddBool(3, isFormation, false); }
  public static Offset<WWParser.Defs.PropRewardConf> EndPropRewardConf(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PropRewardConf>(o);
  }
  public PropRewardConfT UnPack() {
    var _o = new PropRewardConfT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PropRewardConfT _o) {
    _o.Id = this.Id;
    _o.Props = new List<WWParser.Defs.ConfigPropValueT>();
    for (var _j = 0; _j < this.PropsLength; ++_j) {_o.Props.Add(this.Props(_j).HasValue ? this.Props(_j).Value.UnPack() : null);}
    _o.Tips = new List<WWParser.Defs.DicStringIntT>();
    for (var _j = 0; _j < this.TipsLength; ++_j) {_o.Tips.Add(this.Tips(_j).HasValue ? this.Tips(_j).Value.UnPack() : null);}
    _o.IsFormation = this.IsFormation;
  }
  public static Offset<WWParser.Defs.PropRewardConf> Pack(FlatBufferBuilder builder, PropRewardConfT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PropRewardConf>);
    var _props = default(VectorOffset);
    if (_o.Props != null) {
      var __props = new Offset<WWParser.Defs.ConfigPropValue>[_o.Props.Count];
      for (var _j = 0; _j < __props.Length; ++_j) { __props[_j] = WWParser.Defs.ConfigPropValue.Pack(builder, _o.Props[_j]); }
      _props = CreatePropsVector(builder, __props);
    }
    var _tips = default(VectorOffset);
    if (_o.Tips != null) {
      var __tips = new Offset<WWParser.Defs.DicStringInt>[_o.Tips.Count];
      for (var _j = 0; _j < __tips.Length; ++_j) { __tips[_j] = WWParser.Defs.DicStringInt.Pack(builder, _o.Tips[_j]); }
      _tips = CreateTipsVector(builder, __tips);
    }
    return CreatePropRewardConf(
      builder,
      _o.Id,
      _props,
      _tips,
      _o.IsFormation);
  }
}

public class PropRewardConfT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("props")]
  public List<WWParser.Defs.ConfigPropValueT> Props { get; set; }
  [Newtonsoft.Json.JsonProperty("tips")]
  public List<WWParser.Defs.DicStringIntT> Tips { get; set; }
  [Newtonsoft.Json.JsonProperty("is_formation")]
  public bool IsFormation { get; set; }

  public PropRewardConfT() {
    this.Id = 0;
    this.Props = null;
    this.Tips = null;
    this.IsFormation = false;
  }
}


static public class PropRewardConfVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Props*/, WWParser.Defs.ConfigPropValueVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*Tips*/, WWParser.Defs.DicStringIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 10 /*IsFormation*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
