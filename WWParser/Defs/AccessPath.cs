// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AccessPath : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AccessPath GetRootAsAccessPath(ByteBuffer _bb) { return GetRootAsAccessPath(_bb, new AccessPath()); }
  public static AccessPath GetRootAsAccessPath(ByteBuffer _bb, AccessPath obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AccessPath __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkipName { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public string Val1 { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVal1Bytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetVal1Bytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetVal1Array() { return __p.__vector_as_array<byte>(10); }
  public string Val2 { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVal2Bytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetVal2Bytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetVal2Array() { return __p.__vector_as_array<byte>(12); }
  public string Val3 { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVal3Bytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetVal3Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetVal3Array() { return __p.__vector_as_array<byte>(14); }
  public WWParser.Defs.DicIntString? FunctionOpenCheckMap(int j) { int o = __p.__offset(16); return o != 0 ? (WWParser.Defs.DicIntString?)(new WWParser.Defs.DicIntString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FunctionOpenCheckMapLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int SortIndex { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Description { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(20); }
  public int ClientCondition(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ClientConditionLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetClientConditionBytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetClientConditionBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetClientConditionArray() { return __p.__vector_as_array<int>(22); }
  public string PathValue { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathValueBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetPathValueBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetPathValueArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<WWParser.Defs.AccessPath> CreateAccessPath(FlatBufferBuilder builder,
      int id = 0,
      int type = 0,
      int skip_name = -1,
      StringOffset val1Offset = default(StringOffset),
      StringOffset val2Offset = default(StringOffset),
      StringOffset val3Offset = default(StringOffset),
      VectorOffset function_open_check_mapOffset = default(VectorOffset),
      int sort_index = 0,
      StringOffset descriptionOffset = default(StringOffset),
      VectorOffset client_conditionOffset = default(VectorOffset),
      StringOffset path_valueOffset = default(StringOffset)) {
    builder.StartTable(11);
    AccessPath.AddPathValue(builder, path_valueOffset);
    AccessPath.AddClientCondition(builder, client_conditionOffset);
    AccessPath.AddDescription(builder, descriptionOffset);
    AccessPath.AddSortIndex(builder, sort_index);
    AccessPath.AddFunctionOpenCheckMap(builder, function_open_check_mapOffset);
    AccessPath.AddVal3(builder, val3Offset);
    AccessPath.AddVal2(builder, val2Offset);
    AccessPath.AddVal1(builder, val1Offset);
    AccessPath.AddSkipName(builder, skip_name);
    AccessPath.AddType(builder, type);
    AccessPath.AddId(builder, id);
    return AccessPath.EndAccessPath(builder);
  }

  public static void StartAccessPath(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(1, type, 0); }
  public static void AddSkipName(FlatBufferBuilder builder, int skipName) { builder.AddInt(2, skipName, -1); }
  public static void AddVal1(FlatBufferBuilder builder, StringOffset val1Offset) { builder.AddOffset(3, val1Offset.Value, 0); }
  public static void AddVal2(FlatBufferBuilder builder, StringOffset val2Offset) { builder.AddOffset(4, val2Offset.Value, 0); }
  public static void AddVal3(FlatBufferBuilder builder, StringOffset val3Offset) { builder.AddOffset(5, val3Offset.Value, 0); }
  public static void AddFunctionOpenCheckMap(FlatBufferBuilder builder, VectorOffset functionOpenCheckMapOffset) { builder.AddOffset(6, functionOpenCheckMapOffset.Value, 0); }
  public static VectorOffset CreateFunctionOpenCheckMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFunctionOpenCheckMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFunctionOpenCheckMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFunctionOpenCheckMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFunctionOpenCheckMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSortIndex(FlatBufferBuilder builder, int sortIndex) { builder.AddInt(7, sortIndex, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(8, descriptionOffset.Value, 0); }
  public static void AddClientCondition(FlatBufferBuilder builder, VectorOffset clientConditionOffset) { builder.AddOffset(9, clientConditionOffset.Value, 0); }
  public static VectorOffset CreateClientConditionVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateClientConditionVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClientConditionVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClientConditionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartClientConditionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPathValue(FlatBufferBuilder builder, StringOffset pathValueOffset) { builder.AddOffset(10, pathValueOffset.Value, 0); }
  public static Offset<WWParser.Defs.AccessPath> EndAccessPath(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AccessPath>(o);
  }
  public AccessPathT UnPack() {
    var _o = new AccessPathT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AccessPathT _o) {
    _o.Id = this.Id;
    _o.Type = this.Type;
    _o.SkipName = this.SkipName;
    _o.Val1 = this.Val1;
    _o.Val2 = this.Val2;
    _o.Val3 = this.Val3;
    _o.FunctionOpenCheckMap = new List<WWParser.Defs.DicIntStringT>();
    for (var _j = 0; _j < this.FunctionOpenCheckMapLength; ++_j) {_o.FunctionOpenCheckMap.Add(this.FunctionOpenCheckMap(_j).HasValue ? this.FunctionOpenCheckMap(_j).Value.UnPack() : null);}
    _o.SortIndex = this.SortIndex;
    _o.Description = this.Description;
    _o.ClientCondition = new List<int>();
    for (var _j = 0; _j < this.ClientConditionLength; ++_j) {_o.ClientCondition.Add(this.ClientCondition(_j));}
    _o.PathValue = this.PathValue;
  }
  public static Offset<WWParser.Defs.AccessPath> Pack(FlatBufferBuilder builder, AccessPathT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AccessPath>);
    var _val1 = _o.Val1 == null ? default(StringOffset) : builder.CreateString(_o.Val1);
    var _val2 = _o.Val2 == null ? default(StringOffset) : builder.CreateString(_o.Val2);
    var _val3 = _o.Val3 == null ? default(StringOffset) : builder.CreateString(_o.Val3);
    var _function_open_check_map = default(VectorOffset);
    if (_o.FunctionOpenCheckMap != null) {
      var __function_open_check_map = new Offset<WWParser.Defs.DicIntString>[_o.FunctionOpenCheckMap.Count];
      for (var _j = 0; _j < __function_open_check_map.Length; ++_j) { __function_open_check_map[_j] = WWParser.Defs.DicIntString.Pack(builder, _o.FunctionOpenCheckMap[_j]); }
      _function_open_check_map = CreateFunctionOpenCheckMapVector(builder, __function_open_check_map);
    }
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _client_condition = default(VectorOffset);
    if (_o.ClientCondition != null) {
      var __client_condition = _o.ClientCondition.ToArray();
      _client_condition = CreateClientConditionVector(builder, __client_condition);
    }
    var _path_value = _o.PathValue == null ? default(StringOffset) : builder.CreateString(_o.PathValue);
    return CreateAccessPath(
      builder,
      _o.Id,
      _o.Type,
      _o.SkipName,
      _val1,
      _val2,
      _val3,
      _function_open_check_map,
      _o.SortIndex,
      _description,
      _client_condition,
      _path_value);
  }
}

public class AccessPathT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("skip_name")]
  public int SkipName { get; set; }
  [Newtonsoft.Json.JsonProperty("val1")]
  public string Val1 { get; set; }
  [Newtonsoft.Json.JsonProperty("val2")]
  public string Val2 { get; set; }
  [Newtonsoft.Json.JsonProperty("val3")]
  public string Val3 { get; set; }
  [Newtonsoft.Json.JsonProperty("function_open_check_map")]
  public List<WWParser.Defs.DicIntStringT> FunctionOpenCheckMap { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_index")]
  public int SortIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("description")]
  public string Description { get; set; }
  [Newtonsoft.Json.JsonProperty("client_condition")]
  public List<int> ClientCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("path_value")]
  public string PathValue { get; set; }

  public AccessPathT() {
    this.Id = 0;
    this.Type = 0;
    this.SkipName = -1;
    this.Val1 = null;
    this.Val2 = null;
    this.Val3 = null;
    this.FunctionOpenCheckMap = null;
    this.SortIndex = 0;
    this.Description = null;
    this.ClientCondition = null;
    this.PathValue = null;
  }
}


static public class AccessPathVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*SkipName*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Val1*/, false)
      && verifier.VerifyString(tablePos, 12 /*Val2*/, false)
      && verifier.VerifyString(tablePos, 14 /*Val3*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 16 /*FunctionOpenCheckMap*/, WWParser.Defs.DicIntStringVerify.Verify, false)
      && verifier.VerifyField(tablePos, 18 /*SortIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*Description*/, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*ClientCondition*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 24 /*PathValue*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
