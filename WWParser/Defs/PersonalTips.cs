// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PersonalTips : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PersonalTips GetRootAsPersonalTips(ByteBuffer _bb) { return GetRootAsPersonalTips(_bb, new PersonalTips()); }
  public static PersonalTips GetRootAsPersonalTips(ByteBuffer _bb, PersonalTips obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PersonalTips __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FunctionId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Sort { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string RedDotName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRedDotNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetRedDotNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetRedDotNameArray() { return __p.__vector_as_array<byte>(10); }
  public string Description { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(12); }
  public string IconPath { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconPathBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIconPathArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<WWParser.Defs.PersonalTips> CreatePersonalTips(FlatBufferBuilder builder,
      int id = 0,
      int function_id = 0,
      int sort = 0,
      StringOffset red_dot_nameOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      StringOffset icon_pathOffset = default(StringOffset)) {
    builder.StartTable(6);
    PersonalTips.AddIconPath(builder, icon_pathOffset);
    PersonalTips.AddDescription(builder, descriptionOffset);
    PersonalTips.AddRedDotName(builder, red_dot_nameOffset);
    PersonalTips.AddSort(builder, sort);
    PersonalTips.AddFunctionId(builder, function_id);
    PersonalTips.AddId(builder, id);
    return PersonalTips.EndPersonalTips(builder);
  }

  public static void StartPersonalTips(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddFunctionId(FlatBufferBuilder builder, int functionId) { builder.AddInt(1, functionId, 0); }
  public static void AddSort(FlatBufferBuilder builder, int sort) { builder.AddInt(2, sort, 0); }
  public static void AddRedDotName(FlatBufferBuilder builder, StringOffset redDotNameOffset) { builder.AddOffset(3, redDotNameOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(4, descriptionOffset.Value, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset iconPathOffset) { builder.AddOffset(5, iconPathOffset.Value, 0); }
  public static Offset<WWParser.Defs.PersonalTips> EndPersonalTips(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PersonalTips>(o);
  }
  public PersonalTipsT UnPack() {
    var _o = new PersonalTipsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PersonalTipsT _o) {
    _o.Id = this.Id;
    _o.FunctionId = this.FunctionId;
    _o.Sort = this.Sort;
    _o.RedDotName = this.RedDotName;
    _o.Description = this.Description;
    _o.IconPath = this.IconPath;
  }
  public static Offset<WWParser.Defs.PersonalTips> Pack(FlatBufferBuilder builder, PersonalTipsT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PersonalTips>);
    var _red_dot_name = _o.RedDotName == null ? default(StringOffset) : builder.CreateString(_o.RedDotName);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _icon_path = _o.IconPath == null ? default(StringOffset) : builder.CreateString(_o.IconPath);
    return CreatePersonalTips(
      builder,
      _o.Id,
      _o.FunctionId,
      _o.Sort,
      _red_dot_name,
      _description,
      _icon_path);
  }
}

public class PersonalTipsT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("function_id")]
  public int FunctionId { get; set; }
  [Newtonsoft.Json.JsonProperty("sort")]
  public int Sort { get; set; }
  [Newtonsoft.Json.JsonProperty("red_dot_name")]
  public string RedDotName { get; set; }
  [Newtonsoft.Json.JsonProperty("description")]
  public string Description { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_path")]
  public string IconPath { get; set; }

  public PersonalTipsT() {
    this.Id = 0;
    this.FunctionId = 0;
    this.Sort = 0;
    this.RedDotName = null;
    this.Description = null;
    this.IconPath = null;
  }
}


static public class PersonalTipsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*FunctionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Sort*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*RedDotName*/, false)
      && verifier.VerifyString(tablePos, 12 /*Description*/, false)
      && verifier.VerifyString(tablePos, 14 /*IconPath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
