// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BoxType : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BoxType GetRootAsBoxType(ByteBuffer _bb) { return GetRootAsBoxType(_bb, new BoxType()); }
  public static BoxType GetRootAsBoxType(ByteBuffer _bb, BoxType obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BoxType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Mark { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMarkBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetMarkBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetMarkArray() { return __p.__vector_as_array<byte>(6); }
  public int StartState { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IdleState(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int IdleStateLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetIdleStateBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetIdleStateBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetIdleStateArray() { return __p.__vector_as_array<int>(10); }
  public int IdleStartState(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int IdleStartStateLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetIdleStartStateBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetIdleStartStateBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetIdleStartStateArray() { return __p.__vector_as_array<int>(12); }
  public int DeathState { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float OpenTime { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<WWParser.Defs.BoxType> CreateBoxType(FlatBufferBuilder builder,
      int id = 0,
      StringOffset markOffset = default(StringOffset),
      int start_state = 0,
      VectorOffset idle_stateOffset = default(VectorOffset),
      VectorOffset idle_start_stateOffset = default(VectorOffset),
      int death_state = 0,
      float open_time = 0.0f) {
    builder.StartTable(7);
    BoxType.AddOpenTime(builder, open_time);
    BoxType.AddDeathState(builder, death_state);
    BoxType.AddIdleStartState(builder, idle_start_stateOffset);
    BoxType.AddIdleState(builder, idle_stateOffset);
    BoxType.AddStartState(builder, start_state);
    BoxType.AddMark(builder, markOffset);
    BoxType.AddId(builder, id);
    return BoxType.EndBoxType(builder);
  }

  public static void StartBoxType(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMark(FlatBufferBuilder builder, StringOffset markOffset) { builder.AddOffset(1, markOffset.Value, 0); }
  public static void AddStartState(FlatBufferBuilder builder, int startState) { builder.AddInt(2, startState, 0); }
  public static void AddIdleState(FlatBufferBuilder builder, VectorOffset idleStateOffset) { builder.AddOffset(3, idleStateOffset.Value, 0); }
  public static VectorOffset CreateIdleStateVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIdleStateVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdleStateVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdleStateVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIdleStateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIdleStartState(FlatBufferBuilder builder, VectorOffset idleStartStateOffset) { builder.AddOffset(4, idleStartStateOffset.Value, 0); }
  public static VectorOffset CreateIdleStartStateVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIdleStartStateVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdleStartStateVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdleStartStateVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIdleStartStateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDeathState(FlatBufferBuilder builder, int deathState) { builder.AddInt(5, deathState, 0); }
  public static void AddOpenTime(FlatBufferBuilder builder, float openTime) { builder.AddFloat(6, openTime, 0.0f); }
  public static Offset<WWParser.Defs.BoxType> EndBoxType(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BoxType>(o);
  }
  public BoxTypeT UnPack() {
    var _o = new BoxTypeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BoxTypeT _o) {
    _o.Id = this.Id;
    _o.Mark = this.Mark;
    _o.StartState = this.StartState;
    _o.IdleState = new List<int>();
    for (var _j = 0; _j < this.IdleStateLength; ++_j) {_o.IdleState.Add(this.IdleState(_j));}
    _o.IdleStartState = new List<int>();
    for (var _j = 0; _j < this.IdleStartStateLength; ++_j) {_o.IdleStartState.Add(this.IdleStartState(_j));}
    _o.DeathState = this.DeathState;
    _o.OpenTime = this.OpenTime;
  }
  public static Offset<WWParser.Defs.BoxType> Pack(FlatBufferBuilder builder, BoxTypeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BoxType>);
    var _mark = _o.Mark == null ? default(StringOffset) : builder.CreateString(_o.Mark);
    var _idle_state = default(VectorOffset);
    if (_o.IdleState != null) {
      var __idle_state = _o.IdleState.ToArray();
      _idle_state = CreateIdleStateVector(builder, __idle_state);
    }
    var _idle_start_state = default(VectorOffset);
    if (_o.IdleStartState != null) {
      var __idle_start_state = _o.IdleStartState.ToArray();
      _idle_start_state = CreateIdleStartStateVector(builder, __idle_start_state);
    }
    return CreateBoxType(
      builder,
      _o.Id,
      _mark,
      _o.StartState,
      _idle_state,
      _idle_start_state,
      _o.DeathState,
      _o.OpenTime);
  }
}

public class BoxTypeT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("mark")]
  public string Mark { get; set; }
  [Newtonsoft.Json.JsonProperty("start_state")]
  public int StartState { get; set; }
  [Newtonsoft.Json.JsonProperty("idle_state")]
  public List<int> IdleState { get; set; }
  [Newtonsoft.Json.JsonProperty("idle_start_state")]
  public List<int> IdleStartState { get; set; }
  [Newtonsoft.Json.JsonProperty("death_state")]
  public int DeathState { get; set; }
  [Newtonsoft.Json.JsonProperty("open_time")]
  public float OpenTime { get; set; }

  public BoxTypeT() {
    this.Id = 0;
    this.Mark = null;
    this.StartState = 0;
    this.IdleState = null;
    this.IdleStartState = null;
    this.DeathState = 0;
    this.OpenTime = 0.0f;
  }
}


static public class BoxTypeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Mark*/, false)
      && verifier.VerifyField(tablePos, 8 /*StartState*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*IdleState*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*IdleStartState*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 14 /*DeathState*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*OpenTime*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
