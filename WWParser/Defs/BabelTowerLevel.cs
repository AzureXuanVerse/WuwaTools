// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BabelTowerLevel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BabelTowerLevel GetRootAsBabelTowerLevel(ByteBuffer _bb) { return GetRootAsBabelTowerLevel(_bb, new BabelTowerLevel()); }
  public static BabelTowerLevel GetRootAsBabelTowerLevel(ByteBuffer _bb, BabelTowerLevel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BabelTowerLevel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsDifficult { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string NameText { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameTextBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetNameTextBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetNameTextArray() { return __p.__vector_as_array<byte>(12); }
  public string DesText { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDesTextBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetDesTextBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDesTextArray() { return __p.__vector_as_array<byte>(14); }
  public string Texture { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextureBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTextureBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTextureArray() { return __p.__vector_as_array<byte>(16); }
  public int OpenDay { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FixBabelDeTermds(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FixBabelDeTermdsLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFixBabelDeTermdsBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetFixBabelDeTermdsBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetFixBabelDeTermdsArray() { return __p.__vector_as_array<int>(20); }
  public int OptionalBabelBuff(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OptionalBabelBuffLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetOptionalBabelBuffBytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetOptionalBabelBuffBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetOptionalBabelBuffArray() { return __p.__vector_as_array<int>(22); }
  public int OptionalBabelBuffNum { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PassStar { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ReviveStar { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ReviveBuffId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BabelTowerDeTermMutexArray(int j) { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BabelTowerDeTermMutexArrayLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBabelTowerDeTermMutexArrayBytes() { return __p.__vector_as_span<int>(32, 4); }
#else
  public ArraySegment<byte>? GetBabelTowerDeTermMutexArrayBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public int[] GetBabelTowerDeTermMutexArrayArray() { return __p.__vector_as_array<int>(32); }

  public static Offset<WWParser.Defs.BabelTowerLevel> CreateBabelTowerLevel(FlatBufferBuilder builder,
      int id = 0,
      int activity_id = 0,
      int inst_id = 0,
      bool is_difficult = false,
      StringOffset name_textOffset = default(StringOffset),
      StringOffset des_textOffset = default(StringOffset),
      StringOffset textureOffset = default(StringOffset),
      int open_day = 0,
      VectorOffset fix_babel_de_termdsOffset = default(VectorOffset),
      VectorOffset optional_babel_buffOffset = default(VectorOffset),
      int optional_babel_buff_num = 0,
      int pass_star = 0,
      int revive_star = 0,
      int revive_buff_id = 0,
      VectorOffset babel_tower_de_term_mutex_arrayOffset = default(VectorOffset)) {
    builder.StartTable(15);
    BabelTowerLevel.AddBabelTowerDeTermMutexArray(builder, babel_tower_de_term_mutex_arrayOffset);
    BabelTowerLevel.AddReviveBuffId(builder, revive_buff_id);
    BabelTowerLevel.AddReviveStar(builder, revive_star);
    BabelTowerLevel.AddPassStar(builder, pass_star);
    BabelTowerLevel.AddOptionalBabelBuffNum(builder, optional_babel_buff_num);
    BabelTowerLevel.AddOptionalBabelBuff(builder, optional_babel_buffOffset);
    BabelTowerLevel.AddFixBabelDeTermds(builder, fix_babel_de_termdsOffset);
    BabelTowerLevel.AddOpenDay(builder, open_day);
    BabelTowerLevel.AddTexture(builder, textureOffset);
    BabelTowerLevel.AddDesText(builder, des_textOffset);
    BabelTowerLevel.AddNameText(builder, name_textOffset);
    BabelTowerLevel.AddInstId(builder, inst_id);
    BabelTowerLevel.AddActivityId(builder, activity_id);
    BabelTowerLevel.AddId(builder, id);
    BabelTowerLevel.AddIsDifficult(builder, is_difficult);
    return BabelTowerLevel.EndBabelTowerLevel(builder);
  }

  public static void StartBabelTowerLevel(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddInstId(FlatBufferBuilder builder, int instId) { builder.AddInt(2, instId, 0); }
  public static void AddIsDifficult(FlatBufferBuilder builder, bool isDifficult) { builder.AddBool(3, isDifficult, false); }
  public static void AddNameText(FlatBufferBuilder builder, StringOffset nameTextOffset) { builder.AddOffset(4, nameTextOffset.Value, 0); }
  public static void AddDesText(FlatBufferBuilder builder, StringOffset desTextOffset) { builder.AddOffset(5, desTextOffset.Value, 0); }
  public static void AddTexture(FlatBufferBuilder builder, StringOffset textureOffset) { builder.AddOffset(6, textureOffset.Value, 0); }
  public static void AddOpenDay(FlatBufferBuilder builder, int openDay) { builder.AddInt(7, openDay, 0); }
  public static void AddFixBabelDeTermds(FlatBufferBuilder builder, VectorOffset fixBabelDeTermdsOffset) { builder.AddOffset(8, fixBabelDeTermdsOffset.Value, 0); }
  public static VectorOffset CreateFixBabelDeTermdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFixBabelDeTermdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFixBabelDeTermdsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFixBabelDeTermdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFixBabelDeTermdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOptionalBabelBuff(FlatBufferBuilder builder, VectorOffset optionalBabelBuffOffset) { builder.AddOffset(9, optionalBabelBuffOffset.Value, 0); }
  public static VectorOffset CreateOptionalBabelBuffVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOptionalBabelBuffVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOptionalBabelBuffVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOptionalBabelBuffVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOptionalBabelBuffVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOptionalBabelBuffNum(FlatBufferBuilder builder, int optionalBabelBuffNum) { builder.AddInt(10, optionalBabelBuffNum, 0); }
  public static void AddPassStar(FlatBufferBuilder builder, int passStar) { builder.AddInt(11, passStar, 0); }
  public static void AddReviveStar(FlatBufferBuilder builder, int reviveStar) { builder.AddInt(12, reviveStar, 0); }
  public static void AddReviveBuffId(FlatBufferBuilder builder, int reviveBuffId) { builder.AddInt(13, reviveBuffId, 0); }
  public static void AddBabelTowerDeTermMutexArray(FlatBufferBuilder builder, VectorOffset babelTowerDeTermMutexArrayOffset) { builder.AddOffset(14, babelTowerDeTermMutexArrayOffset.Value, 0); }
  public static VectorOffset CreateBabelTowerDeTermMutexArrayVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBabelTowerDeTermMutexArrayVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBabelTowerDeTermMutexArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBabelTowerDeTermMutexArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBabelTowerDeTermMutexArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.BabelTowerLevel> EndBabelTowerLevel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BabelTowerLevel>(o);
  }
  public BabelTowerLevelT UnPack() {
    var _o = new BabelTowerLevelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BabelTowerLevelT _o) {
    _o.Id = this.Id;
    _o.ActivityId = this.ActivityId;
    _o.InstId = this.InstId;
    _o.IsDifficult = this.IsDifficult;
    _o.NameText = this.NameText;
    _o.DesText = this.DesText;
    _o.Texture = this.Texture;
    _o.OpenDay = this.OpenDay;
    _o.FixBabelDeTermds = new List<int>();
    for (var _j = 0; _j < this.FixBabelDeTermdsLength; ++_j) {_o.FixBabelDeTermds.Add(this.FixBabelDeTermds(_j));}
    _o.OptionalBabelBuff = new List<int>();
    for (var _j = 0; _j < this.OptionalBabelBuffLength; ++_j) {_o.OptionalBabelBuff.Add(this.OptionalBabelBuff(_j));}
    _o.OptionalBabelBuffNum = this.OptionalBabelBuffNum;
    _o.PassStar = this.PassStar;
    _o.ReviveStar = this.ReviveStar;
    _o.ReviveBuffId = this.ReviveBuffId;
    _o.BabelTowerDeTermMutexArray = new List<int>();
    for (var _j = 0; _j < this.BabelTowerDeTermMutexArrayLength; ++_j) {_o.BabelTowerDeTermMutexArray.Add(this.BabelTowerDeTermMutexArray(_j));}
  }
  public static Offset<WWParser.Defs.BabelTowerLevel> Pack(FlatBufferBuilder builder, BabelTowerLevelT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BabelTowerLevel>);
    var _name_text = _o.NameText == null ? default(StringOffset) : builder.CreateString(_o.NameText);
    var _des_text = _o.DesText == null ? default(StringOffset) : builder.CreateString(_o.DesText);
    var _texture = _o.Texture == null ? default(StringOffset) : builder.CreateString(_o.Texture);
    var _fix_babel_de_termds = default(VectorOffset);
    if (_o.FixBabelDeTermds != null) {
      var __fix_babel_de_termds = _o.FixBabelDeTermds.ToArray();
      _fix_babel_de_termds = CreateFixBabelDeTermdsVector(builder, __fix_babel_de_termds);
    }
    var _optional_babel_buff = default(VectorOffset);
    if (_o.OptionalBabelBuff != null) {
      var __optional_babel_buff = _o.OptionalBabelBuff.ToArray();
      _optional_babel_buff = CreateOptionalBabelBuffVector(builder, __optional_babel_buff);
    }
    var _babel_tower_de_term_mutex_array = default(VectorOffset);
    if (_o.BabelTowerDeTermMutexArray != null) {
      var __babel_tower_de_term_mutex_array = _o.BabelTowerDeTermMutexArray.ToArray();
      _babel_tower_de_term_mutex_array = CreateBabelTowerDeTermMutexArrayVector(builder, __babel_tower_de_term_mutex_array);
    }
    return CreateBabelTowerLevel(
      builder,
      _o.Id,
      _o.ActivityId,
      _o.InstId,
      _o.IsDifficult,
      _name_text,
      _des_text,
      _texture,
      _o.OpenDay,
      _fix_babel_de_termds,
      _optional_babel_buff,
      _o.OptionalBabelBuffNum,
      _o.PassStar,
      _o.ReviveStar,
      _o.ReviveBuffId,
      _babel_tower_de_term_mutex_array);
  }
}

public class BabelTowerLevelT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("inst_id")]
  public int InstId { get; set; }
  [Newtonsoft.Json.JsonProperty("is_difficult")]
  public bool IsDifficult { get; set; }
  [Newtonsoft.Json.JsonProperty("name_text")]
  public string NameText { get; set; }
  [Newtonsoft.Json.JsonProperty("des_text")]
  public string DesText { get; set; }
  [Newtonsoft.Json.JsonProperty("texture")]
  public string Texture { get; set; }
  [Newtonsoft.Json.JsonProperty("open_day")]
  public int OpenDay { get; set; }
  [Newtonsoft.Json.JsonProperty("fix_babel_de_termds")]
  public List<int> FixBabelDeTermds { get; set; }
  [Newtonsoft.Json.JsonProperty("optional_babel_buff")]
  public List<int> OptionalBabelBuff { get; set; }
  [Newtonsoft.Json.JsonProperty("optional_babel_buff_num")]
  public int OptionalBabelBuffNum { get; set; }
  [Newtonsoft.Json.JsonProperty("pass_star")]
  public int PassStar { get; set; }
  [Newtonsoft.Json.JsonProperty("revive_star")]
  public int ReviveStar { get; set; }
  [Newtonsoft.Json.JsonProperty("revive_buff_id")]
  public int ReviveBuffId { get; set; }
  [Newtonsoft.Json.JsonProperty("babel_tower_de_term_mutex_array")]
  public List<int> BabelTowerDeTermMutexArray { get; set; }

  public BabelTowerLevelT() {
    this.Id = 0;
    this.ActivityId = 0;
    this.InstId = 0;
    this.IsDifficult = false;
    this.NameText = null;
    this.DesText = null;
    this.Texture = null;
    this.OpenDay = 0;
    this.FixBabelDeTermds = null;
    this.OptionalBabelBuff = null;
    this.OptionalBabelBuffNum = 0;
    this.PassStar = 0;
    this.ReviveStar = 0;
    this.ReviveBuffId = 0;
    this.BabelTowerDeTermMutexArray = null;
  }
}


static public class BabelTowerLevelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*InstId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*IsDifficult*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 12 /*NameText*/, false)
      && verifier.VerifyString(tablePos, 14 /*DesText*/, false)
      && verifier.VerifyString(tablePos, 16 /*Texture*/, false)
      && verifier.VerifyField(tablePos, 18 /*OpenDay*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*FixBabelDeTermds*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*OptionalBabelBuff*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 24 /*OptionalBabelBuffNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*PassStar*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*ReviveStar*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*ReviveBuffId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 32 /*BabelTowerDeTermMutexArray*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
