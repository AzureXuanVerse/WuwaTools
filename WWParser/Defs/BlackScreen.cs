// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BlackScreen : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BlackScreen GetRootAsBlackScreen(ByteBuffer _bb) { return GetRootAsBlackScreen(_bb, new BlackScreen()); }
  public static BlackScreen GetRootAsBlackScreen(ByteBuffer _bb, BlackScreen obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BlackScreen __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ShowAnimName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShowAnimNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetShowAnimNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetShowAnimNameArray() { return __p.__vector_as_array<byte>(4); }
  public string HideAnimName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHideAnimNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetHideAnimNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetHideAnimNameArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<WWParser.Defs.BlackScreen> CreateBlackScreen(FlatBufferBuilder builder,
      StringOffset show_anim_nameOffset = default(StringOffset),
      StringOffset hide_anim_nameOffset = default(StringOffset)) {
    builder.StartTable(2);
    BlackScreen.AddHideAnimName(builder, hide_anim_nameOffset);
    BlackScreen.AddShowAnimName(builder, show_anim_nameOffset);
    return BlackScreen.EndBlackScreen(builder);
  }

  public static void StartBlackScreen(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddShowAnimName(FlatBufferBuilder builder, StringOffset showAnimNameOffset) { builder.AddOffset(0, showAnimNameOffset.Value, 0); }
  public static void AddHideAnimName(FlatBufferBuilder builder, StringOffset hideAnimNameOffset) { builder.AddOffset(1, hideAnimNameOffset.Value, 0); }
  public static Offset<WWParser.Defs.BlackScreen> EndBlackScreen(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BlackScreen>(o);
  }
  public BlackScreenT UnPack() {
    var _o = new BlackScreenT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BlackScreenT _o) {
    _o.ShowAnimName = this.ShowAnimName;
    _o.HideAnimName = this.HideAnimName;
  }
  public static Offset<WWParser.Defs.BlackScreen> Pack(FlatBufferBuilder builder, BlackScreenT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BlackScreen>);
    var _show_anim_name = _o.ShowAnimName == null ? default(StringOffset) : builder.CreateString(_o.ShowAnimName);
    var _hide_anim_name = _o.HideAnimName == null ? default(StringOffset) : builder.CreateString(_o.HideAnimName);
    return CreateBlackScreen(
      builder,
      _show_anim_name,
      _hide_anim_name);
  }
}

public class BlackScreenT
{
  [Newtonsoft.Json.JsonProperty("show_anim_name")]
  public string ShowAnimName { get; set; }
  [Newtonsoft.Json.JsonProperty("hide_anim_name")]
  public string HideAnimName { get; set; }

  public BlackScreenT() {
    this.ShowAnimName = null;
    this.HideAnimName = null;
  }
}


static public class BlackScreenVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*ShowAnimName*/, false)
      && verifier.VerifyString(tablePos, 6 /*HideAnimName*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
