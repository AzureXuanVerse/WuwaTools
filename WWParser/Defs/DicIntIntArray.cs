// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DicIntIntArray : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DicIntIntArray GetRootAsDicIntIntArray(ByteBuffer _bb) { return GetRootAsDicIntIntArray(_bb, new DicIntIntArray()); }
  public static DicIntIntArray GetRootAsDicIntIntArray(ByteBuffer _bb, DicIntIntArray obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DicIntIntArray __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Key { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.IntArray? Value { get { int o = __p.__offset(6); return o != 0 ? (WWParser.Defs.IntArray?)(new WWParser.Defs.IntArray()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<WWParser.Defs.DicIntIntArray> CreateDicIntIntArray(FlatBufferBuilder builder,
      int key = 0,
      Offset<WWParser.Defs.IntArray> valueOffset = default(Offset<WWParser.Defs.IntArray>)) {
    builder.StartTable(2);
    DicIntIntArray.AddValue(builder, valueOffset);
    DicIntIntArray.AddKey(builder, key);
    return DicIntIntArray.EndDicIntIntArray(builder);
  }

  public static void StartDicIntIntArray(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddKey(FlatBufferBuilder builder, int key) { builder.AddInt(0, key, 0); }
  public static void AddValue(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray> valueOffset) { builder.AddOffset(1, valueOffset.Value, 0); }
  public static Offset<WWParser.Defs.DicIntIntArray> EndDicIntIntArray(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DicIntIntArray>(o);
  }
  public DicIntIntArrayT UnPack() {
    var _o = new DicIntIntArrayT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DicIntIntArrayT _o) {
    _o.Key = this.Key;
    _o.Value = this.Value.HasValue ? this.Value.Value.UnPack() : null;
  }
  public static Offset<WWParser.Defs.DicIntIntArray> Pack(FlatBufferBuilder builder, DicIntIntArrayT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DicIntIntArray>);
    var _value = _o.Value == null ? default(Offset<WWParser.Defs.IntArray>) : WWParser.Defs.IntArray.Pack(builder, _o.Value);
    return CreateDicIntIntArray(
      builder,
      _o.Key,
      _value);
  }
}

public class DicIntIntArrayT
{
  [Newtonsoft.Json.JsonProperty("key")]
  public int Key { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public WWParser.Defs.IntArrayT Value { get; set; }

  public DicIntIntArrayT() {
    this.Key = 0;
    this.Value = null;
  }
}


static public class DicIntIntArrayVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Key*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 6 /*Value*/, WWParser.Defs.IntArrayVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
