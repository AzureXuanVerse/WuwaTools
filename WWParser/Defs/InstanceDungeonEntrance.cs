// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct InstanceDungeonEntrance : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static InstanceDungeonEntrance GetRootAsInstanceDungeonEntrance(ByteBuffer _bb) { return GetRootAsInstanceDungeonEntrance(_bb, new InstanceDungeonEntrance()); }
  public static InstanceDungeonEntrance GetRootAsInstanceDungeonEntrance(ByteBuffer _bb, InstanceDungeonEntrance obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InstanceDungeonEntrance __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MarkId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string Description { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(10); }
  public int InstanceDungeonList(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int InstanceDungeonListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetInstanceDungeonListBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetInstanceDungeonListBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetInstanceDungeonListArray() { return __p.__vector_as_array<int>(12); }
  public int FlowId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HelpButtonId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TitleSprite { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleSpriteBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTitleSpriteBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTitleSpriteArray() { return __p.__vector_as_array<byte>(18); }
  public int TeleportEntityConfigId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnLockCondition { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.IntArray? RegularReward(int j) { int o = __p.__offset(24); return o != 0 ? (WWParser.Defs.IntArray?)(new WWParser.Defs.IntArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RegularRewardLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int PowerCostShow { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MapBgPath { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapBgPathBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetMapBgPathBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetMapBgPathArray() { return __p.__vector_as_array<byte>(28); }

  public static Offset<WWParser.Defs.InstanceDungeonEntrance> CreateInstanceDungeonEntrance(FlatBufferBuilder builder,
      int id = 0,
      int mark_id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      VectorOffset instance_dungeon_listOffset = default(VectorOffset),
      int flow_id = 0,
      int help_button_id = 0,
      StringOffset title_spriteOffset = default(StringOffset),
      int teleport_entity_config_id = 0,
      int un_lock_condition = 0,
      VectorOffset regular_rewardOffset = default(VectorOffset),
      int power_cost_show = 0,
      StringOffset map_bg_pathOffset = default(StringOffset)) {
    builder.StartTable(13);
    InstanceDungeonEntrance.AddMapBgPath(builder, map_bg_pathOffset);
    InstanceDungeonEntrance.AddPowerCostShow(builder, power_cost_show);
    InstanceDungeonEntrance.AddRegularReward(builder, regular_rewardOffset);
    InstanceDungeonEntrance.AddUnLockCondition(builder, un_lock_condition);
    InstanceDungeonEntrance.AddTeleportEntityConfigId(builder, teleport_entity_config_id);
    InstanceDungeonEntrance.AddTitleSprite(builder, title_spriteOffset);
    InstanceDungeonEntrance.AddHelpButtonId(builder, help_button_id);
    InstanceDungeonEntrance.AddFlowId(builder, flow_id);
    InstanceDungeonEntrance.AddInstanceDungeonList(builder, instance_dungeon_listOffset);
    InstanceDungeonEntrance.AddDescription(builder, descriptionOffset);
    InstanceDungeonEntrance.AddName(builder, nameOffset);
    InstanceDungeonEntrance.AddMarkId(builder, mark_id);
    InstanceDungeonEntrance.AddId(builder, id);
    return InstanceDungeonEntrance.EndInstanceDungeonEntrance(builder);
  }

  public static void StartInstanceDungeonEntrance(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMarkId(FlatBufferBuilder builder, int markId) { builder.AddInt(1, markId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(3, descriptionOffset.Value, 0); }
  public static void AddInstanceDungeonList(FlatBufferBuilder builder, VectorOffset instanceDungeonListOffset) { builder.AddOffset(4, instanceDungeonListOffset.Value, 0); }
  public static VectorOffset CreateInstanceDungeonListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInstanceDungeonListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInstanceDungeonListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInstanceDungeonListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInstanceDungeonListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFlowId(FlatBufferBuilder builder, int flowId) { builder.AddInt(5, flowId, 0); }
  public static void AddHelpButtonId(FlatBufferBuilder builder, int helpButtonId) { builder.AddInt(6, helpButtonId, 0); }
  public static void AddTitleSprite(FlatBufferBuilder builder, StringOffset titleSpriteOffset) { builder.AddOffset(7, titleSpriteOffset.Value, 0); }
  public static void AddTeleportEntityConfigId(FlatBufferBuilder builder, int teleportEntityConfigId) { builder.AddInt(8, teleportEntityConfigId, 0); }
  public static void AddUnLockCondition(FlatBufferBuilder builder, int unLockCondition) { builder.AddInt(9, unLockCondition, 0); }
  public static void AddRegularReward(FlatBufferBuilder builder, VectorOffset regularRewardOffset) { builder.AddOffset(10, regularRewardOffset.Value, 0); }
  public static VectorOffset CreateRegularRewardVector(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRegularRewardVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRegularRewardVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.IntArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRegularRewardVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.IntArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRegularRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPowerCostShow(FlatBufferBuilder builder, int powerCostShow) { builder.AddInt(11, powerCostShow, 0); }
  public static void AddMapBgPath(FlatBufferBuilder builder, StringOffset mapBgPathOffset) { builder.AddOffset(12, mapBgPathOffset.Value, 0); }
  public static Offset<WWParser.Defs.InstanceDungeonEntrance> EndInstanceDungeonEntrance(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.InstanceDungeonEntrance>(o);
  }
  public InstanceDungeonEntranceT UnPack() {
    var _o = new InstanceDungeonEntranceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InstanceDungeonEntranceT _o) {
    _o.Id = this.Id;
    _o.MarkId = this.MarkId;
    _o.Name = this.Name;
    _o.Description = this.Description;
    _o.InstanceDungeonList = new List<int>();
    for (var _j = 0; _j < this.InstanceDungeonListLength; ++_j) {_o.InstanceDungeonList.Add(this.InstanceDungeonList(_j));}
    _o.FlowId = this.FlowId;
    _o.HelpButtonId = this.HelpButtonId;
    _o.TitleSprite = this.TitleSprite;
    _o.TeleportEntityConfigId = this.TeleportEntityConfigId;
    _o.UnLockCondition = this.UnLockCondition;
    _o.RegularReward = new List<WWParser.Defs.IntArrayT>();
    for (var _j = 0; _j < this.RegularRewardLength; ++_j) {_o.RegularReward.Add(this.RegularReward(_j).HasValue ? this.RegularReward(_j).Value.UnPack() : null);}
    _o.PowerCostShow = this.PowerCostShow;
    _o.MapBgPath = this.MapBgPath;
  }
  public static Offset<WWParser.Defs.InstanceDungeonEntrance> Pack(FlatBufferBuilder builder, InstanceDungeonEntranceT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.InstanceDungeonEntrance>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _instance_dungeon_list = default(VectorOffset);
    if (_o.InstanceDungeonList != null) {
      var __instance_dungeon_list = _o.InstanceDungeonList.ToArray();
      _instance_dungeon_list = CreateInstanceDungeonListVector(builder, __instance_dungeon_list);
    }
    var _title_sprite = _o.TitleSprite == null ? default(StringOffset) : builder.CreateString(_o.TitleSprite);
    var _regular_reward = default(VectorOffset);
    if (_o.RegularReward != null) {
      var __regular_reward = new Offset<WWParser.Defs.IntArray>[_o.RegularReward.Count];
      for (var _j = 0; _j < __regular_reward.Length; ++_j) { __regular_reward[_j] = WWParser.Defs.IntArray.Pack(builder, _o.RegularReward[_j]); }
      _regular_reward = CreateRegularRewardVector(builder, __regular_reward);
    }
    var _map_bg_path = _o.MapBgPath == null ? default(StringOffset) : builder.CreateString(_o.MapBgPath);
    return CreateInstanceDungeonEntrance(
      builder,
      _o.Id,
      _o.MarkId,
      _name,
      _description,
      _instance_dungeon_list,
      _o.FlowId,
      _o.HelpButtonId,
      _title_sprite,
      _o.TeleportEntityConfigId,
      _o.UnLockCondition,
      _regular_reward,
      _o.PowerCostShow,
      _map_bg_path);
  }
}

public class InstanceDungeonEntranceT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_id")]
  public int MarkId { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("description")]
  public string Description { get; set; }
  [Newtonsoft.Json.JsonProperty("instance_dungeon_list")]
  public List<int> InstanceDungeonList { get; set; }
  [Newtonsoft.Json.JsonProperty("flow_id")]
  public int FlowId { get; set; }
  [Newtonsoft.Json.JsonProperty("help_button_id")]
  public int HelpButtonId { get; set; }
  [Newtonsoft.Json.JsonProperty("title_sprite")]
  public string TitleSprite { get; set; }
  [Newtonsoft.Json.JsonProperty("teleport_entity_config_id")]
  public int TeleportEntityConfigId { get; set; }
  [Newtonsoft.Json.JsonProperty("un_lock_condition")]
  public int UnLockCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("regular_reward")]
  public List<WWParser.Defs.IntArrayT> RegularReward { get; set; }
  [Newtonsoft.Json.JsonProperty("power_cost_show")]
  public int PowerCostShow { get; set; }
  [Newtonsoft.Json.JsonProperty("map_bg_path")]
  public string MapBgPath { get; set; }

  public InstanceDungeonEntranceT() {
    this.Id = 0;
    this.MarkId = 0;
    this.Name = null;
    this.Description = null;
    this.InstanceDungeonList = null;
    this.FlowId = 0;
    this.HelpButtonId = 0;
    this.TitleSprite = null;
    this.TeleportEntityConfigId = 0;
    this.UnLockCondition = 0;
    this.RegularReward = null;
    this.PowerCostShow = 0;
    this.MapBgPath = null;
  }
}


static public class InstanceDungeonEntranceVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MarkId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyString(tablePos, 10 /*Description*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*InstanceDungeonList*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 14 /*FlowId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*HelpButtonId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*TitleSprite*/, false)
      && verifier.VerifyField(tablePos, 20 /*TeleportEntityConfigId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*UnLockCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 24 /*RegularReward*/, WWParser.Defs.IntArrayVerify.Verify, false)
      && verifier.VerifyField(tablePos, 26 /*PowerCostShow*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 28 /*MapBgPath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
