// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MapAudio : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MapAudio GetRootAsMapAudio(ByteBuffer _bb) { return GetRootAsMapAudio(_bb, new MapAudio()); }
  public static MapAudio GetRootAsMapAudio(ByteBuffer _bb, MapAudio obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MapAudio __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Event { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetEventBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetEventArray() { return __p.__vector_as_array<byte>(8); }
  public string EnterEvent { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnterEventBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetEnterEventBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetEnterEventArray() { return __p.__vector_as_array<byte>(10); }
  public string ExitEvent { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExitEventBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetExitEventBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetExitEventArray() { return __p.__vector_as_array<byte>(12); }
  public string ResetEvent { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResetEventBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetResetEventBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetResetEventArray() { return __p.__vector_as_array<byte>(14); }
  public string MusicResetEvent { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMusicResetEventBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetMusicResetEventBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetMusicResetEventArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<WWParser.Defs.MapAudio> CreateMapAudio(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset @eventOffset = default(StringOffset),
      StringOffset enter_eventOffset = default(StringOffset),
      StringOffset exit_eventOffset = default(StringOffset),
      StringOffset reset_eventOffset = default(StringOffset),
      StringOffset music_reset_eventOffset = default(StringOffset)) {
    builder.StartTable(7);
    MapAudio.AddMusicResetEvent(builder, music_reset_eventOffset);
    MapAudio.AddResetEvent(builder, reset_eventOffset);
    MapAudio.AddExitEvent(builder, exit_eventOffset);
    MapAudio.AddEnterEvent(builder, enter_eventOffset);
    MapAudio.AddEvent(builder, @eventOffset);
    MapAudio.AddName(builder, nameOffset);
    MapAudio.AddId(builder, id);
    return MapAudio.EndMapAudio(builder);
  }

  public static void StartMapAudio(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddEvent(FlatBufferBuilder builder, StringOffset eventOffset) { builder.AddOffset(2, eventOffset.Value, 0); }
  public static void AddEnterEvent(FlatBufferBuilder builder, StringOffset enterEventOffset) { builder.AddOffset(3, enterEventOffset.Value, 0); }
  public static void AddExitEvent(FlatBufferBuilder builder, StringOffset exitEventOffset) { builder.AddOffset(4, exitEventOffset.Value, 0); }
  public static void AddResetEvent(FlatBufferBuilder builder, StringOffset resetEventOffset) { builder.AddOffset(5, resetEventOffset.Value, 0); }
  public static void AddMusicResetEvent(FlatBufferBuilder builder, StringOffset musicResetEventOffset) { builder.AddOffset(6, musicResetEventOffset.Value, 0); }
  public static Offset<WWParser.Defs.MapAudio> EndMapAudio(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MapAudio>(o);
  }
  public MapAudioT UnPack() {
    var _o = new MapAudioT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MapAudioT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.Event = this.Event;
    _o.EnterEvent = this.EnterEvent;
    _o.ExitEvent = this.ExitEvent;
    _o.ResetEvent = this.ResetEvent;
    _o.MusicResetEvent = this.MusicResetEvent;
  }
  public static Offset<WWParser.Defs.MapAudio> Pack(FlatBufferBuilder builder, MapAudioT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MapAudio>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _event = _o.Event == null ? default(StringOffset) : builder.CreateString(_o.Event);
    var _enter_event = _o.EnterEvent == null ? default(StringOffset) : builder.CreateString(_o.EnterEvent);
    var _exit_event = _o.ExitEvent == null ? default(StringOffset) : builder.CreateString(_o.ExitEvent);
    var _reset_event = _o.ResetEvent == null ? default(StringOffset) : builder.CreateString(_o.ResetEvent);
    var _music_reset_event = _o.MusicResetEvent == null ? default(StringOffset) : builder.CreateString(_o.MusicResetEvent);
    return CreateMapAudio(
      builder,
      _o.Id,
      _name,
      _event,
      _enter_event,
      _exit_event,
      _reset_event,
      _music_reset_event);
  }
}

public class MapAudioT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("event")]
  public string Event { get; set; }
  [Newtonsoft.Json.JsonProperty("enter_event")]
  public string EnterEvent { get; set; }
  [Newtonsoft.Json.JsonProperty("exit_event")]
  public string ExitEvent { get; set; }
  [Newtonsoft.Json.JsonProperty("reset_event")]
  public string ResetEvent { get; set; }
  [Newtonsoft.Json.JsonProperty("music_reset_event")]
  public string MusicResetEvent { get; set; }

  public MapAudioT() {
    this.Id = 0;
    this.Name = null;
    this.Event = null;
    this.EnterEvent = null;
    this.ExitEvent = null;
    this.ResetEvent = null;
    this.MusicResetEvent = null;
  }
}


static public class MapAudioVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyString(tablePos, 8 /*Event*/, false)
      && verifier.VerifyString(tablePos, 10 /*EnterEvent*/, false)
      && verifier.VerifyString(tablePos, 12 /*ExitEvent*/, false)
      && verifier.VerifyString(tablePos, 14 /*ResetEvent*/, false)
      && verifier.VerifyString(tablePos, 16 /*MusicResetEvent*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
