// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Revive : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Revive GetRootAsRevive(ByteBuffer _bb) { return GetRootAsRevive(_bb, new Revive()); }
  public static Revive GetRootAsRevive(ByteBuffer _bb, Revive obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Revive __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ReviveTimes { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UseItemId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ReviveDelay(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ReviveDelayLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetReviveDelayBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetReviveDelayBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetReviveDelayArray() { return __p.__vector_as_array<int>(10); }
  public string DeathBp { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDeathBpBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDeathBpBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDeathBpArray() { return __p.__vector_as_array<byte>(12); }
  public string WindowBp { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWindowBpBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetWindowBpBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetWindowBpArray() { return __p.__vector_as_array<byte>(14); }
  public string ReviveTitle { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReviveTitleBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetReviveTitleBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetReviveTitleArray() { return __p.__vector_as_array<byte>(16); }
  public string ReviveContent { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReviveContentBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetReviveContentBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetReviveContentArray() { return __p.__vector_as_array<byte>(18); }
  public string ReviveSequencePath { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReviveSequencePathBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetReviveSequencePathBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetReviveSequencePathArray() { return __p.__vector_as_array<byte>(20); }

  public static Offset<WWParser.Defs.Revive> CreateRevive(FlatBufferBuilder builder,
      int id = 0,
      int revive_times = 0,
      int use_item_id = 0,
      VectorOffset revive_delayOffset = default(VectorOffset),
      StringOffset death_bpOffset = default(StringOffset),
      StringOffset window_bpOffset = default(StringOffset),
      StringOffset revive_titleOffset = default(StringOffset),
      StringOffset revive_contentOffset = default(StringOffset),
      StringOffset revive_sequence_pathOffset = default(StringOffset)) {
    builder.StartTable(9);
    Revive.AddReviveSequencePath(builder, revive_sequence_pathOffset);
    Revive.AddReviveContent(builder, revive_contentOffset);
    Revive.AddReviveTitle(builder, revive_titleOffset);
    Revive.AddWindowBp(builder, window_bpOffset);
    Revive.AddDeathBp(builder, death_bpOffset);
    Revive.AddReviveDelay(builder, revive_delayOffset);
    Revive.AddUseItemId(builder, use_item_id);
    Revive.AddReviveTimes(builder, revive_times);
    Revive.AddId(builder, id);
    return Revive.EndRevive(builder);
  }

  public static void StartRevive(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddReviveTimes(FlatBufferBuilder builder, int reviveTimes) { builder.AddInt(1, reviveTimes, 0); }
  public static void AddUseItemId(FlatBufferBuilder builder, int useItemId) { builder.AddInt(2, useItemId, 0); }
  public static void AddReviveDelay(FlatBufferBuilder builder, VectorOffset reviveDelayOffset) { builder.AddOffset(3, reviveDelayOffset.Value, 0); }
  public static VectorOffset CreateReviveDelayVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateReviveDelayVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReviveDelayVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReviveDelayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartReviveDelayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDeathBp(FlatBufferBuilder builder, StringOffset deathBpOffset) { builder.AddOffset(4, deathBpOffset.Value, 0); }
  public static void AddWindowBp(FlatBufferBuilder builder, StringOffset windowBpOffset) { builder.AddOffset(5, windowBpOffset.Value, 0); }
  public static void AddReviveTitle(FlatBufferBuilder builder, StringOffset reviveTitleOffset) { builder.AddOffset(6, reviveTitleOffset.Value, 0); }
  public static void AddReviveContent(FlatBufferBuilder builder, StringOffset reviveContentOffset) { builder.AddOffset(7, reviveContentOffset.Value, 0); }
  public static void AddReviveSequencePath(FlatBufferBuilder builder, StringOffset reviveSequencePathOffset) { builder.AddOffset(8, reviveSequencePathOffset.Value, 0); }
  public static Offset<WWParser.Defs.Revive> EndRevive(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Revive>(o);
  }
  public ReviveT UnPack() {
    var _o = new ReviveT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ReviveT _o) {
    _o.Id = this.Id;
    _o.ReviveTimes = this.ReviveTimes;
    _o.UseItemId = this.UseItemId;
    _o.ReviveDelay = new List<int>();
    for (var _j = 0; _j < this.ReviveDelayLength; ++_j) {_o.ReviveDelay.Add(this.ReviveDelay(_j));}
    _o.DeathBp = this.DeathBp;
    _o.WindowBp = this.WindowBp;
    _o.ReviveTitle = this.ReviveTitle;
    _o.ReviveContent = this.ReviveContent;
    _o.ReviveSequencePath = this.ReviveSequencePath;
  }
  public static Offset<WWParser.Defs.Revive> Pack(FlatBufferBuilder builder, ReviveT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Revive>);
    var _revive_delay = default(VectorOffset);
    if (_o.ReviveDelay != null) {
      var __revive_delay = _o.ReviveDelay.ToArray();
      _revive_delay = CreateReviveDelayVector(builder, __revive_delay);
    }
    var _death_bp = _o.DeathBp == null ? default(StringOffset) : builder.CreateString(_o.DeathBp);
    var _window_bp = _o.WindowBp == null ? default(StringOffset) : builder.CreateString(_o.WindowBp);
    var _revive_title = _o.ReviveTitle == null ? default(StringOffset) : builder.CreateString(_o.ReviveTitle);
    var _revive_content = _o.ReviveContent == null ? default(StringOffset) : builder.CreateString(_o.ReviveContent);
    var _revive_sequence_path = _o.ReviveSequencePath == null ? default(StringOffset) : builder.CreateString(_o.ReviveSequencePath);
    return CreateRevive(
      builder,
      _o.Id,
      _o.ReviveTimes,
      _o.UseItemId,
      _revive_delay,
      _death_bp,
      _window_bp,
      _revive_title,
      _revive_content,
      _revive_sequence_path);
  }
}

public class ReviveT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("revive_times")]
  public int ReviveTimes { get; set; }
  [Newtonsoft.Json.JsonProperty("use_item_id")]
  public int UseItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("revive_delay")]
  public List<int> ReviveDelay { get; set; }
  [Newtonsoft.Json.JsonProperty("death_bp")]
  public string DeathBp { get; set; }
  [Newtonsoft.Json.JsonProperty("window_bp")]
  public string WindowBp { get; set; }
  [Newtonsoft.Json.JsonProperty("revive_title")]
  public string ReviveTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("revive_content")]
  public string ReviveContent { get; set; }
  [Newtonsoft.Json.JsonProperty("revive_sequence_path")]
  public string ReviveSequencePath { get; set; }

  public ReviveT() {
    this.Id = 0;
    this.ReviveTimes = 0;
    this.UseItemId = 0;
    this.ReviveDelay = null;
    this.DeathBp = null;
    this.WindowBp = null;
    this.ReviveTitle = null;
    this.ReviveContent = null;
    this.ReviveSequencePath = null;
  }
}


static public class ReviveVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ReviveTimes*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*UseItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*ReviveDelay*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 12 /*DeathBp*/, false)
      && verifier.VerifyString(tablePos, 14 /*WindowBp*/, false)
      && verifier.VerifyString(tablePos, 16 /*ReviveTitle*/, false)
      && verifier.VerifyString(tablePos, 18 /*ReviveContent*/, false)
      && verifier.VerifyString(tablePos, 20 /*ReviveSequencePath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
