// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FlowTemplateData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FlowTemplateData GetRootAsFlowTemplateData(ByteBuffer _bb) { return GetRootAsFlowTemplateData(_bb, new FlowTemplateData()); }
  public static FlowTemplateData GetRootAsFlowTemplateData(ByteBuffer _bb, FlowTemplateData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FlowTemplateData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int Amount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Enable { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Template { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTemplateBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTemplateBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTemplateArray() { return __p.__vector_as_array<byte>(12); }
  public string CameraType { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCameraTypeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCameraTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCameraTypeArray() { return __p.__vector_as_array<byte>(14); }
  public string ActorDataArray { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActorDataArrayBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetActorDataArrayBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetActorDataArrayArray() { return __p.__vector_as_array<byte>(16); }
  public string CameraData { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCameraDataBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetCameraDataBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetCameraDataArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<WWParser.Defs.FlowTemplateData> CreateFlowTemplateData(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      int amount = 0,
      bool enable = false,
      StringOffset templateOffset = default(StringOffset),
      StringOffset camera_typeOffset = default(StringOffset),
      StringOffset actor_data_arrayOffset = default(StringOffset),
      StringOffset camera_dataOffset = default(StringOffset)) {
    builder.StartTable(8);
    FlowTemplateData.AddCameraData(builder, camera_dataOffset);
    FlowTemplateData.AddActorDataArray(builder, actor_data_arrayOffset);
    FlowTemplateData.AddCameraType(builder, camera_typeOffset);
    FlowTemplateData.AddTemplate(builder, templateOffset);
    FlowTemplateData.AddAmount(builder, amount);
    FlowTemplateData.AddName(builder, nameOffset);
    FlowTemplateData.AddId(builder, id);
    FlowTemplateData.AddEnable(builder, enable);
    return FlowTemplateData.EndFlowTemplateData(builder);
  }

  public static void StartFlowTemplateData(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddAmount(FlatBufferBuilder builder, int amount) { builder.AddInt(2, amount, 0); }
  public static void AddEnable(FlatBufferBuilder builder, bool enable) { builder.AddBool(3, enable, false); }
  public static void AddTemplate(FlatBufferBuilder builder, StringOffset templateOffset) { builder.AddOffset(4, templateOffset.Value, 0); }
  public static void AddCameraType(FlatBufferBuilder builder, StringOffset cameraTypeOffset) { builder.AddOffset(5, cameraTypeOffset.Value, 0); }
  public static void AddActorDataArray(FlatBufferBuilder builder, StringOffset actorDataArrayOffset) { builder.AddOffset(6, actorDataArrayOffset.Value, 0); }
  public static void AddCameraData(FlatBufferBuilder builder, StringOffset cameraDataOffset) { builder.AddOffset(7, cameraDataOffset.Value, 0); }
  public static Offset<WWParser.Defs.FlowTemplateData> EndFlowTemplateData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FlowTemplateData>(o);
  }
  public FlowTemplateDataT UnPack() {
    var _o = new FlowTemplateDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FlowTemplateDataT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.Amount = this.Amount;
    _o.Enable = this.Enable;
    _o.Template = this.Template;
    _o.CameraType = this.CameraType;
    _o.ActorDataArray = this.ActorDataArray;
    _o.CameraData = this.CameraData;
  }
  public static Offset<WWParser.Defs.FlowTemplateData> Pack(FlatBufferBuilder builder, FlowTemplateDataT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FlowTemplateData>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _template = _o.Template == null ? default(StringOffset) : builder.CreateString(_o.Template);
    var _camera_type = _o.CameraType == null ? default(StringOffset) : builder.CreateString(_o.CameraType);
    var _actor_data_array = _o.ActorDataArray == null ? default(StringOffset) : builder.CreateString(_o.ActorDataArray);
    var _camera_data = _o.CameraData == null ? default(StringOffset) : builder.CreateString(_o.CameraData);
    return CreateFlowTemplateData(
      builder,
      _o.Id,
      _name,
      _o.Amount,
      _o.Enable,
      _template,
      _camera_type,
      _actor_data_array,
      _camera_data);
  }
}

public class FlowTemplateDataT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("amount")]
  public int Amount { get; set; }
  [Newtonsoft.Json.JsonProperty("enable")]
  public bool Enable { get; set; }
  [Newtonsoft.Json.JsonProperty("template")]
  public string Template { get; set; }
  [Newtonsoft.Json.JsonProperty("camera_type")]
  public string CameraType { get; set; }
  [Newtonsoft.Json.JsonProperty("actor_data_array")]
  public string ActorDataArray { get; set; }
  [Newtonsoft.Json.JsonProperty("camera_data")]
  public string CameraData { get; set; }

  public FlowTemplateDataT() {
    this.Id = 0;
    this.Name = null;
    this.Amount = 0;
    this.Enable = false;
    this.Template = null;
    this.CameraType = null;
    this.ActorDataArray = null;
    this.CameraData = null;
  }
}


static public class FlowTemplateDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*Amount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Enable*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 12 /*Template*/, false)
      && verifier.VerifyString(tablePos, 14 /*CameraType*/, false)
      && verifier.VerifyString(tablePos, 16 /*ActorDataArray*/, false)
      && verifier.VerifyString(tablePos, 18 /*CameraData*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
