// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MapMarkRelativeSubType : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MapMarkRelativeSubType GetRootAsMapMarkRelativeSubType(ByteBuffer _bb) { return GetRootAsMapMarkRelativeSubType(_bb, new MapMarkRelativeSubType()); }
  public static MapMarkRelativeSubType GetRootAsMapMarkRelativeSubType(ByteBuffer _bb, MapMarkRelativeSubType obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MapMarkRelativeSubType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FunctionId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.IntVector? Position { get { int o = __p.__offset(8); return o != 0 ? (WWParser.Defs.IntVector?)(new WWParser.Defs.IntVector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Scale { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }

  public static Offset<WWParser.Defs.MapMarkRelativeSubType> CreateMapMarkRelativeSubType(FlatBufferBuilder builder,
      int id = 0,
      int function_id = 0,
      Offset<WWParser.Defs.IntVector> positionOffset = default(Offset<WWParser.Defs.IntVector>),
      float scale = 1.0f) {
    builder.StartTable(4);
    MapMarkRelativeSubType.AddScale(builder, scale);
    MapMarkRelativeSubType.AddPosition(builder, positionOffset);
    MapMarkRelativeSubType.AddFunctionId(builder, function_id);
    MapMarkRelativeSubType.AddId(builder, id);
    return MapMarkRelativeSubType.EndMapMarkRelativeSubType(builder);
  }

  public static void StartMapMarkRelativeSubType(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddFunctionId(FlatBufferBuilder builder, int functionId) { builder.AddInt(1, functionId, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<WWParser.Defs.IntVector> positionOffset) { builder.AddOffset(2, positionOffset.Value, 0); }
  public static void AddScale(FlatBufferBuilder builder, float scale) { builder.AddFloat(3, scale, 1.0f); }
  public static Offset<WWParser.Defs.MapMarkRelativeSubType> EndMapMarkRelativeSubType(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MapMarkRelativeSubType>(o);
  }
  public MapMarkRelativeSubTypeT UnPack() {
    var _o = new MapMarkRelativeSubTypeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MapMarkRelativeSubTypeT _o) {
    _o.Id = this.Id;
    _o.FunctionId = this.FunctionId;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Scale = this.Scale;
  }
  public static Offset<WWParser.Defs.MapMarkRelativeSubType> Pack(FlatBufferBuilder builder, MapMarkRelativeSubTypeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MapMarkRelativeSubType>);
    var _position = _o.Position == null ? default(Offset<WWParser.Defs.IntVector>) : WWParser.Defs.IntVector.Pack(builder, _o.Position);
    return CreateMapMarkRelativeSubType(
      builder,
      _o.Id,
      _o.FunctionId,
      _position,
      _o.Scale);
  }
}

public class MapMarkRelativeSubTypeT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("function_id")]
  public int FunctionId { get; set; }
  [Newtonsoft.Json.JsonProperty("position")]
  public WWParser.Defs.IntVectorT Position { get; set; }
  [Newtonsoft.Json.JsonProperty("scale")]
  public float Scale { get; set; }

  public MapMarkRelativeSubTypeT() {
    this.Id = 0;
    this.FunctionId = 0;
    this.Position = null;
    this.Scale = 1.0f;
  }
}


static public class MapMarkRelativeSubTypeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*FunctionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 8 /*Position*/, WWParser.Defs.IntVectorVerify.Verify, false)
      && verifier.VerifyField(tablePos, 10 /*Scale*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
