// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RiskHarvestDifficulty : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RiskHarvestDifficulty GetRootAsRiskHarvestDifficulty(ByteBuffer _bb) { return GetRootAsRiskHarvestDifficulty(_bb, new RiskHarvestDifficulty()); }
  public static RiskHarvestDifficulty GetRootAsRiskHarvestDifficulty(ByteBuffer _bb, RiskHarvestDifficulty obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RiskHarvestDifficulty __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LevelGroup(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LevelGroupLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLevelGroupBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetLevelGroupBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetLevelGroupArray() { return __p.__vector_as_array<int>(6); }
  public int TimeRatio { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MonsterRatio { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.RiskHarvestDifficulty> CreateRiskHarvestDifficulty(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset level_groupOffset = default(VectorOffset),
      int time_ratio = 0,
      int monster_ratio = 0) {
    builder.StartTable(4);
    RiskHarvestDifficulty.AddMonsterRatio(builder, monster_ratio);
    RiskHarvestDifficulty.AddTimeRatio(builder, time_ratio);
    RiskHarvestDifficulty.AddLevelGroup(builder, level_groupOffset);
    RiskHarvestDifficulty.AddId(builder, id);
    return RiskHarvestDifficulty.EndRiskHarvestDifficulty(builder);
  }

  public static void StartRiskHarvestDifficulty(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddLevelGroup(FlatBufferBuilder builder, VectorOffset levelGroupOffset) { builder.AddOffset(1, levelGroupOffset.Value, 0); }
  public static VectorOffset CreateLevelGroupVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLevelGroupVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLevelGroupVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLevelGroupVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLevelGroupVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTimeRatio(FlatBufferBuilder builder, int timeRatio) { builder.AddInt(2, timeRatio, 0); }
  public static void AddMonsterRatio(FlatBufferBuilder builder, int monsterRatio) { builder.AddInt(3, monsterRatio, 0); }
  public static Offset<WWParser.Defs.RiskHarvestDifficulty> EndRiskHarvestDifficulty(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RiskHarvestDifficulty>(o);
  }
  public RiskHarvestDifficultyT UnPack() {
    var _o = new RiskHarvestDifficultyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RiskHarvestDifficultyT _o) {
    _o.Id = this.Id;
    _o.LevelGroup = new List<int>();
    for (var _j = 0; _j < this.LevelGroupLength; ++_j) {_o.LevelGroup.Add(this.LevelGroup(_j));}
    _o.TimeRatio = this.TimeRatio;
    _o.MonsterRatio = this.MonsterRatio;
  }
  public static Offset<WWParser.Defs.RiskHarvestDifficulty> Pack(FlatBufferBuilder builder, RiskHarvestDifficultyT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RiskHarvestDifficulty>);
    var _level_group = default(VectorOffset);
    if (_o.LevelGroup != null) {
      var __level_group = _o.LevelGroup.ToArray();
      _level_group = CreateLevelGroupVector(builder, __level_group);
    }
    return CreateRiskHarvestDifficulty(
      builder,
      _o.Id,
      _level_group,
      _o.TimeRatio,
      _o.MonsterRatio);
  }
}

public class RiskHarvestDifficultyT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("level_group")]
  public List<int> LevelGroup { get; set; }
  [Newtonsoft.Json.JsonProperty("time_ratio")]
  public int TimeRatio { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_ratio")]
  public int MonsterRatio { get; set; }

  public RiskHarvestDifficultyT() {
    this.Id = 0;
    this.LevelGroup = null;
    this.TimeRatio = 0;
    this.MonsterRatio = 0;
  }
}


static public class RiskHarvestDifficultyVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*LevelGroup*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 8 /*TimeRatio*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*MonsterRatio*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
