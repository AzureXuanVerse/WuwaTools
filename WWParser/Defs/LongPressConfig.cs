// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LongPressConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static LongPressConfig GetRootAsLongPressConfig(ByteBuffer _bb) { return GetRootAsLongPressConfig(_bb, new LongPressConfig()); }
  public static LongPressConfig GetRootAsLongPressConfig(ByteBuffer _bb, LongPressConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LongPressConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PressTime(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PressTimeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPressTimeBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetPressTimeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetPressTimeArray() { return __p.__vector_as_array<int>(6); }
  public int TriggerTime(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TriggerTimeLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTriggerTimeBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetTriggerTimeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetTriggerTimeArray() { return __p.__vector_as_array<int>(8); }
  public int AudioIntervalLimit { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.LongPressConfig> CreateLongPressConfig(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset press_timeOffset = default(VectorOffset),
      VectorOffset trigger_timeOffset = default(VectorOffset),
      int audio_interval_limit = 0) {
    builder.StartTable(4);
    LongPressConfig.AddAudioIntervalLimit(builder, audio_interval_limit);
    LongPressConfig.AddTriggerTime(builder, trigger_timeOffset);
    LongPressConfig.AddPressTime(builder, press_timeOffset);
    LongPressConfig.AddId(builder, id);
    return LongPressConfig.EndLongPressConfig(builder);
  }

  public static void StartLongPressConfig(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPressTime(FlatBufferBuilder builder, VectorOffset pressTimeOffset) { builder.AddOffset(1, pressTimeOffset.Value, 0); }
  public static VectorOffset CreatePressTimeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePressTimeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePressTimeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePressTimeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPressTimeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTriggerTime(FlatBufferBuilder builder, VectorOffset triggerTimeOffset) { builder.AddOffset(2, triggerTimeOffset.Value, 0); }
  public static VectorOffset CreateTriggerTimeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTriggerTimeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTriggerTimeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTriggerTimeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTriggerTimeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAudioIntervalLimit(FlatBufferBuilder builder, int audioIntervalLimit) { builder.AddInt(3, audioIntervalLimit, 0); }
  public static Offset<WWParser.Defs.LongPressConfig> EndLongPressConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.LongPressConfig>(o);
  }
  public LongPressConfigT UnPack() {
    var _o = new LongPressConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LongPressConfigT _o) {
    _o.Id = this.Id;
    _o.PressTime = new List<int>();
    for (var _j = 0; _j < this.PressTimeLength; ++_j) {_o.PressTime.Add(this.PressTime(_j));}
    _o.TriggerTime = new List<int>();
    for (var _j = 0; _j < this.TriggerTimeLength; ++_j) {_o.TriggerTime.Add(this.TriggerTime(_j));}
    _o.AudioIntervalLimit = this.AudioIntervalLimit;
  }
  public static Offset<WWParser.Defs.LongPressConfig> Pack(FlatBufferBuilder builder, LongPressConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.LongPressConfig>);
    var _press_time = default(VectorOffset);
    if (_o.PressTime != null) {
      var __press_time = _o.PressTime.ToArray();
      _press_time = CreatePressTimeVector(builder, __press_time);
    }
    var _trigger_time = default(VectorOffset);
    if (_o.TriggerTime != null) {
      var __trigger_time = _o.TriggerTime.ToArray();
      _trigger_time = CreateTriggerTimeVector(builder, __trigger_time);
    }
    return CreateLongPressConfig(
      builder,
      _o.Id,
      _press_time,
      _trigger_time,
      _o.AudioIntervalLimit);
  }
}

public class LongPressConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("press_time")]
  public List<int> PressTime { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_time")]
  public List<int> TriggerTime { get; set; }
  [Newtonsoft.Json.JsonProperty("audio_interval_limit")]
  public int AudioIntervalLimit { get; set; }

  public LongPressConfigT() {
    this.Id = 0;
    this.PressTime = null;
    this.TriggerTime = null;
    this.AudioIntervalLimit = 0;
  }
}


static public class LongPressConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*PressTime*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*TriggerTime*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 10 /*AudioIntervalLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
