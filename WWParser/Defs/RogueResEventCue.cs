// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueResEventCue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueResEventCue GetRootAsRogueResEventCue(ByteBuffer _bb) { return GetRootAsRogueResEventCue(_bb, new RogueResEventCue()); }
  public static RogueResEventCue GetRootAsRogueResEventCue(ByteBuffer _bb, RogueResEventCue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueResEventCue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Type { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(6); }
  public bool IsSpecial { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string FxColor { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFxColorBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetFxColorBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetFxColorArray() { return __p.__vector_as_array<byte>(10); }
  public string SpriteColor { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpriteColorBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetSpriteColorBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetSpriteColorArray() { return __p.__vector_as_array<byte>(12); }
  public string IconPath { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconPathBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIconPathArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<WWParser.Defs.RogueResEventCue> CreateRogueResEventCue(FlatBufferBuilder builder,
      int id = 0,
      StringOffset typeOffset = default(StringOffset),
      bool is_special = false,
      StringOffset fx_colorOffset = default(StringOffset),
      StringOffset sprite_colorOffset = default(StringOffset),
      StringOffset icon_pathOffset = default(StringOffset)) {
    builder.StartTable(6);
    RogueResEventCue.AddIconPath(builder, icon_pathOffset);
    RogueResEventCue.AddSpriteColor(builder, sprite_colorOffset);
    RogueResEventCue.AddFxColor(builder, fx_colorOffset);
    RogueResEventCue.AddType(builder, typeOffset);
    RogueResEventCue.AddId(builder, id);
    RogueResEventCue.AddIsSpecial(builder, is_special);
    return RogueResEventCue.EndRogueResEventCue(builder);
  }

  public static void StartRogueResEventCue(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static void AddIsSpecial(FlatBufferBuilder builder, bool isSpecial) { builder.AddBool(2, isSpecial, false); }
  public static void AddFxColor(FlatBufferBuilder builder, StringOffset fxColorOffset) { builder.AddOffset(3, fxColorOffset.Value, 0); }
  public static void AddSpriteColor(FlatBufferBuilder builder, StringOffset spriteColorOffset) { builder.AddOffset(4, spriteColorOffset.Value, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset iconPathOffset) { builder.AddOffset(5, iconPathOffset.Value, 0); }
  public static Offset<WWParser.Defs.RogueResEventCue> EndRogueResEventCue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueResEventCue>(o);
  }
  public RogueResEventCueT UnPack() {
    var _o = new RogueResEventCueT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueResEventCueT _o) {
    _o.Id = this.Id;
    _o.Type = this.Type;
    _o.IsSpecial = this.IsSpecial;
    _o.FxColor = this.FxColor;
    _o.SpriteColor = this.SpriteColor;
    _o.IconPath = this.IconPath;
  }
  public static Offset<WWParser.Defs.RogueResEventCue> Pack(FlatBufferBuilder builder, RogueResEventCueT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueResEventCue>);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _fx_color = _o.FxColor == null ? default(StringOffset) : builder.CreateString(_o.FxColor);
    var _sprite_color = _o.SpriteColor == null ? default(StringOffset) : builder.CreateString(_o.SpriteColor);
    var _icon_path = _o.IconPath == null ? default(StringOffset) : builder.CreateString(_o.IconPath);
    return CreateRogueResEventCue(
      builder,
      _o.Id,
      _type,
      _o.IsSpecial,
      _fx_color,
      _sprite_color,
      _icon_path);
  }
}

public class RogueResEventCueT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public string Type { get; set; }
  [Newtonsoft.Json.JsonProperty("is_special")]
  public bool IsSpecial { get; set; }
  [Newtonsoft.Json.JsonProperty("fx_color")]
  public string FxColor { get; set; }
  [Newtonsoft.Json.JsonProperty("sprite_color")]
  public string SpriteColor { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_path")]
  public string IconPath { get; set; }

  public RogueResEventCueT() {
    this.Id = 0;
    this.Type = null;
    this.IsSpecial = false;
    this.FxColor = null;
    this.SpriteColor = null;
    this.IconPath = null;
  }
}


static public class RogueResEventCueVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Type*/, false)
      && verifier.VerifyField(tablePos, 8 /*IsSpecial*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 10 /*FxColor*/, false)
      && verifier.VerifyString(tablePos, 12 /*SpriteColor*/, false)
      && verifier.VerifyString(tablePos, 14 /*IconPath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
