// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CalabashLevel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CalabashLevel GetRootAsCalabashLevel(ByteBuffer _bb) { return GetRootAsCalabashLevel(_bb, new CalabashLevel()); }
  public static CalabashLevel GetRootAsCalabashLevel(ByteBuffer _bb, CalabashLevel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CalabashLevel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Level { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LevelUpExp { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LevelUpCondition { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TempCatchGain { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuffIds(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BuffIdsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBuffIdsBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetBuffIdsBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetBuffIdsArray() { return __p.__vector_as_array<int>(12); }
  public string BuffDescription { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffDescriptionBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetBuffDescriptionBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetBuffDescriptionArray() { return __p.__vector_as_array<byte>(14); }
  public string LevelUpDescription { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLevelUpDescriptionBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetLevelUpDescriptionBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetLevelUpDescriptionArray() { return __p.__vector_as_array<byte>(16); }
  public string QualityDescription { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQualityDescriptionBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetQualityDescriptionBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetQualityDescriptionArray() { return __p.__vector_as_array<byte>(18); }
  public WWParser.Defs.DicIntInt? BuffDescriptionMap(int j) { int o = __p.__offset(20); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BuffDescriptionMapLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Cost { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)4301; } }
  public WWParser.Defs.DicIntInt? QualityDropWeight(int j) { int o = __p.__offset(26); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int QualityDropWeightLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.CalabashLevel> CreateCalabashLevel(FlatBufferBuilder builder,
      int level = 0,
      int level_up_exp = 0,
      int level_up_condition = 0,
      int temp_catch_gain = 0,
      VectorOffset buff_idsOffset = default(VectorOffset),
      StringOffset buff_descriptionOffset = default(StringOffset),
      StringOffset level_up_descriptionOffset = default(StringOffset),
      StringOffset quality_descriptionOffset = default(StringOffset),
      VectorOffset buff_description_mapOffset = default(VectorOffset),
      int cost = 0,
      int reward_id = 4301,
      VectorOffset quality_drop_weightOffset = default(VectorOffset)) {
    builder.StartTable(12);
    CalabashLevel.AddQualityDropWeight(builder, quality_drop_weightOffset);
    CalabashLevel.AddRewardId(builder, reward_id);
    CalabashLevel.AddCost(builder, cost);
    CalabashLevel.AddBuffDescriptionMap(builder, buff_description_mapOffset);
    CalabashLevel.AddQualityDescription(builder, quality_descriptionOffset);
    CalabashLevel.AddLevelUpDescription(builder, level_up_descriptionOffset);
    CalabashLevel.AddBuffDescription(builder, buff_descriptionOffset);
    CalabashLevel.AddBuffIds(builder, buff_idsOffset);
    CalabashLevel.AddTempCatchGain(builder, temp_catch_gain);
    CalabashLevel.AddLevelUpCondition(builder, level_up_condition);
    CalabashLevel.AddLevelUpExp(builder, level_up_exp);
    CalabashLevel.AddLevel(builder, level);
    return CalabashLevel.EndCalabashLevel(builder);
  }

  public static void StartCalabashLevel(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(0, level, 0); }
  public static void AddLevelUpExp(FlatBufferBuilder builder, int levelUpExp) { builder.AddInt(1, levelUpExp, 0); }
  public static void AddLevelUpCondition(FlatBufferBuilder builder, int levelUpCondition) { builder.AddInt(2, levelUpCondition, 0); }
  public static void AddTempCatchGain(FlatBufferBuilder builder, int tempCatchGain) { builder.AddInt(3, tempCatchGain, 0); }
  public static void AddBuffIds(FlatBufferBuilder builder, VectorOffset buffIdsOffset) { builder.AddOffset(4, buffIdsOffset.Value, 0); }
  public static VectorOffset CreateBuffIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffDescription(FlatBufferBuilder builder, StringOffset buffDescriptionOffset) { builder.AddOffset(5, buffDescriptionOffset.Value, 0); }
  public static void AddLevelUpDescription(FlatBufferBuilder builder, StringOffset levelUpDescriptionOffset) { builder.AddOffset(6, levelUpDescriptionOffset.Value, 0); }
  public static void AddQualityDescription(FlatBufferBuilder builder, StringOffset qualityDescriptionOffset) { builder.AddOffset(7, qualityDescriptionOffset.Value, 0); }
  public static void AddBuffDescriptionMap(FlatBufferBuilder builder, VectorOffset buffDescriptionMapOffset) { builder.AddOffset(8, buffDescriptionMapOffset.Value, 0); }
  public static VectorOffset CreateBuffDescriptionMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBuffDescriptionMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffDescriptionMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffDescriptionMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffDescriptionMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCost(FlatBufferBuilder builder, int cost) { builder.AddInt(9, cost, 0); }
  public static void AddRewardId(FlatBufferBuilder builder, int rewardId) { builder.AddInt(10, rewardId, 4301); }
  public static void AddQualityDropWeight(FlatBufferBuilder builder, VectorOffset qualityDropWeightOffset) { builder.AddOffset(11, qualityDropWeightOffset.Value, 0); }
  public static VectorOffset CreateQualityDropWeightVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateQualityDropWeightVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateQualityDropWeightVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateQualityDropWeightVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartQualityDropWeightVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.CalabashLevel> EndCalabashLevel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.CalabashLevel>(o);
  }
  public CalabashLevelT UnPack() {
    var _o = new CalabashLevelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CalabashLevelT _o) {
    _o.Level = this.Level;
    _o.LevelUpExp = this.LevelUpExp;
    _o.LevelUpCondition = this.LevelUpCondition;
    _o.TempCatchGain = this.TempCatchGain;
    _o.BuffIds = new List<int>();
    for (var _j = 0; _j < this.BuffIdsLength; ++_j) {_o.BuffIds.Add(this.BuffIds(_j));}
    _o.BuffDescription = this.BuffDescription;
    _o.LevelUpDescription = this.LevelUpDescription;
    _o.QualityDescription = this.QualityDescription;
    _o.BuffDescriptionMap = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.BuffDescriptionMapLength; ++_j) {_o.BuffDescriptionMap.Add(this.BuffDescriptionMap(_j).HasValue ? this.BuffDescriptionMap(_j).Value.UnPack() : null);}
    _o.Cost = this.Cost;
    _o.RewardId = this.RewardId;
    _o.QualityDropWeight = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.QualityDropWeightLength; ++_j) {_o.QualityDropWeight.Add(this.QualityDropWeight(_j).HasValue ? this.QualityDropWeight(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.CalabashLevel> Pack(FlatBufferBuilder builder, CalabashLevelT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.CalabashLevel>);
    var _buff_ids = default(VectorOffset);
    if (_o.BuffIds != null) {
      var __buff_ids = _o.BuffIds.ToArray();
      _buff_ids = CreateBuffIdsVector(builder, __buff_ids);
    }
    var _buff_description = _o.BuffDescription == null ? default(StringOffset) : builder.CreateString(_o.BuffDescription);
    var _level_up_description = _o.LevelUpDescription == null ? default(StringOffset) : builder.CreateString(_o.LevelUpDescription);
    var _quality_description = _o.QualityDescription == null ? default(StringOffset) : builder.CreateString(_o.QualityDescription);
    var _buff_description_map = default(VectorOffset);
    if (_o.BuffDescriptionMap != null) {
      var __buff_description_map = new Offset<WWParser.Defs.DicIntInt>[_o.BuffDescriptionMap.Count];
      for (var _j = 0; _j < __buff_description_map.Length; ++_j) { __buff_description_map[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.BuffDescriptionMap[_j]); }
      _buff_description_map = CreateBuffDescriptionMapVector(builder, __buff_description_map);
    }
    var _quality_drop_weight = default(VectorOffset);
    if (_o.QualityDropWeight != null) {
      var __quality_drop_weight = new Offset<WWParser.Defs.DicIntInt>[_o.QualityDropWeight.Count];
      for (var _j = 0; _j < __quality_drop_weight.Length; ++_j) { __quality_drop_weight[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.QualityDropWeight[_j]); }
      _quality_drop_weight = CreateQualityDropWeightVector(builder, __quality_drop_weight);
    }
    return CreateCalabashLevel(
      builder,
      _o.Level,
      _o.LevelUpExp,
      _o.LevelUpCondition,
      _o.TempCatchGain,
      _buff_ids,
      _buff_description,
      _level_up_description,
      _quality_description,
      _buff_description_map,
      _o.Cost,
      _o.RewardId,
      _quality_drop_weight);
  }
}

public class CalabashLevelT
{
  [Newtonsoft.Json.JsonProperty("level")]
  public int Level { get; set; }
  [Newtonsoft.Json.JsonProperty("level_up_exp")]
  public int LevelUpExp { get; set; }
  [Newtonsoft.Json.JsonProperty("level_up_condition")]
  public int LevelUpCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("temp_catch_gain")]
  public int TempCatchGain { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_ids")]
  public List<int> BuffIds { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_description")]
  public string BuffDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("level_up_description")]
  public string LevelUpDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("quality_description")]
  public string QualityDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_description_map")]
  public List<WWParser.Defs.DicIntIntT> BuffDescriptionMap { get; set; }
  [Newtonsoft.Json.JsonProperty("cost")]
  public int Cost { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_id")]
  public int RewardId { get; set; }
  [Newtonsoft.Json.JsonProperty("quality_drop_weight")]
  public List<WWParser.Defs.DicIntIntT> QualityDropWeight { get; set; }

  public CalabashLevelT() {
    this.Level = 0;
    this.LevelUpExp = 0;
    this.LevelUpCondition = 0;
    this.TempCatchGain = 0;
    this.BuffIds = null;
    this.BuffDescription = null;
    this.LevelUpDescription = null;
    this.QualityDescription = null;
    this.BuffDescriptionMap = null;
    this.Cost = 0;
    this.RewardId = 4301;
    this.QualityDropWeight = null;
  }
}


static public class CalabashLevelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*LevelUpExp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*LevelUpCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*TempCatchGain*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*BuffIds*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 14 /*BuffDescription*/, false)
      && verifier.VerifyString(tablePos, 16 /*LevelUpDescription*/, false)
      && verifier.VerifyString(tablePos, 18 /*QualityDescription*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 20 /*BuffDescriptionMap*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 22 /*Cost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*RewardId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 26 /*QualityDropWeight*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
