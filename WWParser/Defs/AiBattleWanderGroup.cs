// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiBattleWanderGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AiBattleWanderGroup GetRootAsAiBattleWanderGroup(ByteBuffer _bb) { return GetRootAsAiBattleWanderGroup(_bb, new AiBattleWanderGroup()); }
  public static AiBattleWanderGroup GetRootAsAiBattleWanderGroup(ByteBuffer _bb, AiBattleWanderGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiBattleWanderGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float DistanceRange(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int DistanceRangeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetDistanceRangeBytes() { return __p.__vector_as_span<float>(6, 4); }
#else
  public ArraySegment<byte>? GetDistanceRangeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public float[] GetDistanceRangeArray() { return __p.__vector_as_array<float>(6); }
  public float NearActionRates(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int NearActionRatesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetNearActionRatesBytes() { return __p.__vector_as_span<float>(8, 4); }
#else
  public ArraySegment<byte>? GetNearActionRatesBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public float[] GetNearActionRatesArray() { return __p.__vector_as_array<float>(8); }
  public float MiddleActionRates(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int MiddleActionRatesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetMiddleActionRatesBytes() { return __p.__vector_as_span<float>(10, 4); }
#else
  public ArraySegment<byte>? GetMiddleActionRatesBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public float[] GetMiddleActionRatesArray() { return __p.__vector_as_array<float>(10); }
  public float FarActionRates(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int FarActionRatesLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetFarActionRatesBytes() { return __p.__vector_as_span<float>(12, 4); }
#else
  public ArraySegment<byte>? GetFarActionRatesBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public float[] GetFarActionRatesArray() { return __p.__vector_as_array<float>(12); }
  public float TurnSpeeds(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int TurnSpeedsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetTurnSpeedsBytes() { return __p.__vector_as_span<float>(14, 4); }
#else
  public ArraySegment<byte>? GetTurnSpeedsBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public float[] GetTurnSpeedsArray() { return __p.__vector_as_array<float>(14); }
  public float RunTurnSpeed { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)360.0f; } }
  public WWParser.Defs.FloatRange? WanderTime { get { int o = __p.__offset(18); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.FloatRange? SumWanderTime { get { int o = __p.__offset(20); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool OnlyForward { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.AiBattleWanderGroup> CreateAiBattleWanderGroup(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset distance_rangeOffset = default(VectorOffset),
      VectorOffset near_action_ratesOffset = default(VectorOffset),
      VectorOffset middle_action_ratesOffset = default(VectorOffset),
      VectorOffset far_action_ratesOffset = default(VectorOffset),
      VectorOffset turn_speedsOffset = default(VectorOffset),
      float run_turn_speed = 360.0f,
      Offset<WWParser.Defs.FloatRange> wander_timeOffset = default(Offset<WWParser.Defs.FloatRange>),
      Offset<WWParser.Defs.FloatRange> sum_wander_timeOffset = default(Offset<WWParser.Defs.FloatRange>),
      bool only_forward = false) {
    builder.StartTable(10);
    AiBattleWanderGroup.AddSumWanderTime(builder, sum_wander_timeOffset);
    AiBattleWanderGroup.AddWanderTime(builder, wander_timeOffset);
    AiBattleWanderGroup.AddRunTurnSpeed(builder, run_turn_speed);
    AiBattleWanderGroup.AddTurnSpeeds(builder, turn_speedsOffset);
    AiBattleWanderGroup.AddFarActionRates(builder, far_action_ratesOffset);
    AiBattleWanderGroup.AddMiddleActionRates(builder, middle_action_ratesOffset);
    AiBattleWanderGroup.AddNearActionRates(builder, near_action_ratesOffset);
    AiBattleWanderGroup.AddDistanceRange(builder, distance_rangeOffset);
    AiBattleWanderGroup.AddId(builder, id);
    AiBattleWanderGroup.AddOnlyForward(builder, only_forward);
    return AiBattleWanderGroup.EndAiBattleWanderGroup(builder);
  }

  public static void StartAiBattleWanderGroup(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDistanceRange(FlatBufferBuilder builder, VectorOffset distanceRangeOffset) { builder.AddOffset(1, distanceRangeOffset.Value, 0); }
  public static VectorOffset CreateDistanceRangeVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDistanceRangeVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDistanceRangeVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDistanceRangeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDistanceRangeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNearActionRates(FlatBufferBuilder builder, VectorOffset nearActionRatesOffset) { builder.AddOffset(2, nearActionRatesOffset.Value, 0); }
  public static VectorOffset CreateNearActionRatesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNearActionRatesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNearActionRatesVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNearActionRatesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNearActionRatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMiddleActionRates(FlatBufferBuilder builder, VectorOffset middleActionRatesOffset) { builder.AddOffset(3, middleActionRatesOffset.Value, 0); }
  public static VectorOffset CreateMiddleActionRatesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMiddleActionRatesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMiddleActionRatesVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMiddleActionRatesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMiddleActionRatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFarActionRates(FlatBufferBuilder builder, VectorOffset farActionRatesOffset) { builder.AddOffset(4, farActionRatesOffset.Value, 0); }
  public static VectorOffset CreateFarActionRatesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFarActionRatesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFarActionRatesVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFarActionRatesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFarActionRatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTurnSpeeds(FlatBufferBuilder builder, VectorOffset turnSpeedsOffset) { builder.AddOffset(5, turnSpeedsOffset.Value, 0); }
  public static VectorOffset CreateTurnSpeedsVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTurnSpeedsVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTurnSpeedsVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTurnSpeedsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTurnSpeedsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRunTurnSpeed(FlatBufferBuilder builder, float runTurnSpeed) { builder.AddFloat(6, runTurnSpeed, 360.0f); }
  public static void AddWanderTime(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> wanderTimeOffset) { builder.AddOffset(7, wanderTimeOffset.Value, 0); }
  public static void AddSumWanderTime(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> sumWanderTimeOffset) { builder.AddOffset(8, sumWanderTimeOffset.Value, 0); }
  public static void AddOnlyForward(FlatBufferBuilder builder, bool onlyForward) { builder.AddBool(9, onlyForward, false); }
  public static Offset<WWParser.Defs.AiBattleWanderGroup> EndAiBattleWanderGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AiBattleWanderGroup>(o);
  }
  public AiBattleWanderGroupT UnPack() {
    var _o = new AiBattleWanderGroupT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AiBattleWanderGroupT _o) {
    _o.Id = this.Id;
    _o.DistanceRange = new List<float>();
    for (var _j = 0; _j < this.DistanceRangeLength; ++_j) {_o.DistanceRange.Add(this.DistanceRange(_j));}
    _o.NearActionRates = new List<float>();
    for (var _j = 0; _j < this.NearActionRatesLength; ++_j) {_o.NearActionRates.Add(this.NearActionRates(_j));}
    _o.MiddleActionRates = new List<float>();
    for (var _j = 0; _j < this.MiddleActionRatesLength; ++_j) {_o.MiddleActionRates.Add(this.MiddleActionRates(_j));}
    _o.FarActionRates = new List<float>();
    for (var _j = 0; _j < this.FarActionRatesLength; ++_j) {_o.FarActionRates.Add(this.FarActionRates(_j));}
    _o.TurnSpeeds = new List<float>();
    for (var _j = 0; _j < this.TurnSpeedsLength; ++_j) {_o.TurnSpeeds.Add(this.TurnSpeeds(_j));}
    _o.RunTurnSpeed = this.RunTurnSpeed;
    _o.WanderTime = this.WanderTime.HasValue ? this.WanderTime.Value.UnPack() : null;
    _o.SumWanderTime = this.SumWanderTime.HasValue ? this.SumWanderTime.Value.UnPack() : null;
    _o.OnlyForward = this.OnlyForward;
  }
  public static Offset<WWParser.Defs.AiBattleWanderGroup> Pack(FlatBufferBuilder builder, AiBattleWanderGroupT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AiBattleWanderGroup>);
    var _distance_range = default(VectorOffset);
    if (_o.DistanceRange != null) {
      var __distance_range = _o.DistanceRange.ToArray();
      _distance_range = CreateDistanceRangeVector(builder, __distance_range);
    }
    var _near_action_rates = default(VectorOffset);
    if (_o.NearActionRates != null) {
      var __near_action_rates = _o.NearActionRates.ToArray();
      _near_action_rates = CreateNearActionRatesVector(builder, __near_action_rates);
    }
    var _middle_action_rates = default(VectorOffset);
    if (_o.MiddleActionRates != null) {
      var __middle_action_rates = _o.MiddleActionRates.ToArray();
      _middle_action_rates = CreateMiddleActionRatesVector(builder, __middle_action_rates);
    }
    var _far_action_rates = default(VectorOffset);
    if (_o.FarActionRates != null) {
      var __far_action_rates = _o.FarActionRates.ToArray();
      _far_action_rates = CreateFarActionRatesVector(builder, __far_action_rates);
    }
    var _turn_speeds = default(VectorOffset);
    if (_o.TurnSpeeds != null) {
      var __turn_speeds = _o.TurnSpeeds.ToArray();
      _turn_speeds = CreateTurnSpeedsVector(builder, __turn_speeds);
    }
    var _wander_time = _o.WanderTime == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.WanderTime);
    var _sum_wander_time = _o.SumWanderTime == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.SumWanderTime);
    return CreateAiBattleWanderGroup(
      builder,
      _o.Id,
      _distance_range,
      _near_action_rates,
      _middle_action_rates,
      _far_action_rates,
      _turn_speeds,
      _o.RunTurnSpeed,
      _wander_time,
      _sum_wander_time,
      _o.OnlyForward);
  }
}

public class AiBattleWanderGroupT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("distance_range")]
  public List<float> DistanceRange { get; set; }
  [Newtonsoft.Json.JsonProperty("near_action_rates")]
  public List<float> NearActionRates { get; set; }
  [Newtonsoft.Json.JsonProperty("middle_action_rates")]
  public List<float> MiddleActionRates { get; set; }
  [Newtonsoft.Json.JsonProperty("far_action_rates")]
  public List<float> FarActionRates { get; set; }
  [Newtonsoft.Json.JsonProperty("turn_speeds")]
  public List<float> TurnSpeeds { get; set; }
  [Newtonsoft.Json.JsonProperty("run_turn_speed")]
  public float RunTurnSpeed { get; set; }
  [Newtonsoft.Json.JsonProperty("wander_time")]
  public WWParser.Defs.FloatRangeT WanderTime { get; set; }
  [Newtonsoft.Json.JsonProperty("sum_wander_time")]
  public WWParser.Defs.FloatRangeT SumWanderTime { get; set; }
  [Newtonsoft.Json.JsonProperty("only_forward")]
  public bool OnlyForward { get; set; }

  public AiBattleWanderGroupT() {
    this.Id = 0;
    this.DistanceRange = null;
    this.NearActionRates = null;
    this.MiddleActionRates = null;
    this.FarActionRates = null;
    this.TurnSpeeds = null;
    this.RunTurnSpeed = 360.0f;
    this.WanderTime = null;
    this.SumWanderTime = null;
    this.OnlyForward = false;
  }
}


static public class AiBattleWanderGroupVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*DistanceRange*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*NearActionRates*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*MiddleActionRates*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*FarActionRates*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*TurnSpeeds*/, 4 /*float*/, false)
      && verifier.VerifyField(tablePos, 16 /*RunTurnSpeed*/, 4 /*float*/, 4, false)
      && verifier.VerifyTable(tablePos, 18 /*WanderTime*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 20 /*SumWanderTime*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyField(tablePos, 22 /*OnlyForward*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
