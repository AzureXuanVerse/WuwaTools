// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ForgeFormula : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ForgeFormula GetRootAsForgeFormula(ByteBuffer _bb) { return GetRootAsForgeFormula(_bb, new ForgeFormula()); }
  public static ForgeFormula GetRootAsForgeFormula(ByteBuffer _bb, ForgeFormula obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ForgeFormula __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FormulaItemId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TypeId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Unlock { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int SortId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(16); }
  public WWParser.Defs.OneItemConfig? ConsumeItems(int j) { int o = __p.__offset(18); return o != 0 ? (WWParser.Defs.OneItemConfig?)(new WWParser.Defs.OneItemConfig()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConsumeItemsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ForgeContent { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetForgeContentBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetForgeContentBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetForgeContentArray() { return __p.__vector_as_array<byte>(20); }
  public string Background { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBackgroundBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetBackgroundBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetBackgroundArray() { return __p.__vector_as_array<byte>(22); }
  public int RoleList(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RoleListLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRoleListBytes() { return __p.__vector_as_span<int>(24, 4); }
#else
  public ArraySegment<byte>? GetRoleListBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public int[] GetRoleListArray() { return __p.__vector_as_array<int>(24); }

  public static Offset<WWParser.Defs.ForgeFormula> CreateForgeFormula(FlatBufferBuilder builder,
      int id = 0,
      int formula_item_id = 0,
      int item_id = 0,
      int type_id = 0,
      bool unlock = false,
      int sort_id = 0,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset consume_itemsOffset = default(VectorOffset),
      StringOffset forge_contentOffset = default(StringOffset),
      StringOffset backgroundOffset = default(StringOffset),
      VectorOffset role_listOffset = default(VectorOffset)) {
    builder.StartTable(11);
    ForgeFormula.AddRoleList(builder, role_listOffset);
    ForgeFormula.AddBackground(builder, backgroundOffset);
    ForgeFormula.AddForgeContent(builder, forge_contentOffset);
    ForgeFormula.AddConsumeItems(builder, consume_itemsOffset);
    ForgeFormula.AddName(builder, nameOffset);
    ForgeFormula.AddSortId(builder, sort_id);
    ForgeFormula.AddTypeId(builder, type_id);
    ForgeFormula.AddItemId(builder, item_id);
    ForgeFormula.AddFormulaItemId(builder, formula_item_id);
    ForgeFormula.AddId(builder, id);
    ForgeFormula.AddUnlock(builder, unlock);
    return ForgeFormula.EndForgeFormula(builder);
  }

  public static void StartForgeFormula(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddFormulaItemId(FlatBufferBuilder builder, int formulaItemId) { builder.AddInt(1, formulaItemId, 0); }
  public static void AddItemId(FlatBufferBuilder builder, int itemId) { builder.AddInt(2, itemId, 0); }
  public static void AddTypeId(FlatBufferBuilder builder, int typeId) { builder.AddInt(3, typeId, 0); }
  public static void AddUnlock(FlatBufferBuilder builder, bool unlock) { builder.AddBool(4, unlock, false); }
  public static void AddSortId(FlatBufferBuilder builder, int sortId) { builder.AddInt(5, sortId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(6, nameOffset.Value, 0); }
  public static void AddConsumeItems(FlatBufferBuilder builder, VectorOffset consumeItemsOffset) { builder.AddOffset(7, consumeItemsOffset.Value, 0); }
  public static VectorOffset CreateConsumeItemsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.OneItemConfig>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConsumeItemsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.OneItemConfig>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConsumeItemsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.OneItemConfig>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConsumeItemsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.OneItemConfig>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConsumeItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddForgeContent(FlatBufferBuilder builder, StringOffset forgeContentOffset) { builder.AddOffset(8, forgeContentOffset.Value, 0); }
  public static void AddBackground(FlatBufferBuilder builder, StringOffset backgroundOffset) { builder.AddOffset(9, backgroundOffset.Value, 0); }
  public static void AddRoleList(FlatBufferBuilder builder, VectorOffset roleListOffset) { builder.AddOffset(10, roleListOffset.Value, 0); }
  public static VectorOffset CreateRoleListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRoleListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRoleListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRoleListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRoleListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.ForgeFormula> EndForgeFormula(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ForgeFormula>(o);
  }
  public ForgeFormulaT UnPack() {
    var _o = new ForgeFormulaT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ForgeFormulaT _o) {
    _o.Id = this.Id;
    _o.FormulaItemId = this.FormulaItemId;
    _o.ItemId = this.ItemId;
    _o.TypeId = this.TypeId;
    _o.Unlock = this.Unlock;
    _o.SortId = this.SortId;
    _o.Name = this.Name;
    _o.ConsumeItems = new List<WWParser.Defs.OneItemConfigT>();
    for (var _j = 0; _j < this.ConsumeItemsLength; ++_j) {_o.ConsumeItems.Add(this.ConsumeItems(_j).HasValue ? this.ConsumeItems(_j).Value.UnPack() : null);}
    _o.ForgeContent = this.ForgeContent;
    _o.Background = this.Background;
    _o.RoleList = new List<int>();
    for (var _j = 0; _j < this.RoleListLength; ++_j) {_o.RoleList.Add(this.RoleList(_j));}
  }
  public static Offset<WWParser.Defs.ForgeFormula> Pack(FlatBufferBuilder builder, ForgeFormulaT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ForgeFormula>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _consume_items = default(VectorOffset);
    if (_o.ConsumeItems != null) {
      var __consume_items = new Offset<WWParser.Defs.OneItemConfig>[_o.ConsumeItems.Count];
      for (var _j = 0; _j < __consume_items.Length; ++_j) { __consume_items[_j] = WWParser.Defs.OneItemConfig.Pack(builder, _o.ConsumeItems[_j]); }
      _consume_items = CreateConsumeItemsVector(builder, __consume_items);
    }
    var _forge_content = _o.ForgeContent == null ? default(StringOffset) : builder.CreateString(_o.ForgeContent);
    var _background = _o.Background == null ? default(StringOffset) : builder.CreateString(_o.Background);
    var _role_list = default(VectorOffset);
    if (_o.RoleList != null) {
      var __role_list = _o.RoleList.ToArray();
      _role_list = CreateRoleListVector(builder, __role_list);
    }
    return CreateForgeFormula(
      builder,
      _o.Id,
      _o.FormulaItemId,
      _o.ItemId,
      _o.TypeId,
      _o.Unlock,
      _o.SortId,
      _name,
      _consume_items,
      _forge_content,
      _background,
      _role_list);
  }
}

public class ForgeFormulaT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("formula_item_id")]
  public int FormulaItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("item_id")]
  public int ItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("type_id")]
  public int TypeId { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock")]
  public bool Unlock { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_id")]
  public int SortId { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("consume_items")]
  public List<WWParser.Defs.OneItemConfigT> ConsumeItems { get; set; }
  [Newtonsoft.Json.JsonProperty("forge_content")]
  public string ForgeContent { get; set; }
  [Newtonsoft.Json.JsonProperty("background")]
  public string Background { get; set; }
  [Newtonsoft.Json.JsonProperty("role_list")]
  public List<int> RoleList { get; set; }

  public ForgeFormulaT() {
    this.Id = 0;
    this.FormulaItemId = 0;
    this.ItemId = 0;
    this.TypeId = 0;
    this.Unlock = false;
    this.SortId = 0;
    this.Name = null;
    this.ConsumeItems = null;
    this.ForgeContent = null;
    this.Background = null;
    this.RoleList = null;
  }
}


static public class ForgeFormulaVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*FormulaItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*TypeId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Unlock*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*SortId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*Name*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 18 /*ConsumeItems*/, WWParser.Defs.OneItemConfigVerify.Verify, false)
      && verifier.VerifyString(tablePos, 20 /*ForgeContent*/, false)
      && verifier.VerifyString(tablePos, 22 /*Background*/, false)
      && verifier.VerifyVectorOfData(tablePos, 24 /*RoleList*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
