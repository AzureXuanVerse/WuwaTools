// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct InteractBackGround : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static InteractBackGround GetRootAsInteractBackGround(ByteBuffer _bb) { return GetRootAsInteractBackGround(_bb, new InteractBackGround()); }
  public static InteractBackGround GetRootAsInteractBackGround(ByteBuffer _bb, InteractBackGround obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InteractBackGround __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ViewName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetViewNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetViewNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetViewNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Title { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(8); }
  public string TitleSpritePath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleSpritePathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTitleSpritePathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTitleSpritePathArray() { return __p.__vector_as_array<byte>(10); }
  public string ContentSpritePath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentSpritePathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetContentSpritePathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetContentSpritePathArray() { return __p.__vector_as_array<byte>(12); }
  public int CostItemList(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CostItemListLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCostItemListBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetCostItemListBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetCostItemListArray() { return __p.__vector_as_array<int>(14); }
  public bool IsHelpButtonVisible { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int HelpGroupId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.InteractBackGround> CreateInteractBackGround(FlatBufferBuilder builder,
      int id = 0,
      StringOffset view_nameOffset = default(StringOffset),
      StringOffset titleOffset = default(StringOffset),
      StringOffset title_sprite_pathOffset = default(StringOffset),
      StringOffset content_sprite_pathOffset = default(StringOffset),
      VectorOffset cost_item_listOffset = default(VectorOffset),
      bool is_help_button_visible = false,
      int help_group_id = 0) {
    builder.StartTable(8);
    InteractBackGround.AddHelpGroupId(builder, help_group_id);
    InteractBackGround.AddCostItemList(builder, cost_item_listOffset);
    InteractBackGround.AddContentSpritePath(builder, content_sprite_pathOffset);
    InteractBackGround.AddTitleSpritePath(builder, title_sprite_pathOffset);
    InteractBackGround.AddTitle(builder, titleOffset);
    InteractBackGround.AddViewName(builder, view_nameOffset);
    InteractBackGround.AddId(builder, id);
    InteractBackGround.AddIsHelpButtonVisible(builder, is_help_button_visible);
    return InteractBackGround.EndInteractBackGround(builder);
  }

  public static void StartInteractBackGround(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddViewName(FlatBufferBuilder builder, StringOffset viewNameOffset) { builder.AddOffset(1, viewNameOffset.Value, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(2, titleOffset.Value, 0); }
  public static void AddTitleSpritePath(FlatBufferBuilder builder, StringOffset titleSpritePathOffset) { builder.AddOffset(3, titleSpritePathOffset.Value, 0); }
  public static void AddContentSpritePath(FlatBufferBuilder builder, StringOffset contentSpritePathOffset) { builder.AddOffset(4, contentSpritePathOffset.Value, 0); }
  public static void AddCostItemList(FlatBufferBuilder builder, VectorOffset costItemListOffset) { builder.AddOffset(5, costItemListOffset.Value, 0); }
  public static VectorOffset CreateCostItemListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCostItemListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCostItemListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCostItemListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCostItemListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsHelpButtonVisible(FlatBufferBuilder builder, bool isHelpButtonVisible) { builder.AddBool(6, isHelpButtonVisible, false); }
  public static void AddHelpGroupId(FlatBufferBuilder builder, int helpGroupId) { builder.AddInt(7, helpGroupId, 0); }
  public static Offset<WWParser.Defs.InteractBackGround> EndInteractBackGround(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.InteractBackGround>(o);
  }
  public InteractBackGroundT UnPack() {
    var _o = new InteractBackGroundT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InteractBackGroundT _o) {
    _o.Id = this.Id;
    _o.ViewName = this.ViewName;
    _o.Title = this.Title;
    _o.TitleSpritePath = this.TitleSpritePath;
    _o.ContentSpritePath = this.ContentSpritePath;
    _o.CostItemList = new List<int>();
    for (var _j = 0; _j < this.CostItemListLength; ++_j) {_o.CostItemList.Add(this.CostItemList(_j));}
    _o.IsHelpButtonVisible = this.IsHelpButtonVisible;
    _o.HelpGroupId = this.HelpGroupId;
  }
  public static Offset<WWParser.Defs.InteractBackGround> Pack(FlatBufferBuilder builder, InteractBackGroundT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.InteractBackGround>);
    var _view_name = _o.ViewName == null ? default(StringOffset) : builder.CreateString(_o.ViewName);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _title_sprite_path = _o.TitleSpritePath == null ? default(StringOffset) : builder.CreateString(_o.TitleSpritePath);
    var _content_sprite_path = _o.ContentSpritePath == null ? default(StringOffset) : builder.CreateString(_o.ContentSpritePath);
    var _cost_item_list = default(VectorOffset);
    if (_o.CostItemList != null) {
      var __cost_item_list = _o.CostItemList.ToArray();
      _cost_item_list = CreateCostItemListVector(builder, __cost_item_list);
    }
    return CreateInteractBackGround(
      builder,
      _o.Id,
      _view_name,
      _title,
      _title_sprite_path,
      _content_sprite_path,
      _cost_item_list,
      _o.IsHelpButtonVisible,
      _o.HelpGroupId);
  }
}

public class InteractBackGroundT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("view_name")]
  public string ViewName { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("title_sprite_path")]
  public string TitleSpritePath { get; set; }
  [Newtonsoft.Json.JsonProperty("content_sprite_path")]
  public string ContentSpritePath { get; set; }
  [Newtonsoft.Json.JsonProperty("cost_item_list")]
  public List<int> CostItemList { get; set; }
  [Newtonsoft.Json.JsonProperty("is_help_button_visible")]
  public bool IsHelpButtonVisible { get; set; }
  [Newtonsoft.Json.JsonProperty("help_group_id")]
  public int HelpGroupId { get; set; }

  public InteractBackGroundT() {
    this.Id = 0;
    this.ViewName = null;
    this.Title = null;
    this.TitleSpritePath = null;
    this.ContentSpritePath = null;
    this.CostItemList = null;
    this.IsHelpButtonVisible = false;
    this.HelpGroupId = 0;
  }
}


static public class InteractBackGroundVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*ViewName*/, false)
      && verifier.VerifyString(tablePos, 8 /*Title*/, false)
      && verifier.VerifyString(tablePos, 10 /*TitleSpritePath*/, false)
      && verifier.VerifyString(tablePos, 12 /*ContentSpritePath*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*CostItemList*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 16 /*IsHelpButtonVisible*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*HelpGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
