// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SpecialItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SpecialItem GetRootAsSpecialItem(ByteBuffer _bb) { return GetRootAsSpecialItem(_bb, new SpecialItem()); }
  public static SpecialItem GetRootAsSpecialItem(ByteBuffer _bb, SpecialItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SpecialItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UseButtonAdditionParam(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int UseButtonAdditionParamLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetUseButtonAdditionParamBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetUseButtonAdditionParamBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetUseButtonAdditionParamArray() { return __p.__vector_as_array<int>(6); }
  public int SpecialItemType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Parameters(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ParametersLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool UseInMultiMode { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool UseInstance { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string BanTags(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BanTagsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string AllowTags(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AllowTagsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int SummonConfigId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool NeedShowNum { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.SpecialItem> CreateSpecialItem(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset use_button_addition_paramOffset = default(VectorOffset),
      int special_item_type = 0,
      VectorOffset parametersOffset = default(VectorOffset),
      bool use_in_multi_mode = false,
      bool use_instance = false,
      VectorOffset ban_tagsOffset = default(VectorOffset),
      VectorOffset allow_tagsOffset = default(VectorOffset),
      int summon_config_id = 0,
      bool need_show_num = false) {
    builder.StartTable(10);
    SpecialItem.AddSummonConfigId(builder, summon_config_id);
    SpecialItem.AddAllowTags(builder, allow_tagsOffset);
    SpecialItem.AddBanTags(builder, ban_tagsOffset);
    SpecialItem.AddParameters(builder, parametersOffset);
    SpecialItem.AddSpecialItemType(builder, special_item_type);
    SpecialItem.AddUseButtonAdditionParam(builder, use_button_addition_paramOffset);
    SpecialItem.AddId(builder, id);
    SpecialItem.AddNeedShowNum(builder, need_show_num);
    SpecialItem.AddUseInstance(builder, use_instance);
    SpecialItem.AddUseInMultiMode(builder, use_in_multi_mode);
    return SpecialItem.EndSpecialItem(builder);
  }

  public static void StartSpecialItem(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddUseButtonAdditionParam(FlatBufferBuilder builder, VectorOffset useButtonAdditionParamOffset) { builder.AddOffset(1, useButtonAdditionParamOffset.Value, 0); }
  public static VectorOffset CreateUseButtonAdditionParamVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateUseButtonAdditionParamVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUseButtonAdditionParamVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUseButtonAdditionParamVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUseButtonAdditionParamVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSpecialItemType(FlatBufferBuilder builder, int specialItemType) { builder.AddInt(2, specialItemType, 0); }
  public static void AddParameters(FlatBufferBuilder builder, VectorOffset parametersOffset) { builder.AddOffset(3, parametersOffset.Value, 0); }
  public static VectorOffset CreateParametersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateParametersVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParametersVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParametersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParametersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUseInMultiMode(FlatBufferBuilder builder, bool useInMultiMode) { builder.AddBool(4, useInMultiMode, false); }
  public static void AddUseInstance(FlatBufferBuilder builder, bool useInstance) { builder.AddBool(5, useInstance, false); }
  public static void AddBanTags(FlatBufferBuilder builder, VectorOffset banTagsOffset) { builder.AddOffset(6, banTagsOffset.Value, 0); }
  public static VectorOffset CreateBanTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBanTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBanTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBanTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBanTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAllowTags(FlatBufferBuilder builder, VectorOffset allowTagsOffset) { builder.AddOffset(7, allowTagsOffset.Value, 0); }
  public static VectorOffset CreateAllowTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAllowTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllowTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllowTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAllowTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSummonConfigId(FlatBufferBuilder builder, int summonConfigId) { builder.AddInt(8, summonConfigId, 0); }
  public static void AddNeedShowNum(FlatBufferBuilder builder, bool needShowNum) { builder.AddBool(9, needShowNum, false); }
  public static Offset<WWParser.Defs.SpecialItem> EndSpecialItem(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SpecialItem>(o);
  }
  public SpecialItemT UnPack() {
    var _o = new SpecialItemT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SpecialItemT _o) {
    _o.Id = this.Id;
    _o.UseButtonAdditionParam = new List<int>();
    for (var _j = 0; _j < this.UseButtonAdditionParamLength; ++_j) {_o.UseButtonAdditionParam.Add(this.UseButtonAdditionParam(_j));}
    _o.SpecialItemType = this.SpecialItemType;
    _o.Parameters = new List<string>();
    for (var _j = 0; _j < this.ParametersLength; ++_j) {_o.Parameters.Add(this.Parameters(_j));}
    _o.UseInMultiMode = this.UseInMultiMode;
    _o.UseInstance = this.UseInstance;
    _o.BanTags = new List<string>();
    for (var _j = 0; _j < this.BanTagsLength; ++_j) {_o.BanTags.Add(this.BanTags(_j));}
    _o.AllowTags = new List<string>();
    for (var _j = 0; _j < this.AllowTagsLength; ++_j) {_o.AllowTags.Add(this.AllowTags(_j));}
    _o.SummonConfigId = this.SummonConfigId;
    _o.NeedShowNum = this.NeedShowNum;
  }
  public static Offset<WWParser.Defs.SpecialItem> Pack(FlatBufferBuilder builder, SpecialItemT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SpecialItem>);
    var _use_button_addition_param = default(VectorOffset);
    if (_o.UseButtonAdditionParam != null) {
      var __use_button_addition_param = _o.UseButtonAdditionParam.ToArray();
      _use_button_addition_param = CreateUseButtonAdditionParamVector(builder, __use_button_addition_param);
    }
    var _parameters = default(VectorOffset);
    if (_o.Parameters != null) {
      var __parameters = new StringOffset[_o.Parameters.Count];
      for (var _j = 0; _j < __parameters.Length; ++_j) { __parameters[_j] = builder.CreateString(_o.Parameters[_j]); }
      _parameters = CreateParametersVector(builder, __parameters);
    }
    var _ban_tags = default(VectorOffset);
    if (_o.BanTags != null) {
      var __ban_tags = new StringOffset[_o.BanTags.Count];
      for (var _j = 0; _j < __ban_tags.Length; ++_j) { __ban_tags[_j] = builder.CreateString(_o.BanTags[_j]); }
      _ban_tags = CreateBanTagsVector(builder, __ban_tags);
    }
    var _allow_tags = default(VectorOffset);
    if (_o.AllowTags != null) {
      var __allow_tags = new StringOffset[_o.AllowTags.Count];
      for (var _j = 0; _j < __allow_tags.Length; ++_j) { __allow_tags[_j] = builder.CreateString(_o.AllowTags[_j]); }
      _allow_tags = CreateAllowTagsVector(builder, __allow_tags);
    }
    return CreateSpecialItem(
      builder,
      _o.Id,
      _use_button_addition_param,
      _o.SpecialItemType,
      _parameters,
      _o.UseInMultiMode,
      _o.UseInstance,
      _ban_tags,
      _allow_tags,
      _o.SummonConfigId,
      _o.NeedShowNum);
  }
}

public class SpecialItemT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("use_button_addition_param")]
  public List<int> UseButtonAdditionParam { get; set; }
  [Newtonsoft.Json.JsonProperty("special_item_type")]
  public int SpecialItemType { get; set; }
  [Newtonsoft.Json.JsonProperty("parameters")]
  public List<string> Parameters { get; set; }
  [Newtonsoft.Json.JsonProperty("use_in_multi_mode")]
  public bool UseInMultiMode { get; set; }
  [Newtonsoft.Json.JsonProperty("use_instance")]
  public bool UseInstance { get; set; }
  [Newtonsoft.Json.JsonProperty("ban_tags")]
  public List<string> BanTags { get; set; }
  [Newtonsoft.Json.JsonProperty("allow_tags")]
  public List<string> AllowTags { get; set; }
  [Newtonsoft.Json.JsonProperty("summon_config_id")]
  public int SummonConfigId { get; set; }
  [Newtonsoft.Json.JsonProperty("need_show_num")]
  public bool NeedShowNum { get; set; }

  public SpecialItemT() {
    this.Id = 0;
    this.UseButtonAdditionParam = null;
    this.SpecialItemType = 0;
    this.Parameters = null;
    this.UseInMultiMode = false;
    this.UseInstance = false;
    this.BanTags = null;
    this.AllowTags = null;
    this.SummonConfigId = 0;
    this.NeedShowNum = false;
  }
}


static public class SpecialItemVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*UseButtonAdditionParam*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 8 /*SpecialItemType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*Parameters*/, false)
      && verifier.VerifyField(tablePos, 12 /*UseInMultiMode*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*UseInstance*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 16 /*BanTags*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*AllowTags*/, false)
      && verifier.VerifyField(tablePos, 20 /*SummonConfigId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*NeedShowNum*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
