// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GachaViewInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GachaViewInfo GetRootAsGachaViewInfo(ByteBuffer _bb) { return GetRootAsGachaViewInfo(_bb, new GachaViewInfo()); }
  public static GachaViewInfo GetRootAsGachaViewInfo(ByteBuffer _bb, GachaViewInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GachaViewInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SummaryTitle { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSummaryTitleBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSummaryTitleBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSummaryTitleArray() { return __p.__vector_as_array<byte>(8); }
  public string SummaryDescribe { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSummaryDescribeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSummaryDescribeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSummaryDescribeArray() { return __p.__vector_as_array<byte>(10); }
  public string ThemeColor { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetThemeColorBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetThemeColorBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetThemeColorArray() { return __p.__vector_as_array<byte>(12); }
  public WWParser.Defs.Vector? EffectLocation { get { int o = __p.__offset(14); return o != 0 ? (WWParser.Defs.Vector?)(new WWParser.Defs.Vector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string EffectPath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectPathBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetEffectPathBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetEffectPathArray() { return __p.__vector_as_array<byte>(16); }
  public string TextTexture { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextTextureBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTextTextureBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTextTextureArray() { return __p.__vector_as_array<byte>(18); }
  public string ContentTexturePath { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentTexturePathBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetContentTexturePathBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetContentTexturePathArray() { return __p.__vector_as_array<byte>(20); }
  public string ContentTextureBgPath { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentTextureBgPathBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetContentTextureBgPathBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetContentTextureBgPathArray() { return __p.__vector_as_array<byte>(22); }
  public string UnderBgTexturePath { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnderBgTexturePathBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetUnderBgTexturePathBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetUnderBgTexturePathArray() { return __p.__vector_as_array<byte>(24); }
  public string TagNotSelectedSpritePath { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTagNotSelectedSpritePathBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetTagNotSelectedSpritePathBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetTagNotSelectedSpritePathArray() { return __p.__vector_as_array<byte>(26); }
  public string TagSelectedSpritePath { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTagSelectedSpritePathBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetTagSelectedSpritePathBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetTagSelectedSpritePathArray() { return __p.__vector_as_array<byte>(28); }
  public string WeaponPrefabPath { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWeaponPrefabPathBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetWeaponPrefabPathBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetWeaponPrefabPathArray() { return __p.__vector_as_array<byte>(30); }
  public string SpinePrefabResource { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpinePrefabResourceBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetSpinePrefabResourceBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetSpinePrefabResourceArray() { return __p.__vector_as_array<byte>(32); }
  public int UpList(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int UpListLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetUpListBytes() { return __p.__vector_as_span<int>(34, 4); }
#else
  public ArraySegment<byte>? GetUpListBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public int[] GetUpListArray() { return __p.__vector_as_array<int>(34); }
  public int ShowIdList(int j) { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ShowIdListLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetShowIdListBytes() { return __p.__vector_as_span<int>(36, 4); }
#else
  public ArraySegment<byte>? GetShowIdListBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public int[] GetShowIdListArray() { return __p.__vector_as_array<int>(36); }
  public int PreviewIdList(int j) { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PreviewIdListLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPreviewIdListBytes() { return __p.__vector_as_span<int>(38, 4); }
#else
  public ArraySegment<byte>? GetPreviewIdListBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public int[] GetPreviewIdListArray() { return __p.__vector_as_array<int>(38); }

  public static Offset<WWParser.Defs.GachaViewInfo> CreateGachaViewInfo(FlatBufferBuilder builder,
      int id = 0,
      int type = 0,
      StringOffset summary_titleOffset = default(StringOffset),
      StringOffset summary_describeOffset = default(StringOffset),
      StringOffset theme_colorOffset = default(StringOffset),
      Offset<WWParser.Defs.Vector> effect_locationOffset = default(Offset<WWParser.Defs.Vector>),
      StringOffset effect_pathOffset = default(StringOffset),
      StringOffset text_textureOffset = default(StringOffset),
      StringOffset content_texture_pathOffset = default(StringOffset),
      StringOffset content_texture_bg_pathOffset = default(StringOffset),
      StringOffset under_bg_texture_pathOffset = default(StringOffset),
      StringOffset tag_not_selected_sprite_pathOffset = default(StringOffset),
      StringOffset tag_selected_sprite_pathOffset = default(StringOffset),
      StringOffset weapon_prefab_pathOffset = default(StringOffset),
      StringOffset spine_prefab_resourceOffset = default(StringOffset),
      VectorOffset up_listOffset = default(VectorOffset),
      VectorOffset show_id_listOffset = default(VectorOffset),
      VectorOffset preview_id_listOffset = default(VectorOffset)) {
    builder.StartTable(18);
    GachaViewInfo.AddPreviewIdList(builder, preview_id_listOffset);
    GachaViewInfo.AddShowIdList(builder, show_id_listOffset);
    GachaViewInfo.AddUpList(builder, up_listOffset);
    GachaViewInfo.AddSpinePrefabResource(builder, spine_prefab_resourceOffset);
    GachaViewInfo.AddWeaponPrefabPath(builder, weapon_prefab_pathOffset);
    GachaViewInfo.AddTagSelectedSpritePath(builder, tag_selected_sprite_pathOffset);
    GachaViewInfo.AddTagNotSelectedSpritePath(builder, tag_not_selected_sprite_pathOffset);
    GachaViewInfo.AddUnderBgTexturePath(builder, under_bg_texture_pathOffset);
    GachaViewInfo.AddContentTextureBgPath(builder, content_texture_bg_pathOffset);
    GachaViewInfo.AddContentTexturePath(builder, content_texture_pathOffset);
    GachaViewInfo.AddTextTexture(builder, text_textureOffset);
    GachaViewInfo.AddEffectPath(builder, effect_pathOffset);
    GachaViewInfo.AddEffectLocation(builder, effect_locationOffset);
    GachaViewInfo.AddThemeColor(builder, theme_colorOffset);
    GachaViewInfo.AddSummaryDescribe(builder, summary_describeOffset);
    GachaViewInfo.AddSummaryTitle(builder, summary_titleOffset);
    GachaViewInfo.AddType(builder, type);
    GachaViewInfo.AddId(builder, id);
    return GachaViewInfo.EndGachaViewInfo(builder);
  }

  public static void StartGachaViewInfo(FlatBufferBuilder builder) { builder.StartTable(18); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(1, type, 0); }
  public static void AddSummaryTitle(FlatBufferBuilder builder, StringOffset summaryTitleOffset) { builder.AddOffset(2, summaryTitleOffset.Value, 0); }
  public static void AddSummaryDescribe(FlatBufferBuilder builder, StringOffset summaryDescribeOffset) { builder.AddOffset(3, summaryDescribeOffset.Value, 0); }
  public static void AddThemeColor(FlatBufferBuilder builder, StringOffset themeColorOffset) { builder.AddOffset(4, themeColorOffset.Value, 0); }
  public static void AddEffectLocation(FlatBufferBuilder builder, Offset<WWParser.Defs.Vector> effectLocationOffset) { builder.AddOffset(5, effectLocationOffset.Value, 0); }
  public static void AddEffectPath(FlatBufferBuilder builder, StringOffset effectPathOffset) { builder.AddOffset(6, effectPathOffset.Value, 0); }
  public static void AddTextTexture(FlatBufferBuilder builder, StringOffset textTextureOffset) { builder.AddOffset(7, textTextureOffset.Value, 0); }
  public static void AddContentTexturePath(FlatBufferBuilder builder, StringOffset contentTexturePathOffset) { builder.AddOffset(8, contentTexturePathOffset.Value, 0); }
  public static void AddContentTextureBgPath(FlatBufferBuilder builder, StringOffset contentTextureBgPathOffset) { builder.AddOffset(9, contentTextureBgPathOffset.Value, 0); }
  public static void AddUnderBgTexturePath(FlatBufferBuilder builder, StringOffset underBgTexturePathOffset) { builder.AddOffset(10, underBgTexturePathOffset.Value, 0); }
  public static void AddTagNotSelectedSpritePath(FlatBufferBuilder builder, StringOffset tagNotSelectedSpritePathOffset) { builder.AddOffset(11, tagNotSelectedSpritePathOffset.Value, 0); }
  public static void AddTagSelectedSpritePath(FlatBufferBuilder builder, StringOffset tagSelectedSpritePathOffset) { builder.AddOffset(12, tagSelectedSpritePathOffset.Value, 0); }
  public static void AddWeaponPrefabPath(FlatBufferBuilder builder, StringOffset weaponPrefabPathOffset) { builder.AddOffset(13, weaponPrefabPathOffset.Value, 0); }
  public static void AddSpinePrefabResource(FlatBufferBuilder builder, StringOffset spinePrefabResourceOffset) { builder.AddOffset(14, spinePrefabResourceOffset.Value, 0); }
  public static void AddUpList(FlatBufferBuilder builder, VectorOffset upListOffset) { builder.AddOffset(15, upListOffset.Value, 0); }
  public static VectorOffset CreateUpListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateUpListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUpListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUpListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUpListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShowIdList(FlatBufferBuilder builder, VectorOffset showIdListOffset) { builder.AddOffset(16, showIdListOffset.Value, 0); }
  public static VectorOffset CreateShowIdListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateShowIdListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowIdListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowIdListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShowIdListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPreviewIdList(FlatBufferBuilder builder, VectorOffset previewIdListOffset) { builder.AddOffset(17, previewIdListOffset.Value, 0); }
  public static VectorOffset CreatePreviewIdListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePreviewIdListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePreviewIdListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePreviewIdListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPreviewIdListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.GachaViewInfo> EndGachaViewInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.GachaViewInfo>(o);
  }
  public GachaViewInfoT UnPack() {
    var _o = new GachaViewInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GachaViewInfoT _o) {
    _o.Id = this.Id;
    _o.Type = this.Type;
    _o.SummaryTitle = this.SummaryTitle;
    _o.SummaryDescribe = this.SummaryDescribe;
    _o.ThemeColor = this.ThemeColor;
    _o.EffectLocation = this.EffectLocation.HasValue ? this.EffectLocation.Value.UnPack() : null;
    _o.EffectPath = this.EffectPath;
    _o.TextTexture = this.TextTexture;
    _o.ContentTexturePath = this.ContentTexturePath;
    _o.ContentTextureBgPath = this.ContentTextureBgPath;
    _o.UnderBgTexturePath = this.UnderBgTexturePath;
    _o.TagNotSelectedSpritePath = this.TagNotSelectedSpritePath;
    _o.TagSelectedSpritePath = this.TagSelectedSpritePath;
    _o.WeaponPrefabPath = this.WeaponPrefabPath;
    _o.SpinePrefabResource = this.SpinePrefabResource;
    _o.UpList = new List<int>();
    for (var _j = 0; _j < this.UpListLength; ++_j) {_o.UpList.Add(this.UpList(_j));}
    _o.ShowIdList = new List<int>();
    for (var _j = 0; _j < this.ShowIdListLength; ++_j) {_o.ShowIdList.Add(this.ShowIdList(_j));}
    _o.PreviewIdList = new List<int>();
    for (var _j = 0; _j < this.PreviewIdListLength; ++_j) {_o.PreviewIdList.Add(this.PreviewIdList(_j));}
  }
  public static Offset<WWParser.Defs.GachaViewInfo> Pack(FlatBufferBuilder builder, GachaViewInfoT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.GachaViewInfo>);
    var _summary_title = _o.SummaryTitle == null ? default(StringOffset) : builder.CreateString(_o.SummaryTitle);
    var _summary_describe = _o.SummaryDescribe == null ? default(StringOffset) : builder.CreateString(_o.SummaryDescribe);
    var _theme_color = _o.ThemeColor == null ? default(StringOffset) : builder.CreateString(_o.ThemeColor);
    var _effect_location = _o.EffectLocation == null ? default(Offset<WWParser.Defs.Vector>) : WWParser.Defs.Vector.Pack(builder, _o.EffectLocation);
    var _effect_path = _o.EffectPath == null ? default(StringOffset) : builder.CreateString(_o.EffectPath);
    var _text_texture = _o.TextTexture == null ? default(StringOffset) : builder.CreateString(_o.TextTexture);
    var _content_texture_path = _o.ContentTexturePath == null ? default(StringOffset) : builder.CreateString(_o.ContentTexturePath);
    var _content_texture_bg_path = _o.ContentTextureBgPath == null ? default(StringOffset) : builder.CreateString(_o.ContentTextureBgPath);
    var _under_bg_texture_path = _o.UnderBgTexturePath == null ? default(StringOffset) : builder.CreateString(_o.UnderBgTexturePath);
    var _tag_not_selected_sprite_path = _o.TagNotSelectedSpritePath == null ? default(StringOffset) : builder.CreateString(_o.TagNotSelectedSpritePath);
    var _tag_selected_sprite_path = _o.TagSelectedSpritePath == null ? default(StringOffset) : builder.CreateString(_o.TagSelectedSpritePath);
    var _weapon_prefab_path = _o.WeaponPrefabPath == null ? default(StringOffset) : builder.CreateString(_o.WeaponPrefabPath);
    var _spine_prefab_resource = _o.SpinePrefabResource == null ? default(StringOffset) : builder.CreateString(_o.SpinePrefabResource);
    var _up_list = default(VectorOffset);
    if (_o.UpList != null) {
      var __up_list = _o.UpList.ToArray();
      _up_list = CreateUpListVector(builder, __up_list);
    }
    var _show_id_list = default(VectorOffset);
    if (_o.ShowIdList != null) {
      var __show_id_list = _o.ShowIdList.ToArray();
      _show_id_list = CreateShowIdListVector(builder, __show_id_list);
    }
    var _preview_id_list = default(VectorOffset);
    if (_o.PreviewIdList != null) {
      var __preview_id_list = _o.PreviewIdList.ToArray();
      _preview_id_list = CreatePreviewIdListVector(builder, __preview_id_list);
    }
    return CreateGachaViewInfo(
      builder,
      _o.Id,
      _o.Type,
      _summary_title,
      _summary_describe,
      _theme_color,
      _effect_location,
      _effect_path,
      _text_texture,
      _content_texture_path,
      _content_texture_bg_path,
      _under_bg_texture_path,
      _tag_not_selected_sprite_path,
      _tag_selected_sprite_path,
      _weapon_prefab_path,
      _spine_prefab_resource,
      _up_list,
      _show_id_list,
      _preview_id_list);
  }
}

public class GachaViewInfoT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("summary_title")]
  public string SummaryTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("summary_describe")]
  public string SummaryDescribe { get; set; }
  [Newtonsoft.Json.JsonProperty("theme_color")]
  public string ThemeColor { get; set; }
  [Newtonsoft.Json.JsonProperty("effect_location")]
  public WWParser.Defs.VectorT EffectLocation { get; set; }
  [Newtonsoft.Json.JsonProperty("effect_path")]
  public string EffectPath { get; set; }
  [Newtonsoft.Json.JsonProperty("text_texture")]
  public string TextTexture { get; set; }
  [Newtonsoft.Json.JsonProperty("content_texture_path")]
  public string ContentTexturePath { get; set; }
  [Newtonsoft.Json.JsonProperty("content_texture_bg_path")]
  public string ContentTextureBgPath { get; set; }
  [Newtonsoft.Json.JsonProperty("under_bg_texture_path")]
  public string UnderBgTexturePath { get; set; }
  [Newtonsoft.Json.JsonProperty("tag_not_selected_sprite_path")]
  public string TagNotSelectedSpritePath { get; set; }
  [Newtonsoft.Json.JsonProperty("tag_selected_sprite_path")]
  public string TagSelectedSpritePath { get; set; }
  [Newtonsoft.Json.JsonProperty("weapon_prefab_path")]
  public string WeaponPrefabPath { get; set; }
  [Newtonsoft.Json.JsonProperty("spine_prefab_resource")]
  public string SpinePrefabResource { get; set; }
  [Newtonsoft.Json.JsonProperty("up_list")]
  public List<int> UpList { get; set; }
  [Newtonsoft.Json.JsonProperty("show_id_list")]
  public List<int> ShowIdList { get; set; }
  [Newtonsoft.Json.JsonProperty("preview_id_list")]
  public List<int> PreviewIdList { get; set; }

  public GachaViewInfoT() {
    this.Id = 0;
    this.Type = 0;
    this.SummaryTitle = null;
    this.SummaryDescribe = null;
    this.ThemeColor = null;
    this.EffectLocation = null;
    this.EffectPath = null;
    this.TextTexture = null;
    this.ContentTexturePath = null;
    this.ContentTextureBgPath = null;
    this.UnderBgTexturePath = null;
    this.TagNotSelectedSpritePath = null;
    this.TagSelectedSpritePath = null;
    this.WeaponPrefabPath = null;
    this.SpinePrefabResource = null;
    this.UpList = null;
    this.ShowIdList = null;
    this.PreviewIdList = null;
  }
}


static public class GachaViewInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*SummaryTitle*/, false)
      && verifier.VerifyString(tablePos, 10 /*SummaryDescribe*/, false)
      && verifier.VerifyString(tablePos, 12 /*ThemeColor*/, false)
      && verifier.VerifyTable(tablePos, 14 /*EffectLocation*/, WWParser.Defs.VectorVerify.Verify, false)
      && verifier.VerifyString(tablePos, 16 /*EffectPath*/, false)
      && verifier.VerifyString(tablePos, 18 /*TextTexture*/, false)
      && verifier.VerifyString(tablePos, 20 /*ContentTexturePath*/, false)
      && verifier.VerifyString(tablePos, 22 /*ContentTextureBgPath*/, false)
      && verifier.VerifyString(tablePos, 24 /*UnderBgTexturePath*/, false)
      && verifier.VerifyString(tablePos, 26 /*TagNotSelectedSpritePath*/, false)
      && verifier.VerifyString(tablePos, 28 /*TagSelectedSpritePath*/, false)
      && verifier.VerifyString(tablePos, 30 /*WeaponPrefabPath*/, false)
      && verifier.VerifyString(tablePos, 32 /*SpinePrefabResource*/, false)
      && verifier.VerifyVectorOfData(tablePos, 34 /*UpList*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 36 /*ShowIdList*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 38 /*PreviewIdList*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
