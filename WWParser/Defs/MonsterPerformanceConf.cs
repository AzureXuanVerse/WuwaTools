// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MonsterPerformanceConf : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MonsterPerformanceConf GetRootAsMonsterPerformanceConf(ByteBuffer _bb) { return GetRootAsMonsterPerformanceConf(_bb, new MonsterPerformanceConf()); }
  public static MonsterPerformanceConf GetRootAsMonsterPerformanceConf(ByteBuffer _bb, MonsterPerformanceConf obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MonsterPerformanceConf __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MonsterPerformanceId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillIds(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SkillIdsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSkillIdsBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetSkillIdsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetSkillIdsArray() { return __p.__vector_as_array<int>(8); }
  public string Tag { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTagBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTagBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTagArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<WWParser.Defs.MonsterPerformanceConf> CreateMonsterPerformanceConf(FlatBufferBuilder builder,
      int id = 0,
      int monster_performance_id = 0,
      VectorOffset skill_idsOffset = default(VectorOffset),
      StringOffset tagOffset = default(StringOffset)) {
    builder.StartTable(4);
    MonsterPerformanceConf.AddTag(builder, tagOffset);
    MonsterPerformanceConf.AddSkillIds(builder, skill_idsOffset);
    MonsterPerformanceConf.AddMonsterPerformanceId(builder, monster_performance_id);
    MonsterPerformanceConf.AddId(builder, id);
    return MonsterPerformanceConf.EndMonsterPerformanceConf(builder);
  }

  public static void StartMonsterPerformanceConf(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMonsterPerformanceId(FlatBufferBuilder builder, int monsterPerformanceId) { builder.AddInt(1, monsterPerformanceId, 0); }
  public static void AddSkillIds(FlatBufferBuilder builder, VectorOffset skillIdsOffset) { builder.AddOffset(2, skillIdsOffset.Value, 0); }
  public static VectorOffset CreateSkillIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSkillIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSkillIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTag(FlatBufferBuilder builder, StringOffset tagOffset) { builder.AddOffset(3, tagOffset.Value, 0); }
  public static Offset<WWParser.Defs.MonsterPerformanceConf> EndMonsterPerformanceConf(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MonsterPerformanceConf>(o);
  }
  public MonsterPerformanceConfT UnPack() {
    var _o = new MonsterPerformanceConfT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MonsterPerformanceConfT _o) {
    _o.Id = this.Id;
    _o.MonsterPerformanceId = this.MonsterPerformanceId;
    _o.SkillIds = new List<int>();
    for (var _j = 0; _j < this.SkillIdsLength; ++_j) {_o.SkillIds.Add(this.SkillIds(_j));}
    _o.Tag = this.Tag;
  }
  public static Offset<WWParser.Defs.MonsterPerformanceConf> Pack(FlatBufferBuilder builder, MonsterPerformanceConfT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MonsterPerformanceConf>);
    var _skill_ids = default(VectorOffset);
    if (_o.SkillIds != null) {
      var __skill_ids = _o.SkillIds.ToArray();
      _skill_ids = CreateSkillIdsVector(builder, __skill_ids);
    }
    var _tag = _o.Tag == null ? default(StringOffset) : builder.CreateString(_o.Tag);
    return CreateMonsterPerformanceConf(
      builder,
      _o.Id,
      _o.MonsterPerformanceId,
      _skill_ids,
      _tag);
  }
}

public class MonsterPerformanceConfT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_performance_id")]
  public int MonsterPerformanceId { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_ids")]
  public List<int> SkillIds { get; set; }
  [Newtonsoft.Json.JsonProperty("tag")]
  public string Tag { get; set; }

  public MonsterPerformanceConfT() {
    this.Id = 0;
    this.MonsterPerformanceId = 0;
    this.SkillIds = null;
    this.Tag = null;
  }
}


static public class MonsterPerformanceConfVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MonsterPerformanceId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*SkillIds*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 10 /*Tag*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
