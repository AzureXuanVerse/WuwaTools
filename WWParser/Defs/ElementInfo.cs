// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ElementInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ElementInfo GetRootAsElementInfo(ByteBuffer _bb) { return GetRootAsElementInfo(_bb, new ElementInfo()); }
  public static ElementInfo GetRootAsElementInfo(ByteBuffer _bb, ElementInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ElementInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Describe { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescribeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescribeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescribeArray() { return __p.__vector_as_array<byte>(6); }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string Icon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(10); }
  public string Icon2 { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIcon2Bytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIcon2Bytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIcon2Array() { return __p.__vector_as_array<byte>(12); }
  public string Icon3 { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIcon3Bytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIcon3Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIcon3Array() { return __p.__vector_as_array<byte>(14); }
  public string Icon4 { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIcon4Bytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIcon4Bytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIcon4Array() { return __p.__vector_as_array<byte>(16); }
  public string Icon4pure { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIcon4pureBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetIcon4pureBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetIcon4pureArray() { return __p.__vector_as_array<byte>(18); }
  public string Icon5 { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIcon5Bytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetIcon5Bytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetIcon5Array() { return __p.__vector_as_array<byte>(20); }
  public string Icon6 { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIcon6Bytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetIcon6Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetIcon6Array() { return __p.__vector_as_array<byte>(22); }
  public string Icon7 { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIcon7Bytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetIcon7Bytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetIcon7Array() { return __p.__vector_as_array<byte>(24); }
  public string ElementChangeTexture { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetElementChangeTextureBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetElementChangeTextureBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetElementChangeTextureArray() { return __p.__vector_as_array<byte>(26); }
  public string ElementEffectColor { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetElementEffectColorBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetElementEffectColorBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetElementEffectColorArray() { return __p.__vector_as_array<byte>(28); }
  public string ElementColor { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetElementColorBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetElementColorBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetElementColorArray() { return __p.__vector_as_array<byte>(30); }
  public string SkillTreeEffectColor { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillTreeEffectColorBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetSkillTreeEffectColorBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetSkillTreeEffectColorArray() { return __p.__vector_as_array<byte>(32); }
  public string SkillTreeIconColor { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillTreeIconColorBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetSkillTreeIconColorBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetSkillTreeIconColorArray() { return __p.__vector_as_array<byte>(34); }
  public string SkillTreeLineColor { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillTreeLineColorBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetSkillTreeLineColorBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetSkillTreeLineColorArray() { return __p.__vector_as_array<byte>(36); }
  public string Effect { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetEffectBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetEffectArray() { return __p.__vector_as_array<byte>(38); }
  public string EffectTexturePath { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectTexturePathBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetEffectTexturePathBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetEffectTexturePathArray() { return __p.__vector_as_array<byte>(40); }
  public string GachaElementBgSpritePath { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGachaElementBgSpritePathBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetGachaElementBgSpritePathBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetGachaElementBgSpritePathArray() { return __p.__vector_as_array<byte>(42); }
  public string GachaSpritePath { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGachaSpritePathBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetGachaSpritePathBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetGachaSpritePathArray() { return __p.__vector_as_array<byte>(44); }
  public string UltimateSkillColor { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUltimateSkillColorBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetUltimateSkillColorBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetUltimateSkillColorArray() { return __p.__vector_as_array<byte>(46); }
  public string SkillEffectColor { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillEffectColorBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetSkillEffectColorBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetSkillEffectColorArray() { return __p.__vector_as_array<byte>(48); }
  public string SkillButtonEffectPath { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillButtonEffectPathBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetSkillButtonEffectPathBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetSkillButtonEffectPathArray() { return __p.__vector_as_array<byte>(50); }
  public string ElementBallEffectPath { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetElementBallEffectPathBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetElementBallEffectPathBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetElementBallEffectPathArray() { return __p.__vector_as_array<byte>(52); }
  public string AudioEvent { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAudioEventBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetAudioEventBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetAudioEventArray() { return __p.__vector_as_array<byte>(54); }

  public static Offset<WWParser.Defs.ElementInfo> CreateElementInfo(FlatBufferBuilder builder,
      int id = 0,
      StringOffset describeOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset icon2Offset = default(StringOffset),
      StringOffset icon3Offset = default(StringOffset),
      StringOffset icon4Offset = default(StringOffset),
      StringOffset icon4pureOffset = default(StringOffset),
      StringOffset icon5Offset = default(StringOffset),
      StringOffset icon6Offset = default(StringOffset),
      StringOffset icon7Offset = default(StringOffset),
      StringOffset element_change_textureOffset = default(StringOffset),
      StringOffset element_effect_colorOffset = default(StringOffset),
      StringOffset element_colorOffset = default(StringOffset),
      StringOffset skill_tree_effect_colorOffset = default(StringOffset),
      StringOffset skill_tree_icon_colorOffset = default(StringOffset),
      StringOffset skill_tree_line_colorOffset = default(StringOffset),
      StringOffset effectOffset = default(StringOffset),
      StringOffset effect_texture_pathOffset = default(StringOffset),
      StringOffset gacha_element_bg_sprite_pathOffset = default(StringOffset),
      StringOffset gacha_sprite_pathOffset = default(StringOffset),
      StringOffset ultimate_skill_colorOffset = default(StringOffset),
      StringOffset skill_effect_colorOffset = default(StringOffset),
      StringOffset skill_button_effect_pathOffset = default(StringOffset),
      StringOffset element_ball_effect_pathOffset = default(StringOffset),
      StringOffset audio_eventOffset = default(StringOffset)) {
    builder.StartTable(26);
    ElementInfo.AddAudioEvent(builder, audio_eventOffset);
    ElementInfo.AddElementBallEffectPath(builder, element_ball_effect_pathOffset);
    ElementInfo.AddSkillButtonEffectPath(builder, skill_button_effect_pathOffset);
    ElementInfo.AddSkillEffectColor(builder, skill_effect_colorOffset);
    ElementInfo.AddUltimateSkillColor(builder, ultimate_skill_colorOffset);
    ElementInfo.AddGachaSpritePath(builder, gacha_sprite_pathOffset);
    ElementInfo.AddGachaElementBgSpritePath(builder, gacha_element_bg_sprite_pathOffset);
    ElementInfo.AddEffectTexturePath(builder, effect_texture_pathOffset);
    ElementInfo.AddEffect(builder, effectOffset);
    ElementInfo.AddSkillTreeLineColor(builder, skill_tree_line_colorOffset);
    ElementInfo.AddSkillTreeIconColor(builder, skill_tree_icon_colorOffset);
    ElementInfo.AddSkillTreeEffectColor(builder, skill_tree_effect_colorOffset);
    ElementInfo.AddElementColor(builder, element_colorOffset);
    ElementInfo.AddElementEffectColor(builder, element_effect_colorOffset);
    ElementInfo.AddElementChangeTexture(builder, element_change_textureOffset);
    ElementInfo.AddIcon7(builder, icon7Offset);
    ElementInfo.AddIcon6(builder, icon6Offset);
    ElementInfo.AddIcon5(builder, icon5Offset);
    ElementInfo.AddIcon4pure(builder, icon4pureOffset);
    ElementInfo.AddIcon4(builder, icon4Offset);
    ElementInfo.AddIcon3(builder, icon3Offset);
    ElementInfo.AddIcon2(builder, icon2Offset);
    ElementInfo.AddIcon(builder, iconOffset);
    ElementInfo.AddName(builder, nameOffset);
    ElementInfo.AddDescribe(builder, describeOffset);
    ElementInfo.AddId(builder, id);
    return ElementInfo.EndElementInfo(builder);
  }

  public static void StartElementInfo(FlatBufferBuilder builder) { builder.StartTable(26); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDescribe(FlatBufferBuilder builder, StringOffset describeOffset) { builder.AddOffset(1, describeOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(3, iconOffset.Value, 0); }
  public static void AddIcon2(FlatBufferBuilder builder, StringOffset icon2Offset) { builder.AddOffset(4, icon2Offset.Value, 0); }
  public static void AddIcon3(FlatBufferBuilder builder, StringOffset icon3Offset) { builder.AddOffset(5, icon3Offset.Value, 0); }
  public static void AddIcon4(FlatBufferBuilder builder, StringOffset icon4Offset) { builder.AddOffset(6, icon4Offset.Value, 0); }
  public static void AddIcon4pure(FlatBufferBuilder builder, StringOffset icon4pureOffset) { builder.AddOffset(7, icon4pureOffset.Value, 0); }
  public static void AddIcon5(FlatBufferBuilder builder, StringOffset icon5Offset) { builder.AddOffset(8, icon5Offset.Value, 0); }
  public static void AddIcon6(FlatBufferBuilder builder, StringOffset icon6Offset) { builder.AddOffset(9, icon6Offset.Value, 0); }
  public static void AddIcon7(FlatBufferBuilder builder, StringOffset icon7Offset) { builder.AddOffset(10, icon7Offset.Value, 0); }
  public static void AddElementChangeTexture(FlatBufferBuilder builder, StringOffset elementChangeTextureOffset) { builder.AddOffset(11, elementChangeTextureOffset.Value, 0); }
  public static void AddElementEffectColor(FlatBufferBuilder builder, StringOffset elementEffectColorOffset) { builder.AddOffset(12, elementEffectColorOffset.Value, 0); }
  public static void AddElementColor(FlatBufferBuilder builder, StringOffset elementColorOffset) { builder.AddOffset(13, elementColorOffset.Value, 0); }
  public static void AddSkillTreeEffectColor(FlatBufferBuilder builder, StringOffset skillTreeEffectColorOffset) { builder.AddOffset(14, skillTreeEffectColorOffset.Value, 0); }
  public static void AddSkillTreeIconColor(FlatBufferBuilder builder, StringOffset skillTreeIconColorOffset) { builder.AddOffset(15, skillTreeIconColorOffset.Value, 0); }
  public static void AddSkillTreeLineColor(FlatBufferBuilder builder, StringOffset skillTreeLineColorOffset) { builder.AddOffset(16, skillTreeLineColorOffset.Value, 0); }
  public static void AddEffect(FlatBufferBuilder builder, StringOffset effectOffset) { builder.AddOffset(17, effectOffset.Value, 0); }
  public static void AddEffectTexturePath(FlatBufferBuilder builder, StringOffset effectTexturePathOffset) { builder.AddOffset(18, effectTexturePathOffset.Value, 0); }
  public static void AddGachaElementBgSpritePath(FlatBufferBuilder builder, StringOffset gachaElementBgSpritePathOffset) { builder.AddOffset(19, gachaElementBgSpritePathOffset.Value, 0); }
  public static void AddGachaSpritePath(FlatBufferBuilder builder, StringOffset gachaSpritePathOffset) { builder.AddOffset(20, gachaSpritePathOffset.Value, 0); }
  public static void AddUltimateSkillColor(FlatBufferBuilder builder, StringOffset ultimateSkillColorOffset) { builder.AddOffset(21, ultimateSkillColorOffset.Value, 0); }
  public static void AddSkillEffectColor(FlatBufferBuilder builder, StringOffset skillEffectColorOffset) { builder.AddOffset(22, skillEffectColorOffset.Value, 0); }
  public static void AddSkillButtonEffectPath(FlatBufferBuilder builder, StringOffset skillButtonEffectPathOffset) { builder.AddOffset(23, skillButtonEffectPathOffset.Value, 0); }
  public static void AddElementBallEffectPath(FlatBufferBuilder builder, StringOffset elementBallEffectPathOffset) { builder.AddOffset(24, elementBallEffectPathOffset.Value, 0); }
  public static void AddAudioEvent(FlatBufferBuilder builder, StringOffset audioEventOffset) { builder.AddOffset(25, audioEventOffset.Value, 0); }
  public static Offset<WWParser.Defs.ElementInfo> EndElementInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ElementInfo>(o);
  }
  public ElementInfoT UnPack() {
    var _o = new ElementInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ElementInfoT _o) {
    _o.Id = this.Id;
    _o.Describe = this.Describe;
    _o.Name = this.Name;
    _o.Icon = this.Icon;
    _o.Icon2 = this.Icon2;
    _o.Icon3 = this.Icon3;
    _o.Icon4 = this.Icon4;
    _o.Icon4pure = this.Icon4pure;
    _o.Icon5 = this.Icon5;
    _o.Icon6 = this.Icon6;
    _o.Icon7 = this.Icon7;
    _o.ElementChangeTexture = this.ElementChangeTexture;
    _o.ElementEffectColor = this.ElementEffectColor;
    _o.ElementColor = this.ElementColor;
    _o.SkillTreeEffectColor = this.SkillTreeEffectColor;
    _o.SkillTreeIconColor = this.SkillTreeIconColor;
    _o.SkillTreeLineColor = this.SkillTreeLineColor;
    _o.Effect = this.Effect;
    _o.EffectTexturePath = this.EffectTexturePath;
    _o.GachaElementBgSpritePath = this.GachaElementBgSpritePath;
    _o.GachaSpritePath = this.GachaSpritePath;
    _o.UltimateSkillColor = this.UltimateSkillColor;
    _o.SkillEffectColor = this.SkillEffectColor;
    _o.SkillButtonEffectPath = this.SkillButtonEffectPath;
    _o.ElementBallEffectPath = this.ElementBallEffectPath;
    _o.AudioEvent = this.AudioEvent;
  }
  public static Offset<WWParser.Defs.ElementInfo> Pack(FlatBufferBuilder builder, ElementInfoT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ElementInfo>);
    var _describe = _o.Describe == null ? default(StringOffset) : builder.CreateString(_o.Describe);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _icon2 = _o.Icon2 == null ? default(StringOffset) : builder.CreateString(_o.Icon2);
    var _icon3 = _o.Icon3 == null ? default(StringOffset) : builder.CreateString(_o.Icon3);
    var _icon4 = _o.Icon4 == null ? default(StringOffset) : builder.CreateString(_o.Icon4);
    var _icon4pure = _o.Icon4pure == null ? default(StringOffset) : builder.CreateString(_o.Icon4pure);
    var _icon5 = _o.Icon5 == null ? default(StringOffset) : builder.CreateString(_o.Icon5);
    var _icon6 = _o.Icon6 == null ? default(StringOffset) : builder.CreateString(_o.Icon6);
    var _icon7 = _o.Icon7 == null ? default(StringOffset) : builder.CreateString(_o.Icon7);
    var _element_change_texture = _o.ElementChangeTexture == null ? default(StringOffset) : builder.CreateString(_o.ElementChangeTexture);
    var _element_effect_color = _o.ElementEffectColor == null ? default(StringOffset) : builder.CreateString(_o.ElementEffectColor);
    var _element_color = _o.ElementColor == null ? default(StringOffset) : builder.CreateString(_o.ElementColor);
    var _skill_tree_effect_color = _o.SkillTreeEffectColor == null ? default(StringOffset) : builder.CreateString(_o.SkillTreeEffectColor);
    var _skill_tree_icon_color = _o.SkillTreeIconColor == null ? default(StringOffset) : builder.CreateString(_o.SkillTreeIconColor);
    var _skill_tree_line_color = _o.SkillTreeLineColor == null ? default(StringOffset) : builder.CreateString(_o.SkillTreeLineColor);
    var _effect = _o.Effect == null ? default(StringOffset) : builder.CreateString(_o.Effect);
    var _effect_texture_path = _o.EffectTexturePath == null ? default(StringOffset) : builder.CreateString(_o.EffectTexturePath);
    var _gacha_element_bg_sprite_path = _o.GachaElementBgSpritePath == null ? default(StringOffset) : builder.CreateString(_o.GachaElementBgSpritePath);
    var _gacha_sprite_path = _o.GachaSpritePath == null ? default(StringOffset) : builder.CreateString(_o.GachaSpritePath);
    var _ultimate_skill_color = _o.UltimateSkillColor == null ? default(StringOffset) : builder.CreateString(_o.UltimateSkillColor);
    var _skill_effect_color = _o.SkillEffectColor == null ? default(StringOffset) : builder.CreateString(_o.SkillEffectColor);
    var _skill_button_effect_path = _o.SkillButtonEffectPath == null ? default(StringOffset) : builder.CreateString(_o.SkillButtonEffectPath);
    var _element_ball_effect_path = _o.ElementBallEffectPath == null ? default(StringOffset) : builder.CreateString(_o.ElementBallEffectPath);
    var _audio_event = _o.AudioEvent == null ? default(StringOffset) : builder.CreateString(_o.AudioEvent);
    return CreateElementInfo(
      builder,
      _o.Id,
      _describe,
      _name,
      _icon,
      _icon2,
      _icon3,
      _icon4,
      _icon4pure,
      _icon5,
      _icon6,
      _icon7,
      _element_change_texture,
      _element_effect_color,
      _element_color,
      _skill_tree_effect_color,
      _skill_tree_icon_color,
      _skill_tree_line_color,
      _effect,
      _effect_texture_path,
      _gacha_element_bg_sprite_path,
      _gacha_sprite_path,
      _ultimate_skill_color,
      _skill_effect_color,
      _skill_button_effect_path,
      _element_ball_effect_path,
      _audio_event);
  }
}

public class ElementInfoT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("describe")]
  public string Describe { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("icon2")]
  public string Icon2 { get; set; }
  [Newtonsoft.Json.JsonProperty("icon3")]
  public string Icon3 { get; set; }
  [Newtonsoft.Json.JsonProperty("icon4")]
  public string Icon4 { get; set; }
  [Newtonsoft.Json.JsonProperty("icon4pure")]
  public string Icon4pure { get; set; }
  [Newtonsoft.Json.JsonProperty("icon5")]
  public string Icon5 { get; set; }
  [Newtonsoft.Json.JsonProperty("icon6")]
  public string Icon6 { get; set; }
  [Newtonsoft.Json.JsonProperty("icon7")]
  public string Icon7 { get; set; }
  [Newtonsoft.Json.JsonProperty("element_change_texture")]
  public string ElementChangeTexture { get; set; }
  [Newtonsoft.Json.JsonProperty("element_effect_color")]
  public string ElementEffectColor { get; set; }
  [Newtonsoft.Json.JsonProperty("element_color")]
  public string ElementColor { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_tree_effect_color")]
  public string SkillTreeEffectColor { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_tree_icon_color")]
  public string SkillTreeIconColor { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_tree_line_color")]
  public string SkillTreeLineColor { get; set; }
  [Newtonsoft.Json.JsonProperty("effect")]
  public string Effect { get; set; }
  [Newtonsoft.Json.JsonProperty("effect_texture_path")]
  public string EffectTexturePath { get; set; }
  [Newtonsoft.Json.JsonProperty("gacha_element_bg_sprite_path")]
  public string GachaElementBgSpritePath { get; set; }
  [Newtonsoft.Json.JsonProperty("gacha_sprite_path")]
  public string GachaSpritePath { get; set; }
  [Newtonsoft.Json.JsonProperty("ultimate_skill_color")]
  public string UltimateSkillColor { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_effect_color")]
  public string SkillEffectColor { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_button_effect_path")]
  public string SkillButtonEffectPath { get; set; }
  [Newtonsoft.Json.JsonProperty("element_ball_effect_path")]
  public string ElementBallEffectPath { get; set; }
  [Newtonsoft.Json.JsonProperty("audio_event")]
  public string AudioEvent { get; set; }

  public ElementInfoT() {
    this.Id = 0;
    this.Describe = null;
    this.Name = null;
    this.Icon = null;
    this.Icon2 = null;
    this.Icon3 = null;
    this.Icon4 = null;
    this.Icon4pure = null;
    this.Icon5 = null;
    this.Icon6 = null;
    this.Icon7 = null;
    this.ElementChangeTexture = null;
    this.ElementEffectColor = null;
    this.ElementColor = null;
    this.SkillTreeEffectColor = null;
    this.SkillTreeIconColor = null;
    this.SkillTreeLineColor = null;
    this.Effect = null;
    this.EffectTexturePath = null;
    this.GachaElementBgSpritePath = null;
    this.GachaSpritePath = null;
    this.UltimateSkillColor = null;
    this.SkillEffectColor = null;
    this.SkillButtonEffectPath = null;
    this.ElementBallEffectPath = null;
    this.AudioEvent = null;
  }
}


static public class ElementInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Describe*/, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyString(tablePos, 10 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 12 /*Icon2*/, false)
      && verifier.VerifyString(tablePos, 14 /*Icon3*/, false)
      && verifier.VerifyString(tablePos, 16 /*Icon4*/, false)
      && verifier.VerifyString(tablePos, 18 /*Icon4pure*/, false)
      && verifier.VerifyString(tablePos, 20 /*Icon5*/, false)
      && verifier.VerifyString(tablePos, 22 /*Icon6*/, false)
      && verifier.VerifyString(tablePos, 24 /*Icon7*/, false)
      && verifier.VerifyString(tablePos, 26 /*ElementChangeTexture*/, false)
      && verifier.VerifyString(tablePos, 28 /*ElementEffectColor*/, false)
      && verifier.VerifyString(tablePos, 30 /*ElementColor*/, false)
      && verifier.VerifyString(tablePos, 32 /*SkillTreeEffectColor*/, false)
      && verifier.VerifyString(tablePos, 34 /*SkillTreeIconColor*/, false)
      && verifier.VerifyString(tablePos, 36 /*SkillTreeLineColor*/, false)
      && verifier.VerifyString(tablePos, 38 /*Effect*/, false)
      && verifier.VerifyString(tablePos, 40 /*EffectTexturePath*/, false)
      && verifier.VerifyString(tablePos, 42 /*GachaElementBgSpritePath*/, false)
      && verifier.VerifyString(tablePos, 44 /*GachaSpritePath*/, false)
      && verifier.VerifyString(tablePos, 46 /*UltimateSkillColor*/, false)
      && verifier.VerifyString(tablePos, 48 /*SkillEffectColor*/, false)
      && verifier.VerifyString(tablePos, 50 /*SkillButtonEffectPath*/, false)
      && verifier.VerifyString(tablePos, 52 /*ElementBallEffectPath*/, false)
      && verifier.VerifyString(tablePos, 54 /*AudioEvent*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
