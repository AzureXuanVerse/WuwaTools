// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RefineRecommend : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RefineRecommend GetRootAsRefineRecommend(ByteBuffer _bb) { return GetRootAsRefineRecommend(_bb, new RefineRecommend()); }
  public static RefineRecommend GetRootAsRefineRecommend(ByteBuffer _bb, RefineRecommend obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RefineRecommend __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Cost { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FetterArray(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FetterArrayLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFetterArrayBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetFetterArrayBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetFetterArrayArray() { return __p.__vector_as_array<int>(8); }
  public int PropertyArray(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PropertyArrayLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPropertyArrayBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetPropertyArrayBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetPropertyArrayArray() { return __p.__vector_as_array<int>(10); }

  public static Offset<WWParser.Defs.RefineRecommend> CreateRefineRecommend(FlatBufferBuilder builder,
      int id = 0,
      int cost = 0,
      VectorOffset fetter_arrayOffset = default(VectorOffset),
      VectorOffset property_arrayOffset = default(VectorOffset)) {
    builder.StartTable(4);
    RefineRecommend.AddPropertyArray(builder, property_arrayOffset);
    RefineRecommend.AddFetterArray(builder, fetter_arrayOffset);
    RefineRecommend.AddCost(builder, cost);
    RefineRecommend.AddId(builder, id);
    return RefineRecommend.EndRefineRecommend(builder);
  }

  public static void StartRefineRecommend(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddCost(FlatBufferBuilder builder, int cost) { builder.AddInt(1, cost, 0); }
  public static void AddFetterArray(FlatBufferBuilder builder, VectorOffset fetterArrayOffset) { builder.AddOffset(2, fetterArrayOffset.Value, 0); }
  public static VectorOffset CreateFetterArrayVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFetterArrayVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFetterArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFetterArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFetterArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPropertyArray(FlatBufferBuilder builder, VectorOffset propertyArrayOffset) { builder.AddOffset(3, propertyArrayOffset.Value, 0); }
  public static VectorOffset CreatePropertyArrayVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePropertyArrayVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePropertyArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePropertyArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPropertyArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.RefineRecommend> EndRefineRecommend(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RefineRecommend>(o);
  }
  public RefineRecommendT UnPack() {
    var _o = new RefineRecommendT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RefineRecommendT _o) {
    _o.Id = this.Id;
    _o.Cost = this.Cost;
    _o.FetterArray = new List<int>();
    for (var _j = 0; _j < this.FetterArrayLength; ++_j) {_o.FetterArray.Add(this.FetterArray(_j));}
    _o.PropertyArray = new List<int>();
    for (var _j = 0; _j < this.PropertyArrayLength; ++_j) {_o.PropertyArray.Add(this.PropertyArray(_j));}
  }
  public static Offset<WWParser.Defs.RefineRecommend> Pack(FlatBufferBuilder builder, RefineRecommendT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RefineRecommend>);
    var _fetter_array = default(VectorOffset);
    if (_o.FetterArray != null) {
      var __fetter_array = _o.FetterArray.ToArray();
      _fetter_array = CreateFetterArrayVector(builder, __fetter_array);
    }
    var _property_array = default(VectorOffset);
    if (_o.PropertyArray != null) {
      var __property_array = _o.PropertyArray.ToArray();
      _property_array = CreatePropertyArrayVector(builder, __property_array);
    }
    return CreateRefineRecommend(
      builder,
      _o.Id,
      _o.Cost,
      _fetter_array,
      _property_array);
  }
}

public class RefineRecommendT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("cost")]
  public int Cost { get; set; }
  [Newtonsoft.Json.JsonProperty("fetter_array")]
  public List<int> FetterArray { get; set; }
  [Newtonsoft.Json.JsonProperty("property_array")]
  public List<int> PropertyArray { get; set; }

  public RefineRecommendT() {
    this.Id = 0;
    this.Cost = 0;
    this.FetterArray = null;
    this.PropertyArray = null;
  }
}


static public class RefineRecommendVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Cost*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*FetterArray*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*PropertyArray*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
