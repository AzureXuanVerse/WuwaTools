// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TrialRoleInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TrialRoleInfo GetRootAsTrialRoleInfo(ByteBuffer _bb) { return GetRootAsTrialRoleInfo(_bb, new TrialRoleInfo()); }
  public static TrialRoleInfo GetRootAsTrialRoleInfo(ByteBuffer _bb, TrialRoleInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TrialRoleInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WorldLevel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int Gender { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public bool OnlyTrial { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool HideTrialLabel { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int ParentId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ResonanceLevel { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockSkillLevel { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int UnlockSkillNodeList(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int UnlockSkillNodeListLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetUnlockSkillNodeListBytes() { return __p.__vector_as_span<int>(24, 4); }
#else
  public ArraySegment<byte>? GetUnlockSkillNodeListBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public int[] GetUnlockSkillNodeListArray() { return __p.__vector_as_array<int>(24); }
  public int RoleSkin { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TrailWeapon { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.IntPair? PhantomEquipList(int j) { int o = __p.__offset(30); return o != 0 ? (WWParser.Defs.IntPair?)(new WWParser.Defs.IntPair()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PhantomEquipListLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.TrialRoleInfo> CreateTrialRoleInfo(FlatBufferBuilder builder,
      int id = 0,
      int group_id = 0,
      int world_level = 1,
      int gender = -1,
      bool only_trial = false,
      bool hide_trial_label = false,
      int parent_id = 0,
      int level = 0,
      int resonance_level = 0,
      int unlock_skill_level = 1,
      VectorOffset unlock_skill_node_listOffset = default(VectorOffset),
      int role_skin = 0,
      int trail_weapon = 0,
      VectorOffset phantom_equip_listOffset = default(VectorOffset)) {
    builder.StartTable(14);
    TrialRoleInfo.AddPhantomEquipList(builder, phantom_equip_listOffset);
    TrialRoleInfo.AddTrailWeapon(builder, trail_weapon);
    TrialRoleInfo.AddRoleSkin(builder, role_skin);
    TrialRoleInfo.AddUnlockSkillNodeList(builder, unlock_skill_node_listOffset);
    TrialRoleInfo.AddUnlockSkillLevel(builder, unlock_skill_level);
    TrialRoleInfo.AddResonanceLevel(builder, resonance_level);
    TrialRoleInfo.AddLevel(builder, level);
    TrialRoleInfo.AddParentId(builder, parent_id);
    TrialRoleInfo.AddGender(builder, gender);
    TrialRoleInfo.AddWorldLevel(builder, world_level);
    TrialRoleInfo.AddGroupId(builder, group_id);
    TrialRoleInfo.AddId(builder, id);
    TrialRoleInfo.AddHideTrialLabel(builder, hide_trial_label);
    TrialRoleInfo.AddOnlyTrial(builder, only_trial);
    return TrialRoleInfo.EndTrialRoleInfo(builder);
  }

  public static void StartTrialRoleInfo(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, int groupId) { builder.AddInt(1, groupId, 0); }
  public static void AddWorldLevel(FlatBufferBuilder builder, int worldLevel) { builder.AddInt(2, worldLevel, 1); }
  public static void AddGender(FlatBufferBuilder builder, int gender) { builder.AddInt(3, gender, -1); }
  public static void AddOnlyTrial(FlatBufferBuilder builder, bool onlyTrial) { builder.AddBool(4, onlyTrial, false); }
  public static void AddHideTrialLabel(FlatBufferBuilder builder, bool hideTrialLabel) { builder.AddBool(5, hideTrialLabel, false); }
  public static void AddParentId(FlatBufferBuilder builder, int parentId) { builder.AddInt(6, parentId, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(7, level, 0); }
  public static void AddResonanceLevel(FlatBufferBuilder builder, int resonanceLevel) { builder.AddInt(8, resonanceLevel, 0); }
  public static void AddUnlockSkillLevel(FlatBufferBuilder builder, int unlockSkillLevel) { builder.AddInt(9, unlockSkillLevel, 1); }
  public static void AddUnlockSkillNodeList(FlatBufferBuilder builder, VectorOffset unlockSkillNodeListOffset) { builder.AddOffset(10, unlockSkillNodeListOffset.Value, 0); }
  public static VectorOffset CreateUnlockSkillNodeListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateUnlockSkillNodeListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUnlockSkillNodeListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUnlockSkillNodeListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUnlockSkillNodeListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRoleSkin(FlatBufferBuilder builder, int roleSkin) { builder.AddInt(11, roleSkin, 0); }
  public static void AddTrailWeapon(FlatBufferBuilder builder, int trailWeapon) { builder.AddInt(12, trailWeapon, 0); }
  public static void AddPhantomEquipList(FlatBufferBuilder builder, VectorOffset phantomEquipListOffset) { builder.AddOffset(13, phantomEquipListOffset.Value, 0); }
  public static VectorOffset CreatePhantomEquipListVector(FlatBufferBuilder builder, Offset<WWParser.Defs.IntPair>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePhantomEquipListVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.IntPair>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhantomEquipListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.IntPair>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhantomEquipListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.IntPair>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPhantomEquipListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.TrialRoleInfo> EndTrialRoleInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.TrialRoleInfo>(o);
  }
  public TrialRoleInfoT UnPack() {
    var _o = new TrialRoleInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TrialRoleInfoT _o) {
    _o.Id = this.Id;
    _o.GroupId = this.GroupId;
    _o.WorldLevel = this.WorldLevel;
    _o.Gender = this.Gender;
    _o.OnlyTrial = this.OnlyTrial;
    _o.HideTrialLabel = this.HideTrialLabel;
    _o.ParentId = this.ParentId;
    _o.Level = this.Level;
    _o.ResonanceLevel = this.ResonanceLevel;
    _o.UnlockSkillLevel = this.UnlockSkillLevel;
    _o.UnlockSkillNodeList = new List<int>();
    for (var _j = 0; _j < this.UnlockSkillNodeListLength; ++_j) {_o.UnlockSkillNodeList.Add(this.UnlockSkillNodeList(_j));}
    _o.RoleSkin = this.RoleSkin;
    _o.TrailWeapon = this.TrailWeapon;
    _o.PhantomEquipList = new List<WWParser.Defs.IntPairT>();
    for (var _j = 0; _j < this.PhantomEquipListLength; ++_j) {_o.PhantomEquipList.Add(this.PhantomEquipList(_j).HasValue ? this.PhantomEquipList(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.TrialRoleInfo> Pack(FlatBufferBuilder builder, TrialRoleInfoT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.TrialRoleInfo>);
    var _unlock_skill_node_list = default(VectorOffset);
    if (_o.UnlockSkillNodeList != null) {
      var __unlock_skill_node_list = _o.UnlockSkillNodeList.ToArray();
      _unlock_skill_node_list = CreateUnlockSkillNodeListVector(builder, __unlock_skill_node_list);
    }
    var _phantom_equip_list = default(VectorOffset);
    if (_o.PhantomEquipList != null) {
      var __phantom_equip_list = new Offset<WWParser.Defs.IntPair>[_o.PhantomEquipList.Count];
      for (var _j = 0; _j < __phantom_equip_list.Length; ++_j) { __phantom_equip_list[_j] = WWParser.Defs.IntPair.Pack(builder, _o.PhantomEquipList[_j]); }
      _phantom_equip_list = CreatePhantomEquipListVector(builder, __phantom_equip_list);
    }
    return CreateTrialRoleInfo(
      builder,
      _o.Id,
      _o.GroupId,
      _o.WorldLevel,
      _o.Gender,
      _o.OnlyTrial,
      _o.HideTrialLabel,
      _o.ParentId,
      _o.Level,
      _o.ResonanceLevel,
      _o.UnlockSkillLevel,
      _unlock_skill_node_list,
      _o.RoleSkin,
      _o.TrailWeapon,
      _phantom_equip_list);
  }
}

public class TrialRoleInfoT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("group_id")]
  public int GroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("world_level")]
  public int WorldLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("gender")]
  public int Gender { get; set; }
  [Newtonsoft.Json.JsonProperty("only_trial")]
  public bool OnlyTrial { get; set; }
  [Newtonsoft.Json.JsonProperty("hide_trial_label")]
  public bool HideTrialLabel { get; set; }
  [Newtonsoft.Json.JsonProperty("parent_id")]
  public int ParentId { get; set; }
  [Newtonsoft.Json.JsonProperty("level")]
  public int Level { get; set; }
  [Newtonsoft.Json.JsonProperty("resonance_level")]
  public int ResonanceLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_skill_level")]
  public int UnlockSkillLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_skill_node_list")]
  public List<int> UnlockSkillNodeList { get; set; }
  [Newtonsoft.Json.JsonProperty("role_skin")]
  public int RoleSkin { get; set; }
  [Newtonsoft.Json.JsonProperty("trail_weapon")]
  public int TrailWeapon { get; set; }
  [Newtonsoft.Json.JsonProperty("phantom_equip_list")]
  public List<WWParser.Defs.IntPairT> PhantomEquipList { get; set; }

  public TrialRoleInfoT() {
    this.Id = 0;
    this.GroupId = 0;
    this.WorldLevel = 1;
    this.Gender = -1;
    this.OnlyTrial = false;
    this.HideTrialLabel = false;
    this.ParentId = 0;
    this.Level = 0;
    this.ResonanceLevel = 0;
    this.UnlockSkillLevel = 1;
    this.UnlockSkillNodeList = null;
    this.RoleSkin = 0;
    this.TrailWeapon = 0;
    this.PhantomEquipList = null;
  }
}


static public class TrialRoleInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*GroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*WorldLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Gender*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*OnlyTrial*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*HideTrialLabel*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*ParentId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*ResonanceLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*UnlockSkillLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 24 /*UnlockSkillNodeList*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 26 /*RoleSkin*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*TrailWeapon*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 30 /*PhantomEquipList*/, WWParser.Defs.IntPairVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
