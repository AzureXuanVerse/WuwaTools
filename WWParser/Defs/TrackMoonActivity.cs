// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TrackMoonActivity : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TrackMoonActivity GetRootAsTrackMoonActivity(ByteBuffer _bb) { return GetRootAsTrackMoonActivity(_bb, new TrackMoonActivity()); }
  public static TrackMoonActivity GetRootAsTrackMoonActivity(ByteBuffer _bb, TrackMoonActivity obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TrackMoonActivity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ActivityReward { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool PermanentTarget { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int ActivityButtonType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardList(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RewardListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRewardListBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetRewardListBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetRewardListArray() { return __p.__vector_as_array<int>(12); }
  public int FocusMarkId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string StageQuestTips { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStageQuestTipsBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetStageQuestTipsBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetStageQuestTipsArray() { return __p.__vector_as_array<byte>(16); }
  public int StageQuestId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.TrackMoonActivity> CreateTrackMoonActivity(FlatBufferBuilder builder,
      int id = 0,
      bool activity_reward = false,
      bool permanent_target = false,
      int activity_button_type = 0,
      VectorOffset reward_listOffset = default(VectorOffset),
      int focus_mark_id = 0,
      StringOffset stage_quest_tipsOffset = default(StringOffset),
      int stage_quest_id = 0) {
    builder.StartTable(8);
    TrackMoonActivity.AddStageQuestId(builder, stage_quest_id);
    TrackMoonActivity.AddStageQuestTips(builder, stage_quest_tipsOffset);
    TrackMoonActivity.AddFocusMarkId(builder, focus_mark_id);
    TrackMoonActivity.AddRewardList(builder, reward_listOffset);
    TrackMoonActivity.AddActivityButtonType(builder, activity_button_type);
    TrackMoonActivity.AddId(builder, id);
    TrackMoonActivity.AddPermanentTarget(builder, permanent_target);
    TrackMoonActivity.AddActivityReward(builder, activity_reward);
    return TrackMoonActivity.EndTrackMoonActivity(builder);
  }

  public static void StartTrackMoonActivity(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityReward(FlatBufferBuilder builder, bool activityReward) { builder.AddBool(1, activityReward, false); }
  public static void AddPermanentTarget(FlatBufferBuilder builder, bool permanentTarget) { builder.AddBool(2, permanentTarget, false); }
  public static void AddActivityButtonType(FlatBufferBuilder builder, int activityButtonType) { builder.AddInt(3, activityButtonType, 0); }
  public static void AddRewardList(FlatBufferBuilder builder, VectorOffset rewardListOffset) { builder.AddOffset(4, rewardListOffset.Value, 0); }
  public static VectorOffset CreateRewardListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFocusMarkId(FlatBufferBuilder builder, int focusMarkId) { builder.AddInt(5, focusMarkId, 0); }
  public static void AddStageQuestTips(FlatBufferBuilder builder, StringOffset stageQuestTipsOffset) { builder.AddOffset(6, stageQuestTipsOffset.Value, 0); }
  public static void AddStageQuestId(FlatBufferBuilder builder, int stageQuestId) { builder.AddInt(7, stageQuestId, 0); }
  public static Offset<WWParser.Defs.TrackMoonActivity> EndTrackMoonActivity(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.TrackMoonActivity>(o);
  }
  public TrackMoonActivityT UnPack() {
    var _o = new TrackMoonActivityT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TrackMoonActivityT _o) {
    _o.Id = this.Id;
    _o.ActivityReward = this.ActivityReward;
    _o.PermanentTarget = this.PermanentTarget;
    _o.ActivityButtonType = this.ActivityButtonType;
    _o.RewardList = new List<int>();
    for (var _j = 0; _j < this.RewardListLength; ++_j) {_o.RewardList.Add(this.RewardList(_j));}
    _o.FocusMarkId = this.FocusMarkId;
    _o.StageQuestTips = this.StageQuestTips;
    _o.StageQuestId = this.StageQuestId;
  }
  public static Offset<WWParser.Defs.TrackMoonActivity> Pack(FlatBufferBuilder builder, TrackMoonActivityT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.TrackMoonActivity>);
    var _reward_list = default(VectorOffset);
    if (_o.RewardList != null) {
      var __reward_list = _o.RewardList.ToArray();
      _reward_list = CreateRewardListVector(builder, __reward_list);
    }
    var _stage_quest_tips = _o.StageQuestTips == null ? default(StringOffset) : builder.CreateString(_o.StageQuestTips);
    return CreateTrackMoonActivity(
      builder,
      _o.Id,
      _o.ActivityReward,
      _o.PermanentTarget,
      _o.ActivityButtonType,
      _reward_list,
      _o.FocusMarkId,
      _stage_quest_tips,
      _o.StageQuestId);
  }
}

public class TrackMoonActivityT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_reward")]
  public bool ActivityReward { get; set; }
  [Newtonsoft.Json.JsonProperty("permanent_target")]
  public bool PermanentTarget { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_button_type")]
  public int ActivityButtonType { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_list")]
  public List<int> RewardList { get; set; }
  [Newtonsoft.Json.JsonProperty("focus_mark_id")]
  public int FocusMarkId { get; set; }
  [Newtonsoft.Json.JsonProperty("stage_quest_tips")]
  public string StageQuestTips { get; set; }
  [Newtonsoft.Json.JsonProperty("stage_quest_id")]
  public int StageQuestId { get; set; }

  public TrackMoonActivityT() {
    this.Id = 0;
    this.ActivityReward = false;
    this.PermanentTarget = false;
    this.ActivityButtonType = 0;
    this.RewardList = null;
    this.FocusMarkId = 0;
    this.StageQuestTips = null;
    this.StageQuestId = 0;
  }
}


static public class TrackMoonActivityVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityReward*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*PermanentTarget*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*ActivityButtonType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*RewardList*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 14 /*FocusMarkId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*StageQuestTips*/, false)
      && verifier.VerifyField(tablePos, 18 /*StageQuestId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
