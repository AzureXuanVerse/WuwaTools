// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FunctionCondition : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FunctionCondition GetRootAsFunctionCondition(ByteBuffer _bb) { return GetRootAsFunctionCondition(_bb, new FunctionCondition()); }
  public static FunctionCondition GetRootAsFunctionCondition(ByteBuffer _bb, FunctionCondition obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FunctionCondition __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int FunctionId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public bool IsOn { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int OpenConditionId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShowUiType { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Delay { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)101; } }
  public string Title { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(16); }
  public string Desc { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(18); }
  public string Icon { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(20); }
  public string IconSprite { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconSpriteBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetIconSpriteBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetIconSpriteArray() { return __p.__vector_as_array<byte>(22); }

  public static Offset<WWParser.Defs.FunctionCondition> CreateFunctionCondition(FlatBufferBuilder builder,
      int function_id = 0,
      StringOffset nameOffset = default(StringOffset),
      bool is_on = false,
      int open_condition_id = 0,
      int show_ui_type = 0,
      int delay = 101,
      StringOffset titleOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset icon_spriteOffset = default(StringOffset)) {
    builder.StartTable(10);
    FunctionCondition.AddIconSprite(builder, icon_spriteOffset);
    FunctionCondition.AddIcon(builder, iconOffset);
    FunctionCondition.AddDesc(builder, descOffset);
    FunctionCondition.AddTitle(builder, titleOffset);
    FunctionCondition.AddDelay(builder, delay);
    FunctionCondition.AddShowUiType(builder, show_ui_type);
    FunctionCondition.AddOpenConditionId(builder, open_condition_id);
    FunctionCondition.AddName(builder, nameOffset);
    FunctionCondition.AddFunctionId(builder, function_id);
    FunctionCondition.AddIsOn(builder, is_on);
    return FunctionCondition.EndFunctionCondition(builder);
  }

  public static void StartFunctionCondition(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddFunctionId(FlatBufferBuilder builder, int functionId) { builder.AddInt(0, functionId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddIsOn(FlatBufferBuilder builder, bool isOn) { builder.AddBool(2, isOn, false); }
  public static void AddOpenConditionId(FlatBufferBuilder builder, int openConditionId) { builder.AddInt(3, openConditionId, 0); }
  public static void AddShowUiType(FlatBufferBuilder builder, int showUiType) { builder.AddInt(4, showUiType, 0); }
  public static void AddDelay(FlatBufferBuilder builder, int delay) { builder.AddInt(5, delay, 101); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(6, titleOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(7, descOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(8, iconOffset.Value, 0); }
  public static void AddIconSprite(FlatBufferBuilder builder, StringOffset iconSpriteOffset) { builder.AddOffset(9, iconSpriteOffset.Value, 0); }
  public static Offset<WWParser.Defs.FunctionCondition> EndFunctionCondition(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FunctionCondition>(o);
  }
  public FunctionConditionT UnPack() {
    var _o = new FunctionConditionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FunctionConditionT _o) {
    _o.FunctionId = this.FunctionId;
    _o.Name = this.Name;
    _o.IsOn = this.IsOn;
    _o.OpenConditionId = this.OpenConditionId;
    _o.ShowUiType = this.ShowUiType;
    _o.Delay = this.Delay;
    _o.Title = this.Title;
    _o.Desc = this.Desc;
    _o.Icon = this.Icon;
    _o.IconSprite = this.IconSprite;
  }
  public static Offset<WWParser.Defs.FunctionCondition> Pack(FlatBufferBuilder builder, FunctionConditionT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FunctionCondition>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _icon_sprite = _o.IconSprite == null ? default(StringOffset) : builder.CreateString(_o.IconSprite);
    return CreateFunctionCondition(
      builder,
      _o.FunctionId,
      _name,
      _o.IsOn,
      _o.OpenConditionId,
      _o.ShowUiType,
      _o.Delay,
      _title,
      _desc,
      _icon,
      _icon_sprite);
  }
}

public class FunctionConditionT
{
  [Newtonsoft.Json.JsonProperty("function_id")]
  public int FunctionId { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("is_on")]
  public bool IsOn { get; set; }
  [Newtonsoft.Json.JsonProperty("open_condition_id")]
  public int OpenConditionId { get; set; }
  [Newtonsoft.Json.JsonProperty("show_ui_type")]
  public int ShowUiType { get; set; }
  [Newtonsoft.Json.JsonProperty("delay")]
  public int Delay { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_sprite")]
  public string IconSprite { get; set; }

  public FunctionConditionT() {
    this.FunctionId = 0;
    this.Name = null;
    this.IsOn = false;
    this.OpenConditionId = 0;
    this.ShowUiType = 0;
    this.Delay = 101;
    this.Title = null;
    this.Desc = null;
    this.Icon = null;
    this.IconSprite = null;
  }
}


static public class FunctionConditionVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*FunctionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*IsOn*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*OpenConditionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*ShowUiType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*Delay*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*Title*/, false)
      && verifier.VerifyString(tablePos, 18 /*Desc*/, false)
      && verifier.VerifyString(tablePos, 20 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 22 /*IconSprite*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
