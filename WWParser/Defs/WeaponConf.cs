// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct WeaponConf : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static WeaponConf GetRootAsWeaponConf(ByteBuffer _bb) { return GetRootAsWeaponConf(_bb, new WeaponConf()); }
  public static WeaponConf GetRootAsWeaponConf(ByteBuffer _bb, WeaponConf obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WeaponConf __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ItemId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string WeaponName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWeaponNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetWeaponNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetWeaponNameArray() { return __p.__vector_as_array<byte>(6); }
  public int QualityId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WeaponType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ModelId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TransformId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Models(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ModelsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetModelsBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetModelsBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetModelsArray() { return __p.__vector_as_array<int>(16); }
  public int ResonLevelLimit { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.ConfigPropValue? FirstPropId { get { int o = __p.__offset(20); return o != 0 ? (WWParser.Defs.ConfigPropValue?)(new WWParser.Defs.ConfigPropValue()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int FirstCurve { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.ConfigPropValue? SecondPropId { get { int o = __p.__offset(24); return o != 0 ? (WWParser.Defs.ConfigPropValue?)(new WWParser.Defs.ConfigPropValue()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int SecondCurve { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ResonId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LevelId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BreachId { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Desc { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(34); }
  public WWParser.Defs.StringArray? DescParams(int j) { int o = __p.__offset(36); return o != 0 ? (WWParser.Defs.StringArray?)(new WWParser.Defs.StringArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DescParamsLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string TypeDescription { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeDescriptionBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetTypeDescriptionBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetTypeDescriptionArray() { return __p.__vector_as_array<byte>(38); }
  public string AttributesDescription { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributesDescriptionBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetAttributesDescriptionBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetAttributesDescriptionArray() { return __p.__vector_as_array<byte>(40); }
  public string BgDescription { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgDescriptionBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetBgDescriptionBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetBgDescriptionArray() { return __p.__vector_as_array<byte>(42); }
  public string Icon { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(44); }
  public string IconMiddle { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconMiddleBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetIconMiddleBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetIconMiddleArray() { return __p.__vector_as_array<byte>(46); }
  public string IconSmall { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconSmallBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetIconSmallBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetIconSmallArray() { return __p.__vector_as_array<byte>(48); }
  public string Mesh { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMeshBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetMeshBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetMeshArray() { return __p.__vector_as_array<byte>(50); }
  public int MaxCapcity { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)999999999; } }
  public int ItemAccess(int j) { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ItemAccessLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItemAccessBytes() { return __p.__vector_as_span<int>(54, 4); }
#else
  public ArraySegment<byte>? GetItemAccessBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public int[] GetItemAccessArray() { return __p.__vector_as_array<int>(54); }
  public int ObtainedShow { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ObtainedShowDescription { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObtainedShowDescriptionBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetObtainedShowDescriptionBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetObtainedShowDescriptionArray() { return __p.__vector_as_array<byte>(58); }
  public int NumLimit { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ShowInBag { get { int o = __p.__offset(62); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int SortIndex { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ResonanceIcon { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResonanceIconBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetResonanceIconBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetResonanceIconArray() { return __p.__vector_as_array<byte>(66); }
  public float HiddenTime { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)10.0f; } }
  public bool Destructible { get { int o = __p.__offset(70); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int RedDotDisableRule { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.WeaponConf> CreateWeaponConf(FlatBufferBuilder builder,
      int item_id = 0,
      StringOffset weapon_nameOffset = default(StringOffset),
      int quality_id = 0,
      int weapon_type = 0,
      int model_id = 0,
      int transform_id = 0,
      VectorOffset modelsOffset = default(VectorOffset),
      int reson_level_limit = 0,
      Offset<WWParser.Defs.ConfigPropValue> first_prop_idOffset = default(Offset<WWParser.Defs.ConfigPropValue>),
      int first_curve = 0,
      Offset<WWParser.Defs.ConfigPropValue> second_prop_idOffset = default(Offset<WWParser.Defs.ConfigPropValue>),
      int second_curve = 0,
      int reson_id = 0,
      int level_id = 0,
      int breach_id = 0,
      StringOffset descOffset = default(StringOffset),
      VectorOffset desc_paramsOffset = default(VectorOffset),
      StringOffset type_descriptionOffset = default(StringOffset),
      StringOffset attributes_descriptionOffset = default(StringOffset),
      StringOffset bg_descriptionOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset icon_middleOffset = default(StringOffset),
      StringOffset icon_smallOffset = default(StringOffset),
      StringOffset meshOffset = default(StringOffset),
      int max_capcity = 999999999,
      VectorOffset item_accessOffset = default(VectorOffset),
      int obtained_show = 0,
      StringOffset obtained_show_descriptionOffset = default(StringOffset),
      int num_limit = 0,
      bool show_in_bag = false,
      int sort_index = 0,
      StringOffset resonance_iconOffset = default(StringOffset),
      float hidden_time = 10.0f,
      bool destructible = false,
      int red_dot_disable_rule = 0) {
    builder.StartTable(35);
    WeaponConf.AddRedDotDisableRule(builder, red_dot_disable_rule);
    WeaponConf.AddHiddenTime(builder, hidden_time);
    WeaponConf.AddResonanceIcon(builder, resonance_iconOffset);
    WeaponConf.AddSortIndex(builder, sort_index);
    WeaponConf.AddNumLimit(builder, num_limit);
    WeaponConf.AddObtainedShowDescription(builder, obtained_show_descriptionOffset);
    WeaponConf.AddObtainedShow(builder, obtained_show);
    WeaponConf.AddItemAccess(builder, item_accessOffset);
    WeaponConf.AddMaxCapcity(builder, max_capcity);
    WeaponConf.AddMesh(builder, meshOffset);
    WeaponConf.AddIconSmall(builder, icon_smallOffset);
    WeaponConf.AddIconMiddle(builder, icon_middleOffset);
    WeaponConf.AddIcon(builder, iconOffset);
    WeaponConf.AddBgDescription(builder, bg_descriptionOffset);
    WeaponConf.AddAttributesDescription(builder, attributes_descriptionOffset);
    WeaponConf.AddTypeDescription(builder, type_descriptionOffset);
    WeaponConf.AddDescParams(builder, desc_paramsOffset);
    WeaponConf.AddDesc(builder, descOffset);
    WeaponConf.AddBreachId(builder, breach_id);
    WeaponConf.AddLevelId(builder, level_id);
    WeaponConf.AddResonId(builder, reson_id);
    WeaponConf.AddSecondCurve(builder, second_curve);
    WeaponConf.AddSecondPropId(builder, second_prop_idOffset);
    WeaponConf.AddFirstCurve(builder, first_curve);
    WeaponConf.AddFirstPropId(builder, first_prop_idOffset);
    WeaponConf.AddResonLevelLimit(builder, reson_level_limit);
    WeaponConf.AddModels(builder, modelsOffset);
    WeaponConf.AddTransformId(builder, transform_id);
    WeaponConf.AddModelId(builder, model_id);
    WeaponConf.AddWeaponType(builder, weapon_type);
    WeaponConf.AddQualityId(builder, quality_id);
    WeaponConf.AddWeaponName(builder, weapon_nameOffset);
    WeaponConf.AddItemId(builder, item_id);
    WeaponConf.AddDestructible(builder, destructible);
    WeaponConf.AddShowInBag(builder, show_in_bag);
    return WeaponConf.EndWeaponConf(builder);
  }

  public static void StartWeaponConf(FlatBufferBuilder builder) { builder.StartTable(35); }
  public static void AddItemId(FlatBufferBuilder builder, int itemId) { builder.AddInt(0, itemId, 0); }
  public static void AddWeaponName(FlatBufferBuilder builder, StringOffset weaponNameOffset) { builder.AddOffset(1, weaponNameOffset.Value, 0); }
  public static void AddQualityId(FlatBufferBuilder builder, int qualityId) { builder.AddInt(2, qualityId, 0); }
  public static void AddWeaponType(FlatBufferBuilder builder, int weaponType) { builder.AddInt(3, weaponType, 0); }
  public static void AddModelId(FlatBufferBuilder builder, int modelId) { builder.AddInt(4, modelId, 0); }
  public static void AddTransformId(FlatBufferBuilder builder, int transformId) { builder.AddInt(5, transformId, 0); }
  public static void AddModels(FlatBufferBuilder builder, VectorOffset modelsOffset) { builder.AddOffset(6, modelsOffset.Value, 0); }
  public static VectorOffset CreateModelsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateModelsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateModelsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateModelsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartModelsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddResonLevelLimit(FlatBufferBuilder builder, int resonLevelLimit) { builder.AddInt(7, resonLevelLimit, 0); }
  public static void AddFirstPropId(FlatBufferBuilder builder, Offset<WWParser.Defs.ConfigPropValue> firstPropIdOffset) { builder.AddOffset(8, firstPropIdOffset.Value, 0); }
  public static void AddFirstCurve(FlatBufferBuilder builder, int firstCurve) { builder.AddInt(9, firstCurve, 0); }
  public static void AddSecondPropId(FlatBufferBuilder builder, Offset<WWParser.Defs.ConfigPropValue> secondPropIdOffset) { builder.AddOffset(10, secondPropIdOffset.Value, 0); }
  public static void AddSecondCurve(FlatBufferBuilder builder, int secondCurve) { builder.AddInt(11, secondCurve, 0); }
  public static void AddResonId(FlatBufferBuilder builder, int resonId) { builder.AddInt(12, resonId, 0); }
  public static void AddLevelId(FlatBufferBuilder builder, int levelId) { builder.AddInt(13, levelId, 0); }
  public static void AddBreachId(FlatBufferBuilder builder, int breachId) { builder.AddInt(14, breachId, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(15, descOffset.Value, 0); }
  public static void AddDescParams(FlatBufferBuilder builder, VectorOffset descParamsOffset) { builder.AddOffset(16, descParamsOffset.Value, 0); }
  public static VectorOffset CreateDescParamsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.StringArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDescParamsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.StringArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDescParamsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.StringArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDescParamsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.StringArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDescParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTypeDescription(FlatBufferBuilder builder, StringOffset typeDescriptionOffset) { builder.AddOffset(17, typeDescriptionOffset.Value, 0); }
  public static void AddAttributesDescription(FlatBufferBuilder builder, StringOffset attributesDescriptionOffset) { builder.AddOffset(18, attributesDescriptionOffset.Value, 0); }
  public static void AddBgDescription(FlatBufferBuilder builder, StringOffset bgDescriptionOffset) { builder.AddOffset(19, bgDescriptionOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(20, iconOffset.Value, 0); }
  public static void AddIconMiddle(FlatBufferBuilder builder, StringOffset iconMiddleOffset) { builder.AddOffset(21, iconMiddleOffset.Value, 0); }
  public static void AddIconSmall(FlatBufferBuilder builder, StringOffset iconSmallOffset) { builder.AddOffset(22, iconSmallOffset.Value, 0); }
  public static void AddMesh(FlatBufferBuilder builder, StringOffset meshOffset) { builder.AddOffset(23, meshOffset.Value, 0); }
  public static void AddMaxCapcity(FlatBufferBuilder builder, int maxCapcity) { builder.AddInt(24, maxCapcity, 999999999); }
  public static void AddItemAccess(FlatBufferBuilder builder, VectorOffset itemAccessOffset) { builder.AddOffset(25, itemAccessOffset.Value, 0); }
  public static VectorOffset CreateItemAccessVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItemAccessVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemAccessVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemAccessVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartItemAccessVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddObtainedShow(FlatBufferBuilder builder, int obtainedShow) { builder.AddInt(26, obtainedShow, 0); }
  public static void AddObtainedShowDescription(FlatBufferBuilder builder, StringOffset obtainedShowDescriptionOffset) { builder.AddOffset(27, obtainedShowDescriptionOffset.Value, 0); }
  public static void AddNumLimit(FlatBufferBuilder builder, int numLimit) { builder.AddInt(28, numLimit, 0); }
  public static void AddShowInBag(FlatBufferBuilder builder, bool showInBag) { builder.AddBool(29, showInBag, false); }
  public static void AddSortIndex(FlatBufferBuilder builder, int sortIndex) { builder.AddInt(30, sortIndex, 0); }
  public static void AddResonanceIcon(FlatBufferBuilder builder, StringOffset resonanceIconOffset) { builder.AddOffset(31, resonanceIconOffset.Value, 0); }
  public static void AddHiddenTime(FlatBufferBuilder builder, float hiddenTime) { builder.AddFloat(32, hiddenTime, 10.0f); }
  public static void AddDestructible(FlatBufferBuilder builder, bool destructible) { builder.AddBool(33, destructible, false); }
  public static void AddRedDotDisableRule(FlatBufferBuilder builder, int redDotDisableRule) { builder.AddInt(34, redDotDisableRule, 0); }
  public static Offset<WWParser.Defs.WeaponConf> EndWeaponConf(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.WeaponConf>(o);
  }
  public WeaponConfT UnPack() {
    var _o = new WeaponConfT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WeaponConfT _o) {
    _o.ItemId = this.ItemId;
    _o.WeaponName = this.WeaponName;
    _o.QualityId = this.QualityId;
    _o.WeaponType = this.WeaponType;
    _o.ModelId = this.ModelId;
    _o.TransformId = this.TransformId;
    _o.Models = new List<int>();
    for (var _j = 0; _j < this.ModelsLength; ++_j) {_o.Models.Add(this.Models(_j));}
    _o.ResonLevelLimit = this.ResonLevelLimit;
    _o.FirstPropId = this.FirstPropId.HasValue ? this.FirstPropId.Value.UnPack() : null;
    _o.FirstCurve = this.FirstCurve;
    _o.SecondPropId = this.SecondPropId.HasValue ? this.SecondPropId.Value.UnPack() : null;
    _o.SecondCurve = this.SecondCurve;
    _o.ResonId = this.ResonId;
    _o.LevelId = this.LevelId;
    _o.BreachId = this.BreachId;
    _o.Desc = this.Desc;
    _o.DescParams = new List<WWParser.Defs.StringArrayT>();
    for (var _j = 0; _j < this.DescParamsLength; ++_j) {_o.DescParams.Add(this.DescParams(_j).HasValue ? this.DescParams(_j).Value.UnPack() : null);}
    _o.TypeDescription = this.TypeDescription;
    _o.AttributesDescription = this.AttributesDescription;
    _o.BgDescription = this.BgDescription;
    _o.Icon = this.Icon;
    _o.IconMiddle = this.IconMiddle;
    _o.IconSmall = this.IconSmall;
    _o.Mesh = this.Mesh;
    _o.MaxCapcity = this.MaxCapcity;
    _o.ItemAccess = new List<int>();
    for (var _j = 0; _j < this.ItemAccessLength; ++_j) {_o.ItemAccess.Add(this.ItemAccess(_j));}
    _o.ObtainedShow = this.ObtainedShow;
    _o.ObtainedShowDescription = this.ObtainedShowDescription;
    _o.NumLimit = this.NumLimit;
    _o.ShowInBag = this.ShowInBag;
    _o.SortIndex = this.SortIndex;
    _o.ResonanceIcon = this.ResonanceIcon;
    _o.HiddenTime = this.HiddenTime;
    _o.Destructible = this.Destructible;
    _o.RedDotDisableRule = this.RedDotDisableRule;
  }
  public static Offset<WWParser.Defs.WeaponConf> Pack(FlatBufferBuilder builder, WeaponConfT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.WeaponConf>);
    var _weapon_name = _o.WeaponName == null ? default(StringOffset) : builder.CreateString(_o.WeaponName);
    var _models = default(VectorOffset);
    if (_o.Models != null) {
      var __models = _o.Models.ToArray();
      _models = CreateModelsVector(builder, __models);
    }
    var _first_prop_id = _o.FirstPropId == null ? default(Offset<WWParser.Defs.ConfigPropValue>) : WWParser.Defs.ConfigPropValue.Pack(builder, _o.FirstPropId);
    var _second_prop_id = _o.SecondPropId == null ? default(Offset<WWParser.Defs.ConfigPropValue>) : WWParser.Defs.ConfigPropValue.Pack(builder, _o.SecondPropId);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    var _desc_params = default(VectorOffset);
    if (_o.DescParams != null) {
      var __desc_params = new Offset<WWParser.Defs.StringArray>[_o.DescParams.Count];
      for (var _j = 0; _j < __desc_params.Length; ++_j) { __desc_params[_j] = WWParser.Defs.StringArray.Pack(builder, _o.DescParams[_j]); }
      _desc_params = CreateDescParamsVector(builder, __desc_params);
    }
    var _type_description = _o.TypeDescription == null ? default(StringOffset) : builder.CreateString(_o.TypeDescription);
    var _attributes_description = _o.AttributesDescription == null ? default(StringOffset) : builder.CreateString(_o.AttributesDescription);
    var _bg_description = _o.BgDescription == null ? default(StringOffset) : builder.CreateString(_o.BgDescription);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _icon_middle = _o.IconMiddle == null ? default(StringOffset) : builder.CreateString(_o.IconMiddle);
    var _icon_small = _o.IconSmall == null ? default(StringOffset) : builder.CreateString(_o.IconSmall);
    var _mesh = _o.Mesh == null ? default(StringOffset) : builder.CreateString(_o.Mesh);
    var _item_access = default(VectorOffset);
    if (_o.ItemAccess != null) {
      var __item_access = _o.ItemAccess.ToArray();
      _item_access = CreateItemAccessVector(builder, __item_access);
    }
    var _obtained_show_description = _o.ObtainedShowDescription == null ? default(StringOffset) : builder.CreateString(_o.ObtainedShowDescription);
    var _resonance_icon = _o.ResonanceIcon == null ? default(StringOffset) : builder.CreateString(_o.ResonanceIcon);
    return CreateWeaponConf(
      builder,
      _o.ItemId,
      _weapon_name,
      _o.QualityId,
      _o.WeaponType,
      _o.ModelId,
      _o.TransformId,
      _models,
      _o.ResonLevelLimit,
      _first_prop_id,
      _o.FirstCurve,
      _second_prop_id,
      _o.SecondCurve,
      _o.ResonId,
      _o.LevelId,
      _o.BreachId,
      _desc,
      _desc_params,
      _type_description,
      _attributes_description,
      _bg_description,
      _icon,
      _icon_middle,
      _icon_small,
      _mesh,
      _o.MaxCapcity,
      _item_access,
      _o.ObtainedShow,
      _obtained_show_description,
      _o.NumLimit,
      _o.ShowInBag,
      _o.SortIndex,
      _resonance_icon,
      _o.HiddenTime,
      _o.Destructible,
      _o.RedDotDisableRule);
  }
}

public class WeaponConfT
{
  [Newtonsoft.Json.JsonProperty("item_id")]
  public int ItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("weapon_name")]
  public string WeaponName { get; set; }
  [Newtonsoft.Json.JsonProperty("quality_id")]
  public int QualityId { get; set; }
  [Newtonsoft.Json.JsonProperty("weapon_type")]
  public int WeaponType { get; set; }
  [Newtonsoft.Json.JsonProperty("model_id")]
  public int ModelId { get; set; }
  [Newtonsoft.Json.JsonProperty("transform_id")]
  public int TransformId { get; set; }
  [Newtonsoft.Json.JsonProperty("models")]
  public List<int> Models { get; set; }
  [Newtonsoft.Json.JsonProperty("reson_level_limit")]
  public int ResonLevelLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("first_prop_id")]
  public WWParser.Defs.ConfigPropValueT FirstPropId { get; set; }
  [Newtonsoft.Json.JsonProperty("first_curve")]
  public int FirstCurve { get; set; }
  [Newtonsoft.Json.JsonProperty("second_prop_id")]
  public WWParser.Defs.ConfigPropValueT SecondPropId { get; set; }
  [Newtonsoft.Json.JsonProperty("second_curve")]
  public int SecondCurve { get; set; }
  [Newtonsoft.Json.JsonProperty("reson_id")]
  public int ResonId { get; set; }
  [Newtonsoft.Json.JsonProperty("level_id")]
  public int LevelId { get; set; }
  [Newtonsoft.Json.JsonProperty("breach_id")]
  public int BreachId { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }
  [Newtonsoft.Json.JsonProperty("desc_params")]
  public List<WWParser.Defs.StringArrayT> DescParams { get; set; }
  [Newtonsoft.Json.JsonProperty("type_description")]
  public string TypeDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("attributes_description")]
  public string AttributesDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("bg_description")]
  public string BgDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_middle")]
  public string IconMiddle { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_small")]
  public string IconSmall { get; set; }
  [Newtonsoft.Json.JsonProperty("mesh")]
  public string Mesh { get; set; }
  [Newtonsoft.Json.JsonProperty("max_capcity")]
  public int MaxCapcity { get; set; }
  [Newtonsoft.Json.JsonProperty("item_access")]
  public List<int> ItemAccess { get; set; }
  [Newtonsoft.Json.JsonProperty("obtained_show")]
  public int ObtainedShow { get; set; }
  [Newtonsoft.Json.JsonProperty("obtained_show_description")]
  public string ObtainedShowDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("num_limit")]
  public int NumLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("show_in_bag")]
  public bool ShowInBag { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_index")]
  public int SortIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("resonance_icon")]
  public string ResonanceIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("hidden_time")]
  public float HiddenTime { get; set; }
  [Newtonsoft.Json.JsonProperty("destructible")]
  public bool Destructible { get; set; }
  [Newtonsoft.Json.JsonProperty("red_dot_disable_rule")]
  public int RedDotDisableRule { get; set; }

  public WeaponConfT() {
    this.ItemId = 0;
    this.WeaponName = null;
    this.QualityId = 0;
    this.WeaponType = 0;
    this.ModelId = 0;
    this.TransformId = 0;
    this.Models = null;
    this.ResonLevelLimit = 0;
    this.FirstPropId = null;
    this.FirstCurve = 0;
    this.SecondPropId = null;
    this.SecondCurve = 0;
    this.ResonId = 0;
    this.LevelId = 0;
    this.BreachId = 0;
    this.Desc = null;
    this.DescParams = null;
    this.TypeDescription = null;
    this.AttributesDescription = null;
    this.BgDescription = null;
    this.Icon = null;
    this.IconMiddle = null;
    this.IconSmall = null;
    this.Mesh = null;
    this.MaxCapcity = 999999999;
    this.ItemAccess = null;
    this.ObtainedShow = 0;
    this.ObtainedShowDescription = null;
    this.NumLimit = 0;
    this.ShowInBag = false;
    this.SortIndex = 0;
    this.ResonanceIcon = null;
    this.HiddenTime = 10.0f;
    this.Destructible = false;
    this.RedDotDisableRule = 0;
  }
}


static public class WeaponConfVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*WeaponName*/, false)
      && verifier.VerifyField(tablePos, 8 /*QualityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*WeaponType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*ModelId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*TransformId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*Models*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 18 /*ResonLevelLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 20 /*FirstPropId*/, WWParser.Defs.ConfigPropValueVerify.Verify, false)
      && verifier.VerifyField(tablePos, 22 /*FirstCurve*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 24 /*SecondPropId*/, WWParser.Defs.ConfigPropValueVerify.Verify, false)
      && verifier.VerifyField(tablePos, 26 /*SecondCurve*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*ResonId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*LevelId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*BreachId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 34 /*Desc*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 36 /*DescParams*/, WWParser.Defs.StringArrayVerify.Verify, false)
      && verifier.VerifyString(tablePos, 38 /*TypeDescription*/, false)
      && verifier.VerifyString(tablePos, 40 /*AttributesDescription*/, false)
      && verifier.VerifyString(tablePos, 42 /*BgDescription*/, false)
      && verifier.VerifyString(tablePos, 44 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 46 /*IconMiddle*/, false)
      && verifier.VerifyString(tablePos, 48 /*IconSmall*/, false)
      && verifier.VerifyString(tablePos, 50 /*Mesh*/, false)
      && verifier.VerifyField(tablePos, 52 /*MaxCapcity*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 54 /*ItemAccess*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 56 /*ObtainedShow*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 58 /*ObtainedShowDescription*/, false)
      && verifier.VerifyField(tablePos, 60 /*NumLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*ShowInBag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 64 /*SortIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 66 /*ResonanceIcon*/, false)
      && verifier.VerifyField(tablePos, 68 /*HiddenTime*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 70 /*Destructible*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 72 /*RedDotDisableRule*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
