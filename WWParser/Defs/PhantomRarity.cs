// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PhantomRarity : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PhantomRarity GetRootAsPhantomRarity(ByteBuffer _bb) { return GetRootAsPhantomRarity(_bb, new PhantomRarity()); }
  public static PhantomRarity GetRootAsPhantomRarity(ByteBuffer _bb, PhantomRarity obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PhantomRarity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Rare { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Cost { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Desc { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(8); }
  public WWParser.Defs.DicIntInt? PolishCost(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PolishCostLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.PhantomRarity> CreatePhantomRarity(FlatBufferBuilder builder,
      int rare = 0,
      int cost = 0,
      StringOffset descOffset = default(StringOffset),
      VectorOffset polish_costOffset = default(VectorOffset)) {
    builder.StartTable(4);
    PhantomRarity.AddPolishCost(builder, polish_costOffset);
    PhantomRarity.AddDesc(builder, descOffset);
    PhantomRarity.AddCost(builder, cost);
    PhantomRarity.AddRare(builder, rare);
    return PhantomRarity.EndPhantomRarity(builder);
  }

  public static void StartPhantomRarity(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddRare(FlatBufferBuilder builder, int rare) { builder.AddInt(0, rare, 0); }
  public static void AddCost(FlatBufferBuilder builder, int cost) { builder.AddInt(1, cost, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(2, descOffset.Value, 0); }
  public static void AddPolishCost(FlatBufferBuilder builder, VectorOffset polishCostOffset) { builder.AddOffset(3, polishCostOffset.Value, 0); }
  public static VectorOffset CreatePolishCostVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePolishCostVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePolishCostVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePolishCostVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPolishCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.PhantomRarity> EndPhantomRarity(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PhantomRarity>(o);
  }
  public PhantomRarityT UnPack() {
    var _o = new PhantomRarityT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PhantomRarityT _o) {
    _o.Rare = this.Rare;
    _o.Cost = this.Cost;
    _o.Desc = this.Desc;
    _o.PolishCost = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.PolishCostLength; ++_j) {_o.PolishCost.Add(this.PolishCost(_j).HasValue ? this.PolishCost(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.PhantomRarity> Pack(FlatBufferBuilder builder, PhantomRarityT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PhantomRarity>);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    var _polish_cost = default(VectorOffset);
    if (_o.PolishCost != null) {
      var __polish_cost = new Offset<WWParser.Defs.DicIntInt>[_o.PolishCost.Count];
      for (var _j = 0; _j < __polish_cost.Length; ++_j) { __polish_cost[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.PolishCost[_j]); }
      _polish_cost = CreatePolishCostVector(builder, __polish_cost);
    }
    return CreatePhantomRarity(
      builder,
      _o.Rare,
      _o.Cost,
      _desc,
      _polish_cost);
  }
}

public class PhantomRarityT
{
  [Newtonsoft.Json.JsonProperty("rare")]
  public int Rare { get; set; }
  [Newtonsoft.Json.JsonProperty("cost")]
  public int Cost { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }
  [Newtonsoft.Json.JsonProperty("polish_cost")]
  public List<WWParser.Defs.DicIntIntT> PolishCost { get; set; }

  public PhantomRarityT() {
    this.Rare = 0;
    this.Cost = 0;
    this.Desc = null;
    this.PolishCost = null;
  }
}


static public class PhantomRarityVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Rare*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Cost*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Desc*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*PolishCost*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
