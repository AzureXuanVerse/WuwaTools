// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ExploreReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ExploreReward GetRootAsExploreReward(ByteBuffer _bb) { return GetRootAsExploreReward(_bb, new ExploreReward()); }
  public static ExploreReward GetRootAsExploreReward(ByteBuffer _bb, ExploreReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ExploreReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Country { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExploreLevel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NeedScore { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Drop { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShowItem { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ScoreName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScoreNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetScoreNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetScoreNameArray() { return __p.__vector_as_array<byte>(16); }
  public string ScoreTexturePath { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScoreTexturePathBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetScoreTexturePathBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetScoreTexturePathArray() { return __p.__vector_as_array<byte>(18); }
  public bool Show { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Pic { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPicBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetPicBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetPicArray() { return __p.__vector_as_array<byte>(22); }
  public string RewardName { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRewardNameBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetRewardNameBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetRewardNameArray() { return __p.__vector_as_array<byte>(24); }
  public string Reward { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRewardBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetRewardBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetRewardArray() { return __p.__vector_as_array<byte>(26); }
  public int Help { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.ExploreReward> CreateExploreReward(FlatBufferBuilder builder,
      int id = 0,
      int country = 0,
      int explore_level = 0,
      int need_score = 0,
      int drop = 0,
      int show_item = 0,
      StringOffset score_nameOffset = default(StringOffset),
      StringOffset score_texture_pathOffset = default(StringOffset),
      bool show = false,
      StringOffset picOffset = default(StringOffset),
      StringOffset reward_nameOffset = default(StringOffset),
      StringOffset rewardOffset = default(StringOffset),
      int help = 0) {
    builder.StartTable(13);
    ExploreReward.AddHelp(builder, help);
    ExploreReward.AddReward(builder, rewardOffset);
    ExploreReward.AddRewardName(builder, reward_nameOffset);
    ExploreReward.AddPic(builder, picOffset);
    ExploreReward.AddScoreTexturePath(builder, score_texture_pathOffset);
    ExploreReward.AddScoreName(builder, score_nameOffset);
    ExploreReward.AddShowItem(builder, show_item);
    ExploreReward.AddDrop(builder, drop);
    ExploreReward.AddNeedScore(builder, need_score);
    ExploreReward.AddExploreLevel(builder, explore_level);
    ExploreReward.AddCountry(builder, country);
    ExploreReward.AddId(builder, id);
    ExploreReward.AddShow(builder, show);
    return ExploreReward.EndExploreReward(builder);
  }

  public static void StartExploreReward(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddCountry(FlatBufferBuilder builder, int country) { builder.AddInt(1, country, 0); }
  public static void AddExploreLevel(FlatBufferBuilder builder, int exploreLevel) { builder.AddInt(2, exploreLevel, 0); }
  public static void AddNeedScore(FlatBufferBuilder builder, int needScore) { builder.AddInt(3, needScore, 0); }
  public static void AddDrop(FlatBufferBuilder builder, int drop) { builder.AddInt(4, drop, 0); }
  public static void AddShowItem(FlatBufferBuilder builder, int showItem) { builder.AddInt(5, showItem, 0); }
  public static void AddScoreName(FlatBufferBuilder builder, StringOffset scoreNameOffset) { builder.AddOffset(6, scoreNameOffset.Value, 0); }
  public static void AddScoreTexturePath(FlatBufferBuilder builder, StringOffset scoreTexturePathOffset) { builder.AddOffset(7, scoreTexturePathOffset.Value, 0); }
  public static void AddShow(FlatBufferBuilder builder, bool show) { builder.AddBool(8, show, false); }
  public static void AddPic(FlatBufferBuilder builder, StringOffset picOffset) { builder.AddOffset(9, picOffset.Value, 0); }
  public static void AddRewardName(FlatBufferBuilder builder, StringOffset rewardNameOffset) { builder.AddOffset(10, rewardNameOffset.Value, 0); }
  public static void AddReward(FlatBufferBuilder builder, StringOffset rewardOffset) { builder.AddOffset(11, rewardOffset.Value, 0); }
  public static void AddHelp(FlatBufferBuilder builder, int help) { builder.AddInt(12, help, 0); }
  public static Offset<WWParser.Defs.ExploreReward> EndExploreReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ExploreReward>(o);
  }
  public ExploreRewardT UnPack() {
    var _o = new ExploreRewardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ExploreRewardT _o) {
    _o.Id = this.Id;
    _o.Country = this.Country;
    _o.ExploreLevel = this.ExploreLevel;
    _o.NeedScore = this.NeedScore;
    _o.Drop = this.Drop;
    _o.ShowItem = this.ShowItem;
    _o.ScoreName = this.ScoreName;
    _o.ScoreTexturePath = this.ScoreTexturePath;
    _o.Show = this.Show;
    _o.Pic = this.Pic;
    _o.RewardName = this.RewardName;
    _o.Reward = this.Reward;
    _o.Help = this.Help;
  }
  public static Offset<WWParser.Defs.ExploreReward> Pack(FlatBufferBuilder builder, ExploreRewardT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ExploreReward>);
    var _score_name = _o.ScoreName == null ? default(StringOffset) : builder.CreateString(_o.ScoreName);
    var _score_texture_path = _o.ScoreTexturePath == null ? default(StringOffset) : builder.CreateString(_o.ScoreTexturePath);
    var _pic = _o.Pic == null ? default(StringOffset) : builder.CreateString(_o.Pic);
    var _reward_name = _o.RewardName == null ? default(StringOffset) : builder.CreateString(_o.RewardName);
    var _reward = _o.Reward == null ? default(StringOffset) : builder.CreateString(_o.Reward);
    return CreateExploreReward(
      builder,
      _o.Id,
      _o.Country,
      _o.ExploreLevel,
      _o.NeedScore,
      _o.Drop,
      _o.ShowItem,
      _score_name,
      _score_texture_path,
      _o.Show,
      _pic,
      _reward_name,
      _reward,
      _o.Help);
  }
}

public class ExploreRewardT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("country")]
  public int Country { get; set; }
  [Newtonsoft.Json.JsonProperty("explore_level")]
  public int ExploreLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("need_score")]
  public int NeedScore { get; set; }
  [Newtonsoft.Json.JsonProperty("drop")]
  public int Drop { get; set; }
  [Newtonsoft.Json.JsonProperty("show_item")]
  public int ShowItem { get; set; }
  [Newtonsoft.Json.JsonProperty("score_name")]
  public string ScoreName { get; set; }
  [Newtonsoft.Json.JsonProperty("score_texture_path")]
  public string ScoreTexturePath { get; set; }
  [Newtonsoft.Json.JsonProperty("show")]
  public bool Show { get; set; }
  [Newtonsoft.Json.JsonProperty("pic")]
  public string Pic { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_name")]
  public string RewardName { get; set; }
  [Newtonsoft.Json.JsonProperty("reward")]
  public string Reward { get; set; }
  [Newtonsoft.Json.JsonProperty("help")]
  public int Help { get; set; }

  public ExploreRewardT() {
    this.Id = 0;
    this.Country = 0;
    this.ExploreLevel = 0;
    this.NeedScore = 0;
    this.Drop = 0;
    this.ShowItem = 0;
    this.ScoreName = null;
    this.ScoreTexturePath = null;
    this.Show = false;
    this.Pic = null;
    this.RewardName = null;
    this.Reward = null;
    this.Help = 0;
  }
}


static public class ExploreRewardVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Country*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ExploreLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*NeedScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Drop*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ShowItem*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*ScoreName*/, false)
      && verifier.VerifyString(tablePos, 18 /*ScoreTexturePath*/, false)
      && verifier.VerifyField(tablePos, 20 /*Show*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 22 /*Pic*/, false)
      && verifier.VerifyString(tablePos, 24 /*RewardName*/, false)
      && verifier.VerifyString(tablePos, 26 /*Reward*/, false)
      && verifier.VerifyField(tablePos, 28 /*Help*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
