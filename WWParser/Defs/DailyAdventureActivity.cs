// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DailyAdventureActivity : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DailyAdventureActivity GetRootAsDailyAdventureActivity(ByteBuffer _bb) { return GetRootAsDailyAdventureActivity(_bb, new DailyAdventureActivity()); }
  public static DailyAdventureActivity GetRootAsDailyAdventureActivity(ByteBuffer _bb, DailyAdventureActivity obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DailyAdventureActivity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ActivityId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string AreaTitle { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAreaTitleBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetAreaTitleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetAreaTitleArray() { return __p.__vector_as_array<byte>(6); }
  public string AreaDescription { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAreaDescriptionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAreaDescriptionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAreaDescriptionArray() { return __p.__vector_as_array<byte>(8); }
  public string AreaPic { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAreaPicBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetAreaPicBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetAreaPicArray() { return __p.__vector_as_array<byte>(10); }
  public int AreaDefaultMarkId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TaskList(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TaskListLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTaskListBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetTaskListBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetTaskListArray() { return __p.__vector_as_array<int>(14); }
  public int RewardList(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RewardListLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRewardListBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetRewardListBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetRewardListArray() { return __p.__vector_as_array<int>(16); }
  public int TaskRefreshNum { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)2; } }

  public static Offset<WWParser.Defs.DailyAdventureActivity> CreateDailyAdventureActivity(FlatBufferBuilder builder,
      int activity_id = 0,
      StringOffset area_titleOffset = default(StringOffset),
      StringOffset area_descriptionOffset = default(StringOffset),
      StringOffset area_picOffset = default(StringOffset),
      int area_default_mark_id = 0,
      VectorOffset task_listOffset = default(VectorOffset),
      VectorOffset reward_listOffset = default(VectorOffset),
      int task_refresh_num = 2) {
    builder.StartTable(8);
    DailyAdventureActivity.AddTaskRefreshNum(builder, task_refresh_num);
    DailyAdventureActivity.AddRewardList(builder, reward_listOffset);
    DailyAdventureActivity.AddTaskList(builder, task_listOffset);
    DailyAdventureActivity.AddAreaDefaultMarkId(builder, area_default_mark_id);
    DailyAdventureActivity.AddAreaPic(builder, area_picOffset);
    DailyAdventureActivity.AddAreaDescription(builder, area_descriptionOffset);
    DailyAdventureActivity.AddAreaTitle(builder, area_titleOffset);
    DailyAdventureActivity.AddActivityId(builder, activity_id);
    return DailyAdventureActivity.EndDailyAdventureActivity(builder);
  }

  public static void StartDailyAdventureActivity(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(0, activityId, 0); }
  public static void AddAreaTitle(FlatBufferBuilder builder, StringOffset areaTitleOffset) { builder.AddOffset(1, areaTitleOffset.Value, 0); }
  public static void AddAreaDescription(FlatBufferBuilder builder, StringOffset areaDescriptionOffset) { builder.AddOffset(2, areaDescriptionOffset.Value, 0); }
  public static void AddAreaPic(FlatBufferBuilder builder, StringOffset areaPicOffset) { builder.AddOffset(3, areaPicOffset.Value, 0); }
  public static void AddAreaDefaultMarkId(FlatBufferBuilder builder, int areaDefaultMarkId) { builder.AddInt(4, areaDefaultMarkId, 0); }
  public static void AddTaskList(FlatBufferBuilder builder, VectorOffset taskListOffset) { builder.AddOffset(5, taskListOffset.Value, 0); }
  public static VectorOffset CreateTaskListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTaskListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTaskListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTaskListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTaskListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardList(FlatBufferBuilder builder, VectorOffset rewardListOffset) { builder.AddOffset(6, rewardListOffset.Value, 0); }
  public static VectorOffset CreateRewardListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTaskRefreshNum(FlatBufferBuilder builder, int taskRefreshNum) { builder.AddInt(7, taskRefreshNum, 2); }
  public static Offset<WWParser.Defs.DailyAdventureActivity> EndDailyAdventureActivity(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DailyAdventureActivity>(o);
  }
  public DailyAdventureActivityT UnPack() {
    var _o = new DailyAdventureActivityT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DailyAdventureActivityT _o) {
    _o.ActivityId = this.ActivityId;
    _o.AreaTitle = this.AreaTitle;
    _o.AreaDescription = this.AreaDescription;
    _o.AreaPic = this.AreaPic;
    _o.AreaDefaultMarkId = this.AreaDefaultMarkId;
    _o.TaskList = new List<int>();
    for (var _j = 0; _j < this.TaskListLength; ++_j) {_o.TaskList.Add(this.TaskList(_j));}
    _o.RewardList = new List<int>();
    for (var _j = 0; _j < this.RewardListLength; ++_j) {_o.RewardList.Add(this.RewardList(_j));}
    _o.TaskRefreshNum = this.TaskRefreshNum;
  }
  public static Offset<WWParser.Defs.DailyAdventureActivity> Pack(FlatBufferBuilder builder, DailyAdventureActivityT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DailyAdventureActivity>);
    var _area_title = _o.AreaTitle == null ? default(StringOffset) : builder.CreateString(_o.AreaTitle);
    var _area_description = _o.AreaDescription == null ? default(StringOffset) : builder.CreateString(_o.AreaDescription);
    var _area_pic = _o.AreaPic == null ? default(StringOffset) : builder.CreateString(_o.AreaPic);
    var _task_list = default(VectorOffset);
    if (_o.TaskList != null) {
      var __task_list = _o.TaskList.ToArray();
      _task_list = CreateTaskListVector(builder, __task_list);
    }
    var _reward_list = default(VectorOffset);
    if (_o.RewardList != null) {
      var __reward_list = _o.RewardList.ToArray();
      _reward_list = CreateRewardListVector(builder, __reward_list);
    }
    return CreateDailyAdventureActivity(
      builder,
      _o.ActivityId,
      _area_title,
      _area_description,
      _area_pic,
      _o.AreaDefaultMarkId,
      _task_list,
      _reward_list,
      _o.TaskRefreshNum);
  }
}

public class DailyAdventureActivityT
{
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("area_title")]
  public string AreaTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("area_description")]
  public string AreaDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("area_pic")]
  public string AreaPic { get; set; }
  [Newtonsoft.Json.JsonProperty("area_default_mark_id")]
  public int AreaDefaultMarkId { get; set; }
  [Newtonsoft.Json.JsonProperty("task_list")]
  public List<int> TaskList { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_list")]
  public List<int> RewardList { get; set; }
  [Newtonsoft.Json.JsonProperty("task_refresh_num")]
  public int TaskRefreshNum { get; set; }

  public DailyAdventureActivityT() {
    this.ActivityId = 0;
    this.AreaTitle = null;
    this.AreaDescription = null;
    this.AreaPic = null;
    this.AreaDefaultMarkId = 0;
    this.TaskList = null;
    this.RewardList = null;
    this.TaskRefreshNum = 2;
  }
}


static public class DailyAdventureActivityVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*AreaTitle*/, false)
      && verifier.VerifyString(tablePos, 8 /*AreaDescription*/, false)
      && verifier.VerifyString(tablePos, 10 /*AreaPic*/, false)
      && verifier.VerifyField(tablePos, 12 /*AreaDefaultMarkId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*TaskList*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*RewardList*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 18 /*TaskRefreshNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
