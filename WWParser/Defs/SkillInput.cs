// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SkillInput : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SkillInput GetRootAsSkillInput(ByteBuffer _bb) { return GetRootAsSkillInput(_bb, new SkillInput()); }
  public static SkillInput GetRootAsSkillInput(ByteBuffer _bb, SkillInput obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillInput __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string InputArray(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int InputArrayLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int SkillArray(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SkillArrayLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSkillArrayBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetSkillArrayBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetSkillArrayArray() { return __p.__vector_as_array<int>(8); }
  public string Description { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<WWParser.Defs.SkillInput> CreateSkillInput(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset input_arrayOffset = default(VectorOffset),
      VectorOffset skill_arrayOffset = default(VectorOffset),
      StringOffset descriptionOffset = default(StringOffset)) {
    builder.StartTable(4);
    SkillInput.AddDescription(builder, descriptionOffset);
    SkillInput.AddSkillArray(builder, skill_arrayOffset);
    SkillInput.AddInputArray(builder, input_arrayOffset);
    SkillInput.AddId(builder, id);
    return SkillInput.EndSkillInput(builder);
  }

  public static void StartSkillInput(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddInputArray(FlatBufferBuilder builder, VectorOffset inputArrayOffset) { builder.AddOffset(1, inputArrayOffset.Value, 0); }
  public static VectorOffset CreateInputArrayVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInputArrayVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInputArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInputArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInputArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSkillArray(FlatBufferBuilder builder, VectorOffset skillArrayOffset) { builder.AddOffset(2, skillArrayOffset.Value, 0); }
  public static VectorOffset CreateSkillArrayVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSkillArrayVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSkillArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(3, descriptionOffset.Value, 0); }
  public static Offset<WWParser.Defs.SkillInput> EndSkillInput(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SkillInput>(o);
  }
  public SkillInputT UnPack() {
    var _o = new SkillInputT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillInputT _o) {
    _o.Id = this.Id;
    _o.InputArray = new List<string>();
    for (var _j = 0; _j < this.InputArrayLength; ++_j) {_o.InputArray.Add(this.InputArray(_j));}
    _o.SkillArray = new List<int>();
    for (var _j = 0; _j < this.SkillArrayLength; ++_j) {_o.SkillArray.Add(this.SkillArray(_j));}
    _o.Description = this.Description;
  }
  public static Offset<WWParser.Defs.SkillInput> Pack(FlatBufferBuilder builder, SkillInputT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SkillInput>);
    var _input_array = default(VectorOffset);
    if (_o.InputArray != null) {
      var __input_array = new StringOffset[_o.InputArray.Count];
      for (var _j = 0; _j < __input_array.Length; ++_j) { __input_array[_j] = builder.CreateString(_o.InputArray[_j]); }
      _input_array = CreateInputArrayVector(builder, __input_array);
    }
    var _skill_array = default(VectorOffset);
    if (_o.SkillArray != null) {
      var __skill_array = _o.SkillArray.ToArray();
      _skill_array = CreateSkillArrayVector(builder, __skill_array);
    }
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    return CreateSkillInput(
      builder,
      _o.Id,
      _input_array,
      _skill_array,
      _description);
  }
}

public class SkillInputT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("input_array")]
  public List<string> InputArray { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_array")]
  public List<int> SkillArray { get; set; }
  [Newtonsoft.Json.JsonProperty("description")]
  public string Description { get; set; }

  public SkillInputT() {
    this.Id = 0;
    this.InputArray = null;
    this.SkillArray = null;
    this.Description = null;
  }
}


static public class SkillInputVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 6 /*InputArray*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*SkillArray*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 10 /*Description*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
