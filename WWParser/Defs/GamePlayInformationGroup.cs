// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GamePlayInformationGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GamePlayInformationGroup GetRootAsGamePlayInformationGroup(ByteBuffer _bb) { return GetRootAsGamePlayInformationGroup(_bb, new GamePlayInformationGroup()); }
  public static GamePlayInformationGroup GetRootAsGamePlayInformationGroup(ByteBuffer _bb, GamePlayInformationGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GamePlayInformationGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InfoGroup(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int InfoGroupLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetInfoGroupBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetInfoGroupBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetInfoGroupArray() { return __p.__vector_as_array<int>(6); }
  public string IconString { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconStringBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIconStringBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIconStringArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<WWParser.Defs.GamePlayInformationGroup> CreateGamePlayInformationGroup(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset info_groupOffset = default(VectorOffset),
      StringOffset icon_stringOffset = default(StringOffset)) {
    builder.StartTable(3);
    GamePlayInformationGroup.AddIconString(builder, icon_stringOffset);
    GamePlayInformationGroup.AddInfoGroup(builder, info_groupOffset);
    GamePlayInformationGroup.AddId(builder, id);
    return GamePlayInformationGroup.EndGamePlayInformationGroup(builder);
  }

  public static void StartGamePlayInformationGroup(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddInfoGroup(FlatBufferBuilder builder, VectorOffset infoGroupOffset) { builder.AddOffset(1, infoGroupOffset.Value, 0); }
  public static VectorOffset CreateInfoGroupVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInfoGroupVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInfoGroupVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInfoGroupVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInfoGroupVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIconString(FlatBufferBuilder builder, StringOffset iconStringOffset) { builder.AddOffset(2, iconStringOffset.Value, 0); }
  public static Offset<WWParser.Defs.GamePlayInformationGroup> EndGamePlayInformationGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.GamePlayInformationGroup>(o);
  }
  public GamePlayInformationGroupT UnPack() {
    var _o = new GamePlayInformationGroupT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GamePlayInformationGroupT _o) {
    _o.Id = this.Id;
    _o.InfoGroup = new List<int>();
    for (var _j = 0; _j < this.InfoGroupLength; ++_j) {_o.InfoGroup.Add(this.InfoGroup(_j));}
    _o.IconString = this.IconString;
  }
  public static Offset<WWParser.Defs.GamePlayInformationGroup> Pack(FlatBufferBuilder builder, GamePlayInformationGroupT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.GamePlayInformationGroup>);
    var _info_group = default(VectorOffset);
    if (_o.InfoGroup != null) {
      var __info_group = _o.InfoGroup.ToArray();
      _info_group = CreateInfoGroupVector(builder, __info_group);
    }
    var _icon_string = _o.IconString == null ? default(StringOffset) : builder.CreateString(_o.IconString);
    return CreateGamePlayInformationGroup(
      builder,
      _o.Id,
      _info_group,
      _icon_string);
  }
}

public class GamePlayInformationGroupT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("info_group")]
  public List<int> InfoGroup { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_string")]
  public string IconString { get; set; }

  public GamePlayInformationGroupT() {
    this.Id = 0;
    this.InfoGroup = null;
    this.IconString = null;
  }
}


static public class GamePlayInformationGroupVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*InfoGroup*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 8 /*IconString*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
