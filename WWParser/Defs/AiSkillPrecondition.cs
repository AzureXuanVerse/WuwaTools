// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiSkillPrecondition : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AiSkillPrecondition GetRootAsAiSkillPrecondition(ByteBuffer _bb) { return GetRootAsAiSkillPrecondition(_bb, new AiSkillPrecondition()); }
  public static AiSkillPrecondition GetRootAsAiSkillPrecondition(ByteBuffer _bb, AiSkillPrecondition obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiSkillPrecondition __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.FloatRange? DistanceRange { get { int o = __p.__offset(6); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.FloatRange? AngleRange { get { int o = __p.__offset(8); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.FloatRange? TargetAngleRange { get { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.FloatRange? HeightRange { get { int o = __p.__offset(12); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string NeedTag { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNeedTagBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNeedTagBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNeedTagArray() { return __p.__vector_as_array<byte>(14); }
  public bool NeedTarget { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.AiSkillPrecondition> CreateAiSkillPrecondition(FlatBufferBuilder builder,
      int id = 0,
      Offset<WWParser.Defs.FloatRange> distance_rangeOffset = default(Offset<WWParser.Defs.FloatRange>),
      Offset<WWParser.Defs.FloatRange> angle_rangeOffset = default(Offset<WWParser.Defs.FloatRange>),
      Offset<WWParser.Defs.FloatRange> target_angle_rangeOffset = default(Offset<WWParser.Defs.FloatRange>),
      Offset<WWParser.Defs.FloatRange> height_rangeOffset = default(Offset<WWParser.Defs.FloatRange>),
      StringOffset need_tagOffset = default(StringOffset),
      bool need_target = false) {
    builder.StartTable(7);
    AiSkillPrecondition.AddNeedTag(builder, need_tagOffset);
    AiSkillPrecondition.AddHeightRange(builder, height_rangeOffset);
    AiSkillPrecondition.AddTargetAngleRange(builder, target_angle_rangeOffset);
    AiSkillPrecondition.AddAngleRange(builder, angle_rangeOffset);
    AiSkillPrecondition.AddDistanceRange(builder, distance_rangeOffset);
    AiSkillPrecondition.AddId(builder, id);
    AiSkillPrecondition.AddNeedTarget(builder, need_target);
    return AiSkillPrecondition.EndAiSkillPrecondition(builder);
  }

  public static void StartAiSkillPrecondition(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDistanceRange(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> distanceRangeOffset) { builder.AddOffset(1, distanceRangeOffset.Value, 0); }
  public static void AddAngleRange(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> angleRangeOffset) { builder.AddOffset(2, angleRangeOffset.Value, 0); }
  public static void AddTargetAngleRange(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> targetAngleRangeOffset) { builder.AddOffset(3, targetAngleRangeOffset.Value, 0); }
  public static void AddHeightRange(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> heightRangeOffset) { builder.AddOffset(4, heightRangeOffset.Value, 0); }
  public static void AddNeedTag(FlatBufferBuilder builder, StringOffset needTagOffset) { builder.AddOffset(5, needTagOffset.Value, 0); }
  public static void AddNeedTarget(FlatBufferBuilder builder, bool needTarget) { builder.AddBool(6, needTarget, false); }
  public static Offset<WWParser.Defs.AiSkillPrecondition> EndAiSkillPrecondition(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AiSkillPrecondition>(o);
  }
  public AiSkillPreconditionT UnPack() {
    var _o = new AiSkillPreconditionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AiSkillPreconditionT _o) {
    _o.Id = this.Id;
    _o.DistanceRange = this.DistanceRange.HasValue ? this.DistanceRange.Value.UnPack() : null;
    _o.AngleRange = this.AngleRange.HasValue ? this.AngleRange.Value.UnPack() : null;
    _o.TargetAngleRange = this.TargetAngleRange.HasValue ? this.TargetAngleRange.Value.UnPack() : null;
    _o.HeightRange = this.HeightRange.HasValue ? this.HeightRange.Value.UnPack() : null;
    _o.NeedTag = this.NeedTag;
    _o.NeedTarget = this.NeedTarget;
  }
  public static Offset<WWParser.Defs.AiSkillPrecondition> Pack(FlatBufferBuilder builder, AiSkillPreconditionT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AiSkillPrecondition>);
    var _distance_range = _o.DistanceRange == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.DistanceRange);
    var _angle_range = _o.AngleRange == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.AngleRange);
    var _target_angle_range = _o.TargetAngleRange == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.TargetAngleRange);
    var _height_range = _o.HeightRange == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.HeightRange);
    var _need_tag = _o.NeedTag == null ? default(StringOffset) : builder.CreateString(_o.NeedTag);
    return CreateAiSkillPrecondition(
      builder,
      _o.Id,
      _distance_range,
      _angle_range,
      _target_angle_range,
      _height_range,
      _need_tag,
      _o.NeedTarget);
  }
}

public class AiSkillPreconditionT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("distance_range")]
  public WWParser.Defs.FloatRangeT DistanceRange { get; set; }
  [Newtonsoft.Json.JsonProperty("angle_range")]
  public WWParser.Defs.FloatRangeT AngleRange { get; set; }
  [Newtonsoft.Json.JsonProperty("target_angle_range")]
  public WWParser.Defs.FloatRangeT TargetAngleRange { get; set; }
  [Newtonsoft.Json.JsonProperty("height_range")]
  public WWParser.Defs.FloatRangeT HeightRange { get; set; }
  [Newtonsoft.Json.JsonProperty("need_tag")]
  public string NeedTag { get; set; }
  [Newtonsoft.Json.JsonProperty("need_target")]
  public bool NeedTarget { get; set; }

  public AiSkillPreconditionT() {
    this.Id = 0;
    this.DistanceRange = null;
    this.AngleRange = null;
    this.TargetAngleRange = null;
    this.HeightRange = null;
    this.NeedTag = null;
    this.NeedTarget = false;
  }
}


static public class AiSkillPreconditionVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 6 /*DistanceRange*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 8 /*AngleRange*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 10 /*TargetAngleRange*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 12 /*HeightRange*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyString(tablePos, 14 /*NeedTag*/, false)
      && verifier.VerifyField(tablePos, 16 /*NeedTarget*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
