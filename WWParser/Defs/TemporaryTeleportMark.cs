// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TemporaryTeleportMark : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TemporaryTeleportMark GetRootAsTemporaryTeleportMark(ByteBuffer _bb) { return GetRootAsTemporaryTeleportMark(_bb, new TemporaryTeleportMark()); }
  public static TemporaryTeleportMark GetRootAsTemporaryTeleportMark(ByteBuffer _bb, TemporaryTeleportMark obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TemporaryTeleportMark __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MarkId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MarkPic { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMarkPicBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetMarkPicBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetMarkPicArray() { return __p.__vector_as_array<byte>(6); }
  public string MarkTitle { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMarkTitleBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMarkTitleBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMarkTitleArray() { return __p.__vector_as_array<byte>(8); }
  public string MarkDesc { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMarkDescBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMarkDescBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMarkDescArray() { return __p.__vector_as_array<byte>(10); }
  public int ShowPriority { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShowRange(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ShowRangeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetShowRangeBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetShowRangeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetShowRangeArray() { return __p.__vector_as_array<int>(14); }
  public float Scale { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public int TrackHudEnable { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float TrackAutoCancelDistance { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)-1.0f; } }

  public static Offset<WWParser.Defs.TemporaryTeleportMark> CreateTemporaryTeleportMark(FlatBufferBuilder builder,
      int mark_id = 0,
      StringOffset mark_picOffset = default(StringOffset),
      StringOffset mark_titleOffset = default(StringOffset),
      StringOffset mark_descOffset = default(StringOffset),
      int show_priority = 0,
      VectorOffset show_rangeOffset = default(VectorOffset),
      float scale = 1.0f,
      int track_hud_enable = 0,
      float track_auto_cancel_distance = -1.0f) {
    builder.StartTable(9);
    TemporaryTeleportMark.AddTrackAutoCancelDistance(builder, track_auto_cancel_distance);
    TemporaryTeleportMark.AddTrackHudEnable(builder, track_hud_enable);
    TemporaryTeleportMark.AddScale(builder, scale);
    TemporaryTeleportMark.AddShowRange(builder, show_rangeOffset);
    TemporaryTeleportMark.AddShowPriority(builder, show_priority);
    TemporaryTeleportMark.AddMarkDesc(builder, mark_descOffset);
    TemporaryTeleportMark.AddMarkTitle(builder, mark_titleOffset);
    TemporaryTeleportMark.AddMarkPic(builder, mark_picOffset);
    TemporaryTeleportMark.AddMarkId(builder, mark_id);
    return TemporaryTeleportMark.EndTemporaryTeleportMark(builder);
  }

  public static void StartTemporaryTeleportMark(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddMarkId(FlatBufferBuilder builder, int markId) { builder.AddInt(0, markId, 0); }
  public static void AddMarkPic(FlatBufferBuilder builder, StringOffset markPicOffset) { builder.AddOffset(1, markPicOffset.Value, 0); }
  public static void AddMarkTitle(FlatBufferBuilder builder, StringOffset markTitleOffset) { builder.AddOffset(2, markTitleOffset.Value, 0); }
  public static void AddMarkDesc(FlatBufferBuilder builder, StringOffset markDescOffset) { builder.AddOffset(3, markDescOffset.Value, 0); }
  public static void AddShowPriority(FlatBufferBuilder builder, int showPriority) { builder.AddInt(4, showPriority, 0); }
  public static void AddShowRange(FlatBufferBuilder builder, VectorOffset showRangeOffset) { builder.AddOffset(5, showRangeOffset.Value, 0); }
  public static VectorOffset CreateShowRangeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateShowRangeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowRangeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowRangeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShowRangeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddScale(FlatBufferBuilder builder, float scale) { builder.AddFloat(6, scale, 1.0f); }
  public static void AddTrackHudEnable(FlatBufferBuilder builder, int trackHudEnable) { builder.AddInt(7, trackHudEnable, 0); }
  public static void AddTrackAutoCancelDistance(FlatBufferBuilder builder, float trackAutoCancelDistance) { builder.AddFloat(8, trackAutoCancelDistance, -1.0f); }
  public static Offset<WWParser.Defs.TemporaryTeleportMark> EndTemporaryTeleportMark(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.TemporaryTeleportMark>(o);
  }
  public TemporaryTeleportMarkT UnPack() {
    var _o = new TemporaryTeleportMarkT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TemporaryTeleportMarkT _o) {
    _o.MarkId = this.MarkId;
    _o.MarkPic = this.MarkPic;
    _o.MarkTitle = this.MarkTitle;
    _o.MarkDesc = this.MarkDesc;
    _o.ShowPriority = this.ShowPriority;
    _o.ShowRange = new List<int>();
    for (var _j = 0; _j < this.ShowRangeLength; ++_j) {_o.ShowRange.Add(this.ShowRange(_j));}
    _o.Scale = this.Scale;
    _o.TrackHudEnable = this.TrackHudEnable;
    _o.TrackAutoCancelDistance = this.TrackAutoCancelDistance;
  }
  public static Offset<WWParser.Defs.TemporaryTeleportMark> Pack(FlatBufferBuilder builder, TemporaryTeleportMarkT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.TemporaryTeleportMark>);
    var _mark_pic = _o.MarkPic == null ? default(StringOffset) : builder.CreateString(_o.MarkPic);
    var _mark_title = _o.MarkTitle == null ? default(StringOffset) : builder.CreateString(_o.MarkTitle);
    var _mark_desc = _o.MarkDesc == null ? default(StringOffset) : builder.CreateString(_o.MarkDesc);
    var _show_range = default(VectorOffset);
    if (_o.ShowRange != null) {
      var __show_range = _o.ShowRange.ToArray();
      _show_range = CreateShowRangeVector(builder, __show_range);
    }
    return CreateTemporaryTeleportMark(
      builder,
      _o.MarkId,
      _mark_pic,
      _mark_title,
      _mark_desc,
      _o.ShowPriority,
      _show_range,
      _o.Scale,
      _o.TrackHudEnable,
      _o.TrackAutoCancelDistance);
  }
}

public class TemporaryTeleportMarkT
{
  [Newtonsoft.Json.JsonProperty("mark_id")]
  public int MarkId { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_pic")]
  public string MarkPic { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_title")]
  public string MarkTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_desc")]
  public string MarkDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("show_priority")]
  public int ShowPriority { get; set; }
  [Newtonsoft.Json.JsonProperty("show_range")]
  public List<int> ShowRange { get; set; }
  [Newtonsoft.Json.JsonProperty("scale")]
  public float Scale { get; set; }
  [Newtonsoft.Json.JsonProperty("track_hud_enable")]
  public int TrackHudEnable { get; set; }
  [Newtonsoft.Json.JsonProperty("track_auto_cancel_distance")]
  public float TrackAutoCancelDistance { get; set; }

  public TemporaryTeleportMarkT() {
    this.MarkId = 0;
    this.MarkPic = null;
    this.MarkTitle = null;
    this.MarkDesc = null;
    this.ShowPriority = 0;
    this.ShowRange = null;
    this.Scale = 1.0f;
    this.TrackHudEnable = 0;
    this.TrackAutoCancelDistance = -1.0f;
  }
}


static public class TemporaryTeleportMarkVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*MarkId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*MarkPic*/, false)
      && verifier.VerifyString(tablePos, 8 /*MarkTitle*/, false)
      && verifier.VerifyString(tablePos, 10 /*MarkDesc*/, false)
      && verifier.VerifyField(tablePos, 12 /*ShowPriority*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*ShowRange*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 16 /*Scale*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*TrackHudEnable*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*TrackAutoCancelDistance*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
