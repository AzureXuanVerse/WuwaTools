// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TowerDefenceInstance : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TowerDefenceInstance GetRootAsTowerDefenceInstance(ByteBuffer _bb) { return GetRootAsTowerDefenceInstance(_bb, new TowerDefenceInstance()); }
  public static TowerDefenceInstance GetRootAsTowerDefenceInstance(ByteBuffer _bb, TowerDefenceInstance obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TowerDefenceInstance __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstanceId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroupId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)999; } }
  public int Difficulty { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SortId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int OptionalBuff(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OptionalBuffLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetOptionalBuffBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetOptionalBuffBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetOptionalBuffArray() { return __p.__vector_as_array<int>(16); }
  public int OpenDay { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Condition { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardScore { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string LevelRewardDesc { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLevelRewardDescBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetLevelRewardDescBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetLevelRewardDescArray() { return __p.__vector_as_array<byte>(26); }
  public int BaseEntityId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockScoreLimit { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsDifficult { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.TowerDefenceInstance> CreateTowerDefenceInstance(FlatBufferBuilder builder,
      int id = 0,
      int instance_id = 0,
      int activity_id = 0,
      int group_id = 999,
      int difficulty = 0,
      int sort_id = 0,
      VectorOffset optional_buffOffset = default(VectorOffset),
      int open_day = 0,
      int condition = 0,
      int reward_id = 0,
      int reward_score = 0,
      StringOffset level_reward_descOffset = default(StringOffset),
      int base_entity_id = 0,
      int unlock_score_limit = 0,
      bool is_difficult = false) {
    builder.StartTable(15);
    TowerDefenceInstance.AddUnlockScoreLimit(builder, unlock_score_limit);
    TowerDefenceInstance.AddBaseEntityId(builder, base_entity_id);
    TowerDefenceInstance.AddLevelRewardDesc(builder, level_reward_descOffset);
    TowerDefenceInstance.AddRewardScore(builder, reward_score);
    TowerDefenceInstance.AddRewardId(builder, reward_id);
    TowerDefenceInstance.AddCondition(builder, condition);
    TowerDefenceInstance.AddOpenDay(builder, open_day);
    TowerDefenceInstance.AddOptionalBuff(builder, optional_buffOffset);
    TowerDefenceInstance.AddSortId(builder, sort_id);
    TowerDefenceInstance.AddDifficulty(builder, difficulty);
    TowerDefenceInstance.AddGroupId(builder, group_id);
    TowerDefenceInstance.AddActivityId(builder, activity_id);
    TowerDefenceInstance.AddInstanceId(builder, instance_id);
    TowerDefenceInstance.AddId(builder, id);
    TowerDefenceInstance.AddIsDifficult(builder, is_difficult);
    return TowerDefenceInstance.EndTowerDefenceInstance(builder);
  }

  public static void StartTowerDefenceInstance(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddInstanceId(FlatBufferBuilder builder, int instanceId) { builder.AddInt(1, instanceId, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(2, activityId, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, int groupId) { builder.AddInt(3, groupId, 999); }
  public static void AddDifficulty(FlatBufferBuilder builder, int difficulty) { builder.AddInt(4, difficulty, 0); }
  public static void AddSortId(FlatBufferBuilder builder, int sortId) { builder.AddInt(5, sortId, 0); }
  public static void AddOptionalBuff(FlatBufferBuilder builder, VectorOffset optionalBuffOffset) { builder.AddOffset(6, optionalBuffOffset.Value, 0); }
  public static VectorOffset CreateOptionalBuffVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOptionalBuffVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOptionalBuffVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOptionalBuffVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOptionalBuffVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOpenDay(FlatBufferBuilder builder, int openDay) { builder.AddInt(7, openDay, 0); }
  public static void AddCondition(FlatBufferBuilder builder, int condition) { builder.AddInt(8, condition, 0); }
  public static void AddRewardId(FlatBufferBuilder builder, int rewardId) { builder.AddInt(9, rewardId, 0); }
  public static void AddRewardScore(FlatBufferBuilder builder, int rewardScore) { builder.AddInt(10, rewardScore, 0); }
  public static void AddLevelRewardDesc(FlatBufferBuilder builder, StringOffset levelRewardDescOffset) { builder.AddOffset(11, levelRewardDescOffset.Value, 0); }
  public static void AddBaseEntityId(FlatBufferBuilder builder, int baseEntityId) { builder.AddInt(12, baseEntityId, 0); }
  public static void AddUnlockScoreLimit(FlatBufferBuilder builder, int unlockScoreLimit) { builder.AddInt(13, unlockScoreLimit, 0); }
  public static void AddIsDifficult(FlatBufferBuilder builder, bool isDifficult) { builder.AddBool(14, isDifficult, false); }
  public static Offset<WWParser.Defs.TowerDefenceInstance> EndTowerDefenceInstance(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.TowerDefenceInstance>(o);
  }
  public TowerDefenceInstanceT UnPack() {
    var _o = new TowerDefenceInstanceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TowerDefenceInstanceT _o) {
    _o.Id = this.Id;
    _o.InstanceId = this.InstanceId;
    _o.ActivityId = this.ActivityId;
    _o.GroupId = this.GroupId;
    _o.Difficulty = this.Difficulty;
    _o.SortId = this.SortId;
    _o.OptionalBuff = new List<int>();
    for (var _j = 0; _j < this.OptionalBuffLength; ++_j) {_o.OptionalBuff.Add(this.OptionalBuff(_j));}
    _o.OpenDay = this.OpenDay;
    _o.Condition = this.Condition;
    _o.RewardId = this.RewardId;
    _o.RewardScore = this.RewardScore;
    _o.LevelRewardDesc = this.LevelRewardDesc;
    _o.BaseEntityId = this.BaseEntityId;
    _o.UnlockScoreLimit = this.UnlockScoreLimit;
    _o.IsDifficult = this.IsDifficult;
  }
  public static Offset<WWParser.Defs.TowerDefenceInstance> Pack(FlatBufferBuilder builder, TowerDefenceInstanceT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.TowerDefenceInstance>);
    var _optional_buff = default(VectorOffset);
    if (_o.OptionalBuff != null) {
      var __optional_buff = _o.OptionalBuff.ToArray();
      _optional_buff = CreateOptionalBuffVector(builder, __optional_buff);
    }
    var _level_reward_desc = _o.LevelRewardDesc == null ? default(StringOffset) : builder.CreateString(_o.LevelRewardDesc);
    return CreateTowerDefenceInstance(
      builder,
      _o.Id,
      _o.InstanceId,
      _o.ActivityId,
      _o.GroupId,
      _o.Difficulty,
      _o.SortId,
      _optional_buff,
      _o.OpenDay,
      _o.Condition,
      _o.RewardId,
      _o.RewardScore,
      _level_reward_desc,
      _o.BaseEntityId,
      _o.UnlockScoreLimit,
      _o.IsDifficult);
  }
}

public class TowerDefenceInstanceT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("instance_id")]
  public int InstanceId { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("group_id")]
  public int GroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("difficulty")]
  public int Difficulty { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_id")]
  public int SortId { get; set; }
  [Newtonsoft.Json.JsonProperty("optional_buff")]
  public List<int> OptionalBuff { get; set; }
  [Newtonsoft.Json.JsonProperty("open_day")]
  public int OpenDay { get; set; }
  [Newtonsoft.Json.JsonProperty("condition")]
  public int Condition { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_id")]
  public int RewardId { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_score")]
  public int RewardScore { get; set; }
  [Newtonsoft.Json.JsonProperty("level_reward_desc")]
  public string LevelRewardDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("base_entity_id")]
  public int BaseEntityId { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_score_limit")]
  public int UnlockScoreLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("is_difficult")]
  public bool IsDifficult { get; set; }

  public TowerDefenceInstanceT() {
    this.Id = 0;
    this.InstanceId = 0;
    this.ActivityId = 0;
    this.GroupId = 999;
    this.Difficulty = 0;
    this.SortId = 0;
    this.OptionalBuff = null;
    this.OpenDay = 0;
    this.Condition = 0;
    this.RewardId = 0;
    this.RewardScore = 0;
    this.LevelRewardDesc = null;
    this.BaseEntityId = 0;
    this.UnlockScoreLimit = 0;
    this.IsDifficult = false;
  }
}


static public class TowerDefenceInstanceVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*InstanceId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*GroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Difficulty*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*SortId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*OptionalBuff*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 18 /*OpenDay*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*Condition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*RewardId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*RewardScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 26 /*LevelRewardDesc*/, false)
      && verifier.VerifyField(tablePos, 28 /*BaseEntityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*UnlockScoreLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*IsDifficult*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
