// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct HiddenBossWindow : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static HiddenBossWindow GetRootAsHiddenBossWindow(ByteBuffer _bb) { return GetRootAsHiddenBossWindow(_bb, new HiddenBossWindow()); }
  public static HiddenBossWindow GetRootAsHiddenBossWindow(ByteBuffer _bb, HiddenBossWindow obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HiddenBossWindow __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BossName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBossNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetBossNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetBossNameArray() { return __p.__vector_as_array<byte>(6); }
  public int MarkId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string IconRefPath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconRefPathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIconRefPathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIconRefPathArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<WWParser.Defs.HiddenBossWindow> CreateHiddenBossWindow(FlatBufferBuilder builder,
      int id = 0,
      StringOffset boss_nameOffset = default(StringOffset),
      int mark_id = 0,
      StringOffset icon_ref_pathOffset = default(StringOffset)) {
    builder.StartTable(4);
    HiddenBossWindow.AddIconRefPath(builder, icon_ref_pathOffset);
    HiddenBossWindow.AddMarkId(builder, mark_id);
    HiddenBossWindow.AddBossName(builder, boss_nameOffset);
    HiddenBossWindow.AddId(builder, id);
    return HiddenBossWindow.EndHiddenBossWindow(builder);
  }

  public static void StartHiddenBossWindow(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddBossName(FlatBufferBuilder builder, StringOffset bossNameOffset) { builder.AddOffset(1, bossNameOffset.Value, 0); }
  public static void AddMarkId(FlatBufferBuilder builder, int markId) { builder.AddInt(2, markId, 0); }
  public static void AddIconRefPath(FlatBufferBuilder builder, StringOffset iconRefPathOffset) { builder.AddOffset(3, iconRefPathOffset.Value, 0); }
  public static Offset<WWParser.Defs.HiddenBossWindow> EndHiddenBossWindow(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.HiddenBossWindow>(o);
  }
  public HiddenBossWindowT UnPack() {
    var _o = new HiddenBossWindowT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HiddenBossWindowT _o) {
    _o.Id = this.Id;
    _o.BossName = this.BossName;
    _o.MarkId = this.MarkId;
    _o.IconRefPath = this.IconRefPath;
  }
  public static Offset<WWParser.Defs.HiddenBossWindow> Pack(FlatBufferBuilder builder, HiddenBossWindowT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.HiddenBossWindow>);
    var _boss_name = _o.BossName == null ? default(StringOffset) : builder.CreateString(_o.BossName);
    var _icon_ref_path = _o.IconRefPath == null ? default(StringOffset) : builder.CreateString(_o.IconRefPath);
    return CreateHiddenBossWindow(
      builder,
      _o.Id,
      _boss_name,
      _o.MarkId,
      _icon_ref_path);
  }
}

public class HiddenBossWindowT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("boss_name")]
  public string BossName { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_id")]
  public int MarkId { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_ref_path")]
  public string IconRefPath { get; set; }

  public HiddenBossWindowT() {
    this.Id = 0;
    this.BossName = null;
    this.MarkId = 0;
    this.IconRefPath = null;
  }
}


static public class HiddenBossWindowVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*BossName*/, false)
      && verifier.VerifyField(tablePos, 8 /*MarkId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*IconRefPath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
