// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DebugEntranceConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DebugEntranceConfig GetRootAsDebugEntranceConfig(ByteBuffer _bb) { return GetRootAsDebugEntranceConfig(_bb, new DebugEntranceConfig()); }
  public static DebugEntranceConfig GetRootAsDebugEntranceConfig(ByteBuffer _bb, DebugEntranceConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DebugEntranceConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string Desc { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(10); }
  public string Keywords { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeywordsBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetKeywordsBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetKeywordsArray() { return __p.__vector_as_array<byte>(12); }
  public int Commands(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CommandsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCommandsBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetCommandsBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetCommandsArray() { return __p.__vector_as_array<int>(14); }
  public bool UiEssential { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.DebugEntranceConfig> CreateDebugEntranceConfig(FlatBufferBuilder builder,
      int id = 0,
      int type = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      StringOffset keywordsOffset = default(StringOffset),
      VectorOffset commandsOffset = default(VectorOffset),
      bool ui_essential = false) {
    builder.StartTable(7);
    DebugEntranceConfig.AddCommands(builder, commandsOffset);
    DebugEntranceConfig.AddKeywords(builder, keywordsOffset);
    DebugEntranceConfig.AddDesc(builder, descOffset);
    DebugEntranceConfig.AddName(builder, nameOffset);
    DebugEntranceConfig.AddType(builder, type);
    DebugEntranceConfig.AddId(builder, id);
    DebugEntranceConfig.AddUiEssential(builder, ui_essential);
    return DebugEntranceConfig.EndDebugEntranceConfig(builder);
  }

  public static void StartDebugEntranceConfig(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(1, type, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(3, descOffset.Value, 0); }
  public static void AddKeywords(FlatBufferBuilder builder, StringOffset keywordsOffset) { builder.AddOffset(4, keywordsOffset.Value, 0); }
  public static void AddCommands(FlatBufferBuilder builder, VectorOffset commandsOffset) { builder.AddOffset(5, commandsOffset.Value, 0); }
  public static VectorOffset CreateCommandsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCommandsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCommandsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCommandsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCommandsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUiEssential(FlatBufferBuilder builder, bool uiEssential) { builder.AddBool(6, uiEssential, false); }
  public static Offset<WWParser.Defs.DebugEntranceConfig> EndDebugEntranceConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DebugEntranceConfig>(o);
  }
  public DebugEntranceConfigT UnPack() {
    var _o = new DebugEntranceConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DebugEntranceConfigT _o) {
    _o.Id = this.Id;
    _o.Type = this.Type;
    _o.Name = this.Name;
    _o.Desc = this.Desc;
    _o.Keywords = this.Keywords;
    _o.Commands = new List<int>();
    for (var _j = 0; _j < this.CommandsLength; ++_j) {_o.Commands.Add(this.Commands(_j));}
    _o.UiEssential = this.UiEssential;
  }
  public static Offset<WWParser.Defs.DebugEntranceConfig> Pack(FlatBufferBuilder builder, DebugEntranceConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DebugEntranceConfig>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    var _keywords = _o.Keywords == null ? default(StringOffset) : builder.CreateString(_o.Keywords);
    var _commands = default(VectorOffset);
    if (_o.Commands != null) {
      var __commands = _o.Commands.ToArray();
      _commands = CreateCommandsVector(builder, __commands);
    }
    return CreateDebugEntranceConfig(
      builder,
      _o.Id,
      _o.Type,
      _name,
      _desc,
      _keywords,
      _commands,
      _o.UiEssential);
  }
}

public class DebugEntranceConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }
  [Newtonsoft.Json.JsonProperty("keywords")]
  public string Keywords { get; set; }
  [Newtonsoft.Json.JsonProperty("commands")]
  public List<int> Commands { get; set; }
  [Newtonsoft.Json.JsonProperty("ui_essential")]
  public bool UiEssential { get; set; }

  public DebugEntranceConfigT() {
    this.Id = 0;
    this.Type = 0;
    this.Name = null;
    this.Desc = null;
    this.Keywords = null;
    this.Commands = null;
    this.UiEssential = false;
  }
}


static public class DebugEntranceConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyString(tablePos, 10 /*Desc*/, false)
      && verifier.VerifyString(tablePos, 12 /*Keywords*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*Commands*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 16 /*UiEssential*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
