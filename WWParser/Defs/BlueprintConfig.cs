// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BlueprintConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BlueprintConfig GetRootAsBlueprintConfig(ByteBuffer _bb) { return GetRootAsBlueprintConfig(_bb, new BlueprintConfig()); }
  public static BlueprintConfig GetRootAsBlueprintConfig(ByteBuffer _bb, BlueprintConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BlueprintConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BlueprintType { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBlueprintTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetBlueprintTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetBlueprintTypeArray() { return __p.__vector_as_array<byte>(6); }
  public string EntityType { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEntityTypeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetEntityTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetEntityTypeArray() { return __p.__vector_as_array<byte>(8); }
  public string EntityLogic { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEntityLogicBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetEntityLogicBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetEntityLogicArray() { return __p.__vector_as_array<byte>(10); }
  public int ModelId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HalfHeight { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TrackHeight { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.BlueprintConfig> CreateBlueprintConfig(FlatBufferBuilder builder,
      int id = 0,
      StringOffset blueprint_typeOffset = default(StringOffset),
      StringOffset entity_typeOffset = default(StringOffset),
      StringOffset entity_logicOffset = default(StringOffset),
      int model_id = 0,
      int half_height = 0,
      int track_height = 0) {
    builder.StartTable(7);
    BlueprintConfig.AddTrackHeight(builder, track_height);
    BlueprintConfig.AddHalfHeight(builder, half_height);
    BlueprintConfig.AddModelId(builder, model_id);
    BlueprintConfig.AddEntityLogic(builder, entity_logicOffset);
    BlueprintConfig.AddEntityType(builder, entity_typeOffset);
    BlueprintConfig.AddBlueprintType(builder, blueprint_typeOffset);
    BlueprintConfig.AddId(builder, id);
    return BlueprintConfig.EndBlueprintConfig(builder);
  }

  public static void StartBlueprintConfig(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddBlueprintType(FlatBufferBuilder builder, StringOffset blueprintTypeOffset) { builder.AddOffset(1, blueprintTypeOffset.Value, 0); }
  public static void AddEntityType(FlatBufferBuilder builder, StringOffset entityTypeOffset) { builder.AddOffset(2, entityTypeOffset.Value, 0); }
  public static void AddEntityLogic(FlatBufferBuilder builder, StringOffset entityLogicOffset) { builder.AddOffset(3, entityLogicOffset.Value, 0); }
  public static void AddModelId(FlatBufferBuilder builder, int modelId) { builder.AddInt(4, modelId, 0); }
  public static void AddHalfHeight(FlatBufferBuilder builder, int halfHeight) { builder.AddInt(5, halfHeight, 0); }
  public static void AddTrackHeight(FlatBufferBuilder builder, int trackHeight) { builder.AddInt(6, trackHeight, 0); }
  public static Offset<WWParser.Defs.BlueprintConfig> EndBlueprintConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BlueprintConfig>(o);
  }
  public BlueprintConfigT UnPack() {
    var _o = new BlueprintConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BlueprintConfigT _o) {
    _o.Id = this.Id;
    _o.BlueprintType = this.BlueprintType;
    _o.EntityType = this.EntityType;
    _o.EntityLogic = this.EntityLogic;
    _o.ModelId = this.ModelId;
    _o.HalfHeight = this.HalfHeight;
    _o.TrackHeight = this.TrackHeight;
  }
  public static Offset<WWParser.Defs.BlueprintConfig> Pack(FlatBufferBuilder builder, BlueprintConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BlueprintConfig>);
    var _blueprint_type = _o.BlueprintType == null ? default(StringOffset) : builder.CreateString(_o.BlueprintType);
    var _entity_type = _o.EntityType == null ? default(StringOffset) : builder.CreateString(_o.EntityType);
    var _entity_logic = _o.EntityLogic == null ? default(StringOffset) : builder.CreateString(_o.EntityLogic);
    return CreateBlueprintConfig(
      builder,
      _o.Id,
      _blueprint_type,
      _entity_type,
      _entity_logic,
      _o.ModelId,
      _o.HalfHeight,
      _o.TrackHeight);
  }
}

public class BlueprintConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("blueprint_type")]
  public string BlueprintType { get; set; }
  [Newtonsoft.Json.JsonProperty("entity_type")]
  public string EntityType { get; set; }
  [Newtonsoft.Json.JsonProperty("entity_logic")]
  public string EntityLogic { get; set; }
  [Newtonsoft.Json.JsonProperty("model_id")]
  public int ModelId { get; set; }
  [Newtonsoft.Json.JsonProperty("half_height")]
  public int HalfHeight { get; set; }
  [Newtonsoft.Json.JsonProperty("track_height")]
  public int TrackHeight { get; set; }

  public BlueprintConfigT() {
    this.Id = 0;
    this.BlueprintType = null;
    this.EntityType = null;
    this.EntityLogic = null;
    this.ModelId = 0;
    this.HalfHeight = 0;
    this.TrackHeight = 0;
  }
}


static public class BlueprintConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*BlueprintType*/, false)
      && verifier.VerifyString(tablePos, 8 /*EntityType*/, false)
      && verifier.VerifyString(tablePos, 10 /*EntityLogic*/, false)
      && verifier.VerifyField(tablePos, 12 /*ModelId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*HalfHeight*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*TrackHeight*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
