// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Shield : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Shield GetRootAsShield(ByteBuffer _bb) { return GetRootAsShield(_bb, new Shield()); }
  public static Shield GetRootAsShield(ByteBuffer _bb, Shield obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Shield __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Priority { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int RefrenceAttribute { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RefrenceTarget { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float AttributeRate(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int AttributeRateLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetAttributeRateBytes() { return __p.__vector_as_span<float>(12, 4); }
#else
  public ArraySegment<byte>? GetAttributeRateBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public float[] GetAttributeRateArray() { return __p.__vector_as_array<float>(12); }
  public float Value(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ValueLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetValueBytes() { return __p.__vector_as_span<float>(14, 4); }
#else
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public float[] GetValueArray() { return __p.__vector_as_array<float>(14); }

  public static Offset<WWParser.Defs.Shield> CreateShield(FlatBufferBuilder builder,
      int id = 0,
      int priority = 1,
      int refrence_attribute = 0,
      int refrence_target = 0,
      VectorOffset attribute_rateOffset = default(VectorOffset),
      VectorOffset valueOffset = default(VectorOffset)) {
    builder.StartTable(6);
    Shield.AddValue(builder, valueOffset);
    Shield.AddAttributeRate(builder, attribute_rateOffset);
    Shield.AddRefrenceTarget(builder, refrence_target);
    Shield.AddRefrenceAttribute(builder, refrence_attribute);
    Shield.AddPriority(builder, priority);
    Shield.AddId(builder, id);
    return Shield.EndShield(builder);
  }

  public static void StartShield(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(1, priority, 1); }
  public static void AddRefrenceAttribute(FlatBufferBuilder builder, int refrenceAttribute) { builder.AddInt(2, refrenceAttribute, 0); }
  public static void AddRefrenceTarget(FlatBufferBuilder builder, int refrenceTarget) { builder.AddInt(3, refrenceTarget, 0); }
  public static void AddAttributeRate(FlatBufferBuilder builder, VectorOffset attributeRateOffset) { builder.AddOffset(4, attributeRateOffset.Value, 0); }
  public static VectorOffset CreateAttributeRateVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAttributeRateVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttributeRateVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttributeRateVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAttributeRateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddValue(FlatBufferBuilder builder, VectorOffset valueOffset) { builder.AddOffset(5, valueOffset.Value, 0); }
  public static VectorOffset CreateValueVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.Shield> EndShield(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Shield>(o);
  }
  public ShieldT UnPack() {
    var _o = new ShieldT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ShieldT _o) {
    _o.Id = this.Id;
    _o.Priority = this.Priority;
    _o.RefrenceAttribute = this.RefrenceAttribute;
    _o.RefrenceTarget = this.RefrenceTarget;
    _o.AttributeRate = new List<float>();
    for (var _j = 0; _j < this.AttributeRateLength; ++_j) {_o.AttributeRate.Add(this.AttributeRate(_j));}
    _o.Value = new List<float>();
    for (var _j = 0; _j < this.ValueLength; ++_j) {_o.Value.Add(this.Value(_j));}
  }
  public static Offset<WWParser.Defs.Shield> Pack(FlatBufferBuilder builder, ShieldT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Shield>);
    var _attribute_rate = default(VectorOffset);
    if (_o.AttributeRate != null) {
      var __attribute_rate = _o.AttributeRate.ToArray();
      _attribute_rate = CreateAttributeRateVector(builder, __attribute_rate);
    }
    var _value = default(VectorOffset);
    if (_o.Value != null) {
      var __value = _o.Value.ToArray();
      _value = CreateValueVector(builder, __value);
    }
    return CreateShield(
      builder,
      _o.Id,
      _o.Priority,
      _o.RefrenceAttribute,
      _o.RefrenceTarget,
      _attribute_rate,
      _value);
  }
}

public class ShieldT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("priority")]
  public int Priority { get; set; }
  [Newtonsoft.Json.JsonProperty("refrence_attribute")]
  public int RefrenceAttribute { get; set; }
  [Newtonsoft.Json.JsonProperty("refrence_target")]
  public int RefrenceTarget { get; set; }
  [Newtonsoft.Json.JsonProperty("attribute_rate")]
  public List<float> AttributeRate { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public List<float> Value { get; set; }

  public ShieldT() {
    this.Id = 0;
    this.Priority = 1;
    this.RefrenceAttribute = 0;
    this.RefrenceTarget = 0;
    this.AttributeRate = null;
    this.Value = null;
  }
}


static public class ShieldVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Priority*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*RefrenceAttribute*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*RefrenceTarget*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*AttributeRate*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*Value*/, 4 /*float*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
