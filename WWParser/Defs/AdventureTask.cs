// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AdventureTask : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AdventureTask GetRootAsAdventureTask(ByteBuffer _bb) { return GetRootAsAdventureTask(_bb, new AdventureTask()); }
  public static AdventureTask GetRootAsAdventureTask(ByteBuffer _bb, AdventureTask obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AdventureTask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ChapterId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TaskText { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskTextBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTaskTextBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTaskTextArray() { return __p.__vector_as_array<byte>(8); }
  public int RecordId(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RecordIdLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRecordIdBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetRecordIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetRecordIdArray() { return __p.__vector_as_array<int>(10); }
  public int NeedProgress { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int DropIds { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PathId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntString? JumpTo(int j) { int o = __p.__offset(18); return o != 0 ? (WWParser.Defs.DicIntString?)(new WWParser.Defs.DicIntString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int JumpToLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.AdventureTask> CreateAdventureTask(FlatBufferBuilder builder,
      int id = 0,
      int chapter_id = 0,
      StringOffset task_textOffset = default(StringOffset),
      VectorOffset record_idOffset = default(VectorOffset),
      int need_progress = 1,
      int drop_ids = 0,
      int path_id = 0,
      VectorOffset jump_toOffset = default(VectorOffset)) {
    builder.StartTable(8);
    AdventureTask.AddJumpTo(builder, jump_toOffset);
    AdventureTask.AddPathId(builder, path_id);
    AdventureTask.AddDropIds(builder, drop_ids);
    AdventureTask.AddNeedProgress(builder, need_progress);
    AdventureTask.AddRecordId(builder, record_idOffset);
    AdventureTask.AddTaskText(builder, task_textOffset);
    AdventureTask.AddChapterId(builder, chapter_id);
    AdventureTask.AddId(builder, id);
    return AdventureTask.EndAdventureTask(builder);
  }

  public static void StartAdventureTask(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddChapterId(FlatBufferBuilder builder, int chapterId) { builder.AddInt(1, chapterId, 0); }
  public static void AddTaskText(FlatBufferBuilder builder, StringOffset taskTextOffset) { builder.AddOffset(2, taskTextOffset.Value, 0); }
  public static void AddRecordId(FlatBufferBuilder builder, VectorOffset recordIdOffset) { builder.AddOffset(3, recordIdOffset.Value, 0); }
  public static VectorOffset CreateRecordIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRecordIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecordIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecordIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRecordIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNeedProgress(FlatBufferBuilder builder, int needProgress) { builder.AddInt(4, needProgress, 1); }
  public static void AddDropIds(FlatBufferBuilder builder, int dropIds) { builder.AddInt(5, dropIds, 0); }
  public static void AddPathId(FlatBufferBuilder builder, int pathId) { builder.AddInt(6, pathId, 0); }
  public static void AddJumpTo(FlatBufferBuilder builder, VectorOffset jumpToOffset) { builder.AddOffset(7, jumpToOffset.Value, 0); }
  public static VectorOffset CreateJumpToVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateJumpToVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateJumpToVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateJumpToVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartJumpToVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.AdventureTask> EndAdventureTask(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AdventureTask>(o);
  }
  public AdventureTaskT UnPack() {
    var _o = new AdventureTaskT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AdventureTaskT _o) {
    _o.Id = this.Id;
    _o.ChapterId = this.ChapterId;
    _o.TaskText = this.TaskText;
    _o.RecordId = new List<int>();
    for (var _j = 0; _j < this.RecordIdLength; ++_j) {_o.RecordId.Add(this.RecordId(_j));}
    _o.NeedProgress = this.NeedProgress;
    _o.DropIds = this.DropIds;
    _o.PathId = this.PathId;
    _o.JumpTo = new List<WWParser.Defs.DicIntStringT>();
    for (var _j = 0; _j < this.JumpToLength; ++_j) {_o.JumpTo.Add(this.JumpTo(_j).HasValue ? this.JumpTo(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.AdventureTask> Pack(FlatBufferBuilder builder, AdventureTaskT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AdventureTask>);
    var _task_text = _o.TaskText == null ? default(StringOffset) : builder.CreateString(_o.TaskText);
    var _record_id = default(VectorOffset);
    if (_o.RecordId != null) {
      var __record_id = _o.RecordId.ToArray();
      _record_id = CreateRecordIdVector(builder, __record_id);
    }
    var _jump_to = default(VectorOffset);
    if (_o.JumpTo != null) {
      var __jump_to = new Offset<WWParser.Defs.DicIntString>[_o.JumpTo.Count];
      for (var _j = 0; _j < __jump_to.Length; ++_j) { __jump_to[_j] = WWParser.Defs.DicIntString.Pack(builder, _o.JumpTo[_j]); }
      _jump_to = CreateJumpToVector(builder, __jump_to);
    }
    return CreateAdventureTask(
      builder,
      _o.Id,
      _o.ChapterId,
      _task_text,
      _record_id,
      _o.NeedProgress,
      _o.DropIds,
      _o.PathId,
      _jump_to);
  }
}

public class AdventureTaskT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("chapter_id")]
  public int ChapterId { get; set; }
  [Newtonsoft.Json.JsonProperty("task_text")]
  public string TaskText { get; set; }
  [Newtonsoft.Json.JsonProperty("record_id")]
  public List<int> RecordId { get; set; }
  [Newtonsoft.Json.JsonProperty("need_progress")]
  public int NeedProgress { get; set; }
  [Newtonsoft.Json.JsonProperty("drop_ids")]
  public int DropIds { get; set; }
  [Newtonsoft.Json.JsonProperty("path_id")]
  public int PathId { get; set; }
  [Newtonsoft.Json.JsonProperty("jump_to")]
  public List<WWParser.Defs.DicIntStringT> JumpTo { get; set; }

  public AdventureTaskT() {
    this.Id = 0;
    this.ChapterId = 0;
    this.TaskText = null;
    this.RecordId = null;
    this.NeedProgress = 1;
    this.DropIds = 0;
    this.PathId = 0;
    this.JumpTo = null;
  }
}


static public class AdventureTaskVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ChapterId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*TaskText*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*RecordId*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 12 /*NeedProgress*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*DropIds*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*PathId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 18 /*JumpTo*/, WWParser.Defs.DicIntStringVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
