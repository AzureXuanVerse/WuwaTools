// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Country : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Country GetRootAsCountry(ByteBuffer _bb) { return GetRootAsCountry(_bb, new Country()); }
  public static Country GetRootAsCountry(ByteBuffer _bb, Country obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Country __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Influences(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int InfluencesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetInfluencesBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetInfluencesBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetInfluencesArray() { return __p.__vector_as_array<int>(6); }
  public string Title { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(8); }
  public string Desc { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(10); }
  public string Logo { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLogoBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetLogoBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetLogoArray() { return __p.__vector_as_array<byte>(12); }
  public int DailyTaskShow { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public string AudioName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAudioNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetAudioNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetAudioNameArray() { return __p.__vector_as_array<byte>(16); }
  public string Icon { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(18); }
  public int SortIndex { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.Country> CreateCountry(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset influencesOffset = default(VectorOffset),
      StringOffset titleOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      StringOffset logoOffset = default(StringOffset),
      int daily_task_show = 1,
      StringOffset audio_nameOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      int sort_index = 0) {
    builder.StartTable(9);
    Country.AddSortIndex(builder, sort_index);
    Country.AddIcon(builder, iconOffset);
    Country.AddAudioName(builder, audio_nameOffset);
    Country.AddDailyTaskShow(builder, daily_task_show);
    Country.AddLogo(builder, logoOffset);
    Country.AddDesc(builder, descOffset);
    Country.AddTitle(builder, titleOffset);
    Country.AddInfluences(builder, influencesOffset);
    Country.AddId(builder, id);
    return Country.EndCountry(builder);
  }

  public static void StartCountry(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddInfluences(FlatBufferBuilder builder, VectorOffset influencesOffset) { builder.AddOffset(1, influencesOffset.Value, 0); }
  public static VectorOffset CreateInfluencesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInfluencesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInfluencesVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInfluencesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInfluencesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(2, titleOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(3, descOffset.Value, 0); }
  public static void AddLogo(FlatBufferBuilder builder, StringOffset logoOffset) { builder.AddOffset(4, logoOffset.Value, 0); }
  public static void AddDailyTaskShow(FlatBufferBuilder builder, int dailyTaskShow) { builder.AddInt(5, dailyTaskShow, 1); }
  public static void AddAudioName(FlatBufferBuilder builder, StringOffset audioNameOffset) { builder.AddOffset(6, audioNameOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(7, iconOffset.Value, 0); }
  public static void AddSortIndex(FlatBufferBuilder builder, int sortIndex) { builder.AddInt(8, sortIndex, 0); }
  public static Offset<WWParser.Defs.Country> EndCountry(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Country>(o);
  }
  public CountryT UnPack() {
    var _o = new CountryT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CountryT _o) {
    _o.Id = this.Id;
    _o.Influences = new List<int>();
    for (var _j = 0; _j < this.InfluencesLength; ++_j) {_o.Influences.Add(this.Influences(_j));}
    _o.Title = this.Title;
    _o.Desc = this.Desc;
    _o.Logo = this.Logo;
    _o.DailyTaskShow = this.DailyTaskShow;
    _o.AudioName = this.AudioName;
    _o.Icon = this.Icon;
    _o.SortIndex = this.SortIndex;
  }
  public static Offset<WWParser.Defs.Country> Pack(FlatBufferBuilder builder, CountryT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Country>);
    var _influences = default(VectorOffset);
    if (_o.Influences != null) {
      var __influences = _o.Influences.ToArray();
      _influences = CreateInfluencesVector(builder, __influences);
    }
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    var _logo = _o.Logo == null ? default(StringOffset) : builder.CreateString(_o.Logo);
    var _audio_name = _o.AudioName == null ? default(StringOffset) : builder.CreateString(_o.AudioName);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    return CreateCountry(
      builder,
      _o.Id,
      _influences,
      _title,
      _desc,
      _logo,
      _o.DailyTaskShow,
      _audio_name,
      _icon,
      _o.SortIndex);
  }
}

public class CountryT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("influences")]
  public List<int> Influences { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }
  [Newtonsoft.Json.JsonProperty("logo")]
  public string Logo { get; set; }
  [Newtonsoft.Json.JsonProperty("daily_task_show")]
  public int DailyTaskShow { get; set; }
  [Newtonsoft.Json.JsonProperty("audio_name")]
  public string AudioName { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_index")]
  public int SortIndex { get; set; }

  public CountryT() {
    this.Id = 0;
    this.Influences = null;
    this.Title = null;
    this.Desc = null;
    this.Logo = null;
    this.DailyTaskShow = 1;
    this.AudioName = null;
    this.Icon = null;
    this.SortIndex = 0;
  }
}


static public class CountryVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Influences*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 8 /*Title*/, false)
      && verifier.VerifyString(tablePos, 10 /*Desc*/, false)
      && verifier.VerifyString(tablePos, 12 /*Logo*/, false)
      && verifier.VerifyField(tablePos, 14 /*DailyTaskShow*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*AudioName*/, false)
      && verifier.VerifyString(tablePos, 18 /*Icon*/, false)
      && verifier.VerifyField(tablePos, 20 /*SortIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
