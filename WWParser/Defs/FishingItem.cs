// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FishingItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FishingItem GetRootAsFishingItem(ByteBuffer _bb) { return GetRootAsFishingItem(_bb, new FishingItem()); }
  public static FishingItem GetRootAsFishingItem(ByteBuffer _bb, FishingItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FishingItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Category { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public string Desc { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(12); }
  public string Pic { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPicBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetPicBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetPicArray() { return __p.__vector_as_array<byte>(14); }
  public string Icon { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(16); }
  public int Shap { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Quality { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)2; } }
  public int Tech(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TechLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTechBytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetTechBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetTechArray() { return __p.__vector_as_array<int>(22); }
  public int Price(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PriceLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPriceBytes() { return __p.__vector_as_span<int>(24, 4); }
#else
  public ArraySegment<byte>? GetPriceBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public int[] GetPriceArray() { return __p.__vector_as_array<int>(24); }
  public WWParser.Defs.IntArray? SizeWeight(int j) { int o = __p.__offset(26); return o != 0 ? (WWParser.Defs.IntArray?)(new WWParser.Defs.IntArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SizeWeightLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Relation { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ChildRelation { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? ConvertItem(int j) { int o = __p.__offset(32); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConvertItemLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool CanDelete { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int DetectionUnlockCondition { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Area(int j) { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AreaLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAreaBytes() { return __p.__vector_as_span<int>(38, 4); }
#else
  public ArraySegment<byte>? GetAreaBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public int[] GetAreaArray() { return __p.__vector_as_array<int>(38); }
  public int Time { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Color { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetColorBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetColorBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetColorArray() { return __p.__vector_as_array<byte>(42); }
  public string Sprite { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpriteBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetSpriteBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetSpriteArray() { return __p.__vector_as_array<byte>(44); }
  public int IllustratedNum { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Reputation { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.FishingItem> CreateFishingItem(FlatBufferBuilder builder,
      int id = 0,
      int type = 0,
      int category = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      StringOffset picOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      int shap = 0,
      int quality = 2,
      VectorOffset techOffset = default(VectorOffset),
      VectorOffset priceOffset = default(VectorOffset),
      VectorOffset size_weightOffset = default(VectorOffset),
      int relation = 0,
      int child_relation = 0,
      VectorOffset convert_itemOffset = default(VectorOffset),
      bool can_delete = false,
      int detection_unlock_condition = 0,
      VectorOffset areaOffset = default(VectorOffset),
      int time = 0,
      StringOffset colorOffset = default(StringOffset),
      StringOffset spriteOffset = default(StringOffset),
      int illustrated_num = 0,
      int reputation = 0) {
    builder.StartTable(23);
    FishingItem.AddReputation(builder, reputation);
    FishingItem.AddIllustratedNum(builder, illustrated_num);
    FishingItem.AddSprite(builder, spriteOffset);
    FishingItem.AddColor(builder, colorOffset);
    FishingItem.AddTime(builder, time);
    FishingItem.AddArea(builder, areaOffset);
    FishingItem.AddDetectionUnlockCondition(builder, detection_unlock_condition);
    FishingItem.AddConvertItem(builder, convert_itemOffset);
    FishingItem.AddChildRelation(builder, child_relation);
    FishingItem.AddRelation(builder, relation);
    FishingItem.AddSizeWeight(builder, size_weightOffset);
    FishingItem.AddPrice(builder, priceOffset);
    FishingItem.AddTech(builder, techOffset);
    FishingItem.AddQuality(builder, quality);
    FishingItem.AddShap(builder, shap);
    FishingItem.AddIcon(builder, iconOffset);
    FishingItem.AddPic(builder, picOffset);
    FishingItem.AddDesc(builder, descOffset);
    FishingItem.AddName(builder, nameOffset);
    FishingItem.AddCategory(builder, category);
    FishingItem.AddType(builder, type);
    FishingItem.AddId(builder, id);
    FishingItem.AddCanDelete(builder, can_delete);
    return FishingItem.EndFishingItem(builder);
  }

  public static void StartFishingItem(FlatBufferBuilder builder) { builder.StartTable(23); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(1, type, 0); }
  public static void AddCategory(FlatBufferBuilder builder, int category) { builder.AddInt(2, category, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(4, descOffset.Value, 0); }
  public static void AddPic(FlatBufferBuilder builder, StringOffset picOffset) { builder.AddOffset(5, picOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(6, iconOffset.Value, 0); }
  public static void AddShap(FlatBufferBuilder builder, int shap) { builder.AddInt(7, shap, 0); }
  public static void AddQuality(FlatBufferBuilder builder, int quality) { builder.AddInt(8, quality, 2); }
  public static void AddTech(FlatBufferBuilder builder, VectorOffset techOffset) { builder.AddOffset(9, techOffset.Value, 0); }
  public static VectorOffset CreateTechVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTechVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTechVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTechVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTechVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPrice(FlatBufferBuilder builder, VectorOffset priceOffset) { builder.AddOffset(10, priceOffset.Value, 0); }
  public static VectorOffset CreatePriceVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePriceVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePriceVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePriceVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPriceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSizeWeight(FlatBufferBuilder builder, VectorOffset sizeWeightOffset) { builder.AddOffset(11, sizeWeightOffset.Value, 0); }
  public static VectorOffset CreateSizeWeightVector(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSizeWeightVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.IntArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSizeWeightVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.IntArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSizeWeightVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.IntArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSizeWeightVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRelation(FlatBufferBuilder builder, int relation) { builder.AddInt(12, relation, 0); }
  public static void AddChildRelation(FlatBufferBuilder builder, int childRelation) { builder.AddInt(13, childRelation, 0); }
  public static void AddConvertItem(FlatBufferBuilder builder, VectorOffset convertItemOffset) { builder.AddOffset(14, convertItemOffset.Value, 0); }
  public static VectorOffset CreateConvertItemVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConvertItemVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConvertItemVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConvertItemVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConvertItemVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCanDelete(FlatBufferBuilder builder, bool canDelete) { builder.AddBool(15, canDelete, false); }
  public static void AddDetectionUnlockCondition(FlatBufferBuilder builder, int detectionUnlockCondition) { builder.AddInt(16, detectionUnlockCondition, 0); }
  public static void AddArea(FlatBufferBuilder builder, VectorOffset areaOffset) { builder.AddOffset(17, areaOffset.Value, 0); }
  public static VectorOffset CreateAreaVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAreaVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAreaVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAreaVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAreaVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTime(FlatBufferBuilder builder, int time) { builder.AddInt(18, time, 0); }
  public static void AddColor(FlatBufferBuilder builder, StringOffset colorOffset) { builder.AddOffset(19, colorOffset.Value, 0); }
  public static void AddSprite(FlatBufferBuilder builder, StringOffset spriteOffset) { builder.AddOffset(20, spriteOffset.Value, 0); }
  public static void AddIllustratedNum(FlatBufferBuilder builder, int illustratedNum) { builder.AddInt(21, illustratedNum, 0); }
  public static void AddReputation(FlatBufferBuilder builder, int reputation) { builder.AddInt(22, reputation, 0); }
  public static Offset<WWParser.Defs.FishingItem> EndFishingItem(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FishingItem>(o);
  }
  public FishingItemT UnPack() {
    var _o = new FishingItemT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FishingItemT _o) {
    _o.Id = this.Id;
    _o.Type = this.Type;
    _o.Category = this.Category;
    _o.Name = this.Name;
    _o.Desc = this.Desc;
    _o.Pic = this.Pic;
    _o.Icon = this.Icon;
    _o.Shap = this.Shap;
    _o.Quality = this.Quality;
    _o.Tech = new List<int>();
    for (var _j = 0; _j < this.TechLength; ++_j) {_o.Tech.Add(this.Tech(_j));}
    _o.Price = new List<int>();
    for (var _j = 0; _j < this.PriceLength; ++_j) {_o.Price.Add(this.Price(_j));}
    _o.SizeWeight = new List<WWParser.Defs.IntArrayT>();
    for (var _j = 0; _j < this.SizeWeightLength; ++_j) {_o.SizeWeight.Add(this.SizeWeight(_j).HasValue ? this.SizeWeight(_j).Value.UnPack() : null);}
    _o.Relation = this.Relation;
    _o.ChildRelation = this.ChildRelation;
    _o.ConvertItem = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.ConvertItemLength; ++_j) {_o.ConvertItem.Add(this.ConvertItem(_j).HasValue ? this.ConvertItem(_j).Value.UnPack() : null);}
    _o.CanDelete = this.CanDelete;
    _o.DetectionUnlockCondition = this.DetectionUnlockCondition;
    _o.Area = new List<int>();
    for (var _j = 0; _j < this.AreaLength; ++_j) {_o.Area.Add(this.Area(_j));}
    _o.Time = this.Time;
    _o.Color = this.Color;
    _o.Sprite = this.Sprite;
    _o.IllustratedNum = this.IllustratedNum;
    _o.Reputation = this.Reputation;
  }
  public static Offset<WWParser.Defs.FishingItem> Pack(FlatBufferBuilder builder, FishingItemT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FishingItem>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    var _pic = _o.Pic == null ? default(StringOffset) : builder.CreateString(_o.Pic);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _tech = default(VectorOffset);
    if (_o.Tech != null) {
      var __tech = _o.Tech.ToArray();
      _tech = CreateTechVector(builder, __tech);
    }
    var _price = default(VectorOffset);
    if (_o.Price != null) {
      var __price = _o.Price.ToArray();
      _price = CreatePriceVector(builder, __price);
    }
    var _size_weight = default(VectorOffset);
    if (_o.SizeWeight != null) {
      var __size_weight = new Offset<WWParser.Defs.IntArray>[_o.SizeWeight.Count];
      for (var _j = 0; _j < __size_weight.Length; ++_j) { __size_weight[_j] = WWParser.Defs.IntArray.Pack(builder, _o.SizeWeight[_j]); }
      _size_weight = CreateSizeWeightVector(builder, __size_weight);
    }
    var _convert_item = default(VectorOffset);
    if (_o.ConvertItem != null) {
      var __convert_item = new Offset<WWParser.Defs.DicIntInt>[_o.ConvertItem.Count];
      for (var _j = 0; _j < __convert_item.Length; ++_j) { __convert_item[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.ConvertItem[_j]); }
      _convert_item = CreateConvertItemVector(builder, __convert_item);
    }
    var _area = default(VectorOffset);
    if (_o.Area != null) {
      var __area = _o.Area.ToArray();
      _area = CreateAreaVector(builder, __area);
    }
    var _color = _o.Color == null ? default(StringOffset) : builder.CreateString(_o.Color);
    var _sprite = _o.Sprite == null ? default(StringOffset) : builder.CreateString(_o.Sprite);
    return CreateFishingItem(
      builder,
      _o.Id,
      _o.Type,
      _o.Category,
      _name,
      _desc,
      _pic,
      _icon,
      _o.Shap,
      _o.Quality,
      _tech,
      _price,
      _size_weight,
      _o.Relation,
      _o.ChildRelation,
      _convert_item,
      _o.CanDelete,
      _o.DetectionUnlockCondition,
      _area,
      _o.Time,
      _color,
      _sprite,
      _o.IllustratedNum,
      _o.Reputation);
  }
}

public class FishingItemT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("category")]
  public int Category { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }
  [Newtonsoft.Json.JsonProperty("pic")]
  public string Pic { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("shap")]
  public int Shap { get; set; }
  [Newtonsoft.Json.JsonProperty("quality")]
  public int Quality { get; set; }
  [Newtonsoft.Json.JsonProperty("tech")]
  public List<int> Tech { get; set; }
  [Newtonsoft.Json.JsonProperty("price")]
  public List<int> Price { get; set; }
  [Newtonsoft.Json.JsonProperty("size_weight")]
  public List<WWParser.Defs.IntArrayT> SizeWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("relation")]
  public int Relation { get; set; }
  [Newtonsoft.Json.JsonProperty("child_relation")]
  public int ChildRelation { get; set; }
  [Newtonsoft.Json.JsonProperty("convert_item")]
  public List<WWParser.Defs.DicIntIntT> ConvertItem { get; set; }
  [Newtonsoft.Json.JsonProperty("can_delete")]
  public bool CanDelete { get; set; }
  [Newtonsoft.Json.JsonProperty("detection_unlock_condition")]
  public int DetectionUnlockCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("area")]
  public List<int> Area { get; set; }
  [Newtonsoft.Json.JsonProperty("time")]
  public int Time { get; set; }
  [Newtonsoft.Json.JsonProperty("color")]
  public string Color { get; set; }
  [Newtonsoft.Json.JsonProperty("sprite")]
  public string Sprite { get; set; }
  [Newtonsoft.Json.JsonProperty("illustrated_num")]
  public int IllustratedNum { get; set; }
  [Newtonsoft.Json.JsonProperty("reputation")]
  public int Reputation { get; set; }

  public FishingItemT() {
    this.Id = 0;
    this.Type = 0;
    this.Category = 0;
    this.Name = null;
    this.Desc = null;
    this.Pic = null;
    this.Icon = null;
    this.Shap = 0;
    this.Quality = 2;
    this.Tech = null;
    this.Price = null;
    this.SizeWeight = null;
    this.Relation = 0;
    this.ChildRelation = 0;
    this.ConvertItem = null;
    this.CanDelete = false;
    this.DetectionUnlockCondition = 0;
    this.Area = null;
    this.Time = 0;
    this.Color = null;
    this.Sprite = null;
    this.IllustratedNum = 0;
    this.Reputation = 0;
  }
}


static public class FishingItemVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Category*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Name*/, false)
      && verifier.VerifyString(tablePos, 12 /*Desc*/, false)
      && verifier.VerifyString(tablePos, 14 /*Pic*/, false)
      && verifier.VerifyString(tablePos, 16 /*Icon*/, false)
      && verifier.VerifyField(tablePos, 18 /*Shap*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*Quality*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*Tech*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 24 /*Price*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 26 /*SizeWeight*/, WWParser.Defs.IntArrayVerify.Verify, false)
      && verifier.VerifyField(tablePos, 28 /*Relation*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*ChildRelation*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 32 /*ConvertItem*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 34 /*CanDelete*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 36 /*DetectionUnlockCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 38 /*Area*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 40 /*Time*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 42 /*Color*/, false)
      && verifier.VerifyString(tablePos, 44 /*Sprite*/, false)
      && verifier.VerifyField(tablePos, 46 /*IllustratedNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*Reputation*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
