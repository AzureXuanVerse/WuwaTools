// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TeamParKOurCfg : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TeamParKOurCfg GetRootAsTeamParKOurCfg(ByteBuffer _bb) { return GetRootAsTeamParKOurCfg(_bb, new TeamParKOurCfg()); }
  public static TeamParKOurCfg GetRootAsTeamParKOurCfg(ByteBuffer _bb, TeamParKOurCfg obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TeamParKOurCfg __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int OpenDay { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TitleText { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleTextBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTitleTextBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTitleTextArray() { return __p.__vector_as_array<byte>(12); }
  public string DescPicPath { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescPicPathBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetDescPicPathBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDescPicPathArray() { return __p.__vector_as_array<byte>(14); }
  public string RomePath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRomePathBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetRomePathBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetRomePathArray() { return __p.__vector_as_array<byte>(16); }
  public int TaskList(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TaskListLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTaskListBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetTaskListBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetTaskListArray() { return __p.__vector_as_array<int>(18); }

  public static Offset<WWParser.Defs.TeamParKOurCfg> CreateTeamParKOurCfg(FlatBufferBuilder builder,
      int id = 0,
      int activity_id = 0,
      int inst_id = 0,
      int open_day = 0,
      StringOffset title_textOffset = default(StringOffset),
      StringOffset desc_pic_pathOffset = default(StringOffset),
      StringOffset rome_pathOffset = default(StringOffset),
      VectorOffset task_listOffset = default(VectorOffset)) {
    builder.StartTable(8);
    TeamParKOurCfg.AddTaskList(builder, task_listOffset);
    TeamParKOurCfg.AddRomePath(builder, rome_pathOffset);
    TeamParKOurCfg.AddDescPicPath(builder, desc_pic_pathOffset);
    TeamParKOurCfg.AddTitleText(builder, title_textOffset);
    TeamParKOurCfg.AddOpenDay(builder, open_day);
    TeamParKOurCfg.AddInstId(builder, inst_id);
    TeamParKOurCfg.AddActivityId(builder, activity_id);
    TeamParKOurCfg.AddId(builder, id);
    return TeamParKOurCfg.EndTeamParKOurCfg(builder);
  }

  public static void StartTeamParKOurCfg(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddInstId(FlatBufferBuilder builder, int instId) { builder.AddInt(2, instId, 0); }
  public static void AddOpenDay(FlatBufferBuilder builder, int openDay) { builder.AddInt(3, openDay, 0); }
  public static void AddTitleText(FlatBufferBuilder builder, StringOffset titleTextOffset) { builder.AddOffset(4, titleTextOffset.Value, 0); }
  public static void AddDescPicPath(FlatBufferBuilder builder, StringOffset descPicPathOffset) { builder.AddOffset(5, descPicPathOffset.Value, 0); }
  public static void AddRomePath(FlatBufferBuilder builder, StringOffset romePathOffset) { builder.AddOffset(6, romePathOffset.Value, 0); }
  public static void AddTaskList(FlatBufferBuilder builder, VectorOffset taskListOffset) { builder.AddOffset(7, taskListOffset.Value, 0); }
  public static VectorOffset CreateTaskListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTaskListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTaskListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTaskListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTaskListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.TeamParKOurCfg> EndTeamParKOurCfg(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.TeamParKOurCfg>(o);
  }
  public TeamParKOurCfgT UnPack() {
    var _o = new TeamParKOurCfgT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TeamParKOurCfgT _o) {
    _o.Id = this.Id;
    _o.ActivityId = this.ActivityId;
    _o.InstId = this.InstId;
    _o.OpenDay = this.OpenDay;
    _o.TitleText = this.TitleText;
    _o.DescPicPath = this.DescPicPath;
    _o.RomePath = this.RomePath;
    _o.TaskList = new List<int>();
    for (var _j = 0; _j < this.TaskListLength; ++_j) {_o.TaskList.Add(this.TaskList(_j));}
  }
  public static Offset<WWParser.Defs.TeamParKOurCfg> Pack(FlatBufferBuilder builder, TeamParKOurCfgT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.TeamParKOurCfg>);
    var _title_text = _o.TitleText == null ? default(StringOffset) : builder.CreateString(_o.TitleText);
    var _desc_pic_path = _o.DescPicPath == null ? default(StringOffset) : builder.CreateString(_o.DescPicPath);
    var _rome_path = _o.RomePath == null ? default(StringOffset) : builder.CreateString(_o.RomePath);
    var _task_list = default(VectorOffset);
    if (_o.TaskList != null) {
      var __task_list = _o.TaskList.ToArray();
      _task_list = CreateTaskListVector(builder, __task_list);
    }
    return CreateTeamParKOurCfg(
      builder,
      _o.Id,
      _o.ActivityId,
      _o.InstId,
      _o.OpenDay,
      _title_text,
      _desc_pic_path,
      _rome_path,
      _task_list);
  }
}

public class TeamParKOurCfgT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("inst_id")]
  public int InstId { get; set; }
  [Newtonsoft.Json.JsonProperty("open_day")]
  public int OpenDay { get; set; }
  [Newtonsoft.Json.JsonProperty("title_text")]
  public string TitleText { get; set; }
  [Newtonsoft.Json.JsonProperty("desc_pic_path")]
  public string DescPicPath { get; set; }
  [Newtonsoft.Json.JsonProperty("rome_path")]
  public string RomePath { get; set; }
  [Newtonsoft.Json.JsonProperty("task_list")]
  public List<int> TaskList { get; set; }

  public TeamParKOurCfgT() {
    this.Id = 0;
    this.ActivityId = 0;
    this.InstId = 0;
    this.OpenDay = 0;
    this.TitleText = null;
    this.DescPicPath = null;
    this.RomePath = null;
    this.TaskList = null;
  }
}


static public class TeamParKOurCfgVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*InstId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*OpenDay*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*TitleText*/, false)
      && verifier.VerifyString(tablePos, 14 /*DescPicPath*/, false)
      && verifier.VerifyString(tablePos, 16 /*RomePath*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*TaskList*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
