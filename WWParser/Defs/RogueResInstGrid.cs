// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueResInstGrid : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueResInstGrid GetRootAsRogueResInstGrid(ByteBuffer _bb) { return GetRootAsRogueResInstGrid(_bb, new RogueResInstGrid()); }
  public static RogueResInstGrid GetRootAsRogueResInstGrid(ByteBuffer _bb, RogueResInstGrid obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueResInstGrid __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SubLevelArray(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SubLevelArrayLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Title { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(8); }
  public int MapScaleMin { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1000; } }
  public int MapScaleMax { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)2000; } }
  public int MapInitScale { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1000; } }
  public int MapHeight { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)6000; } }
  public int MapWidth { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)6000; } }
  public string MapBackground { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapBackgroundBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetMapBackgroundBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetMapBackgroundArray() { return __p.__vector_as_array<byte>(20); }
  public string MapMusicState { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapMusicStateBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetMapMusicStateBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetMapMusicStateArray() { return __p.__vector_as_array<byte>(22); }
  public string LoseTitle { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLoseTitleBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetLoseTitleBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetLoseTitleArray() { return __p.__vector_as_array<byte>(24); }
  public string LoseDesc { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLoseDescBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetLoseDescBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetLoseDescArray() { return __p.__vector_as_array<byte>(26); }

  public static Offset<WWParser.Defs.RogueResInstGrid> CreateRogueResInstGrid(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset sub_level_arrayOffset = default(VectorOffset),
      StringOffset titleOffset = default(StringOffset),
      int map_scale_min = 1000,
      int map_scale_max = 2000,
      int map_init_scale = 1000,
      int map_height = 6000,
      int map_width = 6000,
      StringOffset map_backgroundOffset = default(StringOffset),
      StringOffset map_music_stateOffset = default(StringOffset),
      StringOffset lose_titleOffset = default(StringOffset),
      StringOffset lose_descOffset = default(StringOffset)) {
    builder.StartTable(12);
    RogueResInstGrid.AddLoseDesc(builder, lose_descOffset);
    RogueResInstGrid.AddLoseTitle(builder, lose_titleOffset);
    RogueResInstGrid.AddMapMusicState(builder, map_music_stateOffset);
    RogueResInstGrid.AddMapBackground(builder, map_backgroundOffset);
    RogueResInstGrid.AddMapWidth(builder, map_width);
    RogueResInstGrid.AddMapHeight(builder, map_height);
    RogueResInstGrid.AddMapInitScale(builder, map_init_scale);
    RogueResInstGrid.AddMapScaleMax(builder, map_scale_max);
    RogueResInstGrid.AddMapScaleMin(builder, map_scale_min);
    RogueResInstGrid.AddTitle(builder, titleOffset);
    RogueResInstGrid.AddSubLevelArray(builder, sub_level_arrayOffset);
    RogueResInstGrid.AddId(builder, id);
    return RogueResInstGrid.EndRogueResInstGrid(builder);
  }

  public static void StartRogueResInstGrid(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddSubLevelArray(FlatBufferBuilder builder, VectorOffset subLevelArrayOffset) { builder.AddOffset(1, subLevelArrayOffset.Value, 0); }
  public static VectorOffset CreateSubLevelArrayVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSubLevelArrayVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubLevelArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubLevelArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSubLevelArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(2, titleOffset.Value, 0); }
  public static void AddMapScaleMin(FlatBufferBuilder builder, int mapScaleMin) { builder.AddInt(3, mapScaleMin, 1000); }
  public static void AddMapScaleMax(FlatBufferBuilder builder, int mapScaleMax) { builder.AddInt(4, mapScaleMax, 2000); }
  public static void AddMapInitScale(FlatBufferBuilder builder, int mapInitScale) { builder.AddInt(5, mapInitScale, 1000); }
  public static void AddMapHeight(FlatBufferBuilder builder, int mapHeight) { builder.AddInt(6, mapHeight, 6000); }
  public static void AddMapWidth(FlatBufferBuilder builder, int mapWidth) { builder.AddInt(7, mapWidth, 6000); }
  public static void AddMapBackground(FlatBufferBuilder builder, StringOffset mapBackgroundOffset) { builder.AddOffset(8, mapBackgroundOffset.Value, 0); }
  public static void AddMapMusicState(FlatBufferBuilder builder, StringOffset mapMusicStateOffset) { builder.AddOffset(9, mapMusicStateOffset.Value, 0); }
  public static void AddLoseTitle(FlatBufferBuilder builder, StringOffset loseTitleOffset) { builder.AddOffset(10, loseTitleOffset.Value, 0); }
  public static void AddLoseDesc(FlatBufferBuilder builder, StringOffset loseDescOffset) { builder.AddOffset(11, loseDescOffset.Value, 0); }
  public static Offset<WWParser.Defs.RogueResInstGrid> EndRogueResInstGrid(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueResInstGrid>(o);
  }
  public RogueResInstGridT UnPack() {
    var _o = new RogueResInstGridT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueResInstGridT _o) {
    _o.Id = this.Id;
    _o.SubLevelArray = new List<string>();
    for (var _j = 0; _j < this.SubLevelArrayLength; ++_j) {_o.SubLevelArray.Add(this.SubLevelArray(_j));}
    _o.Title = this.Title;
    _o.MapScaleMin = this.MapScaleMin;
    _o.MapScaleMax = this.MapScaleMax;
    _o.MapInitScale = this.MapInitScale;
    _o.MapHeight = this.MapHeight;
    _o.MapWidth = this.MapWidth;
    _o.MapBackground = this.MapBackground;
    _o.MapMusicState = this.MapMusicState;
    _o.LoseTitle = this.LoseTitle;
    _o.LoseDesc = this.LoseDesc;
  }
  public static Offset<WWParser.Defs.RogueResInstGrid> Pack(FlatBufferBuilder builder, RogueResInstGridT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueResInstGrid>);
    var _sub_level_array = default(VectorOffset);
    if (_o.SubLevelArray != null) {
      var __sub_level_array = new StringOffset[_o.SubLevelArray.Count];
      for (var _j = 0; _j < __sub_level_array.Length; ++_j) { __sub_level_array[_j] = builder.CreateString(_o.SubLevelArray[_j]); }
      _sub_level_array = CreateSubLevelArrayVector(builder, __sub_level_array);
    }
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _map_background = _o.MapBackground == null ? default(StringOffset) : builder.CreateString(_o.MapBackground);
    var _map_music_state = _o.MapMusicState == null ? default(StringOffset) : builder.CreateString(_o.MapMusicState);
    var _lose_title = _o.LoseTitle == null ? default(StringOffset) : builder.CreateString(_o.LoseTitle);
    var _lose_desc = _o.LoseDesc == null ? default(StringOffset) : builder.CreateString(_o.LoseDesc);
    return CreateRogueResInstGrid(
      builder,
      _o.Id,
      _sub_level_array,
      _title,
      _o.MapScaleMin,
      _o.MapScaleMax,
      _o.MapInitScale,
      _o.MapHeight,
      _o.MapWidth,
      _map_background,
      _map_music_state,
      _lose_title,
      _lose_desc);
  }
}

public class RogueResInstGridT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("sub_level_array")]
  public List<string> SubLevelArray { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("map_scale_min")]
  public int MapScaleMin { get; set; }
  [Newtonsoft.Json.JsonProperty("map_scale_max")]
  public int MapScaleMax { get; set; }
  [Newtonsoft.Json.JsonProperty("map_init_scale")]
  public int MapInitScale { get; set; }
  [Newtonsoft.Json.JsonProperty("map_height")]
  public int MapHeight { get; set; }
  [Newtonsoft.Json.JsonProperty("map_width")]
  public int MapWidth { get; set; }
  [Newtonsoft.Json.JsonProperty("map_background")]
  public string MapBackground { get; set; }
  [Newtonsoft.Json.JsonProperty("map_music_state")]
  public string MapMusicState { get; set; }
  [Newtonsoft.Json.JsonProperty("lose_title")]
  public string LoseTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("lose_desc")]
  public string LoseDesc { get; set; }

  public RogueResInstGridT() {
    this.Id = 0;
    this.SubLevelArray = null;
    this.Title = null;
    this.MapScaleMin = 1000;
    this.MapScaleMax = 2000;
    this.MapInitScale = 1000;
    this.MapHeight = 6000;
    this.MapWidth = 6000;
    this.MapBackground = null;
    this.MapMusicState = null;
    this.LoseTitle = null;
    this.LoseDesc = null;
  }
}


static public class RogueResInstGridVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 6 /*SubLevelArray*/, false)
      && verifier.VerifyString(tablePos, 8 /*Title*/, false)
      && verifier.VerifyField(tablePos, 10 /*MapScaleMin*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*MapScaleMax*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*MapInitScale*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*MapHeight*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*MapWidth*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*MapBackground*/, false)
      && verifier.VerifyString(tablePos, 22 /*MapMusicState*/, false)
      && verifier.VerifyString(tablePos, 24 /*LoseTitle*/, false)
      && verifier.VerifyString(tablePos, 26 /*LoseDesc*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
