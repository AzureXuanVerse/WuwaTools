// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MapMark : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MapMark GetRootAsMapMark(ByteBuffer _bb) { return GetRootAsMapMark(_bb, new MapMark()); }
  public static MapMark GetRootAsMapMark(ByteBuffer _bb, MapMark obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MapMark __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MarkId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstanceDungeonId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)8; } }
  public int RelativeDungeonId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)8; } }
  public int RelativeType { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RelativeSubType { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RelativeId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EntityConfigId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FogHide { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.IntVector? MarkVector { get { int o = __p.__offset(22); return o != 0 ? (WWParser.Defs.IntVector?)(new WWParser.Defs.IntVector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int ObjectType { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MarkTitle { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMarkTitleBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetMarkTitleBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetMarkTitleArray() { return __p.__vector_as_array<byte>(26); }
  public string MarkDesc { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMarkDescBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetMarkDescBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetMarkDescArray() { return __p.__vector_as_array<byte>(28); }
  public int ToBeDiscovered { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IsMonster { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShowPriority { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShowRange(int j) { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ShowRangeLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetShowRangeBytes() { return __p.__vector_as_span<int>(36, 4); }
#else
  public ArraySegment<byte>? GetShowRangeBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public int[] GetShowRangeArray() { return __p.__vector_as_array<int>(36); }
  public string LockMarkPic { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLockMarkPicBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetLockMarkPicBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetLockMarkPicArray() { return __p.__vector_as_array<byte>(38); }
  public string UnlockMarkPic { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnlockMarkPicBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetUnlockMarkPicBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetUnlockMarkPicArray() { return __p.__vector_as_array<byte>(40); }
  public int ShowCondition { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FogShow { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapShow { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Scale { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public float CornerScale { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public int FirstReward { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Reward { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MultiMapFloorId { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConnetMultiMapFloorId(int j) { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ConnetMultiMapFloorIdLength { get { int o = __p.__offset(58); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetConnetMultiMapFloorIdBytes() { return __p.__vector_as_span<int>(58, 4); }
#else
  public ArraySegment<byte>? GetConnetMultiMapFloorIdBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public int[] GetConnetMultiMapFloorIdArray() { return __p.__vector_as_array<int>(58); }
  public int TrackHudEnable { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public float TrackAutoCancelDistance { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)400.0f; } }
  public int CreateOnStart { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int EnableQuickTransfer { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FinishIsShow { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HistoryState { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int GravityFlip { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.MapMark> CreateMapMark(FlatBufferBuilder builder,
      int mark_id = 0,
      int instance_dungeon_id = 0,
      int map_id = 8,
      int relative_dungeon_id = 8,
      int relative_type = 0,
      int relative_sub_type = 0,
      int relative_id = 0,
      int entity_config_id = 0,
      int fog_hide = 0,
      Offset<WWParser.Defs.IntVector> mark_vectorOffset = default(Offset<WWParser.Defs.IntVector>),
      int object_type = 0,
      StringOffset mark_titleOffset = default(StringOffset),
      StringOffset mark_descOffset = default(StringOffset),
      int to_be_discovered = 0,
      int is_monster = 0,
      int show_priority = 0,
      VectorOffset show_rangeOffset = default(VectorOffset),
      StringOffset lock_mark_picOffset = default(StringOffset),
      StringOffset unlock_mark_picOffset = default(StringOffset),
      int show_condition = 0,
      int fog_show = 0,
      int map_show = 0,
      float scale = 1.0f,
      float corner_scale = 1.0f,
      int first_reward = 0,
      int reward = 0,
      int multi_map_floor_id = 0,
      VectorOffset connet_multi_map_floor_idOffset = default(VectorOffset),
      int track_hud_enable = 1,
      float track_auto_cancel_distance = 400.0f,
      int create_on_start = 1,
      int enable_quick_transfer = 0,
      int finish_is_show = 0,
      int history_state = 1,
      int gravity_flip = 0) {
    builder.StartTable(35);
    MapMark.AddGravityFlip(builder, gravity_flip);
    MapMark.AddHistoryState(builder, history_state);
    MapMark.AddFinishIsShow(builder, finish_is_show);
    MapMark.AddEnableQuickTransfer(builder, enable_quick_transfer);
    MapMark.AddCreateOnStart(builder, create_on_start);
    MapMark.AddTrackAutoCancelDistance(builder, track_auto_cancel_distance);
    MapMark.AddTrackHudEnable(builder, track_hud_enable);
    MapMark.AddConnetMultiMapFloorId(builder, connet_multi_map_floor_idOffset);
    MapMark.AddMultiMapFloorId(builder, multi_map_floor_id);
    MapMark.AddReward(builder, reward);
    MapMark.AddFirstReward(builder, first_reward);
    MapMark.AddCornerScale(builder, corner_scale);
    MapMark.AddScale(builder, scale);
    MapMark.AddMapShow(builder, map_show);
    MapMark.AddFogShow(builder, fog_show);
    MapMark.AddShowCondition(builder, show_condition);
    MapMark.AddUnlockMarkPic(builder, unlock_mark_picOffset);
    MapMark.AddLockMarkPic(builder, lock_mark_picOffset);
    MapMark.AddShowRange(builder, show_rangeOffset);
    MapMark.AddShowPriority(builder, show_priority);
    MapMark.AddIsMonster(builder, is_monster);
    MapMark.AddToBeDiscovered(builder, to_be_discovered);
    MapMark.AddMarkDesc(builder, mark_descOffset);
    MapMark.AddMarkTitle(builder, mark_titleOffset);
    MapMark.AddObjectType(builder, object_type);
    MapMark.AddMarkVector(builder, mark_vectorOffset);
    MapMark.AddFogHide(builder, fog_hide);
    MapMark.AddEntityConfigId(builder, entity_config_id);
    MapMark.AddRelativeId(builder, relative_id);
    MapMark.AddRelativeSubType(builder, relative_sub_type);
    MapMark.AddRelativeType(builder, relative_type);
    MapMark.AddRelativeDungeonId(builder, relative_dungeon_id);
    MapMark.AddMapId(builder, map_id);
    MapMark.AddInstanceDungeonId(builder, instance_dungeon_id);
    MapMark.AddMarkId(builder, mark_id);
    return MapMark.EndMapMark(builder);
  }

  public static void StartMapMark(FlatBufferBuilder builder) { builder.StartTable(35); }
  public static void AddMarkId(FlatBufferBuilder builder, int markId) { builder.AddInt(0, markId, 0); }
  public static void AddInstanceDungeonId(FlatBufferBuilder builder, int instanceDungeonId) { builder.AddInt(1, instanceDungeonId, 0); }
  public static void AddMapId(FlatBufferBuilder builder, int mapId) { builder.AddInt(2, mapId, 8); }
  public static void AddRelativeDungeonId(FlatBufferBuilder builder, int relativeDungeonId) { builder.AddInt(3, relativeDungeonId, 8); }
  public static void AddRelativeType(FlatBufferBuilder builder, int relativeType) { builder.AddInt(4, relativeType, 0); }
  public static void AddRelativeSubType(FlatBufferBuilder builder, int relativeSubType) { builder.AddInt(5, relativeSubType, 0); }
  public static void AddRelativeId(FlatBufferBuilder builder, int relativeId) { builder.AddInt(6, relativeId, 0); }
  public static void AddEntityConfigId(FlatBufferBuilder builder, int entityConfigId) { builder.AddInt(7, entityConfigId, 0); }
  public static void AddFogHide(FlatBufferBuilder builder, int fogHide) { builder.AddInt(8, fogHide, 0); }
  public static void AddMarkVector(FlatBufferBuilder builder, Offset<WWParser.Defs.IntVector> markVectorOffset) { builder.AddOffset(9, markVectorOffset.Value, 0); }
  public static void AddObjectType(FlatBufferBuilder builder, int objectType) { builder.AddInt(10, objectType, 0); }
  public static void AddMarkTitle(FlatBufferBuilder builder, StringOffset markTitleOffset) { builder.AddOffset(11, markTitleOffset.Value, 0); }
  public static void AddMarkDesc(FlatBufferBuilder builder, StringOffset markDescOffset) { builder.AddOffset(12, markDescOffset.Value, 0); }
  public static void AddToBeDiscovered(FlatBufferBuilder builder, int toBeDiscovered) { builder.AddInt(13, toBeDiscovered, 0); }
  public static void AddIsMonster(FlatBufferBuilder builder, int isMonster) { builder.AddInt(14, isMonster, 0); }
  public static void AddShowPriority(FlatBufferBuilder builder, int showPriority) { builder.AddInt(15, showPriority, 0); }
  public static void AddShowRange(FlatBufferBuilder builder, VectorOffset showRangeOffset) { builder.AddOffset(16, showRangeOffset.Value, 0); }
  public static VectorOffset CreateShowRangeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateShowRangeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowRangeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowRangeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShowRangeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLockMarkPic(FlatBufferBuilder builder, StringOffset lockMarkPicOffset) { builder.AddOffset(17, lockMarkPicOffset.Value, 0); }
  public static void AddUnlockMarkPic(FlatBufferBuilder builder, StringOffset unlockMarkPicOffset) { builder.AddOffset(18, unlockMarkPicOffset.Value, 0); }
  public static void AddShowCondition(FlatBufferBuilder builder, int showCondition) { builder.AddInt(19, showCondition, 0); }
  public static void AddFogShow(FlatBufferBuilder builder, int fogShow) { builder.AddInt(20, fogShow, 0); }
  public static void AddMapShow(FlatBufferBuilder builder, int mapShow) { builder.AddInt(21, mapShow, 0); }
  public static void AddScale(FlatBufferBuilder builder, float scale) { builder.AddFloat(22, scale, 1.0f); }
  public static void AddCornerScale(FlatBufferBuilder builder, float cornerScale) { builder.AddFloat(23, cornerScale, 1.0f); }
  public static void AddFirstReward(FlatBufferBuilder builder, int firstReward) { builder.AddInt(24, firstReward, 0); }
  public static void AddReward(FlatBufferBuilder builder, int reward) { builder.AddInt(25, reward, 0); }
  public static void AddMultiMapFloorId(FlatBufferBuilder builder, int multiMapFloorId) { builder.AddInt(26, multiMapFloorId, 0); }
  public static void AddConnetMultiMapFloorId(FlatBufferBuilder builder, VectorOffset connetMultiMapFloorIdOffset) { builder.AddOffset(27, connetMultiMapFloorIdOffset.Value, 0); }
  public static VectorOffset CreateConnetMultiMapFloorIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConnetMultiMapFloorIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConnetMultiMapFloorIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConnetMultiMapFloorIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConnetMultiMapFloorIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTrackHudEnable(FlatBufferBuilder builder, int trackHudEnable) { builder.AddInt(28, trackHudEnable, 1); }
  public static void AddTrackAutoCancelDistance(FlatBufferBuilder builder, float trackAutoCancelDistance) { builder.AddFloat(29, trackAutoCancelDistance, 400.0f); }
  public static void AddCreateOnStart(FlatBufferBuilder builder, int createOnStart) { builder.AddInt(30, createOnStart, 1); }
  public static void AddEnableQuickTransfer(FlatBufferBuilder builder, int enableQuickTransfer) { builder.AddInt(31, enableQuickTransfer, 0); }
  public static void AddFinishIsShow(FlatBufferBuilder builder, int finishIsShow) { builder.AddInt(32, finishIsShow, 0); }
  public static void AddHistoryState(FlatBufferBuilder builder, int historyState) { builder.AddInt(33, historyState, 1); }
  public static void AddGravityFlip(FlatBufferBuilder builder, int gravityFlip) { builder.AddInt(34, gravityFlip, 0); }
  public static Offset<WWParser.Defs.MapMark> EndMapMark(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MapMark>(o);
  }
  public MapMarkT UnPack() {
    var _o = new MapMarkT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MapMarkT _o) {
    _o.MarkId = this.MarkId;
    _o.InstanceDungeonId = this.InstanceDungeonId;
    _o.MapId = this.MapId;
    _o.RelativeDungeonId = this.RelativeDungeonId;
    _o.RelativeType = this.RelativeType;
    _o.RelativeSubType = this.RelativeSubType;
    _o.RelativeId = this.RelativeId;
    _o.EntityConfigId = this.EntityConfigId;
    _o.FogHide = this.FogHide;
    _o.MarkVector = this.MarkVector.HasValue ? this.MarkVector.Value.UnPack() : null;
    _o.ObjectType = this.ObjectType;
    _o.MarkTitle = this.MarkTitle;
    _o.MarkDesc = this.MarkDesc;
    _o.ToBeDiscovered = this.ToBeDiscovered;
    _o.IsMonster = this.IsMonster;
    _o.ShowPriority = this.ShowPriority;
    _o.ShowRange = new List<int>();
    for (var _j = 0; _j < this.ShowRangeLength; ++_j) {_o.ShowRange.Add(this.ShowRange(_j));}
    _o.LockMarkPic = this.LockMarkPic;
    _o.UnlockMarkPic = this.UnlockMarkPic;
    _o.ShowCondition = this.ShowCondition;
    _o.FogShow = this.FogShow;
    _o.MapShow = this.MapShow;
    _o.Scale = this.Scale;
    _o.CornerScale = this.CornerScale;
    _o.FirstReward = this.FirstReward;
    _o.Reward = this.Reward;
    _o.MultiMapFloorId = this.MultiMapFloorId;
    _o.ConnetMultiMapFloorId = new List<int>();
    for (var _j = 0; _j < this.ConnetMultiMapFloorIdLength; ++_j) {_o.ConnetMultiMapFloorId.Add(this.ConnetMultiMapFloorId(_j));}
    _o.TrackHudEnable = this.TrackHudEnable;
    _o.TrackAutoCancelDistance = this.TrackAutoCancelDistance;
    _o.CreateOnStart = this.CreateOnStart;
    _o.EnableQuickTransfer = this.EnableQuickTransfer;
    _o.FinishIsShow = this.FinishIsShow;
    _o.HistoryState = this.HistoryState;
    _o.GravityFlip = this.GravityFlip;
  }
  public static Offset<WWParser.Defs.MapMark> Pack(FlatBufferBuilder builder, MapMarkT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MapMark>);
    var _mark_vector = _o.MarkVector == null ? default(Offset<WWParser.Defs.IntVector>) : WWParser.Defs.IntVector.Pack(builder, _o.MarkVector);
    var _mark_title = _o.MarkTitle == null ? default(StringOffset) : builder.CreateString(_o.MarkTitle);
    var _mark_desc = _o.MarkDesc == null ? default(StringOffset) : builder.CreateString(_o.MarkDesc);
    var _show_range = default(VectorOffset);
    if (_o.ShowRange != null) {
      var __show_range = _o.ShowRange.ToArray();
      _show_range = CreateShowRangeVector(builder, __show_range);
    }
    var _lock_mark_pic = _o.LockMarkPic == null ? default(StringOffset) : builder.CreateString(_o.LockMarkPic);
    var _unlock_mark_pic = _o.UnlockMarkPic == null ? default(StringOffset) : builder.CreateString(_o.UnlockMarkPic);
    var _connet_multi_map_floor_id = default(VectorOffset);
    if (_o.ConnetMultiMapFloorId != null) {
      var __connet_multi_map_floor_id = _o.ConnetMultiMapFloorId.ToArray();
      _connet_multi_map_floor_id = CreateConnetMultiMapFloorIdVector(builder, __connet_multi_map_floor_id);
    }
    return CreateMapMark(
      builder,
      _o.MarkId,
      _o.InstanceDungeonId,
      _o.MapId,
      _o.RelativeDungeonId,
      _o.RelativeType,
      _o.RelativeSubType,
      _o.RelativeId,
      _o.EntityConfigId,
      _o.FogHide,
      _mark_vector,
      _o.ObjectType,
      _mark_title,
      _mark_desc,
      _o.ToBeDiscovered,
      _o.IsMonster,
      _o.ShowPriority,
      _show_range,
      _lock_mark_pic,
      _unlock_mark_pic,
      _o.ShowCondition,
      _o.FogShow,
      _o.MapShow,
      _o.Scale,
      _o.CornerScale,
      _o.FirstReward,
      _o.Reward,
      _o.MultiMapFloorId,
      _connet_multi_map_floor_id,
      _o.TrackHudEnable,
      _o.TrackAutoCancelDistance,
      _o.CreateOnStart,
      _o.EnableQuickTransfer,
      _o.FinishIsShow,
      _o.HistoryState,
      _o.GravityFlip);
  }
}

public class MapMarkT
{
  [Newtonsoft.Json.JsonProperty("mark_id")]
  public int MarkId { get; set; }
  [Newtonsoft.Json.JsonProperty("instance_dungeon_id")]
  public int InstanceDungeonId { get; set; }
  [Newtonsoft.Json.JsonProperty("map_id")]
  public int MapId { get; set; }
  [Newtonsoft.Json.JsonProperty("relative_dungeon_id")]
  public int RelativeDungeonId { get; set; }
  [Newtonsoft.Json.JsonProperty("relative_type")]
  public int RelativeType { get; set; }
  [Newtonsoft.Json.JsonProperty("relative_sub_type")]
  public int RelativeSubType { get; set; }
  [Newtonsoft.Json.JsonProperty("relative_id")]
  public int RelativeId { get; set; }
  [Newtonsoft.Json.JsonProperty("entity_config_id")]
  public int EntityConfigId { get; set; }
  [Newtonsoft.Json.JsonProperty("fog_hide")]
  public int FogHide { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_vector")]
  public WWParser.Defs.IntVectorT MarkVector { get; set; }
  [Newtonsoft.Json.JsonProperty("object_type")]
  public int ObjectType { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_title")]
  public string MarkTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_desc")]
  public string MarkDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("to_be_discovered")]
  public int ToBeDiscovered { get; set; }
  [Newtonsoft.Json.JsonProperty("is_monster")]
  public int IsMonster { get; set; }
  [Newtonsoft.Json.JsonProperty("show_priority")]
  public int ShowPriority { get; set; }
  [Newtonsoft.Json.JsonProperty("show_range")]
  public List<int> ShowRange { get; set; }
  [Newtonsoft.Json.JsonProperty("lock_mark_pic")]
  public string LockMarkPic { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_mark_pic")]
  public string UnlockMarkPic { get; set; }
  [Newtonsoft.Json.JsonProperty("show_condition")]
  public int ShowCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("fog_show")]
  public int FogShow { get; set; }
  [Newtonsoft.Json.JsonProperty("map_show")]
  public int MapShow { get; set; }
  [Newtonsoft.Json.JsonProperty("scale")]
  public float Scale { get; set; }
  [Newtonsoft.Json.JsonProperty("corner_scale")]
  public float CornerScale { get; set; }
  [Newtonsoft.Json.JsonProperty("first_reward")]
  public int FirstReward { get; set; }
  [Newtonsoft.Json.JsonProperty("reward")]
  public int Reward { get; set; }
  [Newtonsoft.Json.JsonProperty("multi_map_floor_id")]
  public int MultiMapFloorId { get; set; }
  [Newtonsoft.Json.JsonProperty("connet_multi_map_floor_id")]
  public List<int> ConnetMultiMapFloorId { get; set; }
  [Newtonsoft.Json.JsonProperty("track_hud_enable")]
  public int TrackHudEnable { get; set; }
  [Newtonsoft.Json.JsonProperty("track_auto_cancel_distance")]
  public float TrackAutoCancelDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("create_on_start")]
  public int CreateOnStart { get; set; }
  [Newtonsoft.Json.JsonProperty("enable_quick_transfer")]
  public int EnableQuickTransfer { get; set; }
  [Newtonsoft.Json.JsonProperty("finish_is_show")]
  public int FinishIsShow { get; set; }
  [Newtonsoft.Json.JsonProperty("history_state")]
  public int HistoryState { get; set; }
  [Newtonsoft.Json.JsonProperty("gravity_flip")]
  public int GravityFlip { get; set; }

  public MapMarkT() {
    this.MarkId = 0;
    this.InstanceDungeonId = 0;
    this.MapId = 8;
    this.RelativeDungeonId = 8;
    this.RelativeType = 0;
    this.RelativeSubType = 0;
    this.RelativeId = 0;
    this.EntityConfigId = 0;
    this.FogHide = 0;
    this.MarkVector = null;
    this.ObjectType = 0;
    this.MarkTitle = null;
    this.MarkDesc = null;
    this.ToBeDiscovered = 0;
    this.IsMonster = 0;
    this.ShowPriority = 0;
    this.ShowRange = null;
    this.LockMarkPic = null;
    this.UnlockMarkPic = null;
    this.ShowCondition = 0;
    this.FogShow = 0;
    this.MapShow = 0;
    this.Scale = 1.0f;
    this.CornerScale = 1.0f;
    this.FirstReward = 0;
    this.Reward = 0;
    this.MultiMapFloorId = 0;
    this.ConnetMultiMapFloorId = null;
    this.TrackHudEnable = 1;
    this.TrackAutoCancelDistance = 400.0f;
    this.CreateOnStart = 1;
    this.EnableQuickTransfer = 0;
    this.FinishIsShow = 0;
    this.HistoryState = 1;
    this.GravityFlip = 0;
  }
}


static public class MapMarkVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*MarkId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*InstanceDungeonId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*MapId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*RelativeDungeonId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*RelativeType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*RelativeSubType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*RelativeId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*EntityConfigId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*FogHide*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 22 /*MarkVector*/, WWParser.Defs.IntVectorVerify.Verify, false)
      && verifier.VerifyField(tablePos, 24 /*ObjectType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 26 /*MarkTitle*/, false)
      && verifier.VerifyString(tablePos, 28 /*MarkDesc*/, false)
      && verifier.VerifyField(tablePos, 30 /*ToBeDiscovered*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*IsMonster*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*ShowPriority*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 36 /*ShowRange*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 38 /*LockMarkPic*/, false)
      && verifier.VerifyString(tablePos, 40 /*UnlockMarkPic*/, false)
      && verifier.VerifyField(tablePos, 42 /*ShowCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*FogShow*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*MapShow*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*Scale*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*CornerScale*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*FirstReward*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*Reward*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*MultiMapFloorId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 58 /*ConnetMultiMapFloorId*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 60 /*TrackHudEnable*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*TrackAutoCancelDistance*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*CreateOnStart*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 66 /*EnableQuickTransfer*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 68 /*FinishIsShow*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 70 /*HistoryState*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 72 /*GravityFlip*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
