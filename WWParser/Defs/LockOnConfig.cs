// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LockOnConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static LockOnConfig GetRootAsLockOnConfig(ByteBuffer _bb) { return GetRootAsLockOnConfig(_bb, new LockOnConfig()); }
  public static LockOnConfig GetRootAsLockOnConfig(ByteBuffer _bb, LockOnConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LockOnConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Distance { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UpDistance { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)300; } }
  public int DownDistance { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)800; } }
  public int SectorRadius { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SectorAngle { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float ToleranceAngle { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)22.5f; } }

  public static Offset<WWParser.Defs.LockOnConfig> CreateLockOnConfig(FlatBufferBuilder builder,
      int id = 0,
      int distance = 0,
      int up_distance = 300,
      int down_distance = 800,
      int sector_radius = 0,
      int sector_angle = 0,
      float tolerance_angle = 22.5f) {
    builder.StartTable(7);
    LockOnConfig.AddToleranceAngle(builder, tolerance_angle);
    LockOnConfig.AddSectorAngle(builder, sector_angle);
    LockOnConfig.AddSectorRadius(builder, sector_radius);
    LockOnConfig.AddDownDistance(builder, down_distance);
    LockOnConfig.AddUpDistance(builder, up_distance);
    LockOnConfig.AddDistance(builder, distance);
    LockOnConfig.AddId(builder, id);
    return LockOnConfig.EndLockOnConfig(builder);
  }

  public static void StartLockOnConfig(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDistance(FlatBufferBuilder builder, int distance) { builder.AddInt(1, distance, 0); }
  public static void AddUpDistance(FlatBufferBuilder builder, int upDistance) { builder.AddInt(2, upDistance, 300); }
  public static void AddDownDistance(FlatBufferBuilder builder, int downDistance) { builder.AddInt(3, downDistance, 800); }
  public static void AddSectorRadius(FlatBufferBuilder builder, int sectorRadius) { builder.AddInt(4, sectorRadius, 0); }
  public static void AddSectorAngle(FlatBufferBuilder builder, int sectorAngle) { builder.AddInt(5, sectorAngle, 0); }
  public static void AddToleranceAngle(FlatBufferBuilder builder, float toleranceAngle) { builder.AddFloat(6, toleranceAngle, 22.5f); }
  public static Offset<WWParser.Defs.LockOnConfig> EndLockOnConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.LockOnConfig>(o);
  }
  public LockOnConfigT UnPack() {
    var _o = new LockOnConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LockOnConfigT _o) {
    _o.Id = this.Id;
    _o.Distance = this.Distance;
    _o.UpDistance = this.UpDistance;
    _o.DownDistance = this.DownDistance;
    _o.SectorRadius = this.SectorRadius;
    _o.SectorAngle = this.SectorAngle;
    _o.ToleranceAngle = this.ToleranceAngle;
  }
  public static Offset<WWParser.Defs.LockOnConfig> Pack(FlatBufferBuilder builder, LockOnConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.LockOnConfig>);
    return CreateLockOnConfig(
      builder,
      _o.Id,
      _o.Distance,
      _o.UpDistance,
      _o.DownDistance,
      _o.SectorRadius,
      _o.SectorAngle,
      _o.ToleranceAngle);
  }
}

public class LockOnConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("distance")]
  public int Distance { get; set; }
  [Newtonsoft.Json.JsonProperty("up_distance")]
  public int UpDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("down_distance")]
  public int DownDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("sector_radius")]
  public int SectorRadius { get; set; }
  [Newtonsoft.Json.JsonProperty("sector_angle")]
  public int SectorAngle { get; set; }
  [Newtonsoft.Json.JsonProperty("tolerance_angle")]
  public float ToleranceAngle { get; set; }

  public LockOnConfigT() {
    this.Id = 0;
    this.Distance = 0;
    this.UpDistance = 300;
    this.DownDistance = 800;
    this.SectorRadius = 0;
    this.SectorAngle = 0;
    this.ToleranceAngle = 22.5f;
  }
}


static public class LockOnConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Distance*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*UpDistance*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*DownDistance*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*SectorRadius*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*SectorAngle*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*ToleranceAngle*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
