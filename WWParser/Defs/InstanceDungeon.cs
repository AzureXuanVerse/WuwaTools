// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct InstanceDungeon : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static InstanceDungeon GetRootAsInstanceDungeon(ByteBuffer _bb) { return GetRootAsInstanceDungeon(_bb, new InstanceDungeon()); }
  public static InstanceDungeon GetRootAsInstanceDungeon(ByteBuffer _bb, InstanceDungeon obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InstanceDungeon __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapConfigId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MapName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMapNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMapNameArray() { return __p.__vector_as_array<byte>(8); }
  public int InstType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstSubType { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WorldDungeonSubType { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.InstOnlineType OnlineType { get { int o = __p.__offset(16); return o != 0 ? (WWParser.Defs.InstOnlineType)__p.bb.GetInt(o + __p.bb_pos) : WWParser.Defs.InstOnlineType.Mixture; } }
  public int CustomTypes(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CustomTypesLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCustomTypesBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetCustomTypesBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetCustomTypesArray() { return __p.__vector_as_array<int>(18); }
  public int MiniMapId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public string SubLevels(int j) { int o = __p.__offset(22); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SubLevelsLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int FightFormationId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)2; } }
  public int RoleTypeList(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RoleTypeListLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRoleTypeListBytes() { return __p.__vector_as_span<int>(26, 4); }
#else
  public ArraySegment<byte>? GetRoleTypeListBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public int[] GetRoleTypeListArray() { return __p.__vector_as_array<int>(26); }
  public int TrialRoleInfo(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TrialRoleInfoLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTrialRoleInfoBytes() { return __p.__vector_as_span<int>(28, 4); }
#else
  public ArraySegment<byte>? GetTrialRoleInfoBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public int[] GetTrialRoleInfoArray() { return __p.__vector_as_array<int>(28); }
  public int TrialRoleFormation { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ReviveId { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BornPosition(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BornPositionLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBornPositionBytes() { return __p.__vector_as_span<int>(34, 4); }
#else
  public ArraySegment<byte>? GetBornPositionBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public int[] GetBornPositionArray() { return __p.__vector_as_array<int>(34); }
  public int BornRotation(int j) { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BornRotationLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBornRotationBytes() { return __p.__vector_as_span<int>(36, 4); }
#else
  public ArraySegment<byte>? GetBornRotationBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public int[] GetBornRotationArray() { return __p.__vector_as_array<int>(36); }
  public int RecoverWorldLocation(int j) { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RecoverWorldLocationLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRecoverWorldLocationBytes() { return __p.__vector_as_span<int>(38, 4); }
#else
  public ArraySegment<byte>? GetRecoverWorldLocationBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public int[] GetRecoverWorldLocationArray() { return __p.__vector_as_array<int>(38); }
  public int ExitDungeonConfirmId(int j) { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ExitDungeonConfirmIdLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetExitDungeonConfirmIdBytes() { return __p.__vector_as_span<int>(40, 4); }
#else
  public ArraySegment<byte>? GetExitDungeonConfirmIdBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public int[] GetExitDungeonConfirmIdArray() { return __p.__vector_as_array<int>(40); }
  public WWParser.Defs.DungeonEntrance? EntranceEntities(int j) { int o = __p.__offset(42); return o != 0 ? (WWParser.Defs.DungeonEntrance?)(new WWParser.Defs.DungeonEntrance()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EntranceEntitiesLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int ExitEntities(int j) { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ExitEntitiesLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetExitEntitiesBytes() { return __p.__vector_as_span<int>(44, 4); }
#else
  public ArraySegment<byte>? GetExitEntitiesBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public int[] GetExitEntitiesArray() { return __p.__vector_as_array<int>(44); }
  public string DungeonDesc { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDungeonDescBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetDungeonDescBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetDungeonDescArray() { return __p.__vector_as_array<byte>(46); }
  public int Title { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)999; } }
  public string BannerPath { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBannerPathBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetBannerPathBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetBannerPathArray() { return __p.__vector_as_array<byte>(50); }
  public int MonsterPreview(int j) { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MonsterPreviewLength { get { int o = __p.__offset(52); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetMonsterPreviewBytes() { return __p.__vector_as_span<int>(52, 4); }
#else
  public ArraySegment<byte>? GetMonsterPreviewBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public int[] GetMonsterPreviewArray() { return __p.__vector_as_array<int>(52); }
  public string MonsterTips { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMonsterTipsBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetMonsterTipsBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetMonsterTipsArray() { return __p.__vector_as_array<byte>(54); }
  public int FirstRewardId { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardId { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RepeatRewardId { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExchangeRewardId { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SharedTreasureGroup(int j) { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SharedTreasureGroupLength { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSharedTreasureGroupBytes() { return __p.__vector_as_span<int>(64, 4); }
#else
  public ArraySegment<byte>? GetSharedTreasureGroupBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public int[] GetSharedTreasureGroupArray() { return __p.__vector_as_array<int>(64); }
  public int EnterControlId { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EnterCondition(int j) { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EnterConditionLength { get { int o = __p.__offset(68); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEnterConditionBytes() { return __p.__vector_as_span<int>(68, 4); }
#else
  public ArraySegment<byte>? GetEnterConditionBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public int[] GetEnterConditionArray() { return __p.__vector_as_array<int>(68); }
  public string EnterConditionText { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnterConditionTextBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetEnterConditionTextBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetEnterConditionTextArray() { return __p.__vector_as_array<byte>(70); }
  public string DifficultyIcon { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDifficultyIconBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetDifficultyIconBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetDifficultyIconArray() { return __p.__vector_as_array<byte>(72); }
  public int EntityLevel { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? RecommendLevel(int j) { int o = __p.__offset(76); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RecommendLevelLength { get { int o = __p.__offset(76); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int RecommendRole(int j) { int o = __p.__offset(78); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RecommendRoleLength { get { int o = __p.__offset(78); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRecommendRoleBytes() { return __p.__vector_as_span<int>(78, 4); }
#else
  public ArraySegment<byte>? GetRecommendRoleBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public int[] GetRecommendRoleArray() { return __p.__vector_as_array<int>(78); }
  public int RecommendElement(int j) { int o = __p.__offset(80); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RecommendElementLength { get { int o = __p.__offset(80); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRecommendElementBytes() { return __p.__vector_as_span<int>(80, 4); }
#else
  public ArraySegment<byte>? GetRecommendElementBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public int[] GetRecommendElementArray() { return __p.__vector_as_array<int>(80); }
  public int ShareAttri { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int FightInfoDtType(int j) { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FightInfoDtTypeLength { get { int o = __p.__offset(84); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFightInfoDtTypeBytes() { return __p.__vector_as_span<int>(84, 4); }
#else
  public ArraySegment<byte>? GetFightInfoDtTypeBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public int[] GetFightInfoDtTypeArray() { return __p.__vector_as_array<int>(84); }
  public int SaveDays { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string LimitViewName(int j) { int o = __p.__offset(88); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LimitViewNameLength { get { int o = __p.__offset(88); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int CanUseItem { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int GameplayMode { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GuideType { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GuideValue { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SettleButtonType { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public WWParser.Defs.DicIntString? SubTitle(int j) { int o = __p.__offset(100); return o != 0 ? (WWParser.Defs.DicIntString?)(new WWParser.Defs.DicIntString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SubTitleLength { get { int o = __p.__offset(100); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string SubInstanceTitle { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSubInstanceTitleBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetSubInstanceTitleBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetSubInstanceTitleArray() { return __p.__vector_as_array<byte>(102); }
  public int AutoLeaveTime { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)300; } }
  public int LimitTime { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LeaveWaitTime { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string FailTips { get { int o = __p.__offset(110); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFailTipsBytes() { return __p.__vector_as_span<byte>(110, 1); }
#else
  public ArraySegment<byte>? GetFailTipsBytes() { return __p.__vector_as_arraysegment(110); }
#endif
  public byte[] GetFailTipsArray() { return __p.__vector_as_array<byte>(110); }
  public bool VerifyCreatureGen { get { int o = __p.__offset(112); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int DifficultyLevel(int j) { int o = __p.__offset(114); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DifficultyLevelLength { get { int o = __p.__offset(114); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDifficultyLevelBytes() { return __p.__vector_as_span<int>(114, 4); }
#else
  public ArraySegment<byte>? GetDifficultyLevelBytes() { return __p.__vector_as_arraysegment(114); }
#endif
  public int[] GetDifficultyLevelArray() { return __p.__vector_as_array<int>(114); }
  public string DifficultyDesc(int j) { int o = __p.__offset(116); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DifficultyDescLength { get { int o = __p.__offset(116); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Drop(int j) { int o = __p.__offset(118); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DropLength { get { int o = __p.__offset(118); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDropBytes() { return __p.__vector_as_span<int>(118, 4); }
#else
  public ArraySegment<byte>? GetDropBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public int[] GetDropArray() { return __p.__vector_as_array<int>(118); }
  public int EnterCount { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EnterConditionGroup { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string IconTagPath { get { int o = __p.__offset(124); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconTagPathBytes() { return __p.__vector_as_span<byte>(124, 1); }
#else
  public ArraySegment<byte>? GetIconTagPathBytes() { return __p.__vector_as_arraysegment(124); }
#endif
  public byte[] GetIconTagPathArray() { return __p.__vector_as_array<byte>(124); }
  public int ViewMapId { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? RenderSettings(int j) { int o = __p.__offset(128); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RenderSettingsLength { get { int o = __p.__offset(128); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int DropVisionLimit { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.InstanceDungeon> CreateInstanceDungeon(FlatBufferBuilder builder,
      int id = 0,
      int map_config_id = 0,
      StringOffset map_nameOffset = default(StringOffset),
      int inst_type = 0,
      int inst_sub_type = 0,
      int world_dungeon_sub_type = 0,
      WWParser.Defs.InstOnlineType online_type = WWParser.Defs.InstOnlineType.Mixture,
      VectorOffset custom_typesOffset = default(VectorOffset),
      int mini_map_id = 1,
      VectorOffset sub_levelsOffset = default(VectorOffset),
      int fight_formation_id = 2,
      VectorOffset role_type_listOffset = default(VectorOffset),
      VectorOffset trial_role_infoOffset = default(VectorOffset),
      int trial_role_formation = 0,
      int revive_id = 0,
      VectorOffset born_positionOffset = default(VectorOffset),
      VectorOffset born_rotationOffset = default(VectorOffset),
      VectorOffset recover_world_locationOffset = default(VectorOffset),
      VectorOffset exit_dungeon_confirm_idOffset = default(VectorOffset),
      VectorOffset entrance_entitiesOffset = default(VectorOffset),
      VectorOffset exit_entitiesOffset = default(VectorOffset),
      StringOffset dungeon_descOffset = default(StringOffset),
      int title = 999,
      StringOffset banner_pathOffset = default(StringOffset),
      VectorOffset monster_previewOffset = default(VectorOffset),
      StringOffset monster_tipsOffset = default(StringOffset),
      int first_reward_id = 0,
      int reward_id = 0,
      int repeat_reward_id = 0,
      int exchange_reward_id = 0,
      VectorOffset shared_treasure_groupOffset = default(VectorOffset),
      int enter_control_id = 0,
      VectorOffset enter_conditionOffset = default(VectorOffset),
      StringOffset enter_condition_textOffset = default(StringOffset),
      StringOffset difficulty_iconOffset = default(StringOffset),
      int entity_level = 0,
      VectorOffset recommend_levelOffset = default(VectorOffset),
      VectorOffset recommend_roleOffset = default(VectorOffset),
      VectorOffset recommend_elementOffset = default(VectorOffset),
      int share_attri = 1,
      VectorOffset fight_info_dt_typeOffset = default(VectorOffset),
      int save_days = 0,
      VectorOffset limit_view_nameOffset = default(VectorOffset),
      int can_use_item = 1,
      int gameplay_mode = 0,
      int guide_type = 0,
      int guide_value = 0,
      int settle_button_type = 1,
      VectorOffset sub_titleOffset = default(VectorOffset),
      StringOffset sub_instance_titleOffset = default(StringOffset),
      int auto_leave_time = 300,
      int limit_time = 0,
      int leave_wait_time = 0,
      StringOffset fail_tipsOffset = default(StringOffset),
      bool verify_creature_gen = false,
      VectorOffset difficulty_levelOffset = default(VectorOffset),
      VectorOffset difficulty_descOffset = default(VectorOffset),
      VectorOffset dropOffset = default(VectorOffset),
      int enter_count = 0,
      int enter_condition_group = 0,
      StringOffset icon_tag_pathOffset = default(StringOffset),
      int view_map_id = 0,
      VectorOffset render_settingsOffset = default(VectorOffset),
      int drop_vision_limit = 0) {
    builder.StartTable(64);
    InstanceDungeon.AddDropVisionLimit(builder, drop_vision_limit);
    InstanceDungeon.AddRenderSettings(builder, render_settingsOffset);
    InstanceDungeon.AddViewMapId(builder, view_map_id);
    InstanceDungeon.AddIconTagPath(builder, icon_tag_pathOffset);
    InstanceDungeon.AddEnterConditionGroup(builder, enter_condition_group);
    InstanceDungeon.AddEnterCount(builder, enter_count);
    InstanceDungeon.AddDrop(builder, dropOffset);
    InstanceDungeon.AddDifficultyDesc(builder, difficulty_descOffset);
    InstanceDungeon.AddDifficultyLevel(builder, difficulty_levelOffset);
    InstanceDungeon.AddFailTips(builder, fail_tipsOffset);
    InstanceDungeon.AddLeaveWaitTime(builder, leave_wait_time);
    InstanceDungeon.AddLimitTime(builder, limit_time);
    InstanceDungeon.AddAutoLeaveTime(builder, auto_leave_time);
    InstanceDungeon.AddSubInstanceTitle(builder, sub_instance_titleOffset);
    InstanceDungeon.AddSubTitle(builder, sub_titleOffset);
    InstanceDungeon.AddSettleButtonType(builder, settle_button_type);
    InstanceDungeon.AddGuideValue(builder, guide_value);
    InstanceDungeon.AddGuideType(builder, guide_type);
    InstanceDungeon.AddGameplayMode(builder, gameplay_mode);
    InstanceDungeon.AddCanUseItem(builder, can_use_item);
    InstanceDungeon.AddLimitViewName(builder, limit_view_nameOffset);
    InstanceDungeon.AddSaveDays(builder, save_days);
    InstanceDungeon.AddFightInfoDtType(builder, fight_info_dt_typeOffset);
    InstanceDungeon.AddShareAttri(builder, share_attri);
    InstanceDungeon.AddRecommendElement(builder, recommend_elementOffset);
    InstanceDungeon.AddRecommendRole(builder, recommend_roleOffset);
    InstanceDungeon.AddRecommendLevel(builder, recommend_levelOffset);
    InstanceDungeon.AddEntityLevel(builder, entity_level);
    InstanceDungeon.AddDifficultyIcon(builder, difficulty_iconOffset);
    InstanceDungeon.AddEnterConditionText(builder, enter_condition_textOffset);
    InstanceDungeon.AddEnterCondition(builder, enter_conditionOffset);
    InstanceDungeon.AddEnterControlId(builder, enter_control_id);
    InstanceDungeon.AddSharedTreasureGroup(builder, shared_treasure_groupOffset);
    InstanceDungeon.AddExchangeRewardId(builder, exchange_reward_id);
    InstanceDungeon.AddRepeatRewardId(builder, repeat_reward_id);
    InstanceDungeon.AddRewardId(builder, reward_id);
    InstanceDungeon.AddFirstRewardId(builder, first_reward_id);
    InstanceDungeon.AddMonsterTips(builder, monster_tipsOffset);
    InstanceDungeon.AddMonsterPreview(builder, monster_previewOffset);
    InstanceDungeon.AddBannerPath(builder, banner_pathOffset);
    InstanceDungeon.AddTitle(builder, title);
    InstanceDungeon.AddDungeonDesc(builder, dungeon_descOffset);
    InstanceDungeon.AddExitEntities(builder, exit_entitiesOffset);
    InstanceDungeon.AddEntranceEntities(builder, entrance_entitiesOffset);
    InstanceDungeon.AddExitDungeonConfirmId(builder, exit_dungeon_confirm_idOffset);
    InstanceDungeon.AddRecoverWorldLocation(builder, recover_world_locationOffset);
    InstanceDungeon.AddBornRotation(builder, born_rotationOffset);
    InstanceDungeon.AddBornPosition(builder, born_positionOffset);
    InstanceDungeon.AddReviveId(builder, revive_id);
    InstanceDungeon.AddTrialRoleFormation(builder, trial_role_formation);
    InstanceDungeon.AddTrialRoleInfo(builder, trial_role_infoOffset);
    InstanceDungeon.AddRoleTypeList(builder, role_type_listOffset);
    InstanceDungeon.AddFightFormationId(builder, fight_formation_id);
    InstanceDungeon.AddSubLevels(builder, sub_levelsOffset);
    InstanceDungeon.AddMiniMapId(builder, mini_map_id);
    InstanceDungeon.AddCustomTypes(builder, custom_typesOffset);
    InstanceDungeon.AddOnlineType(builder, online_type);
    InstanceDungeon.AddWorldDungeonSubType(builder, world_dungeon_sub_type);
    InstanceDungeon.AddInstSubType(builder, inst_sub_type);
    InstanceDungeon.AddInstType(builder, inst_type);
    InstanceDungeon.AddMapName(builder, map_nameOffset);
    InstanceDungeon.AddMapConfigId(builder, map_config_id);
    InstanceDungeon.AddId(builder, id);
    InstanceDungeon.AddVerifyCreatureGen(builder, verify_creature_gen);
    return InstanceDungeon.EndInstanceDungeon(builder);
  }

  public static void StartInstanceDungeon(FlatBufferBuilder builder) { builder.StartTable(64); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMapConfigId(FlatBufferBuilder builder, int mapConfigId) { builder.AddInt(1, mapConfigId, 0); }
  public static void AddMapName(FlatBufferBuilder builder, StringOffset mapNameOffset) { builder.AddOffset(2, mapNameOffset.Value, 0); }
  public static void AddInstType(FlatBufferBuilder builder, int instType) { builder.AddInt(3, instType, 0); }
  public static void AddInstSubType(FlatBufferBuilder builder, int instSubType) { builder.AddInt(4, instSubType, 0); }
  public static void AddWorldDungeonSubType(FlatBufferBuilder builder, int worldDungeonSubType) { builder.AddInt(5, worldDungeonSubType, 0); }
  public static void AddOnlineType(FlatBufferBuilder builder, WWParser.Defs.InstOnlineType onlineType) { builder.AddInt(6, (int)onlineType, 0); }
  public static void AddCustomTypes(FlatBufferBuilder builder, VectorOffset customTypesOffset) { builder.AddOffset(7, customTypesOffset.Value, 0); }
  public static VectorOffset CreateCustomTypesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCustomTypesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCustomTypesVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCustomTypesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCustomTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMiniMapId(FlatBufferBuilder builder, int miniMapId) { builder.AddInt(8, miniMapId, 1); }
  public static void AddSubLevels(FlatBufferBuilder builder, VectorOffset subLevelsOffset) { builder.AddOffset(9, subLevelsOffset.Value, 0); }
  public static VectorOffset CreateSubLevelsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSubLevelsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubLevelsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubLevelsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSubLevelsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFightFormationId(FlatBufferBuilder builder, int fightFormationId) { builder.AddInt(10, fightFormationId, 2); }
  public static void AddRoleTypeList(FlatBufferBuilder builder, VectorOffset roleTypeListOffset) { builder.AddOffset(11, roleTypeListOffset.Value, 0); }
  public static VectorOffset CreateRoleTypeListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRoleTypeListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRoleTypeListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRoleTypeListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRoleTypeListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTrialRoleInfo(FlatBufferBuilder builder, VectorOffset trialRoleInfoOffset) { builder.AddOffset(12, trialRoleInfoOffset.Value, 0); }
  public static VectorOffset CreateTrialRoleInfoVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTrialRoleInfoVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTrialRoleInfoVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTrialRoleInfoVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTrialRoleInfoVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTrialRoleFormation(FlatBufferBuilder builder, int trialRoleFormation) { builder.AddInt(13, trialRoleFormation, 0); }
  public static void AddReviveId(FlatBufferBuilder builder, int reviveId) { builder.AddInt(14, reviveId, 0); }
  public static void AddBornPosition(FlatBufferBuilder builder, VectorOffset bornPositionOffset) { builder.AddOffset(15, bornPositionOffset.Value, 0); }
  public static VectorOffset CreateBornPositionVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBornPositionVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBornPositionVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBornPositionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBornPositionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBornRotation(FlatBufferBuilder builder, VectorOffset bornRotationOffset) { builder.AddOffset(16, bornRotationOffset.Value, 0); }
  public static VectorOffset CreateBornRotationVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBornRotationVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBornRotationVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBornRotationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBornRotationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRecoverWorldLocation(FlatBufferBuilder builder, VectorOffset recoverWorldLocationOffset) { builder.AddOffset(17, recoverWorldLocationOffset.Value, 0); }
  public static VectorOffset CreateRecoverWorldLocationVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRecoverWorldLocationVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecoverWorldLocationVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecoverWorldLocationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRecoverWorldLocationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExitDungeonConfirmId(FlatBufferBuilder builder, VectorOffset exitDungeonConfirmIdOffset) { builder.AddOffset(18, exitDungeonConfirmIdOffset.Value, 0); }
  public static VectorOffset CreateExitDungeonConfirmIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateExitDungeonConfirmIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExitDungeonConfirmIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExitDungeonConfirmIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExitDungeonConfirmIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEntranceEntities(FlatBufferBuilder builder, VectorOffset entranceEntitiesOffset) { builder.AddOffset(19, entranceEntitiesOffset.Value, 0); }
  public static VectorOffset CreateEntranceEntitiesVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DungeonEntrance>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEntranceEntitiesVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DungeonEntrance>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEntranceEntitiesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DungeonEntrance>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEntranceEntitiesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DungeonEntrance>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEntranceEntitiesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExitEntities(FlatBufferBuilder builder, VectorOffset exitEntitiesOffset) { builder.AddOffset(20, exitEntitiesOffset.Value, 0); }
  public static VectorOffset CreateExitEntitiesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateExitEntitiesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExitEntitiesVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExitEntitiesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExitEntitiesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDungeonDesc(FlatBufferBuilder builder, StringOffset dungeonDescOffset) { builder.AddOffset(21, dungeonDescOffset.Value, 0); }
  public static void AddTitle(FlatBufferBuilder builder, int title) { builder.AddInt(22, title, 999); }
  public static void AddBannerPath(FlatBufferBuilder builder, StringOffset bannerPathOffset) { builder.AddOffset(23, bannerPathOffset.Value, 0); }
  public static void AddMonsterPreview(FlatBufferBuilder builder, VectorOffset monsterPreviewOffset) { builder.AddOffset(24, monsterPreviewOffset.Value, 0); }
  public static VectorOffset CreateMonsterPreviewVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMonsterPreviewVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMonsterPreviewVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMonsterPreviewVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMonsterPreviewVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMonsterTips(FlatBufferBuilder builder, StringOffset monsterTipsOffset) { builder.AddOffset(25, monsterTipsOffset.Value, 0); }
  public static void AddFirstRewardId(FlatBufferBuilder builder, int firstRewardId) { builder.AddInt(26, firstRewardId, 0); }
  public static void AddRewardId(FlatBufferBuilder builder, int rewardId) { builder.AddInt(27, rewardId, 0); }
  public static void AddRepeatRewardId(FlatBufferBuilder builder, int repeatRewardId) { builder.AddInt(28, repeatRewardId, 0); }
  public static void AddExchangeRewardId(FlatBufferBuilder builder, int exchangeRewardId) { builder.AddInt(29, exchangeRewardId, 0); }
  public static void AddSharedTreasureGroup(FlatBufferBuilder builder, VectorOffset sharedTreasureGroupOffset) { builder.AddOffset(30, sharedTreasureGroupOffset.Value, 0); }
  public static VectorOffset CreateSharedTreasureGroupVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSharedTreasureGroupVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSharedTreasureGroupVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSharedTreasureGroupVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSharedTreasureGroupVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEnterControlId(FlatBufferBuilder builder, int enterControlId) { builder.AddInt(31, enterControlId, 0); }
  public static void AddEnterCondition(FlatBufferBuilder builder, VectorOffset enterConditionOffset) { builder.AddOffset(32, enterConditionOffset.Value, 0); }
  public static VectorOffset CreateEnterConditionVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEnterConditionVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnterConditionVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnterConditionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnterConditionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEnterConditionText(FlatBufferBuilder builder, StringOffset enterConditionTextOffset) { builder.AddOffset(33, enterConditionTextOffset.Value, 0); }
  public static void AddDifficultyIcon(FlatBufferBuilder builder, StringOffset difficultyIconOffset) { builder.AddOffset(34, difficultyIconOffset.Value, 0); }
  public static void AddEntityLevel(FlatBufferBuilder builder, int entityLevel) { builder.AddInt(35, entityLevel, 0); }
  public static void AddRecommendLevel(FlatBufferBuilder builder, VectorOffset recommendLevelOffset) { builder.AddOffset(36, recommendLevelOffset.Value, 0); }
  public static VectorOffset CreateRecommendLevelVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRecommendLevelVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecommendLevelVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecommendLevelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRecommendLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRecommendRole(FlatBufferBuilder builder, VectorOffset recommendRoleOffset) { builder.AddOffset(37, recommendRoleOffset.Value, 0); }
  public static VectorOffset CreateRecommendRoleVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRecommendRoleVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecommendRoleVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecommendRoleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRecommendRoleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRecommendElement(FlatBufferBuilder builder, VectorOffset recommendElementOffset) { builder.AddOffset(38, recommendElementOffset.Value, 0); }
  public static VectorOffset CreateRecommendElementVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRecommendElementVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecommendElementVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecommendElementVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRecommendElementVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShareAttri(FlatBufferBuilder builder, int shareAttri) { builder.AddInt(39, shareAttri, 1); }
  public static void AddFightInfoDtType(FlatBufferBuilder builder, VectorOffset fightInfoDtTypeOffset) { builder.AddOffset(40, fightInfoDtTypeOffset.Value, 0); }
  public static VectorOffset CreateFightInfoDtTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFightInfoDtTypeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFightInfoDtTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFightInfoDtTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFightInfoDtTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSaveDays(FlatBufferBuilder builder, int saveDays) { builder.AddInt(41, saveDays, 0); }
  public static void AddLimitViewName(FlatBufferBuilder builder, VectorOffset limitViewNameOffset) { builder.AddOffset(42, limitViewNameOffset.Value, 0); }
  public static VectorOffset CreateLimitViewNameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLimitViewNameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitViewNameVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitViewNameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLimitViewNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCanUseItem(FlatBufferBuilder builder, int canUseItem) { builder.AddInt(43, canUseItem, 1); }
  public static void AddGameplayMode(FlatBufferBuilder builder, int gameplayMode) { builder.AddInt(44, gameplayMode, 0); }
  public static void AddGuideType(FlatBufferBuilder builder, int guideType) { builder.AddInt(45, guideType, 0); }
  public static void AddGuideValue(FlatBufferBuilder builder, int guideValue) { builder.AddInt(46, guideValue, 0); }
  public static void AddSettleButtonType(FlatBufferBuilder builder, int settleButtonType) { builder.AddInt(47, settleButtonType, 1); }
  public static void AddSubTitle(FlatBufferBuilder builder, VectorOffset subTitleOffset) { builder.AddOffset(48, subTitleOffset.Value, 0); }
  public static VectorOffset CreateSubTitleVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSubTitleVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubTitleVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubTitleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSubTitleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSubInstanceTitle(FlatBufferBuilder builder, StringOffset subInstanceTitleOffset) { builder.AddOffset(49, subInstanceTitleOffset.Value, 0); }
  public static void AddAutoLeaveTime(FlatBufferBuilder builder, int autoLeaveTime) { builder.AddInt(50, autoLeaveTime, 300); }
  public static void AddLimitTime(FlatBufferBuilder builder, int limitTime) { builder.AddInt(51, limitTime, 0); }
  public static void AddLeaveWaitTime(FlatBufferBuilder builder, int leaveWaitTime) { builder.AddInt(52, leaveWaitTime, 0); }
  public static void AddFailTips(FlatBufferBuilder builder, StringOffset failTipsOffset) { builder.AddOffset(53, failTipsOffset.Value, 0); }
  public static void AddVerifyCreatureGen(FlatBufferBuilder builder, bool verifyCreatureGen) { builder.AddBool(54, verifyCreatureGen, false); }
  public static void AddDifficultyLevel(FlatBufferBuilder builder, VectorOffset difficultyLevelOffset) { builder.AddOffset(55, difficultyLevelOffset.Value, 0); }
  public static VectorOffset CreateDifficultyLevelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyLevelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyLevelVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyLevelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDifficultyLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDifficultyDesc(FlatBufferBuilder builder, VectorOffset difficultyDescOffset) { builder.AddOffset(56, difficultyDescOffset.Value, 0); }
  public static VectorOffset CreateDifficultyDescVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyDescVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyDescVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyDescVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDifficultyDescVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDrop(FlatBufferBuilder builder, VectorOffset dropOffset) { builder.AddOffset(57, dropOffset.Value, 0); }
  public static VectorOffset CreateDropVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDropVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDropVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDropVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDropVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEnterCount(FlatBufferBuilder builder, int enterCount) { builder.AddInt(58, enterCount, 0); }
  public static void AddEnterConditionGroup(FlatBufferBuilder builder, int enterConditionGroup) { builder.AddInt(59, enterConditionGroup, 0); }
  public static void AddIconTagPath(FlatBufferBuilder builder, StringOffset iconTagPathOffset) { builder.AddOffset(60, iconTagPathOffset.Value, 0); }
  public static void AddViewMapId(FlatBufferBuilder builder, int viewMapId) { builder.AddInt(61, viewMapId, 0); }
  public static void AddRenderSettings(FlatBufferBuilder builder, VectorOffset renderSettingsOffset) { builder.AddOffset(62, renderSettingsOffset.Value, 0); }
  public static VectorOffset CreateRenderSettingsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRenderSettingsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRenderSettingsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRenderSettingsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRenderSettingsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDropVisionLimit(FlatBufferBuilder builder, int dropVisionLimit) { builder.AddInt(63, dropVisionLimit, 0); }
  public static Offset<WWParser.Defs.InstanceDungeon> EndInstanceDungeon(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.InstanceDungeon>(o);
  }
  public InstanceDungeonT UnPack() {
    var _o = new InstanceDungeonT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InstanceDungeonT _o) {
    _o.Id = this.Id;
    _o.MapConfigId = this.MapConfigId;
    _o.MapName = this.MapName;
    _o.InstType = this.InstType;
    _o.InstSubType = this.InstSubType;
    _o.WorldDungeonSubType = this.WorldDungeonSubType;
    _o.OnlineType = this.OnlineType;
    _o.CustomTypes = new List<int>();
    for (var _j = 0; _j < this.CustomTypesLength; ++_j) {_o.CustomTypes.Add(this.CustomTypes(_j));}
    _o.MiniMapId = this.MiniMapId;
    _o.SubLevels = new List<string>();
    for (var _j = 0; _j < this.SubLevelsLength; ++_j) {_o.SubLevels.Add(this.SubLevels(_j));}
    _o.FightFormationId = this.FightFormationId;
    _o.RoleTypeList = new List<int>();
    for (var _j = 0; _j < this.RoleTypeListLength; ++_j) {_o.RoleTypeList.Add(this.RoleTypeList(_j));}
    _o.TrialRoleInfo = new List<int>();
    for (var _j = 0; _j < this.TrialRoleInfoLength; ++_j) {_o.TrialRoleInfo.Add(this.TrialRoleInfo(_j));}
    _o.TrialRoleFormation = this.TrialRoleFormation;
    _o.ReviveId = this.ReviveId;
    _o.BornPosition = new List<int>();
    for (var _j = 0; _j < this.BornPositionLength; ++_j) {_o.BornPosition.Add(this.BornPosition(_j));}
    _o.BornRotation = new List<int>();
    for (var _j = 0; _j < this.BornRotationLength; ++_j) {_o.BornRotation.Add(this.BornRotation(_j));}
    _o.RecoverWorldLocation = new List<int>();
    for (var _j = 0; _j < this.RecoverWorldLocationLength; ++_j) {_o.RecoverWorldLocation.Add(this.RecoverWorldLocation(_j));}
    _o.ExitDungeonConfirmId = new List<int>();
    for (var _j = 0; _j < this.ExitDungeonConfirmIdLength; ++_j) {_o.ExitDungeonConfirmId.Add(this.ExitDungeonConfirmId(_j));}
    _o.EntranceEntities = new List<WWParser.Defs.DungeonEntranceT>();
    for (var _j = 0; _j < this.EntranceEntitiesLength; ++_j) {_o.EntranceEntities.Add(this.EntranceEntities(_j).HasValue ? this.EntranceEntities(_j).Value.UnPack() : null);}
    _o.ExitEntities = new List<int>();
    for (var _j = 0; _j < this.ExitEntitiesLength; ++_j) {_o.ExitEntities.Add(this.ExitEntities(_j));}
    _o.DungeonDesc = this.DungeonDesc;
    _o.Title = this.Title;
    _o.BannerPath = this.BannerPath;
    _o.MonsterPreview = new List<int>();
    for (var _j = 0; _j < this.MonsterPreviewLength; ++_j) {_o.MonsterPreview.Add(this.MonsterPreview(_j));}
    _o.MonsterTips = this.MonsterTips;
    _o.FirstRewardId = this.FirstRewardId;
    _o.RewardId = this.RewardId;
    _o.RepeatRewardId = this.RepeatRewardId;
    _o.ExchangeRewardId = this.ExchangeRewardId;
    _o.SharedTreasureGroup = new List<int>();
    for (var _j = 0; _j < this.SharedTreasureGroupLength; ++_j) {_o.SharedTreasureGroup.Add(this.SharedTreasureGroup(_j));}
    _o.EnterControlId = this.EnterControlId;
    _o.EnterCondition = new List<int>();
    for (var _j = 0; _j < this.EnterConditionLength; ++_j) {_o.EnterCondition.Add(this.EnterCondition(_j));}
    _o.EnterConditionText = this.EnterConditionText;
    _o.DifficultyIcon = this.DifficultyIcon;
    _o.EntityLevel = this.EntityLevel;
    _o.RecommendLevel = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.RecommendLevelLength; ++_j) {_o.RecommendLevel.Add(this.RecommendLevel(_j).HasValue ? this.RecommendLevel(_j).Value.UnPack() : null);}
    _o.RecommendRole = new List<int>();
    for (var _j = 0; _j < this.RecommendRoleLength; ++_j) {_o.RecommendRole.Add(this.RecommendRole(_j));}
    _o.RecommendElement = new List<int>();
    for (var _j = 0; _j < this.RecommendElementLength; ++_j) {_o.RecommendElement.Add(this.RecommendElement(_j));}
    _o.ShareAttri = this.ShareAttri;
    _o.FightInfoDtType = new List<int>();
    for (var _j = 0; _j < this.FightInfoDtTypeLength; ++_j) {_o.FightInfoDtType.Add(this.FightInfoDtType(_j));}
    _o.SaveDays = this.SaveDays;
    _o.LimitViewName = new List<string>();
    for (var _j = 0; _j < this.LimitViewNameLength; ++_j) {_o.LimitViewName.Add(this.LimitViewName(_j));}
    _o.CanUseItem = this.CanUseItem;
    _o.GameplayMode = this.GameplayMode;
    _o.GuideType = this.GuideType;
    _o.GuideValue = this.GuideValue;
    _o.SettleButtonType = this.SettleButtonType;
    _o.SubTitle = new List<WWParser.Defs.DicIntStringT>();
    for (var _j = 0; _j < this.SubTitleLength; ++_j) {_o.SubTitle.Add(this.SubTitle(_j).HasValue ? this.SubTitle(_j).Value.UnPack() : null);}
    _o.SubInstanceTitle = this.SubInstanceTitle;
    _o.AutoLeaveTime = this.AutoLeaveTime;
    _o.LimitTime = this.LimitTime;
    _o.LeaveWaitTime = this.LeaveWaitTime;
    _o.FailTips = this.FailTips;
    _o.VerifyCreatureGen = this.VerifyCreatureGen;
    _o.DifficultyLevel = new List<int>();
    for (var _j = 0; _j < this.DifficultyLevelLength; ++_j) {_o.DifficultyLevel.Add(this.DifficultyLevel(_j));}
    _o.DifficultyDesc = new List<string>();
    for (var _j = 0; _j < this.DifficultyDescLength; ++_j) {_o.DifficultyDesc.Add(this.DifficultyDesc(_j));}
    _o.Drop = new List<int>();
    for (var _j = 0; _j < this.DropLength; ++_j) {_o.Drop.Add(this.Drop(_j));}
    _o.EnterCount = this.EnterCount;
    _o.EnterConditionGroup = this.EnterConditionGroup;
    _o.IconTagPath = this.IconTagPath;
    _o.ViewMapId = this.ViewMapId;
    _o.RenderSettings = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.RenderSettingsLength; ++_j) {_o.RenderSettings.Add(this.RenderSettings(_j).HasValue ? this.RenderSettings(_j).Value.UnPack() : null);}
    _o.DropVisionLimit = this.DropVisionLimit;
  }
  public static Offset<WWParser.Defs.InstanceDungeon> Pack(FlatBufferBuilder builder, InstanceDungeonT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.InstanceDungeon>);
    var _map_name = _o.MapName == null ? default(StringOffset) : builder.CreateString(_o.MapName);
    var _custom_types = default(VectorOffset);
    if (_o.CustomTypes != null) {
      var __custom_types = _o.CustomTypes.ToArray();
      _custom_types = CreateCustomTypesVector(builder, __custom_types);
    }
    var _sub_levels = default(VectorOffset);
    if (_o.SubLevels != null) {
      var __sub_levels = new StringOffset[_o.SubLevels.Count];
      for (var _j = 0; _j < __sub_levels.Length; ++_j) { __sub_levels[_j] = builder.CreateString(_o.SubLevels[_j]); }
      _sub_levels = CreateSubLevelsVector(builder, __sub_levels);
    }
    var _role_type_list = default(VectorOffset);
    if (_o.RoleTypeList != null) {
      var __role_type_list = _o.RoleTypeList.ToArray();
      _role_type_list = CreateRoleTypeListVector(builder, __role_type_list);
    }
    var _trial_role_info = default(VectorOffset);
    if (_o.TrialRoleInfo != null) {
      var __trial_role_info = _o.TrialRoleInfo.ToArray();
      _trial_role_info = CreateTrialRoleInfoVector(builder, __trial_role_info);
    }
    var _born_position = default(VectorOffset);
    if (_o.BornPosition != null) {
      var __born_position = _o.BornPosition.ToArray();
      _born_position = CreateBornPositionVector(builder, __born_position);
    }
    var _born_rotation = default(VectorOffset);
    if (_o.BornRotation != null) {
      var __born_rotation = _o.BornRotation.ToArray();
      _born_rotation = CreateBornRotationVector(builder, __born_rotation);
    }
    var _recover_world_location = default(VectorOffset);
    if (_o.RecoverWorldLocation != null) {
      var __recover_world_location = _o.RecoverWorldLocation.ToArray();
      _recover_world_location = CreateRecoverWorldLocationVector(builder, __recover_world_location);
    }
    var _exit_dungeon_confirm_id = default(VectorOffset);
    if (_o.ExitDungeonConfirmId != null) {
      var __exit_dungeon_confirm_id = _o.ExitDungeonConfirmId.ToArray();
      _exit_dungeon_confirm_id = CreateExitDungeonConfirmIdVector(builder, __exit_dungeon_confirm_id);
    }
    var _entrance_entities = default(VectorOffset);
    if (_o.EntranceEntities != null) {
      var __entrance_entities = new Offset<WWParser.Defs.DungeonEntrance>[_o.EntranceEntities.Count];
      for (var _j = 0; _j < __entrance_entities.Length; ++_j) { __entrance_entities[_j] = WWParser.Defs.DungeonEntrance.Pack(builder, _o.EntranceEntities[_j]); }
      _entrance_entities = CreateEntranceEntitiesVector(builder, __entrance_entities);
    }
    var _exit_entities = default(VectorOffset);
    if (_o.ExitEntities != null) {
      var __exit_entities = _o.ExitEntities.ToArray();
      _exit_entities = CreateExitEntitiesVector(builder, __exit_entities);
    }
    var _dungeon_desc = _o.DungeonDesc == null ? default(StringOffset) : builder.CreateString(_o.DungeonDesc);
    var _banner_path = _o.BannerPath == null ? default(StringOffset) : builder.CreateString(_o.BannerPath);
    var _monster_preview = default(VectorOffset);
    if (_o.MonsterPreview != null) {
      var __monster_preview = _o.MonsterPreview.ToArray();
      _monster_preview = CreateMonsterPreviewVector(builder, __monster_preview);
    }
    var _monster_tips = _o.MonsterTips == null ? default(StringOffset) : builder.CreateString(_o.MonsterTips);
    var _shared_treasure_group = default(VectorOffset);
    if (_o.SharedTreasureGroup != null) {
      var __shared_treasure_group = _o.SharedTreasureGroup.ToArray();
      _shared_treasure_group = CreateSharedTreasureGroupVector(builder, __shared_treasure_group);
    }
    var _enter_condition = default(VectorOffset);
    if (_o.EnterCondition != null) {
      var __enter_condition = _o.EnterCondition.ToArray();
      _enter_condition = CreateEnterConditionVector(builder, __enter_condition);
    }
    var _enter_condition_text = _o.EnterConditionText == null ? default(StringOffset) : builder.CreateString(_o.EnterConditionText);
    var _difficulty_icon = _o.DifficultyIcon == null ? default(StringOffset) : builder.CreateString(_o.DifficultyIcon);
    var _recommend_level = default(VectorOffset);
    if (_o.RecommendLevel != null) {
      var __recommend_level = new Offset<WWParser.Defs.DicIntInt>[_o.RecommendLevel.Count];
      for (var _j = 0; _j < __recommend_level.Length; ++_j) { __recommend_level[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.RecommendLevel[_j]); }
      _recommend_level = CreateRecommendLevelVector(builder, __recommend_level);
    }
    var _recommend_role = default(VectorOffset);
    if (_o.RecommendRole != null) {
      var __recommend_role = _o.RecommendRole.ToArray();
      _recommend_role = CreateRecommendRoleVector(builder, __recommend_role);
    }
    var _recommend_element = default(VectorOffset);
    if (_o.RecommendElement != null) {
      var __recommend_element = _o.RecommendElement.ToArray();
      _recommend_element = CreateRecommendElementVector(builder, __recommend_element);
    }
    var _fight_info_dt_type = default(VectorOffset);
    if (_o.FightInfoDtType != null) {
      var __fight_info_dt_type = _o.FightInfoDtType.ToArray();
      _fight_info_dt_type = CreateFightInfoDtTypeVector(builder, __fight_info_dt_type);
    }
    var _limit_view_name = default(VectorOffset);
    if (_o.LimitViewName != null) {
      var __limit_view_name = new StringOffset[_o.LimitViewName.Count];
      for (var _j = 0; _j < __limit_view_name.Length; ++_j) { __limit_view_name[_j] = builder.CreateString(_o.LimitViewName[_j]); }
      _limit_view_name = CreateLimitViewNameVector(builder, __limit_view_name);
    }
    var _sub_title = default(VectorOffset);
    if (_o.SubTitle != null) {
      var __sub_title = new Offset<WWParser.Defs.DicIntString>[_o.SubTitle.Count];
      for (var _j = 0; _j < __sub_title.Length; ++_j) { __sub_title[_j] = WWParser.Defs.DicIntString.Pack(builder, _o.SubTitle[_j]); }
      _sub_title = CreateSubTitleVector(builder, __sub_title);
    }
    var _sub_instance_title = _o.SubInstanceTitle == null ? default(StringOffset) : builder.CreateString(_o.SubInstanceTitle);
    var _fail_tips = _o.FailTips == null ? default(StringOffset) : builder.CreateString(_o.FailTips);
    var _difficulty_level = default(VectorOffset);
    if (_o.DifficultyLevel != null) {
      var __difficulty_level = _o.DifficultyLevel.ToArray();
      _difficulty_level = CreateDifficultyLevelVector(builder, __difficulty_level);
    }
    var _difficulty_desc = default(VectorOffset);
    if (_o.DifficultyDesc != null) {
      var __difficulty_desc = new StringOffset[_o.DifficultyDesc.Count];
      for (var _j = 0; _j < __difficulty_desc.Length; ++_j) { __difficulty_desc[_j] = builder.CreateString(_o.DifficultyDesc[_j]); }
      _difficulty_desc = CreateDifficultyDescVector(builder, __difficulty_desc);
    }
    var _drop = default(VectorOffset);
    if (_o.Drop != null) {
      var __drop = _o.Drop.ToArray();
      _drop = CreateDropVector(builder, __drop);
    }
    var _icon_tag_path = _o.IconTagPath == null ? default(StringOffset) : builder.CreateString(_o.IconTagPath);
    var _render_settings = default(VectorOffset);
    if (_o.RenderSettings != null) {
      var __render_settings = new Offset<WWParser.Defs.DicIntInt>[_o.RenderSettings.Count];
      for (var _j = 0; _j < __render_settings.Length; ++_j) { __render_settings[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.RenderSettings[_j]); }
      _render_settings = CreateRenderSettingsVector(builder, __render_settings);
    }
    return CreateInstanceDungeon(
      builder,
      _o.Id,
      _o.MapConfigId,
      _map_name,
      _o.InstType,
      _o.InstSubType,
      _o.WorldDungeonSubType,
      _o.OnlineType,
      _custom_types,
      _o.MiniMapId,
      _sub_levels,
      _o.FightFormationId,
      _role_type_list,
      _trial_role_info,
      _o.TrialRoleFormation,
      _o.ReviveId,
      _born_position,
      _born_rotation,
      _recover_world_location,
      _exit_dungeon_confirm_id,
      _entrance_entities,
      _exit_entities,
      _dungeon_desc,
      _o.Title,
      _banner_path,
      _monster_preview,
      _monster_tips,
      _o.FirstRewardId,
      _o.RewardId,
      _o.RepeatRewardId,
      _o.ExchangeRewardId,
      _shared_treasure_group,
      _o.EnterControlId,
      _enter_condition,
      _enter_condition_text,
      _difficulty_icon,
      _o.EntityLevel,
      _recommend_level,
      _recommend_role,
      _recommend_element,
      _o.ShareAttri,
      _fight_info_dt_type,
      _o.SaveDays,
      _limit_view_name,
      _o.CanUseItem,
      _o.GameplayMode,
      _o.GuideType,
      _o.GuideValue,
      _o.SettleButtonType,
      _sub_title,
      _sub_instance_title,
      _o.AutoLeaveTime,
      _o.LimitTime,
      _o.LeaveWaitTime,
      _fail_tips,
      _o.VerifyCreatureGen,
      _difficulty_level,
      _difficulty_desc,
      _drop,
      _o.EnterCount,
      _o.EnterConditionGroup,
      _icon_tag_path,
      _o.ViewMapId,
      _render_settings,
      _o.DropVisionLimit);
  }
}

public class InstanceDungeonT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("map_config_id")]
  public int MapConfigId { get; set; }
  [Newtonsoft.Json.JsonProperty("map_name")]
  public string MapName { get; set; }
  [Newtonsoft.Json.JsonProperty("inst_type")]
  public int InstType { get; set; }
  [Newtonsoft.Json.JsonProperty("inst_sub_type")]
  public int InstSubType { get; set; }
  [Newtonsoft.Json.JsonProperty("world_dungeon_sub_type")]
  public int WorldDungeonSubType { get; set; }
  [Newtonsoft.Json.JsonProperty("online_type")]
  public WWParser.Defs.InstOnlineType OnlineType { get; set; }
  [Newtonsoft.Json.JsonProperty("custom_types")]
  public List<int> CustomTypes { get; set; }
  [Newtonsoft.Json.JsonProperty("mini_map_id")]
  public int MiniMapId { get; set; }
  [Newtonsoft.Json.JsonProperty("sub_levels")]
  public List<string> SubLevels { get; set; }
  [Newtonsoft.Json.JsonProperty("fight_formation_id")]
  public int FightFormationId { get; set; }
  [Newtonsoft.Json.JsonProperty("role_type_list")]
  public List<int> RoleTypeList { get; set; }
  [Newtonsoft.Json.JsonProperty("trial_role_info")]
  public List<int> TrialRoleInfo { get; set; }
  [Newtonsoft.Json.JsonProperty("trial_role_formation")]
  public int TrialRoleFormation { get; set; }
  [Newtonsoft.Json.JsonProperty("revive_id")]
  public int ReviveId { get; set; }
  [Newtonsoft.Json.JsonProperty("born_position")]
  public List<int> BornPosition { get; set; }
  [Newtonsoft.Json.JsonProperty("born_rotation")]
  public List<int> BornRotation { get; set; }
  [Newtonsoft.Json.JsonProperty("recover_world_location")]
  public List<int> RecoverWorldLocation { get; set; }
  [Newtonsoft.Json.JsonProperty("exit_dungeon_confirm_id")]
  public List<int> ExitDungeonConfirmId { get; set; }
  [Newtonsoft.Json.JsonProperty("entrance_entities")]
  public List<WWParser.Defs.DungeonEntranceT> EntranceEntities { get; set; }
  [Newtonsoft.Json.JsonProperty("exit_entities")]
  public List<int> ExitEntities { get; set; }
  [Newtonsoft.Json.JsonProperty("dungeon_desc")]
  public string DungeonDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public int Title { get; set; }
  [Newtonsoft.Json.JsonProperty("banner_path")]
  public string BannerPath { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_preview")]
  public List<int> MonsterPreview { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_tips")]
  public string MonsterTips { get; set; }
  [Newtonsoft.Json.JsonProperty("first_reward_id")]
  public int FirstRewardId { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_id")]
  public int RewardId { get; set; }
  [Newtonsoft.Json.JsonProperty("repeat_reward_id")]
  public int RepeatRewardId { get; set; }
  [Newtonsoft.Json.JsonProperty("exchange_reward_id")]
  public int ExchangeRewardId { get; set; }
  [Newtonsoft.Json.JsonProperty("shared_treasure_group")]
  public List<int> SharedTreasureGroup { get; set; }
  [Newtonsoft.Json.JsonProperty("enter_control_id")]
  public int EnterControlId { get; set; }
  [Newtonsoft.Json.JsonProperty("enter_condition")]
  public List<int> EnterCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("enter_condition_text")]
  public string EnterConditionText { get; set; }
  [Newtonsoft.Json.JsonProperty("difficulty_icon")]
  public string DifficultyIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("entity_level")]
  public int EntityLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("recommend_level")]
  public List<WWParser.Defs.DicIntIntT> RecommendLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("recommend_role")]
  public List<int> RecommendRole { get; set; }
  [Newtonsoft.Json.JsonProperty("recommend_element")]
  public List<int> RecommendElement { get; set; }
  [Newtonsoft.Json.JsonProperty("share_attri")]
  public int ShareAttri { get; set; }
  [Newtonsoft.Json.JsonProperty("fight_info_dt_type")]
  public List<int> FightInfoDtType { get; set; }
  [Newtonsoft.Json.JsonProperty("save_days")]
  public int SaveDays { get; set; }
  [Newtonsoft.Json.JsonProperty("limit_view_name")]
  public List<string> LimitViewName { get; set; }
  [Newtonsoft.Json.JsonProperty("can_use_item")]
  public int CanUseItem { get; set; }
  [Newtonsoft.Json.JsonProperty("gameplay_mode")]
  public int GameplayMode { get; set; }
  [Newtonsoft.Json.JsonProperty("guide_type")]
  public int GuideType { get; set; }
  [Newtonsoft.Json.JsonProperty("guide_value")]
  public int GuideValue { get; set; }
  [Newtonsoft.Json.JsonProperty("settle_button_type")]
  public int SettleButtonType { get; set; }
  [Newtonsoft.Json.JsonProperty("sub_title")]
  public List<WWParser.Defs.DicIntStringT> SubTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("sub_instance_title")]
  public string SubInstanceTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("auto_leave_time")]
  public int AutoLeaveTime { get; set; }
  [Newtonsoft.Json.JsonProperty("limit_time")]
  public int LimitTime { get; set; }
  [Newtonsoft.Json.JsonProperty("leave_wait_time")]
  public int LeaveWaitTime { get; set; }
  [Newtonsoft.Json.JsonProperty("fail_tips")]
  public string FailTips { get; set; }
  [Newtonsoft.Json.JsonProperty("verify_creature_gen")]
  public bool VerifyCreatureGen { get; set; }
  [Newtonsoft.Json.JsonProperty("difficulty_level")]
  public List<int> DifficultyLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("difficulty_desc")]
  public List<string> DifficultyDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("drop")]
  public List<int> Drop { get; set; }
  [Newtonsoft.Json.JsonProperty("enter_count")]
  public int EnterCount { get; set; }
  [Newtonsoft.Json.JsonProperty("enter_condition_group")]
  public int EnterConditionGroup { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_tag_path")]
  public string IconTagPath { get; set; }
  [Newtonsoft.Json.JsonProperty("view_map_id")]
  public int ViewMapId { get; set; }
  [Newtonsoft.Json.JsonProperty("render_settings")]
  public List<WWParser.Defs.DicIntIntT> RenderSettings { get; set; }
  [Newtonsoft.Json.JsonProperty("drop_vision_limit")]
  public int DropVisionLimit { get; set; }

  public InstanceDungeonT() {
    this.Id = 0;
    this.MapConfigId = 0;
    this.MapName = null;
    this.InstType = 0;
    this.InstSubType = 0;
    this.WorldDungeonSubType = 0;
    this.OnlineType = WWParser.Defs.InstOnlineType.Mixture;
    this.CustomTypes = null;
    this.MiniMapId = 1;
    this.SubLevels = null;
    this.FightFormationId = 2;
    this.RoleTypeList = null;
    this.TrialRoleInfo = null;
    this.TrialRoleFormation = 0;
    this.ReviveId = 0;
    this.BornPosition = null;
    this.BornRotation = null;
    this.RecoverWorldLocation = null;
    this.ExitDungeonConfirmId = null;
    this.EntranceEntities = null;
    this.ExitEntities = null;
    this.DungeonDesc = null;
    this.Title = 999;
    this.BannerPath = null;
    this.MonsterPreview = null;
    this.MonsterTips = null;
    this.FirstRewardId = 0;
    this.RewardId = 0;
    this.RepeatRewardId = 0;
    this.ExchangeRewardId = 0;
    this.SharedTreasureGroup = null;
    this.EnterControlId = 0;
    this.EnterCondition = null;
    this.EnterConditionText = null;
    this.DifficultyIcon = null;
    this.EntityLevel = 0;
    this.RecommendLevel = null;
    this.RecommendRole = null;
    this.RecommendElement = null;
    this.ShareAttri = 1;
    this.FightInfoDtType = null;
    this.SaveDays = 0;
    this.LimitViewName = null;
    this.CanUseItem = 1;
    this.GameplayMode = 0;
    this.GuideType = 0;
    this.GuideValue = 0;
    this.SettleButtonType = 1;
    this.SubTitle = null;
    this.SubInstanceTitle = null;
    this.AutoLeaveTime = 300;
    this.LimitTime = 0;
    this.LeaveWaitTime = 0;
    this.FailTips = null;
    this.VerifyCreatureGen = false;
    this.DifficultyLevel = null;
    this.DifficultyDesc = null;
    this.Drop = null;
    this.EnterCount = 0;
    this.EnterConditionGroup = 0;
    this.IconTagPath = null;
    this.ViewMapId = 0;
    this.RenderSettings = null;
    this.DropVisionLimit = 0;
  }
}


static public class InstanceDungeonVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MapConfigId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*MapName*/, false)
      && verifier.VerifyField(tablePos, 10 /*InstType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*InstSubType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*WorldDungeonSubType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*OnlineType*/, 4 /*WWParser.Defs.InstOnlineType*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*CustomTypes*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 20 /*MiniMapId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 22 /*SubLevels*/, false)
      && verifier.VerifyField(tablePos, 24 /*FightFormationId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*RoleTypeList*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 28 /*TrialRoleInfo*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 30 /*TrialRoleFormation*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*ReviveId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 34 /*BornPosition*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 36 /*BornRotation*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 38 /*RecoverWorldLocation*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 40 /*ExitDungeonConfirmId*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 42 /*EntranceEntities*/, WWParser.Defs.DungeonEntranceVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 44 /*ExitEntities*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 46 /*DungeonDesc*/, false)
      && verifier.VerifyField(tablePos, 48 /*Title*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 50 /*BannerPath*/, false)
      && verifier.VerifyVectorOfData(tablePos, 52 /*MonsterPreview*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 54 /*MonsterTips*/, false)
      && verifier.VerifyField(tablePos, 56 /*FirstRewardId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*RewardId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*RepeatRewardId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*ExchangeRewardId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 64 /*SharedTreasureGroup*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 66 /*EnterControlId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 68 /*EnterCondition*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 70 /*EnterConditionText*/, false)
      && verifier.VerifyString(tablePos, 72 /*DifficultyIcon*/, false)
      && verifier.VerifyField(tablePos, 74 /*EntityLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 76 /*RecommendLevel*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 78 /*RecommendRole*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 80 /*RecommendElement*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 82 /*ShareAttri*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 84 /*FightInfoDtType*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 86 /*SaveDays*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 88 /*LimitViewName*/, false)
      && verifier.VerifyField(tablePos, 90 /*CanUseItem*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 92 /*GameplayMode*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 94 /*GuideType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 96 /*GuideValue*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 98 /*SettleButtonType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 100 /*SubTitle*/, WWParser.Defs.DicIntStringVerify.Verify, false)
      && verifier.VerifyString(tablePos, 102 /*SubInstanceTitle*/, false)
      && verifier.VerifyField(tablePos, 104 /*AutoLeaveTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 106 /*LimitTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 108 /*LeaveWaitTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 110 /*FailTips*/, false)
      && verifier.VerifyField(tablePos, 112 /*VerifyCreatureGen*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 114 /*DifficultyLevel*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 116 /*DifficultyDesc*/, false)
      && verifier.VerifyVectorOfData(tablePos, 118 /*Drop*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 120 /*EnterCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 122 /*EnterConditionGroup*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 124 /*IconTagPath*/, false)
      && verifier.VerifyField(tablePos, 126 /*ViewMapId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 128 /*RenderSettings*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 130 /*DropVisionLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
