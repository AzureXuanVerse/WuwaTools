// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MapNote : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MapNote GetRootAsMapNote(ByteBuffer _bb) { return GetRootAsMapNote(_bb, new MapNote()); }
  public static MapNote GetRootAsMapNote(ByteBuffer _bb, MapNote obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MapNote __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Icon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(10); }
  public string Desc { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(12); }
  public int Style { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Priority { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Rank { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? MarkIdMap(int j) { int o = __p.__offset(20); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MarkIdMapLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int MarkId(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MarkIdLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetMarkIdBytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetMarkIdBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetMarkIdArray() { return __p.__vector_as_array<int>(22); }
  public int ConditionId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QuestIdList(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int QuestIdListLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetQuestIdListBytes() { return __p.__vector_as_span<int>(26, 4); }
#else
  public ArraySegment<byte>? GetQuestIdListBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public int[] GetQuestIdListArray() { return __p.__vector_as_array<int>(26); }

  public static Offset<WWParser.Defs.MapNote> CreateMapNote(FlatBufferBuilder builder,
      int id = 0,
      int type = 0,
      int map_id = 0,
      StringOffset iconOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      int style = 0,
      int priority = 0,
      int rank = 0,
      VectorOffset mark_id_mapOffset = default(VectorOffset),
      VectorOffset mark_idOffset = default(VectorOffset),
      int condition_id = 0,
      VectorOffset quest_id_listOffset = default(VectorOffset)) {
    builder.StartTable(12);
    MapNote.AddQuestIdList(builder, quest_id_listOffset);
    MapNote.AddConditionId(builder, condition_id);
    MapNote.AddMarkId(builder, mark_idOffset);
    MapNote.AddMarkIdMap(builder, mark_id_mapOffset);
    MapNote.AddRank(builder, rank);
    MapNote.AddPriority(builder, priority);
    MapNote.AddStyle(builder, style);
    MapNote.AddDesc(builder, descOffset);
    MapNote.AddIcon(builder, iconOffset);
    MapNote.AddMapId(builder, map_id);
    MapNote.AddType(builder, type);
    MapNote.AddId(builder, id);
    return MapNote.EndMapNote(builder);
  }

  public static void StartMapNote(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(1, type, 0); }
  public static void AddMapId(FlatBufferBuilder builder, int mapId) { builder.AddInt(2, mapId, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(3, iconOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(4, descOffset.Value, 0); }
  public static void AddStyle(FlatBufferBuilder builder, int style) { builder.AddInt(5, style, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(6, priority, 0); }
  public static void AddRank(FlatBufferBuilder builder, int rank) { builder.AddInt(7, rank, 0); }
  public static void AddMarkIdMap(FlatBufferBuilder builder, VectorOffset markIdMapOffset) { builder.AddOffset(8, markIdMapOffset.Value, 0); }
  public static VectorOffset CreateMarkIdMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMarkIdMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMarkIdMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMarkIdMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMarkIdMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMarkId(FlatBufferBuilder builder, VectorOffset markIdOffset) { builder.AddOffset(9, markIdOffset.Value, 0); }
  public static VectorOffset CreateMarkIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMarkIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMarkIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMarkIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMarkIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConditionId(FlatBufferBuilder builder, int conditionId) { builder.AddInt(10, conditionId, 0); }
  public static void AddQuestIdList(FlatBufferBuilder builder, VectorOffset questIdListOffset) { builder.AddOffset(11, questIdListOffset.Value, 0); }
  public static VectorOffset CreateQuestIdListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateQuestIdListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateQuestIdListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateQuestIdListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartQuestIdListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.MapNote> EndMapNote(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MapNote>(o);
  }
  public MapNoteT UnPack() {
    var _o = new MapNoteT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MapNoteT _o) {
    _o.Id = this.Id;
    _o.Type = this.Type;
    _o.MapId = this.MapId;
    _o.Icon = this.Icon;
    _o.Desc = this.Desc;
    _o.Style = this.Style;
    _o.Priority = this.Priority;
    _o.Rank = this.Rank;
    _o.MarkIdMap = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.MarkIdMapLength; ++_j) {_o.MarkIdMap.Add(this.MarkIdMap(_j).HasValue ? this.MarkIdMap(_j).Value.UnPack() : null);}
    _o.MarkId = new List<int>();
    for (var _j = 0; _j < this.MarkIdLength; ++_j) {_o.MarkId.Add(this.MarkId(_j));}
    _o.ConditionId = this.ConditionId;
    _o.QuestIdList = new List<int>();
    for (var _j = 0; _j < this.QuestIdListLength; ++_j) {_o.QuestIdList.Add(this.QuestIdList(_j));}
  }
  public static Offset<WWParser.Defs.MapNote> Pack(FlatBufferBuilder builder, MapNoteT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MapNote>);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    var _mark_id_map = default(VectorOffset);
    if (_o.MarkIdMap != null) {
      var __mark_id_map = new Offset<WWParser.Defs.DicIntInt>[_o.MarkIdMap.Count];
      for (var _j = 0; _j < __mark_id_map.Length; ++_j) { __mark_id_map[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.MarkIdMap[_j]); }
      _mark_id_map = CreateMarkIdMapVector(builder, __mark_id_map);
    }
    var _mark_id = default(VectorOffset);
    if (_o.MarkId != null) {
      var __mark_id = _o.MarkId.ToArray();
      _mark_id = CreateMarkIdVector(builder, __mark_id);
    }
    var _quest_id_list = default(VectorOffset);
    if (_o.QuestIdList != null) {
      var __quest_id_list = _o.QuestIdList.ToArray();
      _quest_id_list = CreateQuestIdListVector(builder, __quest_id_list);
    }
    return CreateMapNote(
      builder,
      _o.Id,
      _o.Type,
      _o.MapId,
      _icon,
      _desc,
      _o.Style,
      _o.Priority,
      _o.Rank,
      _mark_id_map,
      _mark_id,
      _o.ConditionId,
      _quest_id_list);
  }
}

public class MapNoteT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("map_id")]
  public int MapId { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }
  [Newtonsoft.Json.JsonProperty("style")]
  public int Style { get; set; }
  [Newtonsoft.Json.JsonProperty("priority")]
  public int Priority { get; set; }
  [Newtonsoft.Json.JsonProperty("rank")]
  public int Rank { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_id_map")]
  public List<WWParser.Defs.DicIntIntT> MarkIdMap { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_id")]
  public List<int> MarkId { get; set; }
  [Newtonsoft.Json.JsonProperty("condition_id")]
  public int ConditionId { get; set; }
  [Newtonsoft.Json.JsonProperty("quest_id_list")]
  public List<int> QuestIdList { get; set; }

  public MapNoteT() {
    this.Id = 0;
    this.Type = 0;
    this.MapId = 0;
    this.Icon = null;
    this.Desc = null;
    this.Style = 0;
    this.Priority = 0;
    this.Rank = 0;
    this.MarkIdMap = null;
    this.MarkId = null;
    this.ConditionId = 0;
    this.QuestIdList = null;
  }
}


static public class MapNoteVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*MapId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 12 /*Desc*/, false)
      && verifier.VerifyField(tablePos, 14 /*Style*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*Priority*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Rank*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 20 /*MarkIdMap*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*MarkId*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 24 /*ConditionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*QuestIdList*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
