// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct WeaponSkin : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static WeaponSkin GetRootAsWeaponSkin(ByteBuffer _bb) { return GetRootAsWeaponSkin(_bb, new WeaponSkin()); }
  public static WeaponSkin GetRootAsWeaponSkin(ByteBuffer _bb, WeaponSkin obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WeaponSkin __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WeaponSkinType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public bool HideInSkinView { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int QualityId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ModelId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TransformId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Models(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ModelsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetModelsBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetModelsBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetModelsArray() { return __p.__vector_as_array<int>(18); }
  public string TypeDescription { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeDescriptionBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetTypeDescriptionBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetTypeDescriptionArray() { return __p.__vector_as_array<byte>(20); }
  public string AttributesDescription { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributesDescriptionBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetAttributesDescriptionBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetAttributesDescriptionArray() { return __p.__vector_as_array<byte>(22); }
  public string BgDescription { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgDescriptionBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetBgDescriptionBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetBgDescriptionArray() { return __p.__vector_as_array<byte>(24); }
  public string CardIconPath { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCardIconPathBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetCardIconPathBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetCardIconPathArray() { return __p.__vector_as_array<byte>(26); }
  public string Icon { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(28); }
  public string IconMiddle { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconMiddleBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetIconMiddleBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetIconMiddleArray() { return __p.__vector_as_array<byte>(30); }
  public string IconSmall { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconSmallBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetIconSmallBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetIconSmallArray() { return __p.__vector_as_array<byte>(32); }
  public string Mesh { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMeshBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetMeshBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetMeshArray() { return __p.__vector_as_array<byte>(34); }
  public int MaxCapcity { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)99; } }
  public int ItemAccess(int j) { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ItemAccessLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItemAccessBytes() { return __p.__vector_as_span<int>(38, 4); }
#else
  public ArraySegment<byte>? GetItemAccessBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public int[] GetItemAccessArray() { return __p.__vector_as_array<int>(38); }
  public int ObtainedShow { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ObtainedShowDescription { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObtainedShowDescriptionBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetObtainedShowDescriptionBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetObtainedShowDescriptionArray() { return __p.__vector_as_array<byte>(42); }
  public int NumLimit { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ShowInBag { get { int o = __p.__offset(46); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int SortIndex { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float HiddenTime { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)10.0f; } }
  public bool Destructible { get { int o = __p.__offset(52); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int RedDotDisableRule { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.WeaponSkin> CreateWeaponSkin(FlatBufferBuilder builder,
      int id = 0,
      int weapon_skin_type = 0,
      StringOffset nameOffset = default(StringOffset),
      bool hide_in_skin_view = false,
      int quality_id = 0,
      int model_id = 0,
      int transform_id = 0,
      VectorOffset modelsOffset = default(VectorOffset),
      StringOffset type_descriptionOffset = default(StringOffset),
      StringOffset attributes_descriptionOffset = default(StringOffset),
      StringOffset bg_descriptionOffset = default(StringOffset),
      StringOffset card_icon_pathOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset icon_middleOffset = default(StringOffset),
      StringOffset icon_smallOffset = default(StringOffset),
      StringOffset meshOffset = default(StringOffset),
      int max_capcity = 99,
      VectorOffset item_accessOffset = default(VectorOffset),
      int obtained_show = 0,
      StringOffset obtained_show_descriptionOffset = default(StringOffset),
      int num_limit = 0,
      bool show_in_bag = false,
      int sort_index = 0,
      float hidden_time = 10.0f,
      bool destructible = false,
      int red_dot_disable_rule = 0) {
    builder.StartTable(26);
    WeaponSkin.AddRedDotDisableRule(builder, red_dot_disable_rule);
    WeaponSkin.AddHiddenTime(builder, hidden_time);
    WeaponSkin.AddSortIndex(builder, sort_index);
    WeaponSkin.AddNumLimit(builder, num_limit);
    WeaponSkin.AddObtainedShowDescription(builder, obtained_show_descriptionOffset);
    WeaponSkin.AddObtainedShow(builder, obtained_show);
    WeaponSkin.AddItemAccess(builder, item_accessOffset);
    WeaponSkin.AddMaxCapcity(builder, max_capcity);
    WeaponSkin.AddMesh(builder, meshOffset);
    WeaponSkin.AddIconSmall(builder, icon_smallOffset);
    WeaponSkin.AddIconMiddle(builder, icon_middleOffset);
    WeaponSkin.AddIcon(builder, iconOffset);
    WeaponSkin.AddCardIconPath(builder, card_icon_pathOffset);
    WeaponSkin.AddBgDescription(builder, bg_descriptionOffset);
    WeaponSkin.AddAttributesDescription(builder, attributes_descriptionOffset);
    WeaponSkin.AddTypeDescription(builder, type_descriptionOffset);
    WeaponSkin.AddModels(builder, modelsOffset);
    WeaponSkin.AddTransformId(builder, transform_id);
    WeaponSkin.AddModelId(builder, model_id);
    WeaponSkin.AddQualityId(builder, quality_id);
    WeaponSkin.AddName(builder, nameOffset);
    WeaponSkin.AddWeaponSkinType(builder, weapon_skin_type);
    WeaponSkin.AddId(builder, id);
    WeaponSkin.AddDestructible(builder, destructible);
    WeaponSkin.AddShowInBag(builder, show_in_bag);
    WeaponSkin.AddHideInSkinView(builder, hide_in_skin_view);
    return WeaponSkin.EndWeaponSkin(builder);
  }

  public static void StartWeaponSkin(FlatBufferBuilder builder) { builder.StartTable(26); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddWeaponSkinType(FlatBufferBuilder builder, int weaponSkinType) { builder.AddInt(1, weaponSkinType, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddHideInSkinView(FlatBufferBuilder builder, bool hideInSkinView) { builder.AddBool(3, hideInSkinView, false); }
  public static void AddQualityId(FlatBufferBuilder builder, int qualityId) { builder.AddInt(4, qualityId, 0); }
  public static void AddModelId(FlatBufferBuilder builder, int modelId) { builder.AddInt(5, modelId, 0); }
  public static void AddTransformId(FlatBufferBuilder builder, int transformId) { builder.AddInt(6, transformId, 0); }
  public static void AddModels(FlatBufferBuilder builder, VectorOffset modelsOffset) { builder.AddOffset(7, modelsOffset.Value, 0); }
  public static VectorOffset CreateModelsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateModelsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateModelsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateModelsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartModelsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTypeDescription(FlatBufferBuilder builder, StringOffset typeDescriptionOffset) { builder.AddOffset(8, typeDescriptionOffset.Value, 0); }
  public static void AddAttributesDescription(FlatBufferBuilder builder, StringOffset attributesDescriptionOffset) { builder.AddOffset(9, attributesDescriptionOffset.Value, 0); }
  public static void AddBgDescription(FlatBufferBuilder builder, StringOffset bgDescriptionOffset) { builder.AddOffset(10, bgDescriptionOffset.Value, 0); }
  public static void AddCardIconPath(FlatBufferBuilder builder, StringOffset cardIconPathOffset) { builder.AddOffset(11, cardIconPathOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(12, iconOffset.Value, 0); }
  public static void AddIconMiddle(FlatBufferBuilder builder, StringOffset iconMiddleOffset) { builder.AddOffset(13, iconMiddleOffset.Value, 0); }
  public static void AddIconSmall(FlatBufferBuilder builder, StringOffset iconSmallOffset) { builder.AddOffset(14, iconSmallOffset.Value, 0); }
  public static void AddMesh(FlatBufferBuilder builder, StringOffset meshOffset) { builder.AddOffset(15, meshOffset.Value, 0); }
  public static void AddMaxCapcity(FlatBufferBuilder builder, int maxCapcity) { builder.AddInt(16, maxCapcity, 99); }
  public static void AddItemAccess(FlatBufferBuilder builder, VectorOffset itemAccessOffset) { builder.AddOffset(17, itemAccessOffset.Value, 0); }
  public static VectorOffset CreateItemAccessVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItemAccessVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemAccessVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemAccessVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartItemAccessVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddObtainedShow(FlatBufferBuilder builder, int obtainedShow) { builder.AddInt(18, obtainedShow, 0); }
  public static void AddObtainedShowDescription(FlatBufferBuilder builder, StringOffset obtainedShowDescriptionOffset) { builder.AddOffset(19, obtainedShowDescriptionOffset.Value, 0); }
  public static void AddNumLimit(FlatBufferBuilder builder, int numLimit) { builder.AddInt(20, numLimit, 0); }
  public static void AddShowInBag(FlatBufferBuilder builder, bool showInBag) { builder.AddBool(21, showInBag, false); }
  public static void AddSortIndex(FlatBufferBuilder builder, int sortIndex) { builder.AddInt(22, sortIndex, 0); }
  public static void AddHiddenTime(FlatBufferBuilder builder, float hiddenTime) { builder.AddFloat(23, hiddenTime, 10.0f); }
  public static void AddDestructible(FlatBufferBuilder builder, bool destructible) { builder.AddBool(24, destructible, false); }
  public static void AddRedDotDisableRule(FlatBufferBuilder builder, int redDotDisableRule) { builder.AddInt(25, redDotDisableRule, 0); }
  public static Offset<WWParser.Defs.WeaponSkin> EndWeaponSkin(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.WeaponSkin>(o);
  }
  public WeaponSkinT UnPack() {
    var _o = new WeaponSkinT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WeaponSkinT _o) {
    _o.Id = this.Id;
    _o.WeaponSkinType = this.WeaponSkinType;
    _o.Name = this.Name;
    _o.HideInSkinView = this.HideInSkinView;
    _o.QualityId = this.QualityId;
    _o.ModelId = this.ModelId;
    _o.TransformId = this.TransformId;
    _o.Models = new List<int>();
    for (var _j = 0; _j < this.ModelsLength; ++_j) {_o.Models.Add(this.Models(_j));}
    _o.TypeDescription = this.TypeDescription;
    _o.AttributesDescription = this.AttributesDescription;
    _o.BgDescription = this.BgDescription;
    _o.CardIconPath = this.CardIconPath;
    _o.Icon = this.Icon;
    _o.IconMiddle = this.IconMiddle;
    _o.IconSmall = this.IconSmall;
    _o.Mesh = this.Mesh;
    _o.MaxCapcity = this.MaxCapcity;
    _o.ItemAccess = new List<int>();
    for (var _j = 0; _j < this.ItemAccessLength; ++_j) {_o.ItemAccess.Add(this.ItemAccess(_j));}
    _o.ObtainedShow = this.ObtainedShow;
    _o.ObtainedShowDescription = this.ObtainedShowDescription;
    _o.NumLimit = this.NumLimit;
    _o.ShowInBag = this.ShowInBag;
    _o.SortIndex = this.SortIndex;
    _o.HiddenTime = this.HiddenTime;
    _o.Destructible = this.Destructible;
    _o.RedDotDisableRule = this.RedDotDisableRule;
  }
  public static Offset<WWParser.Defs.WeaponSkin> Pack(FlatBufferBuilder builder, WeaponSkinT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.WeaponSkin>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _models = default(VectorOffset);
    if (_o.Models != null) {
      var __models = _o.Models.ToArray();
      _models = CreateModelsVector(builder, __models);
    }
    var _type_description = _o.TypeDescription == null ? default(StringOffset) : builder.CreateString(_o.TypeDescription);
    var _attributes_description = _o.AttributesDescription == null ? default(StringOffset) : builder.CreateString(_o.AttributesDescription);
    var _bg_description = _o.BgDescription == null ? default(StringOffset) : builder.CreateString(_o.BgDescription);
    var _card_icon_path = _o.CardIconPath == null ? default(StringOffset) : builder.CreateString(_o.CardIconPath);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _icon_middle = _o.IconMiddle == null ? default(StringOffset) : builder.CreateString(_o.IconMiddle);
    var _icon_small = _o.IconSmall == null ? default(StringOffset) : builder.CreateString(_o.IconSmall);
    var _mesh = _o.Mesh == null ? default(StringOffset) : builder.CreateString(_o.Mesh);
    var _item_access = default(VectorOffset);
    if (_o.ItemAccess != null) {
      var __item_access = _o.ItemAccess.ToArray();
      _item_access = CreateItemAccessVector(builder, __item_access);
    }
    var _obtained_show_description = _o.ObtainedShowDescription == null ? default(StringOffset) : builder.CreateString(_o.ObtainedShowDescription);
    return CreateWeaponSkin(
      builder,
      _o.Id,
      _o.WeaponSkinType,
      _name,
      _o.HideInSkinView,
      _o.QualityId,
      _o.ModelId,
      _o.TransformId,
      _models,
      _type_description,
      _attributes_description,
      _bg_description,
      _card_icon_path,
      _icon,
      _icon_middle,
      _icon_small,
      _mesh,
      _o.MaxCapcity,
      _item_access,
      _o.ObtainedShow,
      _obtained_show_description,
      _o.NumLimit,
      _o.ShowInBag,
      _o.SortIndex,
      _o.HiddenTime,
      _o.Destructible,
      _o.RedDotDisableRule);
  }
}

public class WeaponSkinT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("weapon_skin_type")]
  public int WeaponSkinType { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("hide_in_skin_view")]
  public bool HideInSkinView { get; set; }
  [Newtonsoft.Json.JsonProperty("quality_id")]
  public int QualityId { get; set; }
  [Newtonsoft.Json.JsonProperty("model_id")]
  public int ModelId { get; set; }
  [Newtonsoft.Json.JsonProperty("transform_id")]
  public int TransformId { get; set; }
  [Newtonsoft.Json.JsonProperty("models")]
  public List<int> Models { get; set; }
  [Newtonsoft.Json.JsonProperty("type_description")]
  public string TypeDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("attributes_description")]
  public string AttributesDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("bg_description")]
  public string BgDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("card_icon_path")]
  public string CardIconPath { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_middle")]
  public string IconMiddle { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_small")]
  public string IconSmall { get; set; }
  [Newtonsoft.Json.JsonProperty("mesh")]
  public string Mesh { get; set; }
  [Newtonsoft.Json.JsonProperty("max_capcity")]
  public int MaxCapcity { get; set; }
  [Newtonsoft.Json.JsonProperty("item_access")]
  public List<int> ItemAccess { get; set; }
  [Newtonsoft.Json.JsonProperty("obtained_show")]
  public int ObtainedShow { get; set; }
  [Newtonsoft.Json.JsonProperty("obtained_show_description")]
  public string ObtainedShowDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("num_limit")]
  public int NumLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("show_in_bag")]
  public bool ShowInBag { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_index")]
  public int SortIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("hidden_time")]
  public float HiddenTime { get; set; }
  [Newtonsoft.Json.JsonProperty("destructible")]
  public bool Destructible { get; set; }
  [Newtonsoft.Json.JsonProperty("red_dot_disable_rule")]
  public int RedDotDisableRule { get; set; }

  public WeaponSkinT() {
    this.Id = 0;
    this.WeaponSkinType = 0;
    this.Name = null;
    this.HideInSkinView = false;
    this.QualityId = 0;
    this.ModelId = 0;
    this.TransformId = 0;
    this.Models = null;
    this.TypeDescription = null;
    this.AttributesDescription = null;
    this.BgDescription = null;
    this.CardIconPath = null;
    this.Icon = null;
    this.IconMiddle = null;
    this.IconSmall = null;
    this.Mesh = null;
    this.MaxCapcity = 99;
    this.ItemAccess = null;
    this.ObtainedShow = 0;
    this.ObtainedShowDescription = null;
    this.NumLimit = 0;
    this.ShowInBag = false;
    this.SortIndex = 0;
    this.HiddenTime = 10.0f;
    this.Destructible = false;
    this.RedDotDisableRule = 0;
  }
}


static public class WeaponSkinVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*WeaponSkinType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyField(tablePos, 10 /*HideInSkinView*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*QualityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ModelId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*TransformId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*Models*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 20 /*TypeDescription*/, false)
      && verifier.VerifyString(tablePos, 22 /*AttributesDescription*/, false)
      && verifier.VerifyString(tablePos, 24 /*BgDescription*/, false)
      && verifier.VerifyString(tablePos, 26 /*CardIconPath*/, false)
      && verifier.VerifyString(tablePos, 28 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 30 /*IconMiddle*/, false)
      && verifier.VerifyString(tablePos, 32 /*IconSmall*/, false)
      && verifier.VerifyString(tablePos, 34 /*Mesh*/, false)
      && verifier.VerifyField(tablePos, 36 /*MaxCapcity*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 38 /*ItemAccess*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 40 /*ObtainedShow*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 42 /*ObtainedShowDescription*/, false)
      && verifier.VerifyField(tablePos, 44 /*NumLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*ShowInBag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 48 /*SortIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*HiddenTime*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*Destructible*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 54 /*RedDotDisableRule*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
