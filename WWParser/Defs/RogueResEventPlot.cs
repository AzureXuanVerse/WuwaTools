// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueResEventPlot : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueResEventPlot GetRootAsRogueResEventPlot(ByteBuffer _bb) { return GetRootAsRogueResEventPlot(_bb, new RogueResEventPlot()); }
  public static RogueResEventPlot GetRootAsRogueResEventPlot(ByteBuffer _bb, RogueResEventPlot obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueResEventPlot __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlotId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(6); }
  public int BgResource { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.RogueResEventPlot> CreateRogueResEventPlot(FlatBufferBuilder builder,
      int plot_id = 0,
      StringOffset titleOffset = default(StringOffset),
      int bg_resource = 0) {
    builder.StartTable(3);
    RogueResEventPlot.AddBgResource(builder, bg_resource);
    RogueResEventPlot.AddTitle(builder, titleOffset);
    RogueResEventPlot.AddPlotId(builder, plot_id);
    return RogueResEventPlot.EndRogueResEventPlot(builder);
  }

  public static void StartRogueResEventPlot(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPlotId(FlatBufferBuilder builder, int plotId) { builder.AddInt(0, plotId, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(1, titleOffset.Value, 0); }
  public static void AddBgResource(FlatBufferBuilder builder, int bgResource) { builder.AddInt(2, bgResource, 0); }
  public static Offset<WWParser.Defs.RogueResEventPlot> EndRogueResEventPlot(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueResEventPlot>(o);
  }
  public RogueResEventPlotT UnPack() {
    var _o = new RogueResEventPlotT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueResEventPlotT _o) {
    _o.PlotId = this.PlotId;
    _o.Title = this.Title;
    _o.BgResource = this.BgResource;
  }
  public static Offset<WWParser.Defs.RogueResEventPlot> Pack(FlatBufferBuilder builder, RogueResEventPlotT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueResEventPlot>);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    return CreateRogueResEventPlot(
      builder,
      _o.PlotId,
      _title,
      _o.BgResource);
  }
}

public class RogueResEventPlotT
{
  [Newtonsoft.Json.JsonProperty("plot_id")]
  public int PlotId { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("bg_resource")]
  public int BgResource { get; set; }

  public RogueResEventPlotT() {
    this.PlotId = 0;
    this.Title = null;
    this.BgResource = 0;
  }
}


static public class RogueResEventPlotVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PlotId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Title*/, false)
      && verifier.VerifyField(tablePos, 8 /*BgResource*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
