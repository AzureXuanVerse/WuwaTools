// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GatherActivity : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GatherActivity GetRootAsGatherActivity(ByteBuffer _bb) { return GetRootAsGatherActivity(_bb, new GatherActivity()); }
  public static GatherActivity GetRootAsGatherActivity(ByteBuffer _bb, GatherActivity obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GatherActivity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PlayTask { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TaskClue { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskClueBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTaskClueBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTaskClueArray() { return __p.__vector_as_array<byte>(8); }
  public WWParser.Defs.DicIntInt? SubmitItem(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SubmitItemLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Reward { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LocationEntityConfigId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MarkId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? RewardItem(int j) { int o = __p.__offset(18); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RewardItemLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.GatherActivity> CreateGatherActivity(FlatBufferBuilder builder,
      int id = 0,
      int play_task = 0,
      StringOffset task_clueOffset = default(StringOffset),
      VectorOffset submit_itemOffset = default(VectorOffset),
      int reward = 0,
      int location_entity_config_id = 0,
      int mark_id = 0,
      VectorOffset reward_itemOffset = default(VectorOffset)) {
    builder.StartTable(8);
    GatherActivity.AddRewardItem(builder, reward_itemOffset);
    GatherActivity.AddMarkId(builder, mark_id);
    GatherActivity.AddLocationEntityConfigId(builder, location_entity_config_id);
    GatherActivity.AddReward(builder, reward);
    GatherActivity.AddSubmitItem(builder, submit_itemOffset);
    GatherActivity.AddTaskClue(builder, task_clueOffset);
    GatherActivity.AddPlayTask(builder, play_task);
    GatherActivity.AddId(builder, id);
    return GatherActivity.EndGatherActivity(builder);
  }

  public static void StartGatherActivity(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPlayTask(FlatBufferBuilder builder, int playTask) { builder.AddInt(1, playTask, 0); }
  public static void AddTaskClue(FlatBufferBuilder builder, StringOffset taskClueOffset) { builder.AddOffset(2, taskClueOffset.Value, 0); }
  public static void AddSubmitItem(FlatBufferBuilder builder, VectorOffset submitItemOffset) { builder.AddOffset(3, submitItemOffset.Value, 0); }
  public static VectorOffset CreateSubmitItemVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSubmitItemVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubmitItemVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubmitItemVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSubmitItemVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReward(FlatBufferBuilder builder, int reward) { builder.AddInt(4, reward, 0); }
  public static void AddLocationEntityConfigId(FlatBufferBuilder builder, int locationEntityConfigId) { builder.AddInt(5, locationEntityConfigId, 0); }
  public static void AddMarkId(FlatBufferBuilder builder, int markId) { builder.AddInt(6, markId, 0); }
  public static void AddRewardItem(FlatBufferBuilder builder, VectorOffset rewardItemOffset) { builder.AddOffset(7, rewardItemOffset.Value, 0); }
  public static VectorOffset CreateRewardItemVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRewardItemVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardItemVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardItemVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardItemVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.GatherActivity> EndGatherActivity(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.GatherActivity>(o);
  }
  public GatherActivityT UnPack() {
    var _o = new GatherActivityT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GatherActivityT _o) {
    _o.Id = this.Id;
    _o.PlayTask = this.PlayTask;
    _o.TaskClue = this.TaskClue;
    _o.SubmitItem = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.SubmitItemLength; ++_j) {_o.SubmitItem.Add(this.SubmitItem(_j).HasValue ? this.SubmitItem(_j).Value.UnPack() : null);}
    _o.Reward = this.Reward;
    _o.LocationEntityConfigId = this.LocationEntityConfigId;
    _o.MarkId = this.MarkId;
    _o.RewardItem = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.RewardItemLength; ++_j) {_o.RewardItem.Add(this.RewardItem(_j).HasValue ? this.RewardItem(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.GatherActivity> Pack(FlatBufferBuilder builder, GatherActivityT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.GatherActivity>);
    var _task_clue = _o.TaskClue == null ? default(StringOffset) : builder.CreateString(_o.TaskClue);
    var _submit_item = default(VectorOffset);
    if (_o.SubmitItem != null) {
      var __submit_item = new Offset<WWParser.Defs.DicIntInt>[_o.SubmitItem.Count];
      for (var _j = 0; _j < __submit_item.Length; ++_j) { __submit_item[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.SubmitItem[_j]); }
      _submit_item = CreateSubmitItemVector(builder, __submit_item);
    }
    var _reward_item = default(VectorOffset);
    if (_o.RewardItem != null) {
      var __reward_item = new Offset<WWParser.Defs.DicIntInt>[_o.RewardItem.Count];
      for (var _j = 0; _j < __reward_item.Length; ++_j) { __reward_item[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.RewardItem[_j]); }
      _reward_item = CreateRewardItemVector(builder, __reward_item);
    }
    return CreateGatherActivity(
      builder,
      _o.Id,
      _o.PlayTask,
      _task_clue,
      _submit_item,
      _o.Reward,
      _o.LocationEntityConfigId,
      _o.MarkId,
      _reward_item);
  }
}

public class GatherActivityT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("play_task")]
  public int PlayTask { get; set; }
  [Newtonsoft.Json.JsonProperty("task_clue")]
  public string TaskClue { get; set; }
  [Newtonsoft.Json.JsonProperty("submit_item")]
  public List<WWParser.Defs.DicIntIntT> SubmitItem { get; set; }
  [Newtonsoft.Json.JsonProperty("reward")]
  public int Reward { get; set; }
  [Newtonsoft.Json.JsonProperty("location_entity_config_id")]
  public int LocationEntityConfigId { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_id")]
  public int MarkId { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_item")]
  public List<WWParser.Defs.DicIntIntT> RewardItem { get; set; }

  public GatherActivityT() {
    this.Id = 0;
    this.PlayTask = 0;
    this.TaskClue = null;
    this.SubmitItem = null;
    this.Reward = 0;
    this.LocationEntityConfigId = 0;
    this.MarkId = 0;
    this.RewardItem = null;
  }
}


static public class GatherActivityVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*PlayTask*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*TaskClue*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*SubmitItem*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 12 /*Reward*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*LocationEntityConfigId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*MarkId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 18 /*RewardItem*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
