// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PhantomSkill : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PhantomSkill GetRootAsPhantomSkill(ByteBuffer _bb) { return GetRootAsPhantomSkill(_bb, new PhantomSkill()); }
  public static PhantomSkill GetRootAsPhantomSkill(ByteBuffer _bb, PhantomSkill obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PhantomSkill __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PhantomSkillId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public double BuffIds(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int BuffIdsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetBuffIdsBytes() { return __p.__vector_as_span<double>(8, 8); }
#else
  public ArraySegment<byte>? GetBuffIdsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public double[] GetBuffIdsArray() { return __p.__vector_as_array<double>(8); }
  public double SettleIds(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int SettleIdsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetSettleIdsBytes() { return __p.__vector_as_span<double>(10, 8); }
#else
  public ArraySegment<byte>? GetSettleIdsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public double[] GetSettleIdsArray() { return __p.__vector_as_array<double>(10); }
  public double BuffEffects(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int BuffEffectsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetBuffEffectsBytes() { return __p.__vector_as_span<double>(12, 8); }
#else
  public ArraySegment<byte>? GetBuffEffectsBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public double[] GetBuffEffectsArray() { return __p.__vector_as_array<double>(12); }
  public int ChargeEfficiency { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillGroupId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float SkillCd { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string DescriptionEx { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionExBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetDescriptionExBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetDescriptionExArray() { return __p.__vector_as_array<byte>(20); }
  public string SimplyDescription { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSimplyDescriptionBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetSimplyDescriptionBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetSimplyDescriptionArray() { return __p.__vector_as_array<byte>(22); }
  public bool IfCounterSkill { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string CurLevelDescriptionEx(int j) { int o = __p.__offset(26); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CurLevelDescriptionExLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.StringArray? LevelDescStrArray(int j) { int o = __p.__offset(28); return o != 0 ? (WWParser.Defs.StringArray?)(new WWParser.Defs.StringArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int LevelDescStrArrayLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string BattleViewIcon { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBattleViewIconBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetBattleViewIconBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetBattleViewIconArray() { return __p.__vector_as_array<byte>(30); }
  public string SpecialBattleViewIcon { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpecialBattleViewIconBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetSpecialBattleViewIconBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetSpecialBattleViewIconArray() { return __p.__vector_as_array<byte>(32); }

  public static Offset<WWParser.Defs.PhantomSkill> CreatePhantomSkill(FlatBufferBuilder builder,
      int id = 0,
      int phantom_skill_id = 0,
      VectorOffset buff_idsOffset = default(VectorOffset),
      VectorOffset settle_idsOffset = default(VectorOffset),
      VectorOffset buff_effectsOffset = default(VectorOffset),
      int charge_efficiency = 0,
      int skill_group_id = 0,
      float skill_cd = 0.0f,
      StringOffset description_exOffset = default(StringOffset),
      StringOffset simply_descriptionOffset = default(StringOffset),
      bool if_counter_skill = false,
      VectorOffset cur_level_description_exOffset = default(VectorOffset),
      VectorOffset level_desc_str_arrayOffset = default(VectorOffset),
      StringOffset battle_view_iconOffset = default(StringOffset),
      StringOffset special_battle_view_iconOffset = default(StringOffset)) {
    builder.StartTable(15);
    PhantomSkill.AddSpecialBattleViewIcon(builder, special_battle_view_iconOffset);
    PhantomSkill.AddBattleViewIcon(builder, battle_view_iconOffset);
    PhantomSkill.AddLevelDescStrArray(builder, level_desc_str_arrayOffset);
    PhantomSkill.AddCurLevelDescriptionEx(builder, cur_level_description_exOffset);
    PhantomSkill.AddSimplyDescription(builder, simply_descriptionOffset);
    PhantomSkill.AddDescriptionEx(builder, description_exOffset);
    PhantomSkill.AddSkillCd(builder, skill_cd);
    PhantomSkill.AddSkillGroupId(builder, skill_group_id);
    PhantomSkill.AddChargeEfficiency(builder, charge_efficiency);
    PhantomSkill.AddBuffEffects(builder, buff_effectsOffset);
    PhantomSkill.AddSettleIds(builder, settle_idsOffset);
    PhantomSkill.AddBuffIds(builder, buff_idsOffset);
    PhantomSkill.AddPhantomSkillId(builder, phantom_skill_id);
    PhantomSkill.AddId(builder, id);
    PhantomSkill.AddIfCounterSkill(builder, if_counter_skill);
    return PhantomSkill.EndPhantomSkill(builder);
  }

  public static void StartPhantomSkill(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPhantomSkillId(FlatBufferBuilder builder, int phantomSkillId) { builder.AddInt(1, phantomSkillId, 0); }
  public static void AddBuffIds(FlatBufferBuilder builder, VectorOffset buffIdsOffset) { builder.AddOffset(2, buffIdsOffset.Value, 0); }
  public static VectorOffset CreateBuffIdsVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddSettleIds(FlatBufferBuilder builder, VectorOffset settleIdsOffset) { builder.AddOffset(3, settleIdsOffset.Value, 0); }
  public static VectorOffset CreateSettleIdsVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSettleIdsVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSettleIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSettleIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSettleIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBuffEffects(FlatBufferBuilder builder, VectorOffset buffEffectsOffset) { builder.AddOffset(4, buffEffectsOffset.Value, 0); }
  public static VectorOffset CreateBuffEffectsVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffEffectsVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffEffectsVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffEffectsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffEffectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddChargeEfficiency(FlatBufferBuilder builder, int chargeEfficiency) { builder.AddInt(5, chargeEfficiency, 0); }
  public static void AddSkillGroupId(FlatBufferBuilder builder, int skillGroupId) { builder.AddInt(6, skillGroupId, 0); }
  public static void AddSkillCd(FlatBufferBuilder builder, float skillCd) { builder.AddFloat(7, skillCd, 0.0f); }
  public static void AddDescriptionEx(FlatBufferBuilder builder, StringOffset descriptionExOffset) { builder.AddOffset(8, descriptionExOffset.Value, 0); }
  public static void AddSimplyDescription(FlatBufferBuilder builder, StringOffset simplyDescriptionOffset) { builder.AddOffset(9, simplyDescriptionOffset.Value, 0); }
  public static void AddIfCounterSkill(FlatBufferBuilder builder, bool ifCounterSkill) { builder.AddBool(10, ifCounterSkill, false); }
  public static void AddCurLevelDescriptionEx(FlatBufferBuilder builder, VectorOffset curLevelDescriptionExOffset) { builder.AddOffset(11, curLevelDescriptionExOffset.Value, 0); }
  public static VectorOffset CreateCurLevelDescriptionExVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCurLevelDescriptionExVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCurLevelDescriptionExVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCurLevelDescriptionExVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCurLevelDescriptionExVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLevelDescStrArray(FlatBufferBuilder builder, VectorOffset levelDescStrArrayOffset) { builder.AddOffset(12, levelDescStrArrayOffset.Value, 0); }
  public static VectorOffset CreateLevelDescStrArrayVector(FlatBufferBuilder builder, Offset<WWParser.Defs.StringArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLevelDescStrArrayVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.StringArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLevelDescStrArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.StringArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLevelDescStrArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.StringArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLevelDescStrArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBattleViewIcon(FlatBufferBuilder builder, StringOffset battleViewIconOffset) { builder.AddOffset(13, battleViewIconOffset.Value, 0); }
  public static void AddSpecialBattleViewIcon(FlatBufferBuilder builder, StringOffset specialBattleViewIconOffset) { builder.AddOffset(14, specialBattleViewIconOffset.Value, 0); }
  public static Offset<WWParser.Defs.PhantomSkill> EndPhantomSkill(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PhantomSkill>(o);
  }
  public PhantomSkillT UnPack() {
    var _o = new PhantomSkillT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PhantomSkillT _o) {
    _o.Id = this.Id;
    _o.PhantomSkillId = this.PhantomSkillId;
    _o.BuffIds = new List<double>();
    for (var _j = 0; _j < this.BuffIdsLength; ++_j) {_o.BuffIds.Add(this.BuffIds(_j));}
    _o.SettleIds = new List<double>();
    for (var _j = 0; _j < this.SettleIdsLength; ++_j) {_o.SettleIds.Add(this.SettleIds(_j));}
    _o.BuffEffects = new List<double>();
    for (var _j = 0; _j < this.BuffEffectsLength; ++_j) {_o.BuffEffects.Add(this.BuffEffects(_j));}
    _o.ChargeEfficiency = this.ChargeEfficiency;
    _o.SkillGroupId = this.SkillGroupId;
    _o.SkillCd = this.SkillCd;
    _o.DescriptionEx = this.DescriptionEx;
    _o.SimplyDescription = this.SimplyDescription;
    _o.IfCounterSkill = this.IfCounterSkill;
    _o.CurLevelDescriptionEx = new List<string>();
    for (var _j = 0; _j < this.CurLevelDescriptionExLength; ++_j) {_o.CurLevelDescriptionEx.Add(this.CurLevelDescriptionEx(_j));}
    _o.LevelDescStrArray = new List<WWParser.Defs.StringArrayT>();
    for (var _j = 0; _j < this.LevelDescStrArrayLength; ++_j) {_o.LevelDescStrArray.Add(this.LevelDescStrArray(_j).HasValue ? this.LevelDescStrArray(_j).Value.UnPack() : null);}
    _o.BattleViewIcon = this.BattleViewIcon;
    _o.SpecialBattleViewIcon = this.SpecialBattleViewIcon;
  }
  public static Offset<WWParser.Defs.PhantomSkill> Pack(FlatBufferBuilder builder, PhantomSkillT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PhantomSkill>);
    var _buff_ids = default(VectorOffset);
    if (_o.BuffIds != null) {
      var __buff_ids = _o.BuffIds.ToArray();
      _buff_ids = CreateBuffIdsVector(builder, __buff_ids);
    }
    var _settle_ids = default(VectorOffset);
    if (_o.SettleIds != null) {
      var __settle_ids = _o.SettleIds.ToArray();
      _settle_ids = CreateSettleIdsVector(builder, __settle_ids);
    }
    var _buff_effects = default(VectorOffset);
    if (_o.BuffEffects != null) {
      var __buff_effects = _o.BuffEffects.ToArray();
      _buff_effects = CreateBuffEffectsVector(builder, __buff_effects);
    }
    var _description_ex = _o.DescriptionEx == null ? default(StringOffset) : builder.CreateString(_o.DescriptionEx);
    var _simply_description = _o.SimplyDescription == null ? default(StringOffset) : builder.CreateString(_o.SimplyDescription);
    var _cur_level_description_ex = default(VectorOffset);
    if (_o.CurLevelDescriptionEx != null) {
      var __cur_level_description_ex = new StringOffset[_o.CurLevelDescriptionEx.Count];
      for (var _j = 0; _j < __cur_level_description_ex.Length; ++_j) { __cur_level_description_ex[_j] = builder.CreateString(_o.CurLevelDescriptionEx[_j]); }
      _cur_level_description_ex = CreateCurLevelDescriptionExVector(builder, __cur_level_description_ex);
    }
    var _level_desc_str_array = default(VectorOffset);
    if (_o.LevelDescStrArray != null) {
      var __level_desc_str_array = new Offset<WWParser.Defs.StringArray>[_o.LevelDescStrArray.Count];
      for (var _j = 0; _j < __level_desc_str_array.Length; ++_j) { __level_desc_str_array[_j] = WWParser.Defs.StringArray.Pack(builder, _o.LevelDescStrArray[_j]); }
      _level_desc_str_array = CreateLevelDescStrArrayVector(builder, __level_desc_str_array);
    }
    var _battle_view_icon = _o.BattleViewIcon == null ? default(StringOffset) : builder.CreateString(_o.BattleViewIcon);
    var _special_battle_view_icon = _o.SpecialBattleViewIcon == null ? default(StringOffset) : builder.CreateString(_o.SpecialBattleViewIcon);
    return CreatePhantomSkill(
      builder,
      _o.Id,
      _o.PhantomSkillId,
      _buff_ids,
      _settle_ids,
      _buff_effects,
      _o.ChargeEfficiency,
      _o.SkillGroupId,
      _o.SkillCd,
      _description_ex,
      _simply_description,
      _o.IfCounterSkill,
      _cur_level_description_ex,
      _level_desc_str_array,
      _battle_view_icon,
      _special_battle_view_icon);
  }
}

public class PhantomSkillT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("phantom_skill_id")]
  public int PhantomSkillId { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_ids")]
  public List<double> BuffIds { get; set; }
  [Newtonsoft.Json.JsonProperty("settle_ids")]
  public List<double> SettleIds { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_effects")]
  public List<double> BuffEffects { get; set; }
  [Newtonsoft.Json.JsonProperty("charge_efficiency")]
  public int ChargeEfficiency { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_group_id")]
  public int SkillGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_cd")]
  public float SkillCd { get; set; }
  [Newtonsoft.Json.JsonProperty("description_ex")]
  public string DescriptionEx { get; set; }
  [Newtonsoft.Json.JsonProperty("simply_description")]
  public string SimplyDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("if_counter_skill")]
  public bool IfCounterSkill { get; set; }
  [Newtonsoft.Json.JsonProperty("cur_level_description_ex")]
  public List<string> CurLevelDescriptionEx { get; set; }
  [Newtonsoft.Json.JsonProperty("level_desc_str_array")]
  public List<WWParser.Defs.StringArrayT> LevelDescStrArray { get; set; }
  [Newtonsoft.Json.JsonProperty("battle_view_icon")]
  public string BattleViewIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("special_battle_view_icon")]
  public string SpecialBattleViewIcon { get; set; }

  public PhantomSkillT() {
    this.Id = 0;
    this.PhantomSkillId = 0;
    this.BuffIds = null;
    this.SettleIds = null;
    this.BuffEffects = null;
    this.ChargeEfficiency = 0;
    this.SkillGroupId = 0;
    this.SkillCd = 0.0f;
    this.DescriptionEx = null;
    this.SimplyDescription = null;
    this.IfCounterSkill = false;
    this.CurLevelDescriptionEx = null;
    this.LevelDescStrArray = null;
    this.BattleViewIcon = null;
    this.SpecialBattleViewIcon = null;
  }
}


static public class PhantomSkillVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*PhantomSkillId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*BuffIds*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*SettleIds*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*BuffEffects*/, 8 /*double*/, false)
      && verifier.VerifyField(tablePos, 14 /*ChargeEfficiency*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*SkillGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*SkillCd*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*DescriptionEx*/, false)
      && verifier.VerifyString(tablePos, 22 /*SimplyDescription*/, false)
      && verifier.VerifyField(tablePos, 24 /*IfCounterSkill*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 26 /*CurLevelDescriptionEx*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 28 /*LevelDescStrArray*/, WWParser.Defs.StringArrayVerify.Verify, false)
      && verifier.VerifyString(tablePos, 30 /*BattleViewIcon*/, false)
      && verifier.VerifyString(tablePos, 32 /*SpecialBattleViewIcon*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
