// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FunctionMenu : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FunctionMenu GetRootAsFunctionMenu(ByteBuffer _bb) { return GetRootAsFunctionMenu(_bb, new FunctionMenu()); }
  public static FunctionMenu GetRootAsFunctionMenu(ByteBuffer _bb, FunctionMenu obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FunctionMenu __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int FunctionId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SortIndex { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string FunctionName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFunctionNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetFunctionNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetFunctionNameArray() { return __p.__vector_as_array<byte>(8); }
  public string FunctionIcon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFunctionIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetFunctionIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetFunctionIconArray() { return __p.__vector_as_array<byte>(10); }
  public string JumpView { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJumpViewBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetJumpViewBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetJumpViewArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<WWParser.Defs.FunctionMenu> CreateFunctionMenu(FlatBufferBuilder builder,
      int function_id = 0,
      int sort_index = 0,
      StringOffset function_nameOffset = default(StringOffset),
      StringOffset function_iconOffset = default(StringOffset),
      StringOffset jump_viewOffset = default(StringOffset)) {
    builder.StartTable(5);
    FunctionMenu.AddJumpView(builder, jump_viewOffset);
    FunctionMenu.AddFunctionIcon(builder, function_iconOffset);
    FunctionMenu.AddFunctionName(builder, function_nameOffset);
    FunctionMenu.AddSortIndex(builder, sort_index);
    FunctionMenu.AddFunctionId(builder, function_id);
    return FunctionMenu.EndFunctionMenu(builder);
  }

  public static void StartFunctionMenu(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddFunctionId(FlatBufferBuilder builder, int functionId) { builder.AddInt(0, functionId, 0); }
  public static void AddSortIndex(FlatBufferBuilder builder, int sortIndex) { builder.AddInt(1, sortIndex, 0); }
  public static void AddFunctionName(FlatBufferBuilder builder, StringOffset functionNameOffset) { builder.AddOffset(2, functionNameOffset.Value, 0); }
  public static void AddFunctionIcon(FlatBufferBuilder builder, StringOffset functionIconOffset) { builder.AddOffset(3, functionIconOffset.Value, 0); }
  public static void AddJumpView(FlatBufferBuilder builder, StringOffset jumpViewOffset) { builder.AddOffset(4, jumpViewOffset.Value, 0); }
  public static Offset<WWParser.Defs.FunctionMenu> EndFunctionMenu(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FunctionMenu>(o);
  }
  public FunctionMenuT UnPack() {
    var _o = new FunctionMenuT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FunctionMenuT _o) {
    _o.FunctionId = this.FunctionId;
    _o.SortIndex = this.SortIndex;
    _o.FunctionName = this.FunctionName;
    _o.FunctionIcon = this.FunctionIcon;
    _o.JumpView = this.JumpView;
  }
  public static Offset<WWParser.Defs.FunctionMenu> Pack(FlatBufferBuilder builder, FunctionMenuT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FunctionMenu>);
    var _function_name = _o.FunctionName == null ? default(StringOffset) : builder.CreateString(_o.FunctionName);
    var _function_icon = _o.FunctionIcon == null ? default(StringOffset) : builder.CreateString(_o.FunctionIcon);
    var _jump_view = _o.JumpView == null ? default(StringOffset) : builder.CreateString(_o.JumpView);
    return CreateFunctionMenu(
      builder,
      _o.FunctionId,
      _o.SortIndex,
      _function_name,
      _function_icon,
      _jump_view);
  }
}

public class FunctionMenuT
{
  [Newtonsoft.Json.JsonProperty("function_id")]
  public int FunctionId { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_index")]
  public int SortIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("function_name")]
  public string FunctionName { get; set; }
  [Newtonsoft.Json.JsonProperty("function_icon")]
  public string FunctionIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("jump_view")]
  public string JumpView { get; set; }

  public FunctionMenuT() {
    this.FunctionId = 0;
    this.SortIndex = 0;
    this.FunctionName = null;
    this.FunctionIcon = null;
    this.JumpView = null;
  }
}


static public class FunctionMenuVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*FunctionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SortIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*FunctionName*/, false)
      && verifier.VerifyString(tablePos, 10 /*FunctionIcon*/, false)
      && verifier.VerifyString(tablePos, 12 /*JumpView*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
