// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MobileBattleUiSet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MobileBattleUiSet GetRootAsMobileBattleUiSet(ByteBuffer _bb) { return GetRootAsMobileBattleUiSet(_bb, new MobileBattleUiSet()); }
  public static MobileBattleUiSet GetRootAsMobileBattleUiSet(ByteBuffer _bb, MobileBattleUiSet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MobileBattleUiSet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PanelIndex { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemIndex { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public float SourceSize { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float SourceAlpha { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float SourceOffsetx { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float SourceOffsety { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool IsCheckOverlap { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool CanEdit { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsDefaultSelected { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int SourceHierarchyIndex { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.MobileBattleUiSet> CreateMobileBattleUiSet(FlatBufferBuilder builder,
      int id = 0,
      int panel_index = 0,
      int item_index = 0,
      StringOffset nameOffset = default(StringOffset),
      float source_size = 0.0f,
      float source_alpha = 0.0f,
      float source_offsetx = 0.0f,
      float source_offsety = 0.0f,
      bool is_check_overlap = false,
      bool can_edit = false,
      bool is_default_selected = false,
      int source_hierarchy_index = 0) {
    builder.StartTable(12);
    MobileBattleUiSet.AddSourceHierarchyIndex(builder, source_hierarchy_index);
    MobileBattleUiSet.AddSourceOffsety(builder, source_offsety);
    MobileBattleUiSet.AddSourceOffsetx(builder, source_offsetx);
    MobileBattleUiSet.AddSourceAlpha(builder, source_alpha);
    MobileBattleUiSet.AddSourceSize(builder, source_size);
    MobileBattleUiSet.AddName(builder, nameOffset);
    MobileBattleUiSet.AddItemIndex(builder, item_index);
    MobileBattleUiSet.AddPanelIndex(builder, panel_index);
    MobileBattleUiSet.AddId(builder, id);
    MobileBattleUiSet.AddIsDefaultSelected(builder, is_default_selected);
    MobileBattleUiSet.AddCanEdit(builder, can_edit);
    MobileBattleUiSet.AddIsCheckOverlap(builder, is_check_overlap);
    return MobileBattleUiSet.EndMobileBattleUiSet(builder);
  }

  public static void StartMobileBattleUiSet(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPanelIndex(FlatBufferBuilder builder, int panelIndex) { builder.AddInt(1, panelIndex, 0); }
  public static void AddItemIndex(FlatBufferBuilder builder, int itemIndex) { builder.AddInt(2, itemIndex, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddSourceSize(FlatBufferBuilder builder, float sourceSize) { builder.AddFloat(4, sourceSize, 0.0f); }
  public static void AddSourceAlpha(FlatBufferBuilder builder, float sourceAlpha) { builder.AddFloat(5, sourceAlpha, 0.0f); }
  public static void AddSourceOffsetx(FlatBufferBuilder builder, float sourceOffsetx) { builder.AddFloat(6, sourceOffsetx, 0.0f); }
  public static void AddSourceOffsety(FlatBufferBuilder builder, float sourceOffsety) { builder.AddFloat(7, sourceOffsety, 0.0f); }
  public static void AddIsCheckOverlap(FlatBufferBuilder builder, bool isCheckOverlap) { builder.AddBool(8, isCheckOverlap, false); }
  public static void AddCanEdit(FlatBufferBuilder builder, bool canEdit) { builder.AddBool(9, canEdit, false); }
  public static void AddIsDefaultSelected(FlatBufferBuilder builder, bool isDefaultSelected) { builder.AddBool(10, isDefaultSelected, false); }
  public static void AddSourceHierarchyIndex(FlatBufferBuilder builder, int sourceHierarchyIndex) { builder.AddInt(11, sourceHierarchyIndex, 0); }
  public static Offset<WWParser.Defs.MobileBattleUiSet> EndMobileBattleUiSet(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MobileBattleUiSet>(o);
  }
  public MobileBattleUiSetT UnPack() {
    var _o = new MobileBattleUiSetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MobileBattleUiSetT _o) {
    _o.Id = this.Id;
    _o.PanelIndex = this.PanelIndex;
    _o.ItemIndex = this.ItemIndex;
    _o.Name = this.Name;
    _o.SourceSize = this.SourceSize;
    _o.SourceAlpha = this.SourceAlpha;
    _o.SourceOffsetx = this.SourceOffsetx;
    _o.SourceOffsety = this.SourceOffsety;
    _o.IsCheckOverlap = this.IsCheckOverlap;
    _o.CanEdit = this.CanEdit;
    _o.IsDefaultSelected = this.IsDefaultSelected;
    _o.SourceHierarchyIndex = this.SourceHierarchyIndex;
  }
  public static Offset<WWParser.Defs.MobileBattleUiSet> Pack(FlatBufferBuilder builder, MobileBattleUiSetT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MobileBattleUiSet>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateMobileBattleUiSet(
      builder,
      _o.Id,
      _o.PanelIndex,
      _o.ItemIndex,
      _name,
      _o.SourceSize,
      _o.SourceAlpha,
      _o.SourceOffsetx,
      _o.SourceOffsety,
      _o.IsCheckOverlap,
      _o.CanEdit,
      _o.IsDefaultSelected,
      _o.SourceHierarchyIndex);
  }
}

public class MobileBattleUiSetT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("panel_index")]
  public int PanelIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("item_index")]
  public int ItemIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("source_size")]
  public float SourceSize { get; set; }
  [Newtonsoft.Json.JsonProperty("source_alpha")]
  public float SourceAlpha { get; set; }
  [Newtonsoft.Json.JsonProperty("source_offsetx")]
  public float SourceOffsetx { get; set; }
  [Newtonsoft.Json.JsonProperty("source_offsety")]
  public float SourceOffsety { get; set; }
  [Newtonsoft.Json.JsonProperty("is_check_overlap")]
  public bool IsCheckOverlap { get; set; }
  [Newtonsoft.Json.JsonProperty("can_edit")]
  public bool CanEdit { get; set; }
  [Newtonsoft.Json.JsonProperty("is_default_selected")]
  public bool IsDefaultSelected { get; set; }
  [Newtonsoft.Json.JsonProperty("source_hierarchy_index")]
  public int SourceHierarchyIndex { get; set; }

  public MobileBattleUiSetT() {
    this.Id = 0;
    this.PanelIndex = 0;
    this.ItemIndex = 0;
    this.Name = null;
    this.SourceSize = 0.0f;
    this.SourceAlpha = 0.0f;
    this.SourceOffsetx = 0.0f;
    this.SourceOffsety = 0.0f;
    this.IsCheckOverlap = false;
    this.CanEdit = false;
    this.IsDefaultSelected = false;
    this.SourceHierarchyIndex = 0;
  }
}


static public class MobileBattleUiSetVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*PanelIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ItemIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Name*/, false)
      && verifier.VerifyField(tablePos, 12 /*SourceSize*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*SourceAlpha*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*SourceOffsetx*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*SourceOffsety*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*IsCheckOverlap*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*CanEdit*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*IsDefaultSelected*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 26 /*SourceHierarchyIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
