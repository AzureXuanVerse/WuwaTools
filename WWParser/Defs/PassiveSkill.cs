// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PassiveSkill : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PassiveSkill GetRootAsPassiveSkill(ByteBuffer _bb) { return GetRootAsPassiveSkill(_bb, new PassiveSkill()); }
  public static PassiveSkill GetRootAsPassiveSkill(ByteBuffer _bb, PassiveSkill obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PassiveSkill __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public string SkillDesc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillDescBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSkillDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSkillDescArray() { return __p.__vector_as_array<byte>(6); }
  public float CdTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CdThreshold { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)-1.0f; } }
  public int ShareGroupId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxCount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public bool IsShareAllCdSkill { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsDefaultActivated { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string TriggerType { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTriggerTypeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetTriggerTypeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetTriggerTypeArray() { return __p.__vector_as_array<byte>(20); }
  public string TriggerPreset(int j) { int o = __p.__offset(22); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TriggerPresetLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string TriggerParams { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTriggerParamsBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetTriggerParamsBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetTriggerParamsArray() { return __p.__vector_as_array<byte>(24); }
  public string TriggerFormula { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTriggerFormulaBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetTriggerFormulaBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetTriggerFormulaArray() { return __p.__vector_as_array<byte>(26); }
  public double SubSkillAction(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int SubSkillActionLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetSubSkillActionBytes() { return __p.__vector_as_span<double>(28, 8); }
#else
  public ArraySegment<byte>? GetSubSkillActionBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public double[] GetSubSkillActionArray() { return __p.__vector_as_array<double>(28); }
  public string InstigatorType { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInstigatorTypeBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetInstigatorTypeBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetInstigatorTypeArray() { return __p.__vector_as_array<byte>(30); }
  public string SkillAction { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillActionBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetSkillActionBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetSkillActionArray() { return __p.__vector_as_array<byte>(32); }
  public string SkillActionParams(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SkillActionParamsLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ActionScriptParams { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActionScriptParamsBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetActionScriptParamsBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetActionScriptParamsArray() { return __p.__vector_as_array<byte>(36); }
  public string SkillActionScript { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillActionScriptBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetSkillActionScriptBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetSkillActionScriptArray() { return __p.__vector_as_array<byte>(38); }

  public static Offset<WWParser.Defs.PassiveSkill> CreatePassiveSkill(FlatBufferBuilder builder,
      double id = 0.0,
      StringOffset skill_descOffset = default(StringOffset),
      float cd_time = 0.0f,
      float cd_threshold = -1.0f,
      int share_group_id = 0,
      int max_count = 1,
      bool is_share_all_cd_skill = false,
      bool is_default_activated = false,
      StringOffset trigger_typeOffset = default(StringOffset),
      VectorOffset trigger_presetOffset = default(VectorOffset),
      StringOffset trigger_paramsOffset = default(StringOffset),
      StringOffset trigger_formulaOffset = default(StringOffset),
      VectorOffset sub_skill_actionOffset = default(VectorOffset),
      StringOffset instigator_typeOffset = default(StringOffset),
      StringOffset skill_actionOffset = default(StringOffset),
      VectorOffset skill_action_paramsOffset = default(VectorOffset),
      StringOffset action_script_paramsOffset = default(StringOffset),
      StringOffset skill_action_scriptOffset = default(StringOffset)) {
    builder.StartTable(18);
    PassiveSkill.AddId(builder, id);
    PassiveSkill.AddSkillActionScript(builder, skill_action_scriptOffset);
    PassiveSkill.AddActionScriptParams(builder, action_script_paramsOffset);
    PassiveSkill.AddSkillActionParams(builder, skill_action_paramsOffset);
    PassiveSkill.AddSkillAction(builder, skill_actionOffset);
    PassiveSkill.AddInstigatorType(builder, instigator_typeOffset);
    PassiveSkill.AddSubSkillAction(builder, sub_skill_actionOffset);
    PassiveSkill.AddTriggerFormula(builder, trigger_formulaOffset);
    PassiveSkill.AddTriggerParams(builder, trigger_paramsOffset);
    PassiveSkill.AddTriggerPreset(builder, trigger_presetOffset);
    PassiveSkill.AddTriggerType(builder, trigger_typeOffset);
    PassiveSkill.AddMaxCount(builder, max_count);
    PassiveSkill.AddShareGroupId(builder, share_group_id);
    PassiveSkill.AddCdThreshold(builder, cd_threshold);
    PassiveSkill.AddCdTime(builder, cd_time);
    PassiveSkill.AddSkillDesc(builder, skill_descOffset);
    PassiveSkill.AddIsDefaultActivated(builder, is_default_activated);
    PassiveSkill.AddIsShareAllCdSkill(builder, is_share_all_cd_skill);
    return PassiveSkill.EndPassiveSkill(builder);
  }

  public static void StartPassiveSkill(FlatBufferBuilder builder) { builder.StartTable(18); }
  public static void AddId(FlatBufferBuilder builder, double id) { builder.AddDouble(0, id, 0.0); }
  public static void AddSkillDesc(FlatBufferBuilder builder, StringOffset skillDescOffset) { builder.AddOffset(1, skillDescOffset.Value, 0); }
  public static void AddCdTime(FlatBufferBuilder builder, float cdTime) { builder.AddFloat(2, cdTime, 0.0f); }
  public static void AddCdThreshold(FlatBufferBuilder builder, float cdThreshold) { builder.AddFloat(3, cdThreshold, -1.0f); }
  public static void AddShareGroupId(FlatBufferBuilder builder, int shareGroupId) { builder.AddInt(4, shareGroupId, 0); }
  public static void AddMaxCount(FlatBufferBuilder builder, int maxCount) { builder.AddInt(5, maxCount, 1); }
  public static void AddIsShareAllCdSkill(FlatBufferBuilder builder, bool isShareAllCdSkill) { builder.AddBool(6, isShareAllCdSkill, false); }
  public static void AddIsDefaultActivated(FlatBufferBuilder builder, bool isDefaultActivated) { builder.AddBool(7, isDefaultActivated, false); }
  public static void AddTriggerType(FlatBufferBuilder builder, StringOffset triggerTypeOffset) { builder.AddOffset(8, triggerTypeOffset.Value, 0); }
  public static void AddTriggerPreset(FlatBufferBuilder builder, VectorOffset triggerPresetOffset) { builder.AddOffset(9, triggerPresetOffset.Value, 0); }
  public static VectorOffset CreateTriggerPresetVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTriggerPresetVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTriggerPresetVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTriggerPresetVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTriggerPresetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTriggerParams(FlatBufferBuilder builder, StringOffset triggerParamsOffset) { builder.AddOffset(10, triggerParamsOffset.Value, 0); }
  public static void AddTriggerFormula(FlatBufferBuilder builder, StringOffset triggerFormulaOffset) { builder.AddOffset(11, triggerFormulaOffset.Value, 0); }
  public static void AddSubSkillAction(FlatBufferBuilder builder, VectorOffset subSkillActionOffset) { builder.AddOffset(12, subSkillActionOffset.Value, 0); }
  public static VectorOffset CreateSubSkillActionVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSubSkillActionVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubSkillActionVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubSkillActionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSubSkillActionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddInstigatorType(FlatBufferBuilder builder, StringOffset instigatorTypeOffset) { builder.AddOffset(13, instigatorTypeOffset.Value, 0); }
  public static void AddSkillAction(FlatBufferBuilder builder, StringOffset skillActionOffset) { builder.AddOffset(14, skillActionOffset.Value, 0); }
  public static void AddSkillActionParams(FlatBufferBuilder builder, VectorOffset skillActionParamsOffset) { builder.AddOffset(15, skillActionParamsOffset.Value, 0); }
  public static VectorOffset CreateSkillActionParamsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSkillActionParamsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillActionParamsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillActionParamsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSkillActionParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddActionScriptParams(FlatBufferBuilder builder, StringOffset actionScriptParamsOffset) { builder.AddOffset(16, actionScriptParamsOffset.Value, 0); }
  public static void AddSkillActionScript(FlatBufferBuilder builder, StringOffset skillActionScriptOffset) { builder.AddOffset(17, skillActionScriptOffset.Value, 0); }
  public static Offset<WWParser.Defs.PassiveSkill> EndPassiveSkill(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PassiveSkill>(o);
  }
  public PassiveSkillT UnPack() {
    var _o = new PassiveSkillT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PassiveSkillT _o) {
    _o.Id = this.Id;
    _o.SkillDesc = this.SkillDesc;
    _o.CdTime = this.CdTime;
    _o.CdThreshold = this.CdThreshold;
    _o.ShareGroupId = this.ShareGroupId;
    _o.MaxCount = this.MaxCount;
    _o.IsShareAllCdSkill = this.IsShareAllCdSkill;
    _o.IsDefaultActivated = this.IsDefaultActivated;
    _o.TriggerType = this.TriggerType;
    _o.TriggerPreset = new List<string>();
    for (var _j = 0; _j < this.TriggerPresetLength; ++_j) {_o.TriggerPreset.Add(this.TriggerPreset(_j));}
    _o.TriggerParams = this.TriggerParams;
    _o.TriggerFormula = this.TriggerFormula;
    _o.SubSkillAction = new List<double>();
    for (var _j = 0; _j < this.SubSkillActionLength; ++_j) {_o.SubSkillAction.Add(this.SubSkillAction(_j));}
    _o.InstigatorType = this.InstigatorType;
    _o.SkillAction = this.SkillAction;
    _o.SkillActionParams = new List<string>();
    for (var _j = 0; _j < this.SkillActionParamsLength; ++_j) {_o.SkillActionParams.Add(this.SkillActionParams(_j));}
    _o.ActionScriptParams = this.ActionScriptParams;
    _o.SkillActionScript = this.SkillActionScript;
  }
  public static Offset<WWParser.Defs.PassiveSkill> Pack(FlatBufferBuilder builder, PassiveSkillT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PassiveSkill>);
    var _skill_desc = _o.SkillDesc == null ? default(StringOffset) : builder.CreateString(_o.SkillDesc);
    var _trigger_type = _o.TriggerType == null ? default(StringOffset) : builder.CreateString(_o.TriggerType);
    var _trigger_preset = default(VectorOffset);
    if (_o.TriggerPreset != null) {
      var __trigger_preset = new StringOffset[_o.TriggerPreset.Count];
      for (var _j = 0; _j < __trigger_preset.Length; ++_j) { __trigger_preset[_j] = builder.CreateString(_o.TriggerPreset[_j]); }
      _trigger_preset = CreateTriggerPresetVector(builder, __trigger_preset);
    }
    var _trigger_params = _o.TriggerParams == null ? default(StringOffset) : builder.CreateString(_o.TriggerParams);
    var _trigger_formula = _o.TriggerFormula == null ? default(StringOffset) : builder.CreateString(_o.TriggerFormula);
    var _sub_skill_action = default(VectorOffset);
    if (_o.SubSkillAction != null) {
      var __sub_skill_action = _o.SubSkillAction.ToArray();
      _sub_skill_action = CreateSubSkillActionVector(builder, __sub_skill_action);
    }
    var _instigator_type = _o.InstigatorType == null ? default(StringOffset) : builder.CreateString(_o.InstigatorType);
    var _skill_action = _o.SkillAction == null ? default(StringOffset) : builder.CreateString(_o.SkillAction);
    var _skill_action_params = default(VectorOffset);
    if (_o.SkillActionParams != null) {
      var __skill_action_params = new StringOffset[_o.SkillActionParams.Count];
      for (var _j = 0; _j < __skill_action_params.Length; ++_j) { __skill_action_params[_j] = builder.CreateString(_o.SkillActionParams[_j]); }
      _skill_action_params = CreateSkillActionParamsVector(builder, __skill_action_params);
    }
    var _action_script_params = _o.ActionScriptParams == null ? default(StringOffset) : builder.CreateString(_o.ActionScriptParams);
    var _skill_action_script = _o.SkillActionScript == null ? default(StringOffset) : builder.CreateString(_o.SkillActionScript);
    return CreatePassiveSkill(
      builder,
      _o.Id,
      _skill_desc,
      _o.CdTime,
      _o.CdThreshold,
      _o.ShareGroupId,
      _o.MaxCount,
      _o.IsShareAllCdSkill,
      _o.IsDefaultActivated,
      _trigger_type,
      _trigger_preset,
      _trigger_params,
      _trigger_formula,
      _sub_skill_action,
      _instigator_type,
      _skill_action,
      _skill_action_params,
      _action_script_params,
      _skill_action_script);
  }
}

public class PassiveSkillT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public double Id { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_desc")]
  public string SkillDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("cd_time")]
  public float CdTime { get; set; }
  [Newtonsoft.Json.JsonProperty("cd_threshold")]
  public float CdThreshold { get; set; }
  [Newtonsoft.Json.JsonProperty("share_group_id")]
  public int ShareGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("max_count")]
  public int MaxCount { get; set; }
  [Newtonsoft.Json.JsonProperty("is_share_all_cd_skill")]
  public bool IsShareAllCdSkill { get; set; }
  [Newtonsoft.Json.JsonProperty("is_default_activated")]
  public bool IsDefaultActivated { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_type")]
  public string TriggerType { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_preset")]
  public List<string> TriggerPreset { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_params")]
  public string TriggerParams { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger_formula")]
  public string TriggerFormula { get; set; }
  [Newtonsoft.Json.JsonProperty("sub_skill_action")]
  public List<double> SubSkillAction { get; set; }
  [Newtonsoft.Json.JsonProperty("instigator_type")]
  public string InstigatorType { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_action")]
  public string SkillAction { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_action_params")]
  public List<string> SkillActionParams { get; set; }
  [Newtonsoft.Json.JsonProperty("action_script_params")]
  public string ActionScriptParams { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_action_script")]
  public string SkillActionScript { get; set; }

  public PassiveSkillT() {
    this.Id = 0.0;
    this.SkillDesc = null;
    this.CdTime = 0.0f;
    this.CdThreshold = -1.0f;
    this.ShareGroupId = 0;
    this.MaxCount = 1;
    this.IsShareAllCdSkill = false;
    this.IsDefaultActivated = false;
    this.TriggerType = null;
    this.TriggerPreset = null;
    this.TriggerParams = null;
    this.TriggerFormula = null;
    this.SubSkillAction = null;
    this.InstigatorType = null;
    this.SkillAction = null;
    this.SkillActionParams = null;
    this.ActionScriptParams = null;
    this.SkillActionScript = null;
  }
}


static public class PassiveSkillVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*SkillDesc*/, false)
      && verifier.VerifyField(tablePos, 8 /*CdTime*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*CdThreshold*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*ShareGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*MaxCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*IsShareAllCdSkill*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*IsDefaultActivated*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 20 /*TriggerType*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 22 /*TriggerPreset*/, false)
      && verifier.VerifyString(tablePos, 24 /*TriggerParams*/, false)
      && verifier.VerifyString(tablePos, 26 /*TriggerFormula*/, false)
      && verifier.VerifyVectorOfData(tablePos, 28 /*SubSkillAction*/, 8 /*double*/, false)
      && verifier.VerifyString(tablePos, 30 /*InstigatorType*/, false)
      && verifier.VerifyString(tablePos, 32 /*SkillAction*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 34 /*SkillActionParams*/, false)
      && verifier.VerifyString(tablePos, 36 /*ActionScriptParams*/, false)
      && verifier.VerifyString(tablePos, 38 /*SkillActionScript*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
