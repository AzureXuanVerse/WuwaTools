// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AchievementCategory : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AchievementCategory GetRootAsAchievementCategory(ByteBuffer _bb) { return GetRootAsAchievementCategory(_bb, new AchievementCategory()); }
  public static AchievementCategory GetRootAsAchievementCategory(ByteBuffer _bb, AchievementCategory obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AchievementCategory __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int FunctionType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SpritePath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpritePathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSpritePathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSpritePathArray() { return __p.__vector_as_array<byte>(10); }
  public string TexturePath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTexturePathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTexturePathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTexturePathArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<WWParser.Defs.AchievementCategory> CreateAchievementCategory(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      int function_type = 0,
      StringOffset sprite_pathOffset = default(StringOffset),
      StringOffset texture_pathOffset = default(StringOffset)) {
    builder.StartTable(5);
    AchievementCategory.AddTexturePath(builder, texture_pathOffset);
    AchievementCategory.AddSpritePath(builder, sprite_pathOffset);
    AchievementCategory.AddFunctionType(builder, function_type);
    AchievementCategory.AddName(builder, nameOffset);
    AchievementCategory.AddId(builder, id);
    return AchievementCategory.EndAchievementCategory(builder);
  }

  public static void StartAchievementCategory(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddFunctionType(FlatBufferBuilder builder, int functionType) { builder.AddInt(2, functionType, 0); }
  public static void AddSpritePath(FlatBufferBuilder builder, StringOffset spritePathOffset) { builder.AddOffset(3, spritePathOffset.Value, 0); }
  public static void AddTexturePath(FlatBufferBuilder builder, StringOffset texturePathOffset) { builder.AddOffset(4, texturePathOffset.Value, 0); }
  public static Offset<WWParser.Defs.AchievementCategory> EndAchievementCategory(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AchievementCategory>(o);
  }
  public AchievementCategoryT UnPack() {
    var _o = new AchievementCategoryT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AchievementCategoryT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.FunctionType = this.FunctionType;
    _o.SpritePath = this.SpritePath;
    _o.TexturePath = this.TexturePath;
  }
  public static Offset<WWParser.Defs.AchievementCategory> Pack(FlatBufferBuilder builder, AchievementCategoryT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AchievementCategory>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _sprite_path = _o.SpritePath == null ? default(StringOffset) : builder.CreateString(_o.SpritePath);
    var _texture_path = _o.TexturePath == null ? default(StringOffset) : builder.CreateString(_o.TexturePath);
    return CreateAchievementCategory(
      builder,
      _o.Id,
      _name,
      _o.FunctionType,
      _sprite_path,
      _texture_path);
  }
}

public class AchievementCategoryT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("function_type")]
  public int FunctionType { get; set; }
  [Newtonsoft.Json.JsonProperty("sprite_path")]
  public string SpritePath { get; set; }
  [Newtonsoft.Json.JsonProperty("texture_path")]
  public string TexturePath { get; set; }

  public AchievementCategoryT() {
    this.Id = 0;
    this.Name = null;
    this.FunctionType = 0;
    this.SpritePath = null;
    this.TexturePath = null;
  }
}


static public class AchievementCategoryVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*FunctionType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*SpritePath*/, false)
      && verifier.VerifyString(tablePos, 12 /*TexturePath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
