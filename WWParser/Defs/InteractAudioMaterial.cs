// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct InteractAudioMaterial : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static InteractAudioMaterial GetRootAsInteractAudioMaterial(ByteBuffer _bb) { return GetRootAsInteractAudioMaterial(_bb, new InteractAudioMaterial()); }
  public static InteractAudioMaterial GetRootAsInteractAudioMaterial(ByteBuffer _bb, InteractAudioMaterial obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InteractAudioMaterial __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string CollisionMaterial { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollisionMaterialBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCollisionMaterialBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCollisionMaterialArray() { return __p.__vector_as_array<byte>(4); }
  public bool IsActiveImpacter { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string AudioEvent { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAudioEventBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAudioEventBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAudioEventArray() { return __p.__vector_as_array<byte>(8); }
  public float ImpactMass { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Maxforce { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MinimumPosteventForce { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MinimumTimeBetweenAkevent { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<WWParser.Defs.InteractAudioMaterial> CreateInteractAudioMaterial(FlatBufferBuilder builder,
      StringOffset collision_materialOffset = default(StringOffset),
      bool is_active_impacter = false,
      StringOffset audio_eventOffset = default(StringOffset),
      float impact_mass = 0.0f,
      float maxforce = 0.0f,
      float minimum_postevent_force = 0.0f,
      float minimum_time_between_akevent = 0.0f) {
    builder.StartTable(7);
    InteractAudioMaterial.AddMinimumTimeBetweenAkevent(builder, minimum_time_between_akevent);
    InteractAudioMaterial.AddMinimumPosteventForce(builder, minimum_postevent_force);
    InteractAudioMaterial.AddMaxforce(builder, maxforce);
    InteractAudioMaterial.AddImpactMass(builder, impact_mass);
    InteractAudioMaterial.AddAudioEvent(builder, audio_eventOffset);
    InteractAudioMaterial.AddCollisionMaterial(builder, collision_materialOffset);
    InteractAudioMaterial.AddIsActiveImpacter(builder, is_active_impacter);
    return InteractAudioMaterial.EndInteractAudioMaterial(builder);
  }

  public static void StartInteractAudioMaterial(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddCollisionMaterial(FlatBufferBuilder builder, StringOffset collisionMaterialOffset) { builder.AddOffset(0, collisionMaterialOffset.Value, 0); }
  public static void AddIsActiveImpacter(FlatBufferBuilder builder, bool isActiveImpacter) { builder.AddBool(1, isActiveImpacter, false); }
  public static void AddAudioEvent(FlatBufferBuilder builder, StringOffset audioEventOffset) { builder.AddOffset(2, audioEventOffset.Value, 0); }
  public static void AddImpactMass(FlatBufferBuilder builder, float impactMass) { builder.AddFloat(3, impactMass, 0.0f); }
  public static void AddMaxforce(FlatBufferBuilder builder, float maxforce) { builder.AddFloat(4, maxforce, 0.0f); }
  public static void AddMinimumPosteventForce(FlatBufferBuilder builder, float minimumPosteventForce) { builder.AddFloat(5, minimumPosteventForce, 0.0f); }
  public static void AddMinimumTimeBetweenAkevent(FlatBufferBuilder builder, float minimumTimeBetweenAkevent) { builder.AddFloat(6, minimumTimeBetweenAkevent, 0.0f); }
  public static Offset<WWParser.Defs.InteractAudioMaterial> EndInteractAudioMaterial(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.InteractAudioMaterial>(o);
  }
  public InteractAudioMaterialT UnPack() {
    var _o = new InteractAudioMaterialT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InteractAudioMaterialT _o) {
    _o.CollisionMaterial = this.CollisionMaterial;
    _o.IsActiveImpacter = this.IsActiveImpacter;
    _o.AudioEvent = this.AudioEvent;
    _o.ImpactMass = this.ImpactMass;
    _o.Maxforce = this.Maxforce;
    _o.MinimumPosteventForce = this.MinimumPosteventForce;
    _o.MinimumTimeBetweenAkevent = this.MinimumTimeBetweenAkevent;
  }
  public static Offset<WWParser.Defs.InteractAudioMaterial> Pack(FlatBufferBuilder builder, InteractAudioMaterialT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.InteractAudioMaterial>);
    var _collision_material = _o.CollisionMaterial == null ? default(StringOffset) : builder.CreateString(_o.CollisionMaterial);
    var _audio_event = _o.AudioEvent == null ? default(StringOffset) : builder.CreateString(_o.AudioEvent);
    return CreateInteractAudioMaterial(
      builder,
      _collision_material,
      _o.IsActiveImpacter,
      _audio_event,
      _o.ImpactMass,
      _o.Maxforce,
      _o.MinimumPosteventForce,
      _o.MinimumTimeBetweenAkevent);
  }
}

public class InteractAudioMaterialT
{
  [Newtonsoft.Json.JsonProperty("collision_material")]
  public string CollisionMaterial { get; set; }
  [Newtonsoft.Json.JsonProperty("is_active_impacter")]
  public bool IsActiveImpacter { get; set; }
  [Newtonsoft.Json.JsonProperty("audio_event")]
  public string AudioEvent { get; set; }
  [Newtonsoft.Json.JsonProperty("impact_mass")]
  public float ImpactMass { get; set; }
  [Newtonsoft.Json.JsonProperty("maxforce")]
  public float Maxforce { get; set; }
  [Newtonsoft.Json.JsonProperty("minimum_postevent_force")]
  public float MinimumPosteventForce { get; set; }
  [Newtonsoft.Json.JsonProperty("minimum_time_between_akevent")]
  public float MinimumTimeBetweenAkevent { get; set; }

  public InteractAudioMaterialT() {
    this.CollisionMaterial = null;
    this.IsActiveImpacter = false;
    this.AudioEvent = null;
    this.ImpactMass = 0.0f;
    this.Maxforce = 0.0f;
    this.MinimumPosteventForce = 0.0f;
    this.MinimumTimeBetweenAkevent = 0.0f;
  }
}


static public class InteractAudioMaterialVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*CollisionMaterial*/, false)
      && verifier.VerifyField(tablePos, 6 /*IsActiveImpacter*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 8 /*AudioEvent*/, false)
      && verifier.VerifyField(tablePos, 10 /*ImpactMass*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Maxforce*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*MinimumPosteventForce*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*MinimumTimeBetweenAkevent*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
