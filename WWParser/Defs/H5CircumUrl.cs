// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct H5CircumUrl : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static H5CircumUrl GetRootAsH5CircumUrl(ByteBuffer _bb) { return GetRootAsH5CircumUrl(_bb, new H5CircumUrl()); }
  public static H5CircumUrl GetRootAsH5CircumUrl(ByteBuffer _bb, H5CircumUrl obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public H5CircumUrl __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string RootUrl { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRootUrlBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetRootUrlBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetRootUrlArray() { return __p.__vector_as_array<byte>(6); }
  public string OverseaRootUrl { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOverseaRootUrlBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetOverseaRootUrlBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetOverseaRootUrlArray() { return __p.__vector_as_array<byte>(8); }
  public bool IsInternalBrowser { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ScoreText { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScoreTextBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetScoreTextBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetScoreTextArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<WWParser.Defs.H5CircumUrl> CreateH5CircumUrl(FlatBufferBuilder builder,
      int id = 0,
      StringOffset root_urlOffset = default(StringOffset),
      StringOffset oversea_root_urlOffset = default(StringOffset),
      bool is_internal_browser = false,
      StringOffset score_textOffset = default(StringOffset)) {
    builder.StartTable(5);
    H5CircumUrl.AddScoreText(builder, score_textOffset);
    H5CircumUrl.AddOverseaRootUrl(builder, oversea_root_urlOffset);
    H5CircumUrl.AddRootUrl(builder, root_urlOffset);
    H5CircumUrl.AddId(builder, id);
    H5CircumUrl.AddIsInternalBrowser(builder, is_internal_browser);
    return H5CircumUrl.EndH5CircumUrl(builder);
  }

  public static void StartH5CircumUrl(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddRootUrl(FlatBufferBuilder builder, StringOffset rootUrlOffset) { builder.AddOffset(1, rootUrlOffset.Value, 0); }
  public static void AddOverseaRootUrl(FlatBufferBuilder builder, StringOffset overseaRootUrlOffset) { builder.AddOffset(2, overseaRootUrlOffset.Value, 0); }
  public static void AddIsInternalBrowser(FlatBufferBuilder builder, bool isInternalBrowser) { builder.AddBool(3, isInternalBrowser, false); }
  public static void AddScoreText(FlatBufferBuilder builder, StringOffset scoreTextOffset) { builder.AddOffset(4, scoreTextOffset.Value, 0); }
  public static Offset<WWParser.Defs.H5CircumUrl> EndH5CircumUrl(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.H5CircumUrl>(o);
  }
  public H5CircumUrlT UnPack() {
    var _o = new H5CircumUrlT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(H5CircumUrlT _o) {
    _o.Id = this.Id;
    _o.RootUrl = this.RootUrl;
    _o.OverseaRootUrl = this.OverseaRootUrl;
    _o.IsInternalBrowser = this.IsInternalBrowser;
    _o.ScoreText = this.ScoreText;
  }
  public static Offset<WWParser.Defs.H5CircumUrl> Pack(FlatBufferBuilder builder, H5CircumUrlT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.H5CircumUrl>);
    var _root_url = _o.RootUrl == null ? default(StringOffset) : builder.CreateString(_o.RootUrl);
    var _oversea_root_url = _o.OverseaRootUrl == null ? default(StringOffset) : builder.CreateString(_o.OverseaRootUrl);
    var _score_text = _o.ScoreText == null ? default(StringOffset) : builder.CreateString(_o.ScoreText);
    return CreateH5CircumUrl(
      builder,
      _o.Id,
      _root_url,
      _oversea_root_url,
      _o.IsInternalBrowser,
      _score_text);
  }
}

public class H5CircumUrlT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("root_url")]
  public string RootUrl { get; set; }
  [Newtonsoft.Json.JsonProperty("oversea_root_url")]
  public string OverseaRootUrl { get; set; }
  [Newtonsoft.Json.JsonProperty("is_internal_browser")]
  public bool IsInternalBrowser { get; set; }
  [Newtonsoft.Json.JsonProperty("score_text")]
  public string ScoreText { get; set; }

  public H5CircumUrlT() {
    this.Id = 0;
    this.RootUrl = null;
    this.OverseaRootUrl = null;
    this.IsInternalBrowser = false;
    this.ScoreText = null;
  }
}


static public class H5CircumUrlVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*RootUrl*/, false)
      && verifier.VerifyString(tablePos, 8 /*OverseaRootUrl*/, false)
      && verifier.VerifyField(tablePos, 10 /*IsInternalBrowser*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 12 /*ScoreText*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
