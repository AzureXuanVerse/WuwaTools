// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueParam GetRootAsRogueParam(ByteBuffer _bb) { return GetRootAsRogueParam(_bb, new RogueParam()); }
  public static RogueParam GetRootAsRogueParam(ByteBuffer _bb, RogueParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string RoguelikeSettleBgs { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoguelikeSettleBgsBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetRoguelikeSettleBgsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetRoguelikeSettleBgsArray() { return __p.__vector_as_array<byte>(6); }
  public string RoguelikeSettleBgNormal { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoguelikeSettleBgNormalBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetRoguelikeSettleBgNormalBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetRoguelikeSettleBgNormalArray() { return __p.__vector_as_array<byte>(8); }
  public string RoguelikeRoomFloatTipsNoHeadIcon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoguelikeRoomFloatTipsNoHeadIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetRoguelikeRoomFloatTipsNoHeadIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetRoguelikeRoomFloatTipsNoHeadIconArray() { return __p.__vector_as_array<byte>(10); }
  public string RoguelikeRoomFloatTipsSpecialIcon { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoguelikeRoomFloatTipsSpecialIconBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetRoguelikeRoomFloatTipsSpecialIconBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetRoguelikeRoomFloatTipsSpecialIconArray() { return __p.__vector_as_array<byte>(12); }
  public int RoguelikeSettles { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RoguelikeSettlea { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RoguelikeSettleb { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RoguelikeSettlec { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PointItem { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PointItemMaxCount { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TokenItem { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WeekTokenMaxCount { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillPoint { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillPointMaxCount { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InsideCurrency { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GuideInstArray(int j) { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int GuideInstArrayLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetGuideInstArrayBytes() { return __p.__vector_as_span<int>(36, 4); }
#else
  public ArraySegment<byte>? GetGuideInstArrayBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public int[] GetGuideInstArrayArray() { return __p.__vector_as_array<int>(36); }
  public int GuideInstRoleIdArray(int j) { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int GuideInstRoleIdArrayLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetGuideInstRoleIdArrayBytes() { return __p.__vector_as_span<int>(38, 4); }
#else
  public ArraySegment<byte>? GetGuideInstRoleIdArrayBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public int[] GetGuideInstRoleIdArrayArray() { return __p.__vector_as_array<int>(38); }
  public int DungeonList(int j) { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DungeonListLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDungeonListBytes() { return __p.__vector_as_span<int>(40, 4); }
#else
  public ArraySegment<byte>? GetDungeonListBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public int[] GetDungeonListArray() { return __p.__vector_as_array<int>(40); }
  public WWParser.Defs.DicIntInt? ValidRoleOpenTimeMap(int j) { int o = __p.__offset(42); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ValidRoleOpenTimeMapLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntInt? DungeonRoleOpenTimeMap(int j) { int o = __p.__offset(44); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DungeonRoleOpenTimeMapLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int BlackFlowerDropId { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BlackFlowerInstList(int j) { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BlackFlowerInstListLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBlackFlowerInstListBytes() { return __p.__vector_as_span<int>(48, 4); }
#else
  public ArraySegment<byte>? GetBlackFlowerInstListBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public int[] GetBlackFlowerInstListArray() { return __p.__vector_as_array<int>(48); }

  public static Offset<WWParser.Defs.RogueParam> CreateRogueParam(FlatBufferBuilder builder,
      int id = 0,
      StringOffset roguelike_settle_bgsOffset = default(StringOffset),
      StringOffset roguelike_settle_bg_normalOffset = default(StringOffset),
      StringOffset roguelike_room_float_tips_no_head_iconOffset = default(StringOffset),
      StringOffset roguelike_room_float_tips_special_iconOffset = default(StringOffset),
      int roguelike_settles = 0,
      int roguelike_settlea = 0,
      int roguelike_settleb = 0,
      int roguelike_settlec = 0,
      int point_item = 0,
      int point_item_max_count = 0,
      int token_item = 0,
      int week_token_max_count = 0,
      int skill_point = 0,
      int skill_point_max_count = 0,
      int inside_currency = 0,
      VectorOffset guide_inst_arrayOffset = default(VectorOffset),
      VectorOffset guide_inst_role_id_arrayOffset = default(VectorOffset),
      VectorOffset dungeon_listOffset = default(VectorOffset),
      VectorOffset valid_role_open_time_mapOffset = default(VectorOffset),
      VectorOffset dungeon_role_open_time_mapOffset = default(VectorOffset),
      int black_flower_drop_id = 0,
      VectorOffset black_flower_inst_listOffset = default(VectorOffset)) {
    builder.StartTable(23);
    RogueParam.AddBlackFlowerInstList(builder, black_flower_inst_listOffset);
    RogueParam.AddBlackFlowerDropId(builder, black_flower_drop_id);
    RogueParam.AddDungeonRoleOpenTimeMap(builder, dungeon_role_open_time_mapOffset);
    RogueParam.AddValidRoleOpenTimeMap(builder, valid_role_open_time_mapOffset);
    RogueParam.AddDungeonList(builder, dungeon_listOffset);
    RogueParam.AddGuideInstRoleIdArray(builder, guide_inst_role_id_arrayOffset);
    RogueParam.AddGuideInstArray(builder, guide_inst_arrayOffset);
    RogueParam.AddInsideCurrency(builder, inside_currency);
    RogueParam.AddSkillPointMaxCount(builder, skill_point_max_count);
    RogueParam.AddSkillPoint(builder, skill_point);
    RogueParam.AddWeekTokenMaxCount(builder, week_token_max_count);
    RogueParam.AddTokenItem(builder, token_item);
    RogueParam.AddPointItemMaxCount(builder, point_item_max_count);
    RogueParam.AddPointItem(builder, point_item);
    RogueParam.AddRoguelikeSettlec(builder, roguelike_settlec);
    RogueParam.AddRoguelikeSettleb(builder, roguelike_settleb);
    RogueParam.AddRoguelikeSettlea(builder, roguelike_settlea);
    RogueParam.AddRoguelikeSettles(builder, roguelike_settles);
    RogueParam.AddRoguelikeRoomFloatTipsSpecialIcon(builder, roguelike_room_float_tips_special_iconOffset);
    RogueParam.AddRoguelikeRoomFloatTipsNoHeadIcon(builder, roguelike_room_float_tips_no_head_iconOffset);
    RogueParam.AddRoguelikeSettleBgNormal(builder, roguelike_settle_bg_normalOffset);
    RogueParam.AddRoguelikeSettleBgs(builder, roguelike_settle_bgsOffset);
    RogueParam.AddId(builder, id);
    return RogueParam.EndRogueParam(builder);
  }

  public static void StartRogueParam(FlatBufferBuilder builder) { builder.StartTable(23); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddRoguelikeSettleBgs(FlatBufferBuilder builder, StringOffset roguelikeSettleBgsOffset) { builder.AddOffset(1, roguelikeSettleBgsOffset.Value, 0); }
  public static void AddRoguelikeSettleBgNormal(FlatBufferBuilder builder, StringOffset roguelikeSettleBgNormalOffset) { builder.AddOffset(2, roguelikeSettleBgNormalOffset.Value, 0); }
  public static void AddRoguelikeRoomFloatTipsNoHeadIcon(FlatBufferBuilder builder, StringOffset roguelikeRoomFloatTipsNoHeadIconOffset) { builder.AddOffset(3, roguelikeRoomFloatTipsNoHeadIconOffset.Value, 0); }
  public static void AddRoguelikeRoomFloatTipsSpecialIcon(FlatBufferBuilder builder, StringOffset roguelikeRoomFloatTipsSpecialIconOffset) { builder.AddOffset(4, roguelikeRoomFloatTipsSpecialIconOffset.Value, 0); }
  public static void AddRoguelikeSettles(FlatBufferBuilder builder, int roguelikeSettles) { builder.AddInt(5, roguelikeSettles, 0); }
  public static void AddRoguelikeSettlea(FlatBufferBuilder builder, int roguelikeSettlea) { builder.AddInt(6, roguelikeSettlea, 0); }
  public static void AddRoguelikeSettleb(FlatBufferBuilder builder, int roguelikeSettleb) { builder.AddInt(7, roguelikeSettleb, 0); }
  public static void AddRoguelikeSettlec(FlatBufferBuilder builder, int roguelikeSettlec) { builder.AddInt(8, roguelikeSettlec, 0); }
  public static void AddPointItem(FlatBufferBuilder builder, int pointItem) { builder.AddInt(9, pointItem, 0); }
  public static void AddPointItemMaxCount(FlatBufferBuilder builder, int pointItemMaxCount) { builder.AddInt(10, pointItemMaxCount, 0); }
  public static void AddTokenItem(FlatBufferBuilder builder, int tokenItem) { builder.AddInt(11, tokenItem, 0); }
  public static void AddWeekTokenMaxCount(FlatBufferBuilder builder, int weekTokenMaxCount) { builder.AddInt(12, weekTokenMaxCount, 0); }
  public static void AddSkillPoint(FlatBufferBuilder builder, int skillPoint) { builder.AddInt(13, skillPoint, 0); }
  public static void AddSkillPointMaxCount(FlatBufferBuilder builder, int skillPointMaxCount) { builder.AddInt(14, skillPointMaxCount, 0); }
  public static void AddInsideCurrency(FlatBufferBuilder builder, int insideCurrency) { builder.AddInt(15, insideCurrency, 0); }
  public static void AddGuideInstArray(FlatBufferBuilder builder, VectorOffset guideInstArrayOffset) { builder.AddOffset(16, guideInstArrayOffset.Value, 0); }
  public static VectorOffset CreateGuideInstArrayVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGuideInstArrayVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGuideInstArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGuideInstArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGuideInstArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGuideInstRoleIdArray(FlatBufferBuilder builder, VectorOffset guideInstRoleIdArrayOffset) { builder.AddOffset(17, guideInstRoleIdArrayOffset.Value, 0); }
  public static VectorOffset CreateGuideInstRoleIdArrayVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGuideInstRoleIdArrayVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGuideInstRoleIdArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGuideInstRoleIdArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGuideInstRoleIdArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDungeonList(FlatBufferBuilder builder, VectorOffset dungeonListOffset) { builder.AddOffset(18, dungeonListOffset.Value, 0); }
  public static VectorOffset CreateDungeonListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDungeonListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDungeonListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDungeonListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDungeonListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddValidRoleOpenTimeMap(FlatBufferBuilder builder, VectorOffset validRoleOpenTimeMapOffset) { builder.AddOffset(19, validRoleOpenTimeMapOffset.Value, 0); }
  public static VectorOffset CreateValidRoleOpenTimeMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateValidRoleOpenTimeMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValidRoleOpenTimeMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValidRoleOpenTimeMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartValidRoleOpenTimeMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDungeonRoleOpenTimeMap(FlatBufferBuilder builder, VectorOffset dungeonRoleOpenTimeMapOffset) { builder.AddOffset(20, dungeonRoleOpenTimeMapOffset.Value, 0); }
  public static VectorOffset CreateDungeonRoleOpenTimeMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDungeonRoleOpenTimeMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDungeonRoleOpenTimeMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDungeonRoleOpenTimeMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDungeonRoleOpenTimeMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBlackFlowerDropId(FlatBufferBuilder builder, int blackFlowerDropId) { builder.AddInt(21, blackFlowerDropId, 0); }
  public static void AddBlackFlowerInstList(FlatBufferBuilder builder, VectorOffset blackFlowerInstListOffset) { builder.AddOffset(22, blackFlowerInstListOffset.Value, 0); }
  public static VectorOffset CreateBlackFlowerInstListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBlackFlowerInstListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBlackFlowerInstListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBlackFlowerInstListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBlackFlowerInstListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.RogueParam> EndRogueParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueParam>(o);
  }
  public RogueParamT UnPack() {
    var _o = new RogueParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueParamT _o) {
    _o.Id = this.Id;
    _o.RoguelikeSettleBgs = this.RoguelikeSettleBgs;
    _o.RoguelikeSettleBgNormal = this.RoguelikeSettleBgNormal;
    _o.RoguelikeRoomFloatTipsNoHeadIcon = this.RoguelikeRoomFloatTipsNoHeadIcon;
    _o.RoguelikeRoomFloatTipsSpecialIcon = this.RoguelikeRoomFloatTipsSpecialIcon;
    _o.RoguelikeSettles = this.RoguelikeSettles;
    _o.RoguelikeSettlea = this.RoguelikeSettlea;
    _o.RoguelikeSettleb = this.RoguelikeSettleb;
    _o.RoguelikeSettlec = this.RoguelikeSettlec;
    _o.PointItem = this.PointItem;
    _o.PointItemMaxCount = this.PointItemMaxCount;
    _o.TokenItem = this.TokenItem;
    _o.WeekTokenMaxCount = this.WeekTokenMaxCount;
    _o.SkillPoint = this.SkillPoint;
    _o.SkillPointMaxCount = this.SkillPointMaxCount;
    _o.InsideCurrency = this.InsideCurrency;
    _o.GuideInstArray = new List<int>();
    for (var _j = 0; _j < this.GuideInstArrayLength; ++_j) {_o.GuideInstArray.Add(this.GuideInstArray(_j));}
    _o.GuideInstRoleIdArray = new List<int>();
    for (var _j = 0; _j < this.GuideInstRoleIdArrayLength; ++_j) {_o.GuideInstRoleIdArray.Add(this.GuideInstRoleIdArray(_j));}
    _o.DungeonList = new List<int>();
    for (var _j = 0; _j < this.DungeonListLength; ++_j) {_o.DungeonList.Add(this.DungeonList(_j));}
    _o.ValidRoleOpenTimeMap = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.ValidRoleOpenTimeMapLength; ++_j) {_o.ValidRoleOpenTimeMap.Add(this.ValidRoleOpenTimeMap(_j).HasValue ? this.ValidRoleOpenTimeMap(_j).Value.UnPack() : null);}
    _o.DungeonRoleOpenTimeMap = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.DungeonRoleOpenTimeMapLength; ++_j) {_o.DungeonRoleOpenTimeMap.Add(this.DungeonRoleOpenTimeMap(_j).HasValue ? this.DungeonRoleOpenTimeMap(_j).Value.UnPack() : null);}
    _o.BlackFlowerDropId = this.BlackFlowerDropId;
    _o.BlackFlowerInstList = new List<int>();
    for (var _j = 0; _j < this.BlackFlowerInstListLength; ++_j) {_o.BlackFlowerInstList.Add(this.BlackFlowerInstList(_j));}
  }
  public static Offset<WWParser.Defs.RogueParam> Pack(FlatBufferBuilder builder, RogueParamT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueParam>);
    var _roguelike_settle_bgs = _o.RoguelikeSettleBgs == null ? default(StringOffset) : builder.CreateString(_o.RoguelikeSettleBgs);
    var _roguelike_settle_bg_normal = _o.RoguelikeSettleBgNormal == null ? default(StringOffset) : builder.CreateString(_o.RoguelikeSettleBgNormal);
    var _roguelike_room_float_tips_no_head_icon = _o.RoguelikeRoomFloatTipsNoHeadIcon == null ? default(StringOffset) : builder.CreateString(_o.RoguelikeRoomFloatTipsNoHeadIcon);
    var _roguelike_room_float_tips_special_icon = _o.RoguelikeRoomFloatTipsSpecialIcon == null ? default(StringOffset) : builder.CreateString(_o.RoguelikeRoomFloatTipsSpecialIcon);
    var _guide_inst_array = default(VectorOffset);
    if (_o.GuideInstArray != null) {
      var __guide_inst_array = _o.GuideInstArray.ToArray();
      _guide_inst_array = CreateGuideInstArrayVector(builder, __guide_inst_array);
    }
    var _guide_inst_role_id_array = default(VectorOffset);
    if (_o.GuideInstRoleIdArray != null) {
      var __guide_inst_role_id_array = _o.GuideInstRoleIdArray.ToArray();
      _guide_inst_role_id_array = CreateGuideInstRoleIdArrayVector(builder, __guide_inst_role_id_array);
    }
    var _dungeon_list = default(VectorOffset);
    if (_o.DungeonList != null) {
      var __dungeon_list = _o.DungeonList.ToArray();
      _dungeon_list = CreateDungeonListVector(builder, __dungeon_list);
    }
    var _valid_role_open_time_map = default(VectorOffset);
    if (_o.ValidRoleOpenTimeMap != null) {
      var __valid_role_open_time_map = new Offset<WWParser.Defs.DicIntInt>[_o.ValidRoleOpenTimeMap.Count];
      for (var _j = 0; _j < __valid_role_open_time_map.Length; ++_j) { __valid_role_open_time_map[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.ValidRoleOpenTimeMap[_j]); }
      _valid_role_open_time_map = CreateValidRoleOpenTimeMapVector(builder, __valid_role_open_time_map);
    }
    var _dungeon_role_open_time_map = default(VectorOffset);
    if (_o.DungeonRoleOpenTimeMap != null) {
      var __dungeon_role_open_time_map = new Offset<WWParser.Defs.DicIntInt>[_o.DungeonRoleOpenTimeMap.Count];
      for (var _j = 0; _j < __dungeon_role_open_time_map.Length; ++_j) { __dungeon_role_open_time_map[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.DungeonRoleOpenTimeMap[_j]); }
      _dungeon_role_open_time_map = CreateDungeonRoleOpenTimeMapVector(builder, __dungeon_role_open_time_map);
    }
    var _black_flower_inst_list = default(VectorOffset);
    if (_o.BlackFlowerInstList != null) {
      var __black_flower_inst_list = _o.BlackFlowerInstList.ToArray();
      _black_flower_inst_list = CreateBlackFlowerInstListVector(builder, __black_flower_inst_list);
    }
    return CreateRogueParam(
      builder,
      _o.Id,
      _roguelike_settle_bgs,
      _roguelike_settle_bg_normal,
      _roguelike_room_float_tips_no_head_icon,
      _roguelike_room_float_tips_special_icon,
      _o.RoguelikeSettles,
      _o.RoguelikeSettlea,
      _o.RoguelikeSettleb,
      _o.RoguelikeSettlec,
      _o.PointItem,
      _o.PointItemMaxCount,
      _o.TokenItem,
      _o.WeekTokenMaxCount,
      _o.SkillPoint,
      _o.SkillPointMaxCount,
      _o.InsideCurrency,
      _guide_inst_array,
      _guide_inst_role_id_array,
      _dungeon_list,
      _valid_role_open_time_map,
      _dungeon_role_open_time_map,
      _o.BlackFlowerDropId,
      _black_flower_inst_list);
  }
}

public class RogueParamT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("roguelike_settle_bgs")]
  public string RoguelikeSettleBgs { get; set; }
  [Newtonsoft.Json.JsonProperty("roguelike_settle_bg_normal")]
  public string RoguelikeSettleBgNormal { get; set; }
  [Newtonsoft.Json.JsonProperty("roguelike_room_float_tips_no_head_icon")]
  public string RoguelikeRoomFloatTipsNoHeadIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("roguelike_room_float_tips_special_icon")]
  public string RoguelikeRoomFloatTipsSpecialIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("roguelike_settles")]
  public int RoguelikeSettles { get; set; }
  [Newtonsoft.Json.JsonProperty("roguelike_settlea")]
  public int RoguelikeSettlea { get; set; }
  [Newtonsoft.Json.JsonProperty("roguelike_settleb")]
  public int RoguelikeSettleb { get; set; }
  [Newtonsoft.Json.JsonProperty("roguelike_settlec")]
  public int RoguelikeSettlec { get; set; }
  [Newtonsoft.Json.JsonProperty("point_item")]
  public int PointItem { get; set; }
  [Newtonsoft.Json.JsonProperty("point_item_max_count")]
  public int PointItemMaxCount { get; set; }
  [Newtonsoft.Json.JsonProperty("token_item")]
  public int TokenItem { get; set; }
  [Newtonsoft.Json.JsonProperty("week_token_max_count")]
  public int WeekTokenMaxCount { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_point")]
  public int SkillPoint { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_point_max_count")]
  public int SkillPointMaxCount { get; set; }
  [Newtonsoft.Json.JsonProperty("inside_currency")]
  public int InsideCurrency { get; set; }
  [Newtonsoft.Json.JsonProperty("guide_inst_array")]
  public List<int> GuideInstArray { get; set; }
  [Newtonsoft.Json.JsonProperty("guide_inst_role_id_array")]
  public List<int> GuideInstRoleIdArray { get; set; }
  [Newtonsoft.Json.JsonProperty("dungeon_list")]
  public List<int> DungeonList { get; set; }
  [Newtonsoft.Json.JsonProperty("valid_role_open_time_map")]
  public List<WWParser.Defs.DicIntIntT> ValidRoleOpenTimeMap { get; set; }
  [Newtonsoft.Json.JsonProperty("dungeon_role_open_time_map")]
  public List<WWParser.Defs.DicIntIntT> DungeonRoleOpenTimeMap { get; set; }
  [Newtonsoft.Json.JsonProperty("black_flower_drop_id")]
  public int BlackFlowerDropId { get; set; }
  [Newtonsoft.Json.JsonProperty("black_flower_inst_list")]
  public List<int> BlackFlowerInstList { get; set; }

  public RogueParamT() {
    this.Id = 0;
    this.RoguelikeSettleBgs = null;
    this.RoguelikeSettleBgNormal = null;
    this.RoguelikeRoomFloatTipsNoHeadIcon = null;
    this.RoguelikeRoomFloatTipsSpecialIcon = null;
    this.RoguelikeSettles = 0;
    this.RoguelikeSettlea = 0;
    this.RoguelikeSettleb = 0;
    this.RoguelikeSettlec = 0;
    this.PointItem = 0;
    this.PointItemMaxCount = 0;
    this.TokenItem = 0;
    this.WeekTokenMaxCount = 0;
    this.SkillPoint = 0;
    this.SkillPointMaxCount = 0;
    this.InsideCurrency = 0;
    this.GuideInstArray = null;
    this.GuideInstRoleIdArray = null;
    this.DungeonList = null;
    this.ValidRoleOpenTimeMap = null;
    this.DungeonRoleOpenTimeMap = null;
    this.BlackFlowerDropId = 0;
    this.BlackFlowerInstList = null;
  }
}


static public class RogueParamVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*RoguelikeSettleBgs*/, false)
      && verifier.VerifyString(tablePos, 8 /*RoguelikeSettleBgNormal*/, false)
      && verifier.VerifyString(tablePos, 10 /*RoguelikeRoomFloatTipsNoHeadIcon*/, false)
      && verifier.VerifyString(tablePos, 12 /*RoguelikeRoomFloatTipsSpecialIcon*/, false)
      && verifier.VerifyField(tablePos, 14 /*RoguelikeSettles*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*RoguelikeSettlea*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*RoguelikeSettleb*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*RoguelikeSettlec*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*PointItem*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*PointItemMaxCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*TokenItem*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*WeekTokenMaxCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*SkillPoint*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*SkillPointMaxCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*InsideCurrency*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 36 /*GuideInstArray*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 38 /*GuideInstRoleIdArray*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 40 /*DungeonList*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 42 /*ValidRoleOpenTimeMap*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 44 /*DungeonRoleOpenTimeMap*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 46 /*BlackFlowerDropId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 48 /*BlackFlowerInstList*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
