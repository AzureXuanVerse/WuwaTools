// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DreamLinkRoleDungeon : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DreamLinkRoleDungeon GetRootAsDreamLinkRoleDungeon(ByteBuffer _bb) { return GetRootAsDreamLinkRoleDungeon(_bb, new DreamLinkRoleDungeon()); }
  public static DreamLinkRoleDungeon GetRootAsDreamLinkRoleDungeon(ByteBuffer _bb, DreamLinkRoleDungeon obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DreamLinkRoleDungeon __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RoleId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string AnimationPath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationPathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAnimationPathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAnimationPathArray() { return __p.__vector_as_array<byte>(8); }
  public int AddProgress { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string IndexTexturePath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIndexTexturePathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIndexTexturePathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIndexTexturePathArray() { return __p.__vector_as_array<byte>(12); }
  public WWParser.Defs.DicStringString? WeaponShowConfig(int j) { int o = __p.__offset(14); return o != 0 ? (WWParser.Defs.DicStringString?)(new WWParser.Defs.DicStringString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int WeaponShowConfigLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicStringString? WeaponShowCase(int j) { int o = __p.__offset(16); return o != 0 ? (WWParser.Defs.DicStringString?)(new WWParser.Defs.DicStringString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int WeaponShowCaseLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.DreamLinkRoleDungeon> CreateDreamLinkRoleDungeon(FlatBufferBuilder builder,
      int id = 0,
      int role_id = 0,
      StringOffset animation_pathOffset = default(StringOffset),
      int add_progress = 0,
      StringOffset index_texture_pathOffset = default(StringOffset),
      VectorOffset weapon_show_configOffset = default(VectorOffset),
      VectorOffset weapon_show_caseOffset = default(VectorOffset)) {
    builder.StartTable(7);
    DreamLinkRoleDungeon.AddWeaponShowCase(builder, weapon_show_caseOffset);
    DreamLinkRoleDungeon.AddWeaponShowConfig(builder, weapon_show_configOffset);
    DreamLinkRoleDungeon.AddIndexTexturePath(builder, index_texture_pathOffset);
    DreamLinkRoleDungeon.AddAddProgress(builder, add_progress);
    DreamLinkRoleDungeon.AddAnimationPath(builder, animation_pathOffset);
    DreamLinkRoleDungeon.AddRoleId(builder, role_id);
    DreamLinkRoleDungeon.AddId(builder, id);
    return DreamLinkRoleDungeon.EndDreamLinkRoleDungeon(builder);
  }

  public static void StartDreamLinkRoleDungeon(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddRoleId(FlatBufferBuilder builder, int roleId) { builder.AddInt(1, roleId, 0); }
  public static void AddAnimationPath(FlatBufferBuilder builder, StringOffset animationPathOffset) { builder.AddOffset(2, animationPathOffset.Value, 0); }
  public static void AddAddProgress(FlatBufferBuilder builder, int addProgress) { builder.AddInt(3, addProgress, 0); }
  public static void AddIndexTexturePath(FlatBufferBuilder builder, StringOffset indexTexturePathOffset) { builder.AddOffset(4, indexTexturePathOffset.Value, 0); }
  public static void AddWeaponShowConfig(FlatBufferBuilder builder, VectorOffset weaponShowConfigOffset) { builder.AddOffset(5, weaponShowConfigOffset.Value, 0); }
  public static VectorOffset CreateWeaponShowConfigVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateWeaponShowConfigVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponShowConfigVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicStringString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponShowConfigVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicStringString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartWeaponShowConfigVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWeaponShowCase(FlatBufferBuilder builder, VectorOffset weaponShowCaseOffset) { builder.AddOffset(6, weaponShowCaseOffset.Value, 0); }
  public static VectorOffset CreateWeaponShowCaseVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateWeaponShowCaseVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponShowCaseVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicStringString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponShowCaseVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicStringString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartWeaponShowCaseVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.DreamLinkRoleDungeon> EndDreamLinkRoleDungeon(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DreamLinkRoleDungeon>(o);
  }
  public DreamLinkRoleDungeonT UnPack() {
    var _o = new DreamLinkRoleDungeonT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DreamLinkRoleDungeonT _o) {
    _o.Id = this.Id;
    _o.RoleId = this.RoleId;
    _o.AnimationPath = this.AnimationPath;
    _o.AddProgress = this.AddProgress;
    _o.IndexTexturePath = this.IndexTexturePath;
    _o.WeaponShowConfig = new List<WWParser.Defs.DicStringStringT>();
    for (var _j = 0; _j < this.WeaponShowConfigLength; ++_j) {_o.WeaponShowConfig.Add(this.WeaponShowConfig(_j).HasValue ? this.WeaponShowConfig(_j).Value.UnPack() : null);}
    _o.WeaponShowCase = new List<WWParser.Defs.DicStringStringT>();
    for (var _j = 0; _j < this.WeaponShowCaseLength; ++_j) {_o.WeaponShowCase.Add(this.WeaponShowCase(_j).HasValue ? this.WeaponShowCase(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.DreamLinkRoleDungeon> Pack(FlatBufferBuilder builder, DreamLinkRoleDungeonT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DreamLinkRoleDungeon>);
    var _animation_path = _o.AnimationPath == null ? default(StringOffset) : builder.CreateString(_o.AnimationPath);
    var _index_texture_path = _o.IndexTexturePath == null ? default(StringOffset) : builder.CreateString(_o.IndexTexturePath);
    var _weapon_show_config = default(VectorOffset);
    if (_o.WeaponShowConfig != null) {
      var __weapon_show_config = new Offset<WWParser.Defs.DicStringString>[_o.WeaponShowConfig.Count];
      for (var _j = 0; _j < __weapon_show_config.Length; ++_j) { __weapon_show_config[_j] = WWParser.Defs.DicStringString.Pack(builder, _o.WeaponShowConfig[_j]); }
      _weapon_show_config = CreateWeaponShowConfigVector(builder, __weapon_show_config);
    }
    var _weapon_show_case = default(VectorOffset);
    if (_o.WeaponShowCase != null) {
      var __weapon_show_case = new Offset<WWParser.Defs.DicStringString>[_o.WeaponShowCase.Count];
      for (var _j = 0; _j < __weapon_show_case.Length; ++_j) { __weapon_show_case[_j] = WWParser.Defs.DicStringString.Pack(builder, _o.WeaponShowCase[_j]); }
      _weapon_show_case = CreateWeaponShowCaseVector(builder, __weapon_show_case);
    }
    return CreateDreamLinkRoleDungeon(
      builder,
      _o.Id,
      _o.RoleId,
      _animation_path,
      _o.AddProgress,
      _index_texture_path,
      _weapon_show_config,
      _weapon_show_case);
  }
}

public class DreamLinkRoleDungeonT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("role_id")]
  public int RoleId { get; set; }
  [Newtonsoft.Json.JsonProperty("animation_path")]
  public string AnimationPath { get; set; }
  [Newtonsoft.Json.JsonProperty("add_progress")]
  public int AddProgress { get; set; }
  [Newtonsoft.Json.JsonProperty("index_texture_path")]
  public string IndexTexturePath { get; set; }
  [Newtonsoft.Json.JsonProperty("weapon_show_config")]
  public List<WWParser.Defs.DicStringStringT> WeaponShowConfig { get; set; }
  [Newtonsoft.Json.JsonProperty("weapon_show_case")]
  public List<WWParser.Defs.DicStringStringT> WeaponShowCase { get; set; }

  public DreamLinkRoleDungeonT() {
    this.Id = 0;
    this.RoleId = 0;
    this.AnimationPath = null;
    this.AddProgress = 0;
    this.IndexTexturePath = null;
    this.WeaponShowConfig = null;
    this.WeaponShowCase = null;
  }
}


static public class DreamLinkRoleDungeonVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*RoleId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*AnimationPath*/, false)
      && verifier.VerifyField(tablePos, 10 /*AddProgress*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*IndexTexturePath*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 14 /*WeaponShowConfig*/, WWParser.Defs.DicStringStringVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 16 /*WeaponShowCase*/, WWParser.Defs.DicStringStringVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
