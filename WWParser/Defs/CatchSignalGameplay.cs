// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CatchSignalGameplay : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CatchSignalGameplay GetRootAsCatchSignalGameplay(ByteBuffer _bb) { return GetRootAsCatchSignalGameplay(_bb, new CatchSignalGameplay()); }
  public static CatchSignalGameplay GetRootAsCatchSignalGameplay(ByteBuffer _bb, CatchSignalGameplay obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CatchSignalGameplay __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int Type { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public string MorseCode { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMorseCodeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMorseCodeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMorseCodeArray() { return __p.__vector_as_array<byte>(10); }
  public int Difficulty { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.CatchSignalGameplay> CreateCatchSignalGameplay(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      int type = 1,
      StringOffset morse_codeOffset = default(StringOffset),
      int difficulty = 0) {
    builder.StartTable(5);
    CatchSignalGameplay.AddDifficulty(builder, difficulty);
    CatchSignalGameplay.AddMorseCode(builder, morse_codeOffset);
    CatchSignalGameplay.AddType(builder, type);
    CatchSignalGameplay.AddName(builder, nameOffset);
    CatchSignalGameplay.AddId(builder, idOffset);
    return CatchSignalGameplay.EndCatchSignalGameplay(builder);
  }

  public static void StartCatchSignalGameplay(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(2, type, 1); }
  public static void AddMorseCode(FlatBufferBuilder builder, StringOffset morseCodeOffset) { builder.AddOffset(3, morseCodeOffset.Value, 0); }
  public static void AddDifficulty(FlatBufferBuilder builder, int difficulty) { builder.AddInt(4, difficulty, 0); }
  public static Offset<WWParser.Defs.CatchSignalGameplay> EndCatchSignalGameplay(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.CatchSignalGameplay>(o);
  }
  public CatchSignalGameplayT UnPack() {
    var _o = new CatchSignalGameplayT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CatchSignalGameplayT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.Type = this.Type;
    _o.MorseCode = this.MorseCode;
    _o.Difficulty = this.Difficulty;
  }
  public static Offset<WWParser.Defs.CatchSignalGameplay> Pack(FlatBufferBuilder builder, CatchSignalGameplayT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.CatchSignalGameplay>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _morse_code = _o.MorseCode == null ? default(StringOffset) : builder.CreateString(_o.MorseCode);
    return CreateCatchSignalGameplay(
      builder,
      _id,
      _name,
      _o.Type,
      _morse_code,
      _o.Difficulty);
  }
}

public class CatchSignalGameplayT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("morse_code")]
  public string MorseCode { get; set; }
  [Newtonsoft.Json.JsonProperty("difficulty")]
  public int Difficulty { get; set; }

  public CatchSignalGameplayT() {
    this.Id = null;
    this.Name = null;
    this.Type = 1;
    this.MorseCode = null;
    this.Difficulty = 0;
  }
}


static public class CatchSignalGameplayVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*MorseCode*/, false)
      && verifier.VerifyField(tablePos, 12 /*Difficulty*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
