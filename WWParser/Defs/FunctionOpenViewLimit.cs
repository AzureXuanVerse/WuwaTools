// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FunctionOpenViewLimit : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FunctionOpenViewLimit GetRootAsFunctionOpenViewLimit(ByteBuffer _bb) { return GetRootAsFunctionOpenViewLimit(_bb, new FunctionOpenViewLimit()); }
  public static FunctionOpenViewLimit GetRootAsFunctionOpenViewLimit(ByteBuffer _bb, FunctionOpenViewLimit obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FunctionOpenViewLimit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ViewName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetViewNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetViewNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetViewNameArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<WWParser.Defs.FunctionOpenViewLimit> CreateFunctionOpenViewLimit(FlatBufferBuilder builder,
      StringOffset view_nameOffset = default(StringOffset)) {
    builder.StartTable(1);
    FunctionOpenViewLimit.AddViewName(builder, view_nameOffset);
    return FunctionOpenViewLimit.EndFunctionOpenViewLimit(builder);
  }

  public static void StartFunctionOpenViewLimit(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddViewName(FlatBufferBuilder builder, StringOffset viewNameOffset) { builder.AddOffset(0, viewNameOffset.Value, 0); }
  public static Offset<WWParser.Defs.FunctionOpenViewLimit> EndFunctionOpenViewLimit(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FunctionOpenViewLimit>(o);
  }
  public FunctionOpenViewLimitT UnPack() {
    var _o = new FunctionOpenViewLimitT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FunctionOpenViewLimitT _o) {
    _o.ViewName = this.ViewName;
  }
  public static Offset<WWParser.Defs.FunctionOpenViewLimit> Pack(FlatBufferBuilder builder, FunctionOpenViewLimitT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FunctionOpenViewLimit>);
    var _view_name = _o.ViewName == null ? default(StringOffset) : builder.CreateString(_o.ViewName);
    return CreateFunctionOpenViewLimit(
      builder,
      _view_name);
  }
}

public class FunctionOpenViewLimitT
{
  [Newtonsoft.Json.JsonProperty("view_name")]
  public string ViewName { get; set; }

  public FunctionOpenViewLimitT() {
    this.ViewName = null;
  }
}


static public class FunctionOpenViewLimitVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*ViewName*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
