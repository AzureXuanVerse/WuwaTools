// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GuideDungeonSetDefine : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GuideDungeonSetDefine GetRootAsGuideDungeonSetDefine(ByteBuffer _bb) { return GetRootAsGuideDungeonSetDefine(_bb, new GuideDungeonSetDefine()); }
  public static GuideDungeonSetDefine GetRootAsGuideDungeonSetDefine(ByteBuffer _bb, GuideDungeonSetDefine obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GuideDungeonSetDefine __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string StrId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetStrIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetStrIdArray() { return __p.__vector_as_array<byte>(4); }
  public int DungeonIdList(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DungeonIdListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDungeonIdListBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetDungeonIdListBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetDungeonIdListArray() { return __p.__vector_as_array<int>(6); }

  public static Offset<WWParser.Defs.GuideDungeonSetDefine> CreateGuideDungeonSetDefine(FlatBufferBuilder builder,
      StringOffset str_idOffset = default(StringOffset),
      VectorOffset dungeon_id_listOffset = default(VectorOffset)) {
    builder.StartTable(2);
    GuideDungeonSetDefine.AddDungeonIdList(builder, dungeon_id_listOffset);
    GuideDungeonSetDefine.AddStrId(builder, str_idOffset);
    return GuideDungeonSetDefine.EndGuideDungeonSetDefine(builder);
  }

  public static void StartGuideDungeonSetDefine(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddStrId(FlatBufferBuilder builder, StringOffset strIdOffset) { builder.AddOffset(0, strIdOffset.Value, 0); }
  public static void AddDungeonIdList(FlatBufferBuilder builder, VectorOffset dungeonIdListOffset) { builder.AddOffset(1, dungeonIdListOffset.Value, 0); }
  public static VectorOffset CreateDungeonIdListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDungeonIdListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDungeonIdListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDungeonIdListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDungeonIdListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.GuideDungeonSetDefine> EndGuideDungeonSetDefine(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.GuideDungeonSetDefine>(o);
  }
  public GuideDungeonSetDefineT UnPack() {
    var _o = new GuideDungeonSetDefineT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GuideDungeonSetDefineT _o) {
    _o.StrId = this.StrId;
    _o.DungeonIdList = new List<int>();
    for (var _j = 0; _j < this.DungeonIdListLength; ++_j) {_o.DungeonIdList.Add(this.DungeonIdList(_j));}
  }
  public static Offset<WWParser.Defs.GuideDungeonSetDefine> Pack(FlatBufferBuilder builder, GuideDungeonSetDefineT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.GuideDungeonSetDefine>);
    var _str_id = _o.StrId == null ? default(StringOffset) : builder.CreateString(_o.StrId);
    var _dungeon_id_list = default(VectorOffset);
    if (_o.DungeonIdList != null) {
      var __dungeon_id_list = _o.DungeonIdList.ToArray();
      _dungeon_id_list = CreateDungeonIdListVector(builder, __dungeon_id_list);
    }
    return CreateGuideDungeonSetDefine(
      builder,
      _str_id,
      _dungeon_id_list);
  }
}

public class GuideDungeonSetDefineT
{
  [Newtonsoft.Json.JsonProperty("str_id")]
  public string StrId { get; set; }
  [Newtonsoft.Json.JsonProperty("dungeon_id_list")]
  public List<int> DungeonIdList { get; set; }

  public GuideDungeonSetDefineT() {
    this.StrId = null;
    this.DungeonIdList = null;
  }
}


static public class GuideDungeonSetDefineVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*StrId*/, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*DungeonIdList*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
