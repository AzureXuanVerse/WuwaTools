// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ItemInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ItemInfo GetRootAsItemInfo(ByteBuffer _bb) { return GetRootAsItemInfo(_bb, new ItemInfo()); }
  public static ItemInfo GetRootAsItemInfo(ByteBuffer _bb, ItemInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public int ShowTypes(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ShowTypesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetShowTypesBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetShowTypesBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetShowTypesArray() { return __p.__vector_as_array<int>(10); }
  public string AttributesDescription { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributesDescriptionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetAttributesDescriptionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetAttributesDescriptionArray() { return __p.__vector_as_array<byte>(12); }
  public string BgDescription { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgDescriptionBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetBgDescriptionBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetBgDescriptionArray() { return __p.__vector_as_array<byte>(14); }
  public string Icon { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(16); }
  public string IconMiddle { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconMiddleBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetIconMiddleBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetIconMiddleArray() { return __p.__vector_as_array<byte>(18); }
  public string IconSmall { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconSmallBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetIconSmallBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetIconSmallArray() { return __p.__vector_as_array<byte>(20); }
  public string Mesh { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMeshBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetMeshBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetMeshArray() { return __p.__vector_as_array<byte>(22); }
  public int QualityId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MainTypeId { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RedDotDisableRule { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UseCountLimit { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SortIndex { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxCapcity { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)999999999; } }
  public int MaxStackableNum { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)99999999; } }
  public WWParser.Defs.DicIntInt? DecomposeInfo(int j) { int o = __p.__offset(38); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DecomposeInfoLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int UseLevel { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BeginTimeStamp { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DurationStamp { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemAccess(int j) { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ItemAccessLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItemAccessBytes() { return __p.__vector_as_span<int>(46, 4); }
#else
  public ArraySegment<byte>? GetItemAccessBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public int[] GetItemAccessArray() { return __p.__vector_as_array<int>(46); }
  public WWParser.Defs.DicIntInt? Parameters(int j) { int o = __p.__offset(48); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ParametersLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool ShowUseButton { get { int o = __p.__offset(50); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int ObtainedShow { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ObtainedShowDescription { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObtainedShowDescriptionBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetObtainedShowDescriptionBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetObtainedShowDescriptionArray() { return __p.__vector_as_array<byte>(54); }
  public int CompositeItem(int j) { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CompositeItemLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCompositeItemBytes() { return __p.__vector_as_span<int>(56, 4); }
#else
  public ArraySegment<byte>? GetCompositeItemBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public int[] GetCompositeItemArray() { return __p.__vector_as_array<int>(56); }
  public int EntityConfig { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NumLimit { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ShowInBag { get { int o = __p.__offset(62); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Destructible { get { int o = __p.__offset(64); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int ItemBuffType { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool SpecialItem { get { int o = __p.__offset(68); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool UiPlayItem { get { int o = __p.__offset(70); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsBuffItem { get { int o = __p.__offset(72); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.ItemInfo> CreateItemInfo(FlatBufferBuilder builder,
      int id = 0,
      int item_type = 0,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset show_typesOffset = default(VectorOffset),
      StringOffset attributes_descriptionOffset = default(StringOffset),
      StringOffset bg_descriptionOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset icon_middleOffset = default(StringOffset),
      StringOffset icon_smallOffset = default(StringOffset),
      StringOffset meshOffset = default(StringOffset),
      int quality_id = 0,
      int main_type_id = 0,
      int red_dot_disable_rule = 0,
      int use_count_limit = 0,
      int sort_index = 0,
      int max_capcity = 999999999,
      int max_stackable_num = 99999999,
      VectorOffset decompose_infoOffset = default(VectorOffset),
      int use_level = 0,
      int begin_time_stamp = 0,
      int duration_stamp = 0,
      VectorOffset item_accessOffset = default(VectorOffset),
      VectorOffset parametersOffset = default(VectorOffset),
      bool show_use_button = false,
      int obtained_show = 0,
      StringOffset obtained_show_descriptionOffset = default(StringOffset),
      VectorOffset composite_itemOffset = default(VectorOffset),
      int entity_config = 0,
      int num_limit = 0,
      bool show_in_bag = false,
      bool destructible = false,
      int item_buff_type = 0,
      bool special_item = false,
      bool ui_play_item = false,
      bool is_buff_item = false) {
    builder.StartTable(35);
    ItemInfo.AddItemBuffType(builder, item_buff_type);
    ItemInfo.AddNumLimit(builder, num_limit);
    ItemInfo.AddEntityConfig(builder, entity_config);
    ItemInfo.AddCompositeItem(builder, composite_itemOffset);
    ItemInfo.AddObtainedShowDescription(builder, obtained_show_descriptionOffset);
    ItemInfo.AddObtainedShow(builder, obtained_show);
    ItemInfo.AddParameters(builder, parametersOffset);
    ItemInfo.AddItemAccess(builder, item_accessOffset);
    ItemInfo.AddDurationStamp(builder, duration_stamp);
    ItemInfo.AddBeginTimeStamp(builder, begin_time_stamp);
    ItemInfo.AddUseLevel(builder, use_level);
    ItemInfo.AddDecomposeInfo(builder, decompose_infoOffset);
    ItemInfo.AddMaxStackableNum(builder, max_stackable_num);
    ItemInfo.AddMaxCapcity(builder, max_capcity);
    ItemInfo.AddSortIndex(builder, sort_index);
    ItemInfo.AddUseCountLimit(builder, use_count_limit);
    ItemInfo.AddRedDotDisableRule(builder, red_dot_disable_rule);
    ItemInfo.AddMainTypeId(builder, main_type_id);
    ItemInfo.AddQualityId(builder, quality_id);
    ItemInfo.AddMesh(builder, meshOffset);
    ItemInfo.AddIconSmall(builder, icon_smallOffset);
    ItemInfo.AddIconMiddle(builder, icon_middleOffset);
    ItemInfo.AddIcon(builder, iconOffset);
    ItemInfo.AddBgDescription(builder, bg_descriptionOffset);
    ItemInfo.AddAttributesDescription(builder, attributes_descriptionOffset);
    ItemInfo.AddShowTypes(builder, show_typesOffset);
    ItemInfo.AddName(builder, nameOffset);
    ItemInfo.AddItemType(builder, item_type);
    ItemInfo.AddId(builder, id);
    ItemInfo.AddIsBuffItem(builder, is_buff_item);
    ItemInfo.AddUiPlayItem(builder, ui_play_item);
    ItemInfo.AddSpecialItem(builder, special_item);
    ItemInfo.AddDestructible(builder, destructible);
    ItemInfo.AddShowInBag(builder, show_in_bag);
    ItemInfo.AddShowUseButton(builder, show_use_button);
    return ItemInfo.EndItemInfo(builder);
  }

  public static void StartItemInfo(FlatBufferBuilder builder) { builder.StartTable(35); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddItemType(FlatBufferBuilder builder, int itemType) { builder.AddInt(1, itemType, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddShowTypes(FlatBufferBuilder builder, VectorOffset showTypesOffset) { builder.AddOffset(3, showTypesOffset.Value, 0); }
  public static VectorOffset CreateShowTypesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateShowTypesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowTypesVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowTypesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShowTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAttributesDescription(FlatBufferBuilder builder, StringOffset attributesDescriptionOffset) { builder.AddOffset(4, attributesDescriptionOffset.Value, 0); }
  public static void AddBgDescription(FlatBufferBuilder builder, StringOffset bgDescriptionOffset) { builder.AddOffset(5, bgDescriptionOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(6, iconOffset.Value, 0); }
  public static void AddIconMiddle(FlatBufferBuilder builder, StringOffset iconMiddleOffset) { builder.AddOffset(7, iconMiddleOffset.Value, 0); }
  public static void AddIconSmall(FlatBufferBuilder builder, StringOffset iconSmallOffset) { builder.AddOffset(8, iconSmallOffset.Value, 0); }
  public static void AddMesh(FlatBufferBuilder builder, StringOffset meshOffset) { builder.AddOffset(9, meshOffset.Value, 0); }
  public static void AddQualityId(FlatBufferBuilder builder, int qualityId) { builder.AddInt(10, qualityId, 0); }
  public static void AddMainTypeId(FlatBufferBuilder builder, int mainTypeId) { builder.AddInt(11, mainTypeId, 0); }
  public static void AddRedDotDisableRule(FlatBufferBuilder builder, int redDotDisableRule) { builder.AddInt(12, redDotDisableRule, 0); }
  public static void AddUseCountLimit(FlatBufferBuilder builder, int useCountLimit) { builder.AddInt(13, useCountLimit, 0); }
  public static void AddSortIndex(FlatBufferBuilder builder, int sortIndex) { builder.AddInt(14, sortIndex, 0); }
  public static void AddMaxCapcity(FlatBufferBuilder builder, int maxCapcity) { builder.AddInt(15, maxCapcity, 999999999); }
  public static void AddMaxStackableNum(FlatBufferBuilder builder, int maxStackableNum) { builder.AddInt(16, maxStackableNum, 99999999); }
  public static void AddDecomposeInfo(FlatBufferBuilder builder, VectorOffset decomposeInfoOffset) { builder.AddOffset(17, decomposeInfoOffset.Value, 0); }
  public static VectorOffset CreateDecomposeInfoVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDecomposeInfoVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDecomposeInfoVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDecomposeInfoVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDecomposeInfoVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUseLevel(FlatBufferBuilder builder, int useLevel) { builder.AddInt(18, useLevel, 0); }
  public static void AddBeginTimeStamp(FlatBufferBuilder builder, int beginTimeStamp) { builder.AddInt(19, beginTimeStamp, 0); }
  public static void AddDurationStamp(FlatBufferBuilder builder, int durationStamp) { builder.AddInt(20, durationStamp, 0); }
  public static void AddItemAccess(FlatBufferBuilder builder, VectorOffset itemAccessOffset) { builder.AddOffset(21, itemAccessOffset.Value, 0); }
  public static VectorOffset CreateItemAccessVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItemAccessVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemAccessVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemAccessVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartItemAccessVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddParameters(FlatBufferBuilder builder, VectorOffset parametersOffset) { builder.AddOffset(22, parametersOffset.Value, 0); }
  public static VectorOffset CreateParametersVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateParametersVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParametersVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParametersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParametersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShowUseButton(FlatBufferBuilder builder, bool showUseButton) { builder.AddBool(23, showUseButton, false); }
  public static void AddObtainedShow(FlatBufferBuilder builder, int obtainedShow) { builder.AddInt(24, obtainedShow, 0); }
  public static void AddObtainedShowDescription(FlatBufferBuilder builder, StringOffset obtainedShowDescriptionOffset) { builder.AddOffset(25, obtainedShowDescriptionOffset.Value, 0); }
  public static void AddCompositeItem(FlatBufferBuilder builder, VectorOffset compositeItemOffset) { builder.AddOffset(26, compositeItemOffset.Value, 0); }
  public static VectorOffset CreateCompositeItemVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCompositeItemVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompositeItemVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompositeItemVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCompositeItemVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEntityConfig(FlatBufferBuilder builder, int entityConfig) { builder.AddInt(27, entityConfig, 0); }
  public static void AddNumLimit(FlatBufferBuilder builder, int numLimit) { builder.AddInt(28, numLimit, 0); }
  public static void AddShowInBag(FlatBufferBuilder builder, bool showInBag) { builder.AddBool(29, showInBag, false); }
  public static void AddDestructible(FlatBufferBuilder builder, bool destructible) { builder.AddBool(30, destructible, false); }
  public static void AddItemBuffType(FlatBufferBuilder builder, int itemBuffType) { builder.AddInt(31, itemBuffType, 0); }
  public static void AddSpecialItem(FlatBufferBuilder builder, bool specialItem) { builder.AddBool(32, specialItem, false); }
  public static void AddUiPlayItem(FlatBufferBuilder builder, bool uiPlayItem) { builder.AddBool(33, uiPlayItem, false); }
  public static void AddIsBuffItem(FlatBufferBuilder builder, bool isBuffItem) { builder.AddBool(34, isBuffItem, false); }
  public static Offset<WWParser.Defs.ItemInfo> EndItemInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ItemInfo>(o);
  }
  public ItemInfoT UnPack() {
    var _o = new ItemInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemInfoT _o) {
    _o.Id = this.Id;
    _o.ItemType = this.ItemType;
    _o.Name = this.Name;
    _o.ShowTypes = new List<int>();
    for (var _j = 0; _j < this.ShowTypesLength; ++_j) {_o.ShowTypes.Add(this.ShowTypes(_j));}
    _o.AttributesDescription = this.AttributesDescription;
    _o.BgDescription = this.BgDescription;
    _o.Icon = this.Icon;
    _o.IconMiddle = this.IconMiddle;
    _o.IconSmall = this.IconSmall;
    _o.Mesh = this.Mesh;
    _o.QualityId = this.QualityId;
    _o.MainTypeId = this.MainTypeId;
    _o.RedDotDisableRule = this.RedDotDisableRule;
    _o.UseCountLimit = this.UseCountLimit;
    _o.SortIndex = this.SortIndex;
    _o.MaxCapcity = this.MaxCapcity;
    _o.MaxStackableNum = this.MaxStackableNum;
    _o.DecomposeInfo = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.DecomposeInfoLength; ++_j) {_o.DecomposeInfo.Add(this.DecomposeInfo(_j).HasValue ? this.DecomposeInfo(_j).Value.UnPack() : null);}
    _o.UseLevel = this.UseLevel;
    _o.BeginTimeStamp = this.BeginTimeStamp;
    _o.DurationStamp = this.DurationStamp;
    _o.ItemAccess = new List<int>();
    for (var _j = 0; _j < this.ItemAccessLength; ++_j) {_o.ItemAccess.Add(this.ItemAccess(_j));}
    _o.Parameters = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.ParametersLength; ++_j) {_o.Parameters.Add(this.Parameters(_j).HasValue ? this.Parameters(_j).Value.UnPack() : null);}
    _o.ShowUseButton = this.ShowUseButton;
    _o.ObtainedShow = this.ObtainedShow;
    _o.ObtainedShowDescription = this.ObtainedShowDescription;
    _o.CompositeItem = new List<int>();
    for (var _j = 0; _j < this.CompositeItemLength; ++_j) {_o.CompositeItem.Add(this.CompositeItem(_j));}
    _o.EntityConfig = this.EntityConfig;
    _o.NumLimit = this.NumLimit;
    _o.ShowInBag = this.ShowInBag;
    _o.Destructible = this.Destructible;
    _o.ItemBuffType = this.ItemBuffType;
    _o.SpecialItem = this.SpecialItem;
    _o.UiPlayItem = this.UiPlayItem;
    _o.IsBuffItem = this.IsBuffItem;
  }
  public static Offset<WWParser.Defs.ItemInfo> Pack(FlatBufferBuilder builder, ItemInfoT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ItemInfo>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _show_types = default(VectorOffset);
    if (_o.ShowTypes != null) {
      var __show_types = _o.ShowTypes.ToArray();
      _show_types = CreateShowTypesVector(builder, __show_types);
    }
    var _attributes_description = _o.AttributesDescription == null ? default(StringOffset) : builder.CreateString(_o.AttributesDescription);
    var _bg_description = _o.BgDescription == null ? default(StringOffset) : builder.CreateString(_o.BgDescription);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _icon_middle = _o.IconMiddle == null ? default(StringOffset) : builder.CreateString(_o.IconMiddle);
    var _icon_small = _o.IconSmall == null ? default(StringOffset) : builder.CreateString(_o.IconSmall);
    var _mesh = _o.Mesh == null ? default(StringOffset) : builder.CreateString(_o.Mesh);
    var _decompose_info = default(VectorOffset);
    if (_o.DecomposeInfo != null) {
      var __decompose_info = new Offset<WWParser.Defs.DicIntInt>[_o.DecomposeInfo.Count];
      for (var _j = 0; _j < __decompose_info.Length; ++_j) { __decompose_info[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.DecomposeInfo[_j]); }
      _decompose_info = CreateDecomposeInfoVector(builder, __decompose_info);
    }
    var _item_access = default(VectorOffset);
    if (_o.ItemAccess != null) {
      var __item_access = _o.ItemAccess.ToArray();
      _item_access = CreateItemAccessVector(builder, __item_access);
    }
    var _parameters = default(VectorOffset);
    if (_o.Parameters != null) {
      var __parameters = new Offset<WWParser.Defs.DicIntInt>[_o.Parameters.Count];
      for (var _j = 0; _j < __parameters.Length; ++_j) { __parameters[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.Parameters[_j]); }
      _parameters = CreateParametersVector(builder, __parameters);
    }
    var _obtained_show_description = _o.ObtainedShowDescription == null ? default(StringOffset) : builder.CreateString(_o.ObtainedShowDescription);
    var _composite_item = default(VectorOffset);
    if (_o.CompositeItem != null) {
      var __composite_item = _o.CompositeItem.ToArray();
      _composite_item = CreateCompositeItemVector(builder, __composite_item);
    }
    return CreateItemInfo(
      builder,
      _o.Id,
      _o.ItemType,
      _name,
      _show_types,
      _attributes_description,
      _bg_description,
      _icon,
      _icon_middle,
      _icon_small,
      _mesh,
      _o.QualityId,
      _o.MainTypeId,
      _o.RedDotDisableRule,
      _o.UseCountLimit,
      _o.SortIndex,
      _o.MaxCapcity,
      _o.MaxStackableNum,
      _decompose_info,
      _o.UseLevel,
      _o.BeginTimeStamp,
      _o.DurationStamp,
      _item_access,
      _parameters,
      _o.ShowUseButton,
      _o.ObtainedShow,
      _obtained_show_description,
      _composite_item,
      _o.EntityConfig,
      _o.NumLimit,
      _o.ShowInBag,
      _o.Destructible,
      _o.ItemBuffType,
      _o.SpecialItem,
      _o.UiPlayItem,
      _o.IsBuffItem);
  }
}

public class ItemInfoT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("item_type")]
  public int ItemType { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("show_types")]
  public List<int> ShowTypes { get; set; }
  [Newtonsoft.Json.JsonProperty("attributes_description")]
  public string AttributesDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("bg_description")]
  public string BgDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_middle")]
  public string IconMiddle { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_small")]
  public string IconSmall { get; set; }
  [Newtonsoft.Json.JsonProperty("mesh")]
  public string Mesh { get; set; }
  [Newtonsoft.Json.JsonProperty("quality_id")]
  public int QualityId { get; set; }
  [Newtonsoft.Json.JsonProperty("main_type_id")]
  public int MainTypeId { get; set; }
  [Newtonsoft.Json.JsonProperty("red_dot_disable_rule")]
  public int RedDotDisableRule { get; set; }
  [Newtonsoft.Json.JsonProperty("use_count_limit")]
  public int UseCountLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_index")]
  public int SortIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("max_capcity")]
  public int MaxCapcity { get; set; }
  [Newtonsoft.Json.JsonProperty("max_stackable_num")]
  public int MaxStackableNum { get; set; }
  [Newtonsoft.Json.JsonProperty("decompose_info")]
  public List<WWParser.Defs.DicIntIntT> DecomposeInfo { get; set; }
  [Newtonsoft.Json.JsonProperty("use_level")]
  public int UseLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("begin_time_stamp")]
  public int BeginTimeStamp { get; set; }
  [Newtonsoft.Json.JsonProperty("duration_stamp")]
  public int DurationStamp { get; set; }
  [Newtonsoft.Json.JsonProperty("item_access")]
  public List<int> ItemAccess { get; set; }
  [Newtonsoft.Json.JsonProperty("parameters")]
  public List<WWParser.Defs.DicIntIntT> Parameters { get; set; }
  [Newtonsoft.Json.JsonProperty("show_use_button")]
  public bool ShowUseButton { get; set; }
  [Newtonsoft.Json.JsonProperty("obtained_show")]
  public int ObtainedShow { get; set; }
  [Newtonsoft.Json.JsonProperty("obtained_show_description")]
  public string ObtainedShowDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("composite_item")]
  public List<int> CompositeItem { get; set; }
  [Newtonsoft.Json.JsonProperty("entity_config")]
  public int EntityConfig { get; set; }
  [Newtonsoft.Json.JsonProperty("num_limit")]
  public int NumLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("show_in_bag")]
  public bool ShowInBag { get; set; }
  [Newtonsoft.Json.JsonProperty("destructible")]
  public bool Destructible { get; set; }
  [Newtonsoft.Json.JsonProperty("item_buff_type")]
  public int ItemBuffType { get; set; }
  [Newtonsoft.Json.JsonProperty("special_item")]
  public bool SpecialItem { get; set; }
  [Newtonsoft.Json.JsonProperty("ui_play_item")]
  public bool UiPlayItem { get; set; }
  [Newtonsoft.Json.JsonProperty("is_buff_item")]
  public bool IsBuffItem { get; set; }

  public ItemInfoT() {
    this.Id = 0;
    this.ItemType = 0;
    this.Name = null;
    this.ShowTypes = null;
    this.AttributesDescription = null;
    this.BgDescription = null;
    this.Icon = null;
    this.IconMiddle = null;
    this.IconSmall = null;
    this.Mesh = null;
    this.QualityId = 0;
    this.MainTypeId = 0;
    this.RedDotDisableRule = 0;
    this.UseCountLimit = 0;
    this.SortIndex = 0;
    this.MaxCapcity = 999999999;
    this.MaxStackableNum = 99999999;
    this.DecomposeInfo = null;
    this.UseLevel = 0;
    this.BeginTimeStamp = 0;
    this.DurationStamp = 0;
    this.ItemAccess = null;
    this.Parameters = null;
    this.ShowUseButton = false;
    this.ObtainedShow = 0;
    this.ObtainedShowDescription = null;
    this.CompositeItem = null;
    this.EntityConfig = 0;
    this.NumLimit = 0;
    this.ShowInBag = false;
    this.Destructible = false;
    this.ItemBuffType = 0;
    this.SpecialItem = false;
    this.UiPlayItem = false;
    this.IsBuffItem = false;
  }
}


static public class ItemInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ItemType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*ShowTypes*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 12 /*AttributesDescription*/, false)
      && verifier.VerifyString(tablePos, 14 /*BgDescription*/, false)
      && verifier.VerifyString(tablePos, 16 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 18 /*IconMiddle*/, false)
      && verifier.VerifyString(tablePos, 20 /*IconSmall*/, false)
      && verifier.VerifyString(tablePos, 22 /*Mesh*/, false)
      && verifier.VerifyField(tablePos, 24 /*QualityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*MainTypeId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*RedDotDisableRule*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*UseCountLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*SortIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*MaxCapcity*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*MaxStackableNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 38 /*DecomposeInfo*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 40 /*UseLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*BeginTimeStamp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*DurationStamp*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 46 /*ItemAccess*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 48 /*Parameters*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 50 /*ShowUseButton*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 52 /*ObtainedShow*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 54 /*ObtainedShowDescription*/, false)
      && verifier.VerifyVectorOfData(tablePos, 56 /*CompositeItem*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 58 /*EntityConfig*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*NumLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*ShowInBag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 64 /*Destructible*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 66 /*ItemBuffType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 68 /*SpecialItem*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 70 /*UiPlayItem*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 72 /*IsBuffItem*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
