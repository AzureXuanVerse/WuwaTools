// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EntityGravityConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EntityGravityConfig GetRootAsEntityGravityConfig(ByteBuffer _bb) { return GetRootAsEntityGravityConfig(_bb, new EntityGravityConfig()); }
  public static EntityGravityConfig GetRootAsEntityGravityConfig(ByteBuffer _bb, EntityGravityConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntityGravityConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EntityId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float GravityDirection(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int GravityDirectionLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetGravityDirectionBytes() { return __p.__vector_as_span<float>(10, 4); }
#else
  public ArraySegment<byte>? GetGravityDirectionBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public float[] GetGravityDirectionArray() { return __p.__vector_as_array<float>(10); }

  public static Offset<WWParser.Defs.EntityGravityConfig> CreateEntityGravityConfig(FlatBufferBuilder builder,
      int id = 0,
      int map_id = 0,
      int entity_id = 0,
      VectorOffset gravity_directionOffset = default(VectorOffset)) {
    builder.StartTable(4);
    EntityGravityConfig.AddGravityDirection(builder, gravity_directionOffset);
    EntityGravityConfig.AddEntityId(builder, entity_id);
    EntityGravityConfig.AddMapId(builder, map_id);
    EntityGravityConfig.AddId(builder, id);
    return EntityGravityConfig.EndEntityGravityConfig(builder);
  }

  public static void StartEntityGravityConfig(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMapId(FlatBufferBuilder builder, int mapId) { builder.AddInt(1, mapId, 0); }
  public static void AddEntityId(FlatBufferBuilder builder, int entityId) { builder.AddInt(2, entityId, 0); }
  public static void AddGravityDirection(FlatBufferBuilder builder, VectorOffset gravityDirectionOffset) { builder.AddOffset(3, gravityDirectionOffset.Value, 0); }
  public static VectorOffset CreateGravityDirectionVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGravityDirectionVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGravityDirectionVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGravityDirectionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGravityDirectionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.EntityGravityConfig> EndEntityGravityConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.EntityGravityConfig>(o);
  }
  public EntityGravityConfigT UnPack() {
    var _o = new EntityGravityConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntityGravityConfigT _o) {
    _o.Id = this.Id;
    _o.MapId = this.MapId;
    _o.EntityId = this.EntityId;
    _o.GravityDirection = new List<float>();
    for (var _j = 0; _j < this.GravityDirectionLength; ++_j) {_o.GravityDirection.Add(this.GravityDirection(_j));}
  }
  public static Offset<WWParser.Defs.EntityGravityConfig> Pack(FlatBufferBuilder builder, EntityGravityConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.EntityGravityConfig>);
    var _gravity_direction = default(VectorOffset);
    if (_o.GravityDirection != null) {
      var __gravity_direction = _o.GravityDirection.ToArray();
      _gravity_direction = CreateGravityDirectionVector(builder, __gravity_direction);
    }
    return CreateEntityGravityConfig(
      builder,
      _o.Id,
      _o.MapId,
      _o.EntityId,
      _gravity_direction);
  }
}

public class EntityGravityConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("map_id")]
  public int MapId { get; set; }
  [Newtonsoft.Json.JsonProperty("entity_id")]
  public int EntityId { get; set; }
  [Newtonsoft.Json.JsonProperty("gravity_direction")]
  public List<float> GravityDirection { get; set; }

  public EntityGravityConfigT() {
    this.Id = 0;
    this.MapId = 0;
    this.EntityId = 0;
    this.GravityDirection = null;
  }
}


static public class EntityGravityConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MapId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*EntityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*GravityDirection*/, 4 /*float*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
