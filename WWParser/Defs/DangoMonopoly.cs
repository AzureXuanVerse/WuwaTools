// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DangoMonopoly : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DangoMonopoly GetRootAsDangoMonopoly(ByteBuffer _bb) { return GetRootAsDangoMonopoly(_bb, new DangoMonopoly()); }
  public static DangoMonopoly GetRootAsDangoMonopoly(ByteBuffer _bb, DangoMonopoly obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DangoMonopoly __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ActivityId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BoardGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TaskGroupId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaleDangoId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FeMaleDangoId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DiceId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.DangoMonopoly> CreateDangoMonopoly(FlatBufferBuilder builder,
      int activity_id = 0,
      int board_group_id = 0,
      int task_group_id = 0,
      int inst_id = 0,
      int male_dango_id = 0,
      int fe_male_dango_id = 0,
      int dice_id = 0) {
    builder.StartTable(7);
    DangoMonopoly.AddDiceId(builder, dice_id);
    DangoMonopoly.AddFeMaleDangoId(builder, fe_male_dango_id);
    DangoMonopoly.AddMaleDangoId(builder, male_dango_id);
    DangoMonopoly.AddInstId(builder, inst_id);
    DangoMonopoly.AddTaskGroupId(builder, task_group_id);
    DangoMonopoly.AddBoardGroupId(builder, board_group_id);
    DangoMonopoly.AddActivityId(builder, activity_id);
    return DangoMonopoly.EndDangoMonopoly(builder);
  }

  public static void StartDangoMonopoly(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(0, activityId, 0); }
  public static void AddBoardGroupId(FlatBufferBuilder builder, int boardGroupId) { builder.AddInt(1, boardGroupId, 0); }
  public static void AddTaskGroupId(FlatBufferBuilder builder, int taskGroupId) { builder.AddInt(2, taskGroupId, 0); }
  public static void AddInstId(FlatBufferBuilder builder, int instId) { builder.AddInt(3, instId, 0); }
  public static void AddMaleDangoId(FlatBufferBuilder builder, int maleDangoId) { builder.AddInt(4, maleDangoId, 0); }
  public static void AddFeMaleDangoId(FlatBufferBuilder builder, int feMaleDangoId) { builder.AddInt(5, feMaleDangoId, 0); }
  public static void AddDiceId(FlatBufferBuilder builder, int diceId) { builder.AddInt(6, diceId, 0); }
  public static Offset<WWParser.Defs.DangoMonopoly> EndDangoMonopoly(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DangoMonopoly>(o);
  }
  public DangoMonopolyT UnPack() {
    var _o = new DangoMonopolyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DangoMonopolyT _o) {
    _o.ActivityId = this.ActivityId;
    _o.BoardGroupId = this.BoardGroupId;
    _o.TaskGroupId = this.TaskGroupId;
    _o.InstId = this.InstId;
    _o.MaleDangoId = this.MaleDangoId;
    _o.FeMaleDangoId = this.FeMaleDangoId;
    _o.DiceId = this.DiceId;
  }
  public static Offset<WWParser.Defs.DangoMonopoly> Pack(FlatBufferBuilder builder, DangoMonopolyT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DangoMonopoly>);
    return CreateDangoMonopoly(
      builder,
      _o.ActivityId,
      _o.BoardGroupId,
      _o.TaskGroupId,
      _o.InstId,
      _o.MaleDangoId,
      _o.FeMaleDangoId,
      _o.DiceId);
  }
}

public class DangoMonopolyT
{
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("board_group_id")]
  public int BoardGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("task_group_id")]
  public int TaskGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("inst_id")]
  public int InstId { get; set; }
  [Newtonsoft.Json.JsonProperty("male_dango_id")]
  public int MaleDangoId { get; set; }
  [Newtonsoft.Json.JsonProperty("fe_male_dango_id")]
  public int FeMaleDangoId { get; set; }
  [Newtonsoft.Json.JsonProperty("dice_id")]
  public int DiceId { get; set; }

  public DangoMonopolyT() {
    this.ActivityId = 0;
    this.BoardGroupId = 0;
    this.TaskGroupId = 0;
    this.InstId = 0;
    this.MaleDangoId = 0;
    this.FeMaleDangoId = 0;
    this.DiceId = 0;
  }
}


static public class DangoMonopolyVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*BoardGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*TaskGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*InstId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*MaleDangoId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*FeMaleDangoId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*DiceId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
