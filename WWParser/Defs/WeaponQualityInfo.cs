// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct WeaponQualityInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static WeaponQualityInfo GetRootAsWeaponQualityInfo(ByteBuffer _bb) { return GetRootAsWeaponQualityInfo(_bb, new WeaponQualityInfo()); }
  public static WeaponQualityInfo GetRootAsWeaponQualityInfo(ByteBuffer _bb, WeaponQualityInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WeaponQualityInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string QualityColor { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQualityColorBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetQualityColorBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetQualityColorArray() { return __p.__vector_as_array<byte>(8); }
  public int LevelLimit { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Cost { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BasicExp { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.WeaponQualityInfo> CreateWeaponQualityInfo(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset quality_colorOffset = default(StringOffset),
      int level_limit = 0,
      int cost = 0,
      int basic_exp = 0) {
    builder.StartTable(6);
    WeaponQualityInfo.AddBasicExp(builder, basic_exp);
    WeaponQualityInfo.AddCost(builder, cost);
    WeaponQualityInfo.AddLevelLimit(builder, level_limit);
    WeaponQualityInfo.AddQualityColor(builder, quality_colorOffset);
    WeaponQualityInfo.AddName(builder, nameOffset);
    WeaponQualityInfo.AddId(builder, id);
    return WeaponQualityInfo.EndWeaponQualityInfo(builder);
  }

  public static void StartWeaponQualityInfo(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddQualityColor(FlatBufferBuilder builder, StringOffset qualityColorOffset) { builder.AddOffset(2, qualityColorOffset.Value, 0); }
  public static void AddLevelLimit(FlatBufferBuilder builder, int levelLimit) { builder.AddInt(3, levelLimit, 0); }
  public static void AddCost(FlatBufferBuilder builder, int cost) { builder.AddInt(4, cost, 0); }
  public static void AddBasicExp(FlatBufferBuilder builder, int basicExp) { builder.AddInt(5, basicExp, 0); }
  public static Offset<WWParser.Defs.WeaponQualityInfo> EndWeaponQualityInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.WeaponQualityInfo>(o);
  }
  public WeaponQualityInfoT UnPack() {
    var _o = new WeaponQualityInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WeaponQualityInfoT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.QualityColor = this.QualityColor;
    _o.LevelLimit = this.LevelLimit;
    _o.Cost = this.Cost;
    _o.BasicExp = this.BasicExp;
  }
  public static Offset<WWParser.Defs.WeaponQualityInfo> Pack(FlatBufferBuilder builder, WeaponQualityInfoT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.WeaponQualityInfo>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _quality_color = _o.QualityColor == null ? default(StringOffset) : builder.CreateString(_o.QualityColor);
    return CreateWeaponQualityInfo(
      builder,
      _o.Id,
      _name,
      _quality_color,
      _o.LevelLimit,
      _o.Cost,
      _o.BasicExp);
  }
}

public class WeaponQualityInfoT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("quality_color")]
  public string QualityColor { get; set; }
  [Newtonsoft.Json.JsonProperty("level_limit")]
  public int LevelLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("cost")]
  public int Cost { get; set; }
  [Newtonsoft.Json.JsonProperty("basic_exp")]
  public int BasicExp { get; set; }

  public WeaponQualityInfoT() {
    this.Id = 0;
    this.Name = null;
    this.QualityColor = null;
    this.LevelLimit = 0;
    this.Cost = 0;
    this.BasicExp = 0;
  }
}


static public class WeaponQualityInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyString(tablePos, 8 /*QualityColor*/, false)
      && verifier.VerifyField(tablePos, 10 /*LevelLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Cost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*BasicExp*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
