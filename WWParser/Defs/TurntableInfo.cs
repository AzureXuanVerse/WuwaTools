// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TurntableInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TurntableInfo GetRootAsTurntableInfo(ByteBuffer _bb) { return GetRootAsTurntableInfo(_bb, new TurntableInfo()); }
  public static TurntableInfo GetRootAsTurntableInfo(ByteBuffer _bb, TurntableInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TurntableInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CostItemId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CostItemCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TurntableType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.TurntableInfo> CreateTurntableInfo(FlatBufferBuilder builder,
      int id = 0,
      int cost_item_id = 0,
      int cost_item_count = 0,
      int turntable_type = 0) {
    builder.StartTable(4);
    TurntableInfo.AddTurntableType(builder, turntable_type);
    TurntableInfo.AddCostItemCount(builder, cost_item_count);
    TurntableInfo.AddCostItemId(builder, cost_item_id);
    TurntableInfo.AddId(builder, id);
    return TurntableInfo.EndTurntableInfo(builder);
  }

  public static void StartTurntableInfo(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddCostItemId(FlatBufferBuilder builder, int costItemId) { builder.AddInt(1, costItemId, 0); }
  public static void AddCostItemCount(FlatBufferBuilder builder, int costItemCount) { builder.AddInt(2, costItemCount, 0); }
  public static void AddTurntableType(FlatBufferBuilder builder, int turntableType) { builder.AddInt(3, turntableType, 0); }
  public static Offset<WWParser.Defs.TurntableInfo> EndTurntableInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.TurntableInfo>(o);
  }
  public TurntableInfoT UnPack() {
    var _o = new TurntableInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TurntableInfoT _o) {
    _o.Id = this.Id;
    _o.CostItemId = this.CostItemId;
    _o.CostItemCount = this.CostItemCount;
    _o.TurntableType = this.TurntableType;
  }
  public static Offset<WWParser.Defs.TurntableInfo> Pack(FlatBufferBuilder builder, TurntableInfoT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.TurntableInfo>);
    return CreateTurntableInfo(
      builder,
      _o.Id,
      _o.CostItemId,
      _o.CostItemCount,
      _o.TurntableType);
  }
}

public class TurntableInfoT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("cost_item_id")]
  public int CostItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("cost_item_count")]
  public int CostItemCount { get; set; }
  [Newtonsoft.Json.JsonProperty("turntable_type")]
  public int TurntableType { get; set; }

  public TurntableInfoT() {
    this.Id = 0;
    this.CostItemId = 0;
    this.CostItemCount = 0;
    this.TurntableType = 0;
  }
}


static public class TurntableInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*CostItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*CostItemCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*TurntableType*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
