// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueResSort : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueResSort GetRootAsRogueResSort(ByteBuffer _bb) { return GetRootAsRogueResSort(_bb, new RogueResSort()); }
  public static RogueResSort GetRootAsRogueResSort(ByteBuffer _bb, RogueResSort obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueResSort __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Column { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Row { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PostId(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PostIdLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPostIdBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetPostIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetPostIdArray() { return __p.__vector_as_array<int>(10); }

  public static Offset<WWParser.Defs.RogueResSort> CreateRogueResSort(FlatBufferBuilder builder,
      int id = 0,
      int column = 0,
      int row = 0,
      VectorOffset post_idOffset = default(VectorOffset)) {
    builder.StartTable(4);
    RogueResSort.AddPostId(builder, post_idOffset);
    RogueResSort.AddRow(builder, row);
    RogueResSort.AddColumn(builder, column);
    RogueResSort.AddId(builder, id);
    return RogueResSort.EndRogueResSort(builder);
  }

  public static void StartRogueResSort(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddColumn(FlatBufferBuilder builder, int column) { builder.AddInt(1, column, 0); }
  public static void AddRow(FlatBufferBuilder builder, int row) { builder.AddInt(2, row, 0); }
  public static void AddPostId(FlatBufferBuilder builder, VectorOffset postIdOffset) { builder.AddOffset(3, postIdOffset.Value, 0); }
  public static VectorOffset CreatePostIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePostIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePostIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePostIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPostIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.RogueResSort> EndRogueResSort(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueResSort>(o);
  }
  public RogueResSortT UnPack() {
    var _o = new RogueResSortT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueResSortT _o) {
    _o.Id = this.Id;
    _o.Column = this.Column;
    _o.Row = this.Row;
    _o.PostId = new List<int>();
    for (var _j = 0; _j < this.PostIdLength; ++_j) {_o.PostId.Add(this.PostId(_j));}
  }
  public static Offset<WWParser.Defs.RogueResSort> Pack(FlatBufferBuilder builder, RogueResSortT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueResSort>);
    var _post_id = default(VectorOffset);
    if (_o.PostId != null) {
      var __post_id = _o.PostId.ToArray();
      _post_id = CreatePostIdVector(builder, __post_id);
    }
    return CreateRogueResSort(
      builder,
      _o.Id,
      _o.Column,
      _o.Row,
      _post_id);
  }
}

public class RogueResSortT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("column")]
  public int Column { get; set; }
  [Newtonsoft.Json.JsonProperty("row")]
  public int Row { get; set; }
  [Newtonsoft.Json.JsonProperty("post_id")]
  public List<int> PostId { get; set; }

  public RogueResSortT() {
    this.Id = 0;
    this.Column = 0;
    this.Row = 0;
    this.PostId = null;
  }
}


static public class RogueResSortVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Column*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Row*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*PostId*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
