// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Skill : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Skill GetRootAsSkill(ByteBuffer _bb) { return GetRootAsSkill(_bb, new Skill()); }
  public static Skill GetRootAsSkill(ByteBuffer _bb, Skill obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Skill __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UpgradeCondition { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UpgradeSkillId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SkillName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetSkillNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetSkillNameArray() { return __p.__vector_as_array<byte>(14); }
  public int SkillLevelGroupId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LeftSkillEffect { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxSkillLevel { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillInfoList(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SkillInfoListLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSkillInfoListBytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetSkillInfoListBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetSkillInfoListArray() { return __p.__vector_as_array<int>(22); }
  public double BuffList(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int BuffListLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetBuffListBytes() { return __p.__vector_as_span<double>(24, 8); }
#else
  public ArraySegment<byte>? GetBuffListBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public double[] GetBuffListArray() { return __p.__vector_as_array<double>(24); }
  public double DamageList(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int DamageListLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetDamageListBytes() { return __p.__vector_as_span<double>(26, 8); }
#else
  public ArraySegment<byte>? GetDamageListBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public double[] GetDamageListArray() { return __p.__vector_as_array<double>(26); }
  public string Icon { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(28); }
  public string EffectSkillPath { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectSkillPathBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetEffectSkillPathBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetEffectSkillPathArray() { return __p.__vector_as_array<byte>(30); }
  public int SortIndex { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SkillDescribe { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillDescribeBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetSkillDescribeBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetSkillDescribeArray() { return __p.__vector_as_array<byte>(34); }
  public string SkillResume { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillResumeBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetSkillResumeBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetSkillResumeArray() { return __p.__vector_as_array<byte>(36); }
  public int SkillTagList(int j) { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SkillTagListLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSkillTagListBytes() { return __p.__vector_as_span<int>(38, 4); }
#else
  public ArraySegment<byte>? GetSkillTagListBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public int[] GetSkillTagListArray() { return __p.__vector_as_array<int>(38); }
  public string SkillDetailNum(int j) { int o = __p.__offset(40); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SkillDetailNumLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string SkillResumeNum(int j) { int o = __p.__offset(42); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SkillResumeNumLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string MultiSkillDescribe { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMultiSkillDescribeBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetMultiSkillDescribeBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetMultiSkillDescribeArray() { return __p.__vector_as_array<byte>(44); }
  public string MultiSkillDetailNum(int j) { int o = __p.__offset(46); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MultiSkillDetailNumLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.Skill> CreateSkill(FlatBufferBuilder builder,
      int id = 0,
      int skill_group_id = 0,
      int skill_type = 0,
      int upgrade_condition = 0,
      int upgrade_skill_id = 0,
      StringOffset skill_nameOffset = default(StringOffset),
      int skill_level_group_id = 0,
      int left_skill_effect = 0,
      int max_skill_level = 0,
      VectorOffset skill_info_listOffset = default(VectorOffset),
      VectorOffset buff_listOffset = default(VectorOffset),
      VectorOffset damage_listOffset = default(VectorOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset effect_skill_pathOffset = default(StringOffset),
      int sort_index = 0,
      StringOffset skill_describeOffset = default(StringOffset),
      StringOffset skill_resumeOffset = default(StringOffset),
      VectorOffset skill_tag_listOffset = default(VectorOffset),
      VectorOffset skill_detail_numOffset = default(VectorOffset),
      VectorOffset skill_resume_numOffset = default(VectorOffset),
      StringOffset multi_skill_describeOffset = default(StringOffset),
      VectorOffset multi_skill_detail_numOffset = default(VectorOffset)) {
    builder.StartTable(22);
    Skill.AddMultiSkillDetailNum(builder, multi_skill_detail_numOffset);
    Skill.AddMultiSkillDescribe(builder, multi_skill_describeOffset);
    Skill.AddSkillResumeNum(builder, skill_resume_numOffset);
    Skill.AddSkillDetailNum(builder, skill_detail_numOffset);
    Skill.AddSkillTagList(builder, skill_tag_listOffset);
    Skill.AddSkillResume(builder, skill_resumeOffset);
    Skill.AddSkillDescribe(builder, skill_describeOffset);
    Skill.AddSortIndex(builder, sort_index);
    Skill.AddEffectSkillPath(builder, effect_skill_pathOffset);
    Skill.AddIcon(builder, iconOffset);
    Skill.AddDamageList(builder, damage_listOffset);
    Skill.AddBuffList(builder, buff_listOffset);
    Skill.AddSkillInfoList(builder, skill_info_listOffset);
    Skill.AddMaxSkillLevel(builder, max_skill_level);
    Skill.AddLeftSkillEffect(builder, left_skill_effect);
    Skill.AddSkillLevelGroupId(builder, skill_level_group_id);
    Skill.AddSkillName(builder, skill_nameOffset);
    Skill.AddUpgradeSkillId(builder, upgrade_skill_id);
    Skill.AddUpgradeCondition(builder, upgrade_condition);
    Skill.AddSkillType(builder, skill_type);
    Skill.AddSkillGroupId(builder, skill_group_id);
    Skill.AddId(builder, id);
    return Skill.EndSkill(builder);
  }

  public static void StartSkill(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddSkillGroupId(FlatBufferBuilder builder, int skillGroupId) { builder.AddInt(1, skillGroupId, 0); }
  public static void AddSkillType(FlatBufferBuilder builder, int skillType) { builder.AddInt(2, skillType, 0); }
  public static void AddUpgradeCondition(FlatBufferBuilder builder, int upgradeCondition) { builder.AddInt(3, upgradeCondition, 0); }
  public static void AddUpgradeSkillId(FlatBufferBuilder builder, int upgradeSkillId) { builder.AddInt(4, upgradeSkillId, 0); }
  public static void AddSkillName(FlatBufferBuilder builder, StringOffset skillNameOffset) { builder.AddOffset(5, skillNameOffset.Value, 0); }
  public static void AddSkillLevelGroupId(FlatBufferBuilder builder, int skillLevelGroupId) { builder.AddInt(6, skillLevelGroupId, 0); }
  public static void AddLeftSkillEffect(FlatBufferBuilder builder, int leftSkillEffect) { builder.AddInt(7, leftSkillEffect, 0); }
  public static void AddMaxSkillLevel(FlatBufferBuilder builder, int maxSkillLevel) { builder.AddInt(8, maxSkillLevel, 0); }
  public static void AddSkillInfoList(FlatBufferBuilder builder, VectorOffset skillInfoListOffset) { builder.AddOffset(9, skillInfoListOffset.Value, 0); }
  public static VectorOffset CreateSkillInfoListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSkillInfoListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillInfoListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillInfoListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSkillInfoListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffList(FlatBufferBuilder builder, VectorOffset buffListOffset) { builder.AddOffset(10, buffListOffset.Value, 0); }
  public static VectorOffset CreateBuffListVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffListVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffListVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddDamageList(FlatBufferBuilder builder, VectorOffset damageListOffset) { builder.AddOffset(11, damageListOffset.Value, 0); }
  public static VectorOffset CreateDamageListVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDamageListVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDamageListVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDamageListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDamageListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(12, iconOffset.Value, 0); }
  public static void AddEffectSkillPath(FlatBufferBuilder builder, StringOffset effectSkillPathOffset) { builder.AddOffset(13, effectSkillPathOffset.Value, 0); }
  public static void AddSortIndex(FlatBufferBuilder builder, int sortIndex) { builder.AddInt(14, sortIndex, 0); }
  public static void AddSkillDescribe(FlatBufferBuilder builder, StringOffset skillDescribeOffset) { builder.AddOffset(15, skillDescribeOffset.Value, 0); }
  public static void AddSkillResume(FlatBufferBuilder builder, StringOffset skillResumeOffset) { builder.AddOffset(16, skillResumeOffset.Value, 0); }
  public static void AddSkillTagList(FlatBufferBuilder builder, VectorOffset skillTagListOffset) { builder.AddOffset(17, skillTagListOffset.Value, 0); }
  public static VectorOffset CreateSkillTagListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSkillTagListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillTagListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillTagListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSkillTagListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSkillDetailNum(FlatBufferBuilder builder, VectorOffset skillDetailNumOffset) { builder.AddOffset(18, skillDetailNumOffset.Value, 0); }
  public static VectorOffset CreateSkillDetailNumVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSkillDetailNumVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillDetailNumVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillDetailNumVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSkillDetailNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSkillResumeNum(FlatBufferBuilder builder, VectorOffset skillResumeNumOffset) { builder.AddOffset(19, skillResumeNumOffset.Value, 0); }
  public static VectorOffset CreateSkillResumeNumVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSkillResumeNumVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillResumeNumVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillResumeNumVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSkillResumeNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMultiSkillDescribe(FlatBufferBuilder builder, StringOffset multiSkillDescribeOffset) { builder.AddOffset(20, multiSkillDescribeOffset.Value, 0); }
  public static void AddMultiSkillDetailNum(FlatBufferBuilder builder, VectorOffset multiSkillDetailNumOffset) { builder.AddOffset(21, multiSkillDetailNumOffset.Value, 0); }
  public static VectorOffset CreateMultiSkillDetailNumVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMultiSkillDetailNumVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMultiSkillDetailNumVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMultiSkillDetailNumVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMultiSkillDetailNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.Skill> EndSkill(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Skill>(o);
  }
  public SkillT UnPack() {
    var _o = new SkillT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillT _o) {
    _o.Id = this.Id;
    _o.SkillGroupId = this.SkillGroupId;
    _o.SkillType = this.SkillType;
    _o.UpgradeCondition = this.UpgradeCondition;
    _o.UpgradeSkillId = this.UpgradeSkillId;
    _o.SkillName = this.SkillName;
    _o.SkillLevelGroupId = this.SkillLevelGroupId;
    _o.LeftSkillEffect = this.LeftSkillEffect;
    _o.MaxSkillLevel = this.MaxSkillLevel;
    _o.SkillInfoList = new List<int>();
    for (var _j = 0; _j < this.SkillInfoListLength; ++_j) {_o.SkillInfoList.Add(this.SkillInfoList(_j));}
    _o.BuffList = new List<double>();
    for (var _j = 0; _j < this.BuffListLength; ++_j) {_o.BuffList.Add(this.BuffList(_j));}
    _o.DamageList = new List<double>();
    for (var _j = 0; _j < this.DamageListLength; ++_j) {_o.DamageList.Add(this.DamageList(_j));}
    _o.Icon = this.Icon;
    _o.EffectSkillPath = this.EffectSkillPath;
    _o.SortIndex = this.SortIndex;
    _o.SkillDescribe = this.SkillDescribe;
    _o.SkillResume = this.SkillResume;
    _o.SkillTagList = new List<int>();
    for (var _j = 0; _j < this.SkillTagListLength; ++_j) {_o.SkillTagList.Add(this.SkillTagList(_j));}
    _o.SkillDetailNum = new List<string>();
    for (var _j = 0; _j < this.SkillDetailNumLength; ++_j) {_o.SkillDetailNum.Add(this.SkillDetailNum(_j));}
    _o.SkillResumeNum = new List<string>();
    for (var _j = 0; _j < this.SkillResumeNumLength; ++_j) {_o.SkillResumeNum.Add(this.SkillResumeNum(_j));}
    _o.MultiSkillDescribe = this.MultiSkillDescribe;
    _o.MultiSkillDetailNum = new List<string>();
    for (var _j = 0; _j < this.MultiSkillDetailNumLength; ++_j) {_o.MultiSkillDetailNum.Add(this.MultiSkillDetailNum(_j));}
  }
  public static Offset<WWParser.Defs.Skill> Pack(FlatBufferBuilder builder, SkillT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Skill>);
    var _skill_name = _o.SkillName == null ? default(StringOffset) : builder.CreateString(_o.SkillName);
    var _skill_info_list = default(VectorOffset);
    if (_o.SkillInfoList != null) {
      var __skill_info_list = _o.SkillInfoList.ToArray();
      _skill_info_list = CreateSkillInfoListVector(builder, __skill_info_list);
    }
    var _buff_list = default(VectorOffset);
    if (_o.BuffList != null) {
      var __buff_list = _o.BuffList.ToArray();
      _buff_list = CreateBuffListVector(builder, __buff_list);
    }
    var _damage_list = default(VectorOffset);
    if (_o.DamageList != null) {
      var __damage_list = _o.DamageList.ToArray();
      _damage_list = CreateDamageListVector(builder, __damage_list);
    }
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _effect_skill_path = _o.EffectSkillPath == null ? default(StringOffset) : builder.CreateString(_o.EffectSkillPath);
    var _skill_describe = _o.SkillDescribe == null ? default(StringOffset) : builder.CreateString(_o.SkillDescribe);
    var _skill_resume = _o.SkillResume == null ? default(StringOffset) : builder.CreateString(_o.SkillResume);
    var _skill_tag_list = default(VectorOffset);
    if (_o.SkillTagList != null) {
      var __skill_tag_list = _o.SkillTagList.ToArray();
      _skill_tag_list = CreateSkillTagListVector(builder, __skill_tag_list);
    }
    var _skill_detail_num = default(VectorOffset);
    if (_o.SkillDetailNum != null) {
      var __skill_detail_num = new StringOffset[_o.SkillDetailNum.Count];
      for (var _j = 0; _j < __skill_detail_num.Length; ++_j) { __skill_detail_num[_j] = builder.CreateString(_o.SkillDetailNum[_j]); }
      _skill_detail_num = CreateSkillDetailNumVector(builder, __skill_detail_num);
    }
    var _skill_resume_num = default(VectorOffset);
    if (_o.SkillResumeNum != null) {
      var __skill_resume_num = new StringOffset[_o.SkillResumeNum.Count];
      for (var _j = 0; _j < __skill_resume_num.Length; ++_j) { __skill_resume_num[_j] = builder.CreateString(_o.SkillResumeNum[_j]); }
      _skill_resume_num = CreateSkillResumeNumVector(builder, __skill_resume_num);
    }
    var _multi_skill_describe = _o.MultiSkillDescribe == null ? default(StringOffset) : builder.CreateString(_o.MultiSkillDescribe);
    var _multi_skill_detail_num = default(VectorOffset);
    if (_o.MultiSkillDetailNum != null) {
      var __multi_skill_detail_num = new StringOffset[_o.MultiSkillDetailNum.Count];
      for (var _j = 0; _j < __multi_skill_detail_num.Length; ++_j) { __multi_skill_detail_num[_j] = builder.CreateString(_o.MultiSkillDetailNum[_j]); }
      _multi_skill_detail_num = CreateMultiSkillDetailNumVector(builder, __multi_skill_detail_num);
    }
    return CreateSkill(
      builder,
      _o.Id,
      _o.SkillGroupId,
      _o.SkillType,
      _o.UpgradeCondition,
      _o.UpgradeSkillId,
      _skill_name,
      _o.SkillLevelGroupId,
      _o.LeftSkillEffect,
      _o.MaxSkillLevel,
      _skill_info_list,
      _buff_list,
      _damage_list,
      _icon,
      _effect_skill_path,
      _o.SortIndex,
      _skill_describe,
      _skill_resume,
      _skill_tag_list,
      _skill_detail_num,
      _skill_resume_num,
      _multi_skill_describe,
      _multi_skill_detail_num);
  }
}

public class SkillT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_group_id")]
  public int SkillGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_type")]
  public int SkillType { get; set; }
  [Newtonsoft.Json.JsonProperty("upgrade_condition")]
  public int UpgradeCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("upgrade_skill_id")]
  public int UpgradeSkillId { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_name")]
  public string SkillName { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_level_group_id")]
  public int SkillLevelGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("left_skill_effect")]
  public int LeftSkillEffect { get; set; }
  [Newtonsoft.Json.JsonProperty("max_skill_level")]
  public int MaxSkillLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_info_list")]
  public List<int> SkillInfoList { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_list")]
  public List<double> BuffList { get; set; }
  [Newtonsoft.Json.JsonProperty("damage_list")]
  public List<double> DamageList { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("effect_skill_path")]
  public string EffectSkillPath { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_index")]
  public int SortIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_describe")]
  public string SkillDescribe { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_resume")]
  public string SkillResume { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_tag_list")]
  public List<int> SkillTagList { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_detail_num")]
  public List<string> SkillDetailNum { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_resume_num")]
  public List<string> SkillResumeNum { get; set; }
  [Newtonsoft.Json.JsonProperty("multi_skill_describe")]
  public string MultiSkillDescribe { get; set; }
  [Newtonsoft.Json.JsonProperty("multi_skill_detail_num")]
  public List<string> MultiSkillDetailNum { get; set; }

  public SkillT() {
    this.Id = 0;
    this.SkillGroupId = 0;
    this.SkillType = 0;
    this.UpgradeCondition = 0;
    this.UpgradeSkillId = 0;
    this.SkillName = null;
    this.SkillLevelGroupId = 0;
    this.LeftSkillEffect = 0;
    this.MaxSkillLevel = 0;
    this.SkillInfoList = null;
    this.BuffList = null;
    this.DamageList = null;
    this.Icon = null;
    this.EffectSkillPath = null;
    this.SortIndex = 0;
    this.SkillDescribe = null;
    this.SkillResume = null;
    this.SkillTagList = null;
    this.SkillDetailNum = null;
    this.SkillResumeNum = null;
    this.MultiSkillDescribe = null;
    this.MultiSkillDetailNum = null;
  }
}


static public class SkillVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SkillGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*SkillType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*UpgradeCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*UpgradeSkillId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*SkillName*/, false)
      && verifier.VerifyField(tablePos, 16 /*SkillLevelGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*LeftSkillEffect*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*MaxSkillLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*SkillInfoList*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 24 /*BuffList*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*DamageList*/, 8 /*double*/, false)
      && verifier.VerifyString(tablePos, 28 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 30 /*EffectSkillPath*/, false)
      && verifier.VerifyField(tablePos, 32 /*SortIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 34 /*SkillDescribe*/, false)
      && verifier.VerifyString(tablePos, 36 /*SkillResume*/, false)
      && verifier.VerifyVectorOfData(tablePos, 38 /*SkillTagList*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 40 /*SkillDetailNum*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 42 /*SkillResumeNum*/, false)
      && verifier.VerifyString(tablePos, 44 /*MultiSkillDescribe*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 46 /*MultiSkillDetailNum*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
