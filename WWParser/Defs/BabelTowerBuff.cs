// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BabelTowerBuff : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BabelTowerBuff GetRootAsBabelTowerBuff(ByteBuffer _bb) { return GetRootAsBabelTowerBuff(_bb, new BabelTowerBuff()); }
  public static BabelTowerBuff GetRootAsBabelTowerBuff(ByteBuffer _bb, BabelTowerBuff obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BabelTowerBuff __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Star { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DifficultPreLevel(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DifficultPreLevelLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDifficultPreLevelBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetDifficultPreLevelBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetDifficultPreLevelArray() { return __p.__vector_as_array<int>(8); }
  public int DifficultLimitTime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Texture { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextureBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTextureBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTextureArray() { return __p.__vector_as_array<byte>(12); }
  public string NameText { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameTextBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNameTextBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNameTextArray() { return __p.__vector_as_array<byte>(14); }
  public string DesText { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDesTextBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetDesTextBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetDesTextArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<WWParser.Defs.BabelTowerBuff> CreateBabelTowerBuff(FlatBufferBuilder builder,
      int id = 0,
      int star = 0,
      VectorOffset difficult_pre_levelOffset = default(VectorOffset),
      int difficult_limit_time = 0,
      StringOffset textureOffset = default(StringOffset),
      StringOffset name_textOffset = default(StringOffset),
      StringOffset des_textOffset = default(StringOffset)) {
    builder.StartTable(7);
    BabelTowerBuff.AddDesText(builder, des_textOffset);
    BabelTowerBuff.AddNameText(builder, name_textOffset);
    BabelTowerBuff.AddTexture(builder, textureOffset);
    BabelTowerBuff.AddDifficultLimitTime(builder, difficult_limit_time);
    BabelTowerBuff.AddDifficultPreLevel(builder, difficult_pre_levelOffset);
    BabelTowerBuff.AddStar(builder, star);
    BabelTowerBuff.AddId(builder, id);
    return BabelTowerBuff.EndBabelTowerBuff(builder);
  }

  public static void StartBabelTowerBuff(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddStar(FlatBufferBuilder builder, int star) { builder.AddInt(1, star, 0); }
  public static void AddDifficultPreLevel(FlatBufferBuilder builder, VectorOffset difficultPreLevelOffset) { builder.AddOffset(2, difficultPreLevelOffset.Value, 0); }
  public static VectorOffset CreateDifficultPreLevelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDifficultPreLevelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDifficultPreLevelVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDifficultPreLevelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDifficultPreLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDifficultLimitTime(FlatBufferBuilder builder, int difficultLimitTime) { builder.AddInt(3, difficultLimitTime, 0); }
  public static void AddTexture(FlatBufferBuilder builder, StringOffset textureOffset) { builder.AddOffset(4, textureOffset.Value, 0); }
  public static void AddNameText(FlatBufferBuilder builder, StringOffset nameTextOffset) { builder.AddOffset(5, nameTextOffset.Value, 0); }
  public static void AddDesText(FlatBufferBuilder builder, StringOffset desTextOffset) { builder.AddOffset(6, desTextOffset.Value, 0); }
  public static Offset<WWParser.Defs.BabelTowerBuff> EndBabelTowerBuff(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BabelTowerBuff>(o);
  }
  public BabelTowerBuffT UnPack() {
    var _o = new BabelTowerBuffT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BabelTowerBuffT _o) {
    _o.Id = this.Id;
    _o.Star = this.Star;
    _o.DifficultPreLevel = new List<int>();
    for (var _j = 0; _j < this.DifficultPreLevelLength; ++_j) {_o.DifficultPreLevel.Add(this.DifficultPreLevel(_j));}
    _o.DifficultLimitTime = this.DifficultLimitTime;
    _o.Texture = this.Texture;
    _o.NameText = this.NameText;
    _o.DesText = this.DesText;
  }
  public static Offset<WWParser.Defs.BabelTowerBuff> Pack(FlatBufferBuilder builder, BabelTowerBuffT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BabelTowerBuff>);
    var _difficult_pre_level = default(VectorOffset);
    if (_o.DifficultPreLevel != null) {
      var __difficult_pre_level = _o.DifficultPreLevel.ToArray();
      _difficult_pre_level = CreateDifficultPreLevelVector(builder, __difficult_pre_level);
    }
    var _texture = _o.Texture == null ? default(StringOffset) : builder.CreateString(_o.Texture);
    var _name_text = _o.NameText == null ? default(StringOffset) : builder.CreateString(_o.NameText);
    var _des_text = _o.DesText == null ? default(StringOffset) : builder.CreateString(_o.DesText);
    return CreateBabelTowerBuff(
      builder,
      _o.Id,
      _o.Star,
      _difficult_pre_level,
      _o.DifficultLimitTime,
      _texture,
      _name_text,
      _des_text);
  }
}

public class BabelTowerBuffT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("star")]
  public int Star { get; set; }
  [Newtonsoft.Json.JsonProperty("difficult_pre_level")]
  public List<int> DifficultPreLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("difficult_limit_time")]
  public int DifficultLimitTime { get; set; }
  [Newtonsoft.Json.JsonProperty("texture")]
  public string Texture { get; set; }
  [Newtonsoft.Json.JsonProperty("name_text")]
  public string NameText { get; set; }
  [Newtonsoft.Json.JsonProperty("des_text")]
  public string DesText { get; set; }

  public BabelTowerBuffT() {
    this.Id = 0;
    this.Star = 0;
    this.DifficultPreLevel = null;
    this.DifficultLimitTime = 0;
    this.Texture = null;
    this.NameText = null;
    this.DesText = null;
  }
}


static public class BabelTowerBuffVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Star*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*DifficultPreLevel*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 10 /*DifficultLimitTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*Texture*/, false)
      && verifier.VerifyString(tablePos, 14 /*NameText*/, false)
      && verifier.VerifyString(tablePos, 16 /*DesText*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
