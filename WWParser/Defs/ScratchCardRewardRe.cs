// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ScratchCardRewardRe : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ScratchCardRewardRe GetRootAsScratchCardRewardRe(ByteBuffer _bb) { return GetRootAsScratchCardRewardRe(_bb, new ScratchCardRewardRe()); }
  public static ScratchCardRewardRe GetRootAsScratchCardRewardRe(ByteBuffer _bb, ScratchCardRewardRe obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScratchCardRewardRe __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RoundId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsSpecial { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public WWParser.Defs.IntPair? RewardItem { get { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.IntPair?)(new WWParser.Defs.IntPair()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<WWParser.Defs.ScratchCardRewardRe> CreateScratchCardRewardRe(FlatBufferBuilder builder,
      int id = 0,
      int round_id = 0,
      bool is_special = false,
      Offset<WWParser.Defs.IntPair> reward_itemOffset = default(Offset<WWParser.Defs.IntPair>)) {
    builder.StartTable(4);
    ScratchCardRewardRe.AddRewardItem(builder, reward_itemOffset);
    ScratchCardRewardRe.AddRoundId(builder, round_id);
    ScratchCardRewardRe.AddId(builder, id);
    ScratchCardRewardRe.AddIsSpecial(builder, is_special);
    return ScratchCardRewardRe.EndScratchCardRewardRe(builder);
  }

  public static void StartScratchCardRewardRe(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddRoundId(FlatBufferBuilder builder, int roundId) { builder.AddInt(1, roundId, 0); }
  public static void AddIsSpecial(FlatBufferBuilder builder, bool isSpecial) { builder.AddBool(2, isSpecial, false); }
  public static void AddRewardItem(FlatBufferBuilder builder, Offset<WWParser.Defs.IntPair> rewardItemOffset) { builder.AddOffset(3, rewardItemOffset.Value, 0); }
  public static Offset<WWParser.Defs.ScratchCardRewardRe> EndScratchCardRewardRe(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ScratchCardRewardRe>(o);
  }
  public ScratchCardRewardReT UnPack() {
    var _o = new ScratchCardRewardReT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ScratchCardRewardReT _o) {
    _o.Id = this.Id;
    _o.RoundId = this.RoundId;
    _o.IsSpecial = this.IsSpecial;
    _o.RewardItem = this.RewardItem.HasValue ? this.RewardItem.Value.UnPack() : null;
  }
  public static Offset<WWParser.Defs.ScratchCardRewardRe> Pack(FlatBufferBuilder builder, ScratchCardRewardReT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ScratchCardRewardRe>);
    var _reward_item = _o.RewardItem == null ? default(Offset<WWParser.Defs.IntPair>) : WWParser.Defs.IntPair.Pack(builder, _o.RewardItem);
    return CreateScratchCardRewardRe(
      builder,
      _o.Id,
      _o.RoundId,
      _o.IsSpecial,
      _reward_item);
  }
}

public class ScratchCardRewardReT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("round_id")]
  public int RoundId { get; set; }
  [Newtonsoft.Json.JsonProperty("is_special")]
  public bool IsSpecial { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_item")]
  public WWParser.Defs.IntPairT RewardItem { get; set; }

  public ScratchCardRewardReT() {
    this.Id = 0;
    this.RoundId = 0;
    this.IsSpecial = false;
    this.RewardItem = null;
  }
}


static public class ScratchCardRewardReVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*RoundId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*IsSpecial*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTable(tablePos, 10 /*RewardItem*/, WWParser.Defs.IntPairVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
