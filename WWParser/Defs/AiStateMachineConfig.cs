// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiStateMachineConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AiStateMachineConfig GetRootAsAiStateMachineConfig(ByteBuffer _bb) { return GetRootAsAiStateMachineConfig(_bb, new AiStateMachineConfig()); }
  public static AiStateMachineConfig GetRootAsAiStateMachineConfig(ByteBuffer _bb, AiStateMachineConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiStateMachineConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string StateMachineJson { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStateMachineJsonBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetStateMachineJsonBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetStateMachineJsonArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<WWParser.Defs.AiStateMachineConfig> CreateAiStateMachineConfig(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset state_machine_jsonOffset = default(StringOffset)) {
    builder.StartTable(2);
    AiStateMachineConfig.AddStateMachineJson(builder, state_machine_jsonOffset);
    AiStateMachineConfig.AddId(builder, idOffset);
    return AiStateMachineConfig.EndAiStateMachineConfig(builder);
  }

  public static void StartAiStateMachineConfig(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddStateMachineJson(FlatBufferBuilder builder, StringOffset stateMachineJsonOffset) { builder.AddOffset(1, stateMachineJsonOffset.Value, 0); }
  public static Offset<WWParser.Defs.AiStateMachineConfig> EndAiStateMachineConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AiStateMachineConfig>(o);
  }
  public AiStateMachineConfigT UnPack() {
    var _o = new AiStateMachineConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AiStateMachineConfigT _o) {
    _o.Id = this.Id;
    _o.StateMachineJson = this.StateMachineJson;
  }
  public static Offset<WWParser.Defs.AiStateMachineConfig> Pack(FlatBufferBuilder builder, AiStateMachineConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AiStateMachineConfig>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _state_machine_json = _o.StateMachineJson == null ? default(StringOffset) : builder.CreateString(_o.StateMachineJson);
    return CreateAiStateMachineConfig(
      builder,
      _id,
      _state_machine_json);
  }
}

public class AiStateMachineConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("state_machine_json")]
  public string StateMachineJson { get; set; }

  public AiStateMachineConfigT() {
    this.Id = null;
    this.StateMachineJson = null;
  }
}


static public class AiStateMachineConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*StateMachineJson*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
