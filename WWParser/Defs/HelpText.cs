// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct HelpText : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static HelpText GetRootAsHelpText(ByteBuffer _bb) { return GetRootAsHelpText(_bb, new HelpText()); }
  public static HelpText GetRootAsHelpText(ByteBuffer _bb, HelpText obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HelpText __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(8); }
  public string Picture { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPictureBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetPictureBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetPictureArray() { return __p.__vector_as_array<byte>(10); }
  public string Content { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetContentBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetContentArray() { return __p.__vector_as_array<byte>(12); }
  public int Type { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.HelpText> CreateHelpText(FlatBufferBuilder builder,
      int id = 0,
      int group_id = 0,
      StringOffset titleOffset = default(StringOffset),
      StringOffset pictureOffset = default(StringOffset),
      StringOffset contentOffset = default(StringOffset),
      int type = 0) {
    builder.StartTable(6);
    HelpText.AddType(builder, type);
    HelpText.AddContent(builder, contentOffset);
    HelpText.AddPicture(builder, pictureOffset);
    HelpText.AddTitle(builder, titleOffset);
    HelpText.AddGroupId(builder, group_id);
    HelpText.AddId(builder, id);
    return HelpText.EndHelpText(builder);
  }

  public static void StartHelpText(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, int groupId) { builder.AddInt(1, groupId, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(2, titleOffset.Value, 0); }
  public static void AddPicture(FlatBufferBuilder builder, StringOffset pictureOffset) { builder.AddOffset(3, pictureOffset.Value, 0); }
  public static void AddContent(FlatBufferBuilder builder, StringOffset contentOffset) { builder.AddOffset(4, contentOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(5, type, 0); }
  public static Offset<WWParser.Defs.HelpText> EndHelpText(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.HelpText>(o);
  }
  public HelpTextT UnPack() {
    var _o = new HelpTextT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HelpTextT _o) {
    _o.Id = this.Id;
    _o.GroupId = this.GroupId;
    _o.Title = this.Title;
    _o.Picture = this.Picture;
    _o.Content = this.Content;
    _o.Type = this.Type;
  }
  public static Offset<WWParser.Defs.HelpText> Pack(FlatBufferBuilder builder, HelpTextT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.HelpText>);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _picture = _o.Picture == null ? default(StringOffset) : builder.CreateString(_o.Picture);
    var _content = _o.Content == null ? default(StringOffset) : builder.CreateString(_o.Content);
    return CreateHelpText(
      builder,
      _o.Id,
      _o.GroupId,
      _title,
      _picture,
      _content,
      _o.Type);
  }
}

public class HelpTextT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("group_id")]
  public int GroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("picture")]
  public string Picture { get; set; }
  [Newtonsoft.Json.JsonProperty("content")]
  public string Content { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }

  public HelpTextT() {
    this.Id = 0;
    this.GroupId = 0;
    this.Title = null;
    this.Picture = null;
    this.Content = null;
    this.Type = 0;
  }
}


static public class HelpTextVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*GroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Title*/, false)
      && verifier.VerifyString(tablePos, 10 /*Picture*/, false)
      && verifier.VerifyString(tablePos, 12 /*Content*/, false)
      && verifier.VerifyField(tablePos, 14 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
