// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ToughCalcRatio : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ToughCalcRatio GetRootAsToughCalcRatio(ByteBuffer _bb) { return GetRootAsToughCalcRatio(_bb, new ToughCalcRatio()); }
  public static ToughCalcRatio GetRootAsToughCalcRatio(ByteBuffer _bb, ToughCalcRatio obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ToughCalcRatio __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public int RatioNormal { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RatioSpecial { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.ToughCalcRatio> CreateToughCalcRatio(FlatBufferBuilder builder,
      double id = 0.0,
      int ratio_normal = 0,
      int ratio_special = 0) {
    builder.StartTable(3);
    ToughCalcRatio.AddId(builder, id);
    ToughCalcRatio.AddRatioSpecial(builder, ratio_special);
    ToughCalcRatio.AddRatioNormal(builder, ratio_normal);
    return ToughCalcRatio.EndToughCalcRatio(builder);
  }

  public static void StartToughCalcRatio(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, double id) { builder.AddDouble(0, id, 0.0); }
  public static void AddRatioNormal(FlatBufferBuilder builder, int ratioNormal) { builder.AddInt(1, ratioNormal, 0); }
  public static void AddRatioSpecial(FlatBufferBuilder builder, int ratioSpecial) { builder.AddInt(2, ratioSpecial, 0); }
  public static Offset<WWParser.Defs.ToughCalcRatio> EndToughCalcRatio(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ToughCalcRatio>(o);
  }
  public ToughCalcRatioT UnPack() {
    var _o = new ToughCalcRatioT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ToughCalcRatioT _o) {
    _o.Id = this.Id;
    _o.RatioNormal = this.RatioNormal;
    _o.RatioSpecial = this.RatioSpecial;
  }
  public static Offset<WWParser.Defs.ToughCalcRatio> Pack(FlatBufferBuilder builder, ToughCalcRatioT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ToughCalcRatio>);
    return CreateToughCalcRatio(
      builder,
      _o.Id,
      _o.RatioNormal,
      _o.RatioSpecial);
  }
}

public class ToughCalcRatioT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public double Id { get; set; }
  [Newtonsoft.Json.JsonProperty("ratio_normal")]
  public int RatioNormal { get; set; }
  [Newtonsoft.Json.JsonProperty("ratio_special")]
  public int RatioSpecial { get; set; }

  public ToughCalcRatioT() {
    this.Id = 0.0;
    this.RatioNormal = 0;
    this.RatioSpecial = 0;
  }
}


static public class ToughCalcRatioVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*RatioNormal*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*RatioSpecial*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
