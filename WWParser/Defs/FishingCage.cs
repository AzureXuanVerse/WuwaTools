// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FishingCage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FishingCage GetRootAsFishingCage(ByteBuffer _bb) { return GetRootAsFishingCage(_bb, new FishingCage()); }
  public static FishingCage GetRootAsFishingCage(ByteBuffer _bb, FishingCage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FishingCage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EntityConfigId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SceneConfigId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)8; } }
  public int UnlockCondition { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CountLimit { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RefreshTime { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int OutputGroupId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.FishingCage> CreateFishingCage(FlatBufferBuilder builder,
      int id = 0,
      int entity_config_id = 0,
      int scene_config_id = 8,
      int unlock_condition = 0,
      int count_limit = 0,
      int refresh_time = 0,
      int output_group_id = 0) {
    builder.StartTable(7);
    FishingCage.AddOutputGroupId(builder, output_group_id);
    FishingCage.AddRefreshTime(builder, refresh_time);
    FishingCage.AddCountLimit(builder, count_limit);
    FishingCage.AddUnlockCondition(builder, unlock_condition);
    FishingCage.AddSceneConfigId(builder, scene_config_id);
    FishingCage.AddEntityConfigId(builder, entity_config_id);
    FishingCage.AddId(builder, id);
    return FishingCage.EndFishingCage(builder);
  }

  public static void StartFishingCage(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddEntityConfigId(FlatBufferBuilder builder, int entityConfigId) { builder.AddInt(1, entityConfigId, 0); }
  public static void AddSceneConfigId(FlatBufferBuilder builder, int sceneConfigId) { builder.AddInt(2, sceneConfigId, 8); }
  public static void AddUnlockCondition(FlatBufferBuilder builder, int unlockCondition) { builder.AddInt(3, unlockCondition, 0); }
  public static void AddCountLimit(FlatBufferBuilder builder, int countLimit) { builder.AddInt(4, countLimit, 0); }
  public static void AddRefreshTime(FlatBufferBuilder builder, int refreshTime) { builder.AddInt(5, refreshTime, 0); }
  public static void AddOutputGroupId(FlatBufferBuilder builder, int outputGroupId) { builder.AddInt(6, outputGroupId, 0); }
  public static Offset<WWParser.Defs.FishingCage> EndFishingCage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FishingCage>(o);
  }
  public FishingCageT UnPack() {
    var _o = new FishingCageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FishingCageT _o) {
    _o.Id = this.Id;
    _o.EntityConfigId = this.EntityConfigId;
    _o.SceneConfigId = this.SceneConfigId;
    _o.UnlockCondition = this.UnlockCondition;
    _o.CountLimit = this.CountLimit;
    _o.RefreshTime = this.RefreshTime;
    _o.OutputGroupId = this.OutputGroupId;
  }
  public static Offset<WWParser.Defs.FishingCage> Pack(FlatBufferBuilder builder, FishingCageT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FishingCage>);
    return CreateFishingCage(
      builder,
      _o.Id,
      _o.EntityConfigId,
      _o.SceneConfigId,
      _o.UnlockCondition,
      _o.CountLimit,
      _o.RefreshTime,
      _o.OutputGroupId);
  }
}

public class FishingCageT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("entity_config_id")]
  public int EntityConfigId { get; set; }
  [Newtonsoft.Json.JsonProperty("scene_config_id")]
  public int SceneConfigId { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_condition")]
  public int UnlockCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("count_limit")]
  public int CountLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("refresh_time")]
  public int RefreshTime { get; set; }
  [Newtonsoft.Json.JsonProperty("output_group_id")]
  public int OutputGroupId { get; set; }

  public FishingCageT() {
    this.Id = 0;
    this.EntityConfigId = 0;
    this.SceneConfigId = 8;
    this.UnlockCondition = 0;
    this.CountLimit = 0;
    this.RefreshTime = 0;
    this.OutputGroupId = 0;
  }
}


static public class FishingCageVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*EntityConfigId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*SceneConfigId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*UnlockCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*CountLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*RefreshTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*OutputGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
