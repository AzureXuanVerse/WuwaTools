// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PreheatQuestText : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PreheatQuestText GetRootAsPreheatQuestText(ByteBuffer _bb) { return GetRootAsPreheatQuestText(_bb, new PreheatQuestText()); }
  public static PreheatQuestText GetRootAsPreheatQuestText(ByteBuffer _bb, PreheatQuestText obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PreheatQuestText __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MainTexPath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMainTexPathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetMainTexPathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetMainTexPathArray() { return __p.__vector_as_array<byte>(6); }
  public int CrestIndex { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ThemeBefore { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetThemeBeforeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetThemeBeforeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetThemeBeforeArray() { return __p.__vector_as_array<byte>(10); }
  public string ThemeAfter { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetThemeAfterBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetThemeAfterBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetThemeAfterArray() { return __p.__vector_as_array<byte>(12); }
  public string QuestContent { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQuestContentBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetQuestContentBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetQuestContentArray() { return __p.__vector_as_array<byte>(14); }
  public string DisplayTex { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDisplayTexBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetDisplayTexBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetDisplayTexArray() { return __p.__vector_as_array<byte>(16); }
  public string ShareTex { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShareTexBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetShareTexBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetShareTexArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<WWParser.Defs.PreheatQuestText> CreatePreheatQuestText(FlatBufferBuilder builder,
      int id = 0,
      StringOffset main_tex_pathOffset = default(StringOffset),
      int crest_index = 0,
      StringOffset theme_beforeOffset = default(StringOffset),
      StringOffset theme_afterOffset = default(StringOffset),
      StringOffset quest_contentOffset = default(StringOffset),
      StringOffset display_texOffset = default(StringOffset),
      StringOffset share_texOffset = default(StringOffset)) {
    builder.StartTable(8);
    PreheatQuestText.AddShareTex(builder, share_texOffset);
    PreheatQuestText.AddDisplayTex(builder, display_texOffset);
    PreheatQuestText.AddQuestContent(builder, quest_contentOffset);
    PreheatQuestText.AddThemeAfter(builder, theme_afterOffset);
    PreheatQuestText.AddThemeBefore(builder, theme_beforeOffset);
    PreheatQuestText.AddCrestIndex(builder, crest_index);
    PreheatQuestText.AddMainTexPath(builder, main_tex_pathOffset);
    PreheatQuestText.AddId(builder, id);
    return PreheatQuestText.EndPreheatQuestText(builder);
  }

  public static void StartPreheatQuestText(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMainTexPath(FlatBufferBuilder builder, StringOffset mainTexPathOffset) { builder.AddOffset(1, mainTexPathOffset.Value, 0); }
  public static void AddCrestIndex(FlatBufferBuilder builder, int crestIndex) { builder.AddInt(2, crestIndex, 0); }
  public static void AddThemeBefore(FlatBufferBuilder builder, StringOffset themeBeforeOffset) { builder.AddOffset(3, themeBeforeOffset.Value, 0); }
  public static void AddThemeAfter(FlatBufferBuilder builder, StringOffset themeAfterOffset) { builder.AddOffset(4, themeAfterOffset.Value, 0); }
  public static void AddQuestContent(FlatBufferBuilder builder, StringOffset questContentOffset) { builder.AddOffset(5, questContentOffset.Value, 0); }
  public static void AddDisplayTex(FlatBufferBuilder builder, StringOffset displayTexOffset) { builder.AddOffset(6, displayTexOffset.Value, 0); }
  public static void AddShareTex(FlatBufferBuilder builder, StringOffset shareTexOffset) { builder.AddOffset(7, shareTexOffset.Value, 0); }
  public static Offset<WWParser.Defs.PreheatQuestText> EndPreheatQuestText(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PreheatQuestText>(o);
  }
  public PreheatQuestTextT UnPack() {
    var _o = new PreheatQuestTextT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PreheatQuestTextT _o) {
    _o.Id = this.Id;
    _o.MainTexPath = this.MainTexPath;
    _o.CrestIndex = this.CrestIndex;
    _o.ThemeBefore = this.ThemeBefore;
    _o.ThemeAfter = this.ThemeAfter;
    _o.QuestContent = this.QuestContent;
    _o.DisplayTex = this.DisplayTex;
    _o.ShareTex = this.ShareTex;
  }
  public static Offset<WWParser.Defs.PreheatQuestText> Pack(FlatBufferBuilder builder, PreheatQuestTextT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PreheatQuestText>);
    var _main_tex_path = _o.MainTexPath == null ? default(StringOffset) : builder.CreateString(_o.MainTexPath);
    var _theme_before = _o.ThemeBefore == null ? default(StringOffset) : builder.CreateString(_o.ThemeBefore);
    var _theme_after = _o.ThemeAfter == null ? default(StringOffset) : builder.CreateString(_o.ThemeAfter);
    var _quest_content = _o.QuestContent == null ? default(StringOffset) : builder.CreateString(_o.QuestContent);
    var _display_tex = _o.DisplayTex == null ? default(StringOffset) : builder.CreateString(_o.DisplayTex);
    var _share_tex = _o.ShareTex == null ? default(StringOffset) : builder.CreateString(_o.ShareTex);
    return CreatePreheatQuestText(
      builder,
      _o.Id,
      _main_tex_path,
      _o.CrestIndex,
      _theme_before,
      _theme_after,
      _quest_content,
      _display_tex,
      _share_tex);
  }
}

public class PreheatQuestTextT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("main_tex_path")]
  public string MainTexPath { get; set; }
  [Newtonsoft.Json.JsonProperty("crest_index")]
  public int CrestIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("theme_before")]
  public string ThemeBefore { get; set; }
  [Newtonsoft.Json.JsonProperty("theme_after")]
  public string ThemeAfter { get; set; }
  [Newtonsoft.Json.JsonProperty("quest_content")]
  public string QuestContent { get; set; }
  [Newtonsoft.Json.JsonProperty("display_tex")]
  public string DisplayTex { get; set; }
  [Newtonsoft.Json.JsonProperty("share_tex")]
  public string ShareTex { get; set; }

  public PreheatQuestTextT() {
    this.Id = 0;
    this.MainTexPath = null;
    this.CrestIndex = 0;
    this.ThemeBefore = null;
    this.ThemeAfter = null;
    this.QuestContent = null;
    this.DisplayTex = null;
    this.ShareTex = null;
  }
}


static public class PreheatQuestTextVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*MainTexPath*/, false)
      && verifier.VerifyField(tablePos, 8 /*CrestIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*ThemeBefore*/, false)
      && verifier.VerifyString(tablePos, 12 /*ThemeAfter*/, false)
      && verifier.VerifyString(tablePos, 14 /*QuestContent*/, false)
      && verifier.VerifyString(tablePos, 16 /*DisplayTex*/, false)
      && verifier.VerifyString(tablePos, 18 /*ShareTex*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
