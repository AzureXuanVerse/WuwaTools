// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueResEventStep : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueResEventStep GetRootAsRogueResEventStep(ByteBuffer _bb) { return GetRootAsRogueResEventStep(_bb, new RogueResEventStep()); }
  public static RogueResEventStep GetRootAsRogueResEventStep(ByteBuffer _bb, RogueResEventStep obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueResEventStep __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TitleKey { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleKeyBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTitleKeyBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTitleKeyArray() { return __p.__vector_as_array<byte>(8); }
  public string TagColor { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTagColorBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTagColorBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTagColorArray() { return __p.__vector_as_array<byte>(10); }
  public string TextKey { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextKeyBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTextKeyBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTextKeyArray() { return __p.__vector_as_array<byte>(12); }
  public string Icon { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(14); }
  public int ProgressType { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ProcessText { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProcessTextBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetProcessTextBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetProcessTextArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<WWParser.Defs.RogueResEventStep> CreateRogueResEventStep(FlatBufferBuilder builder,
      int id = 0,
      int type = 0,
      StringOffset title_keyOffset = default(StringOffset),
      StringOffset tag_colorOffset = default(StringOffset),
      StringOffset text_keyOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      int progress_type = 0,
      StringOffset process_textOffset = default(StringOffset)) {
    builder.StartTable(8);
    RogueResEventStep.AddProcessText(builder, process_textOffset);
    RogueResEventStep.AddProgressType(builder, progress_type);
    RogueResEventStep.AddIcon(builder, iconOffset);
    RogueResEventStep.AddTextKey(builder, text_keyOffset);
    RogueResEventStep.AddTagColor(builder, tag_colorOffset);
    RogueResEventStep.AddTitleKey(builder, title_keyOffset);
    RogueResEventStep.AddType(builder, type);
    RogueResEventStep.AddId(builder, id);
    return RogueResEventStep.EndRogueResEventStep(builder);
  }

  public static void StartRogueResEventStep(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(1, type, 0); }
  public static void AddTitleKey(FlatBufferBuilder builder, StringOffset titleKeyOffset) { builder.AddOffset(2, titleKeyOffset.Value, 0); }
  public static void AddTagColor(FlatBufferBuilder builder, StringOffset tagColorOffset) { builder.AddOffset(3, tagColorOffset.Value, 0); }
  public static void AddTextKey(FlatBufferBuilder builder, StringOffset textKeyOffset) { builder.AddOffset(4, textKeyOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(5, iconOffset.Value, 0); }
  public static void AddProgressType(FlatBufferBuilder builder, int progressType) { builder.AddInt(6, progressType, 0); }
  public static void AddProcessText(FlatBufferBuilder builder, StringOffset processTextOffset) { builder.AddOffset(7, processTextOffset.Value, 0); }
  public static Offset<WWParser.Defs.RogueResEventStep> EndRogueResEventStep(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueResEventStep>(o);
  }
  public RogueResEventStepT UnPack() {
    var _o = new RogueResEventStepT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueResEventStepT _o) {
    _o.Id = this.Id;
    _o.Type = this.Type;
    _o.TitleKey = this.TitleKey;
    _o.TagColor = this.TagColor;
    _o.TextKey = this.TextKey;
    _o.Icon = this.Icon;
    _o.ProgressType = this.ProgressType;
    _o.ProcessText = this.ProcessText;
  }
  public static Offset<WWParser.Defs.RogueResEventStep> Pack(FlatBufferBuilder builder, RogueResEventStepT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueResEventStep>);
    var _title_key = _o.TitleKey == null ? default(StringOffset) : builder.CreateString(_o.TitleKey);
    var _tag_color = _o.TagColor == null ? default(StringOffset) : builder.CreateString(_o.TagColor);
    var _text_key = _o.TextKey == null ? default(StringOffset) : builder.CreateString(_o.TextKey);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _process_text = _o.ProcessText == null ? default(StringOffset) : builder.CreateString(_o.ProcessText);
    return CreateRogueResEventStep(
      builder,
      _o.Id,
      _o.Type,
      _title_key,
      _tag_color,
      _text_key,
      _icon,
      _o.ProgressType,
      _process_text);
  }
}

public class RogueResEventStepT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public int Type { get; set; }
  [Newtonsoft.Json.JsonProperty("title_key")]
  public string TitleKey { get; set; }
  [Newtonsoft.Json.JsonProperty("tag_color")]
  public string TagColor { get; set; }
  [Newtonsoft.Json.JsonProperty("text_key")]
  public string TextKey { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("progress_type")]
  public int ProgressType { get; set; }
  [Newtonsoft.Json.JsonProperty("process_text")]
  public string ProcessText { get; set; }

  public RogueResEventStepT() {
    this.Id = 0;
    this.Type = 0;
    this.TitleKey = null;
    this.TagColor = null;
    this.TextKey = null;
    this.Icon = null;
    this.ProgressType = 0;
    this.ProcessText = null;
  }
}


static public class RogueResEventStepVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*TitleKey*/, false)
      && verifier.VerifyString(tablePos, 10 /*TagColor*/, false)
      && verifier.VerifyString(tablePos, 12 /*TextKey*/, false)
      && verifier.VerifyString(tablePos, 14 /*Icon*/, false)
      && verifier.VerifyField(tablePos, 16 /*ProgressType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*ProcessText*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
