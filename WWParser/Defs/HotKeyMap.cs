// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct HotKeyMap : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static HotKeyMap GetRootAsHotKeyMap(ByteBuffer _bb) { return GetRootAsHotKeyMap(_bb, new HotKeyMap()); }
  public static HotKeyMap GetRootAsHotKeyMap(ByteBuffer _bb, HotKeyMap obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HotKeyMap __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ActionName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActionNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetActionNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetActionNameArray() { return __p.__vector_as_array<byte>(6); }
  public string AxisName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAxisNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAxisNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAxisNameArray() { return __p.__vector_as_array<byte>(8); }
  public int AxisDirection { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TextId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTextIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTextIdArray() { return __p.__vector_as_array<byte>(12); }
  public string Type { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(14); }
  public int LongPressTime { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ReleaseFailureTime { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BindButtonTag { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBindButtonTagBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetBindButtonTagBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetBindButtonTagArray() { return __p.__vector_as_array<byte>(20); }
  public int ApplicableType { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsOccupancyFightInput { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.HotKeyMap> CreateHotKeyMap(FlatBufferBuilder builder,
      int id = 0,
      StringOffset action_nameOffset = default(StringOffset),
      StringOffset axis_nameOffset = default(StringOffset),
      int axis_direction = 0,
      StringOffset text_idOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      int long_press_time = 0,
      int release_failure_time = 0,
      StringOffset bind_button_tagOffset = default(StringOffset),
      int applicable_type = 0,
      bool is_occupancy_fight_input = false) {
    builder.StartTable(11);
    HotKeyMap.AddApplicableType(builder, applicable_type);
    HotKeyMap.AddBindButtonTag(builder, bind_button_tagOffset);
    HotKeyMap.AddReleaseFailureTime(builder, release_failure_time);
    HotKeyMap.AddLongPressTime(builder, long_press_time);
    HotKeyMap.AddType(builder, typeOffset);
    HotKeyMap.AddTextId(builder, text_idOffset);
    HotKeyMap.AddAxisDirection(builder, axis_direction);
    HotKeyMap.AddAxisName(builder, axis_nameOffset);
    HotKeyMap.AddActionName(builder, action_nameOffset);
    HotKeyMap.AddId(builder, id);
    HotKeyMap.AddIsOccupancyFightInput(builder, is_occupancy_fight_input);
    return HotKeyMap.EndHotKeyMap(builder);
  }

  public static void StartHotKeyMap(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActionName(FlatBufferBuilder builder, StringOffset actionNameOffset) { builder.AddOffset(1, actionNameOffset.Value, 0); }
  public static void AddAxisName(FlatBufferBuilder builder, StringOffset axisNameOffset) { builder.AddOffset(2, axisNameOffset.Value, 0); }
  public static void AddAxisDirection(FlatBufferBuilder builder, int axisDirection) { builder.AddInt(3, axisDirection, 0); }
  public static void AddTextId(FlatBufferBuilder builder, StringOffset textIdOffset) { builder.AddOffset(4, textIdOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(5, typeOffset.Value, 0); }
  public static void AddLongPressTime(FlatBufferBuilder builder, int longPressTime) { builder.AddInt(6, longPressTime, 0); }
  public static void AddReleaseFailureTime(FlatBufferBuilder builder, int releaseFailureTime) { builder.AddInt(7, releaseFailureTime, 0); }
  public static void AddBindButtonTag(FlatBufferBuilder builder, StringOffset bindButtonTagOffset) { builder.AddOffset(8, bindButtonTagOffset.Value, 0); }
  public static void AddApplicableType(FlatBufferBuilder builder, int applicableType) { builder.AddInt(9, applicableType, 0); }
  public static void AddIsOccupancyFightInput(FlatBufferBuilder builder, bool isOccupancyFightInput) { builder.AddBool(10, isOccupancyFightInput, false); }
  public static Offset<WWParser.Defs.HotKeyMap> EndHotKeyMap(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.HotKeyMap>(o);
  }
  public HotKeyMapT UnPack() {
    var _o = new HotKeyMapT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HotKeyMapT _o) {
    _o.Id = this.Id;
    _o.ActionName = this.ActionName;
    _o.AxisName = this.AxisName;
    _o.AxisDirection = this.AxisDirection;
    _o.TextId = this.TextId;
    _o.Type = this.Type;
    _o.LongPressTime = this.LongPressTime;
    _o.ReleaseFailureTime = this.ReleaseFailureTime;
    _o.BindButtonTag = this.BindButtonTag;
    _o.ApplicableType = this.ApplicableType;
    _o.IsOccupancyFightInput = this.IsOccupancyFightInput;
  }
  public static Offset<WWParser.Defs.HotKeyMap> Pack(FlatBufferBuilder builder, HotKeyMapT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.HotKeyMap>);
    var _action_name = _o.ActionName == null ? default(StringOffset) : builder.CreateString(_o.ActionName);
    var _axis_name = _o.AxisName == null ? default(StringOffset) : builder.CreateString(_o.AxisName);
    var _text_id = _o.TextId == null ? default(StringOffset) : builder.CreateString(_o.TextId);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _bind_button_tag = _o.BindButtonTag == null ? default(StringOffset) : builder.CreateString(_o.BindButtonTag);
    return CreateHotKeyMap(
      builder,
      _o.Id,
      _action_name,
      _axis_name,
      _o.AxisDirection,
      _text_id,
      _type,
      _o.LongPressTime,
      _o.ReleaseFailureTime,
      _bind_button_tag,
      _o.ApplicableType,
      _o.IsOccupancyFightInput);
  }
}

public class HotKeyMapT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("action_name")]
  public string ActionName { get; set; }
  [Newtonsoft.Json.JsonProperty("axis_name")]
  public string AxisName { get; set; }
  [Newtonsoft.Json.JsonProperty("axis_direction")]
  public int AxisDirection { get; set; }
  [Newtonsoft.Json.JsonProperty("text_id")]
  public string TextId { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public string Type { get; set; }
  [Newtonsoft.Json.JsonProperty("long_press_time")]
  public int LongPressTime { get; set; }
  [Newtonsoft.Json.JsonProperty("release_failure_time")]
  public int ReleaseFailureTime { get; set; }
  [Newtonsoft.Json.JsonProperty("bind_button_tag")]
  public string BindButtonTag { get; set; }
  [Newtonsoft.Json.JsonProperty("applicable_type")]
  public int ApplicableType { get; set; }
  [Newtonsoft.Json.JsonProperty("is_occupancy_fight_input")]
  public bool IsOccupancyFightInput { get; set; }

  public HotKeyMapT() {
    this.Id = 0;
    this.ActionName = null;
    this.AxisName = null;
    this.AxisDirection = 0;
    this.TextId = null;
    this.Type = null;
    this.LongPressTime = 0;
    this.ReleaseFailureTime = 0;
    this.BindButtonTag = null;
    this.ApplicableType = 0;
    this.IsOccupancyFightInput = false;
  }
}


static public class HotKeyMapVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*ActionName*/, false)
      && verifier.VerifyString(tablePos, 8 /*AxisName*/, false)
      && verifier.VerifyField(tablePos, 10 /*AxisDirection*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*TextId*/, false)
      && verifier.VerifyString(tablePos, 14 /*Type*/, false)
      && verifier.VerifyField(tablePos, 16 /*LongPressTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*ReleaseFailureTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*BindButtonTag*/, false)
      && verifier.VerifyField(tablePos, 22 /*ApplicableType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*IsOccupancyFightInput*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
