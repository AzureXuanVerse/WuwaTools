// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MapFog : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MapFog GetRootAsMapFog(ByteBuffer _bb) { return GetRootAsMapFog(_bb, new MapFog()); }
  public static MapFog GetRootAsMapFog(ByteBuffer _bb, MapFog obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MapFog __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Fog { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AreaId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GravityFlip { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int UnlockCondition { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FogUnlockPosition(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FogUnlockPositionLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFogUnlockPositionBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetFogUnlockPositionBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetFogUnlockPositionArray() { return __p.__vector_as_array<int>(14); }

  public static Offset<WWParser.Defs.MapFog> CreateMapFog(FlatBufferBuilder builder,
      int fog = 0,
      int map_id = 0,
      int area_id = 0,
      int gravity_flip = 1,
      int unlock_condition = 0,
      VectorOffset fog_unlock_positionOffset = default(VectorOffset)) {
    builder.StartTable(6);
    MapFog.AddFogUnlockPosition(builder, fog_unlock_positionOffset);
    MapFog.AddUnlockCondition(builder, unlock_condition);
    MapFog.AddGravityFlip(builder, gravity_flip);
    MapFog.AddAreaId(builder, area_id);
    MapFog.AddMapId(builder, map_id);
    MapFog.AddFog(builder, fog);
    return MapFog.EndMapFog(builder);
  }

  public static void StartMapFog(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddFog(FlatBufferBuilder builder, int fog) { builder.AddInt(0, fog, 0); }
  public static void AddMapId(FlatBufferBuilder builder, int mapId) { builder.AddInt(1, mapId, 0); }
  public static void AddAreaId(FlatBufferBuilder builder, int areaId) { builder.AddInt(2, areaId, 0); }
  public static void AddGravityFlip(FlatBufferBuilder builder, int gravityFlip) { builder.AddInt(3, gravityFlip, 1); }
  public static void AddUnlockCondition(FlatBufferBuilder builder, int unlockCondition) { builder.AddInt(4, unlockCondition, 0); }
  public static void AddFogUnlockPosition(FlatBufferBuilder builder, VectorOffset fogUnlockPositionOffset) { builder.AddOffset(5, fogUnlockPositionOffset.Value, 0); }
  public static VectorOffset CreateFogUnlockPositionVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFogUnlockPositionVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFogUnlockPositionVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFogUnlockPositionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFogUnlockPositionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.MapFog> EndMapFog(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MapFog>(o);
  }
  public MapFogT UnPack() {
    var _o = new MapFogT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MapFogT _o) {
    _o.Fog = this.Fog;
    _o.MapId = this.MapId;
    _o.AreaId = this.AreaId;
    _o.GravityFlip = this.GravityFlip;
    _o.UnlockCondition = this.UnlockCondition;
    _o.FogUnlockPosition = new List<int>();
    for (var _j = 0; _j < this.FogUnlockPositionLength; ++_j) {_o.FogUnlockPosition.Add(this.FogUnlockPosition(_j));}
  }
  public static Offset<WWParser.Defs.MapFog> Pack(FlatBufferBuilder builder, MapFogT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MapFog>);
    var _fog_unlock_position = default(VectorOffset);
    if (_o.FogUnlockPosition != null) {
      var __fog_unlock_position = _o.FogUnlockPosition.ToArray();
      _fog_unlock_position = CreateFogUnlockPositionVector(builder, __fog_unlock_position);
    }
    return CreateMapFog(
      builder,
      _o.Fog,
      _o.MapId,
      _o.AreaId,
      _o.GravityFlip,
      _o.UnlockCondition,
      _fog_unlock_position);
  }
}

public class MapFogT
{
  [Newtonsoft.Json.JsonProperty("fog")]
  public int Fog { get; set; }
  [Newtonsoft.Json.JsonProperty("map_id")]
  public int MapId { get; set; }
  [Newtonsoft.Json.JsonProperty("area_id")]
  public int AreaId { get; set; }
  [Newtonsoft.Json.JsonProperty("gravity_flip")]
  public int GravityFlip { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_condition")]
  public int UnlockCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("fog_unlock_position")]
  public List<int> FogUnlockPosition { get; set; }

  public MapFogT() {
    this.Fog = 0;
    this.MapId = 0;
    this.AreaId = 0;
    this.GravityFlip = 1;
    this.UnlockCondition = 0;
    this.FogUnlockPosition = null;
  }
}


static public class MapFogVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Fog*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MapId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*AreaId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*GravityFlip*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*UnlockCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*FogUnlockPosition*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
