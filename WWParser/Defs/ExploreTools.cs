// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ExploreTools : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ExploreTools GetRootAsExploreTools(ByteBuffer _bb) { return GetRootAsExploreTools(_bb, new ExploreTools()); }
  public static ExploreTools GetRootAsExploreTools(ByteBuffer _bb, ExploreTools obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ExploreTools __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PhantomSkillId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int SkillType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool CanEquip { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string CurrentSkillInfo { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCurrentSkillInfoBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetCurrentSkillInfoBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetCurrentSkillInfoArray() { return __p.__vector_as_array<byte>(12); }
  public int HelpId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Icon { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(16); }
  public string BackGround { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBackGroundBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetBackGroundBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetBackGroundArray() { return __p.__vector_as_array<byte>(18); }
  public string BattleViewIcon { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBattleViewIconBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetBattleViewIconBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetBattleViewIconArray() { return __p.__vector_as_array<byte>(20); }
  public int SortId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool AutoFill { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ShowUnlock { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int SkillGroupId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsUseInPhantomTeam { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public WWParser.Defs.DicIntInt? Cost(int j) { int o = __p.__offset(32); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CostLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntInt? Authorization(int j) { int o = __p.__offset(34); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AuthorizationLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int SummonConfigId { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.ExploreTools> CreateExploreTools(FlatBufferBuilder builder,
      int phantom_skill_id = 0,
      StringOffset nameOffset = default(StringOffset),
      int skill_type = 0,
      bool can_equip = false,
      StringOffset current_skill_infoOffset = default(StringOffset),
      int help_id = 0,
      StringOffset iconOffset = default(StringOffset),
      StringOffset back_groundOffset = default(StringOffset),
      StringOffset battle_view_iconOffset = default(StringOffset),
      int sort_id = 0,
      bool auto_fill = false,
      bool show_unlock = false,
      int skill_group_id = 0,
      bool is_use_in_phantom_team = false,
      VectorOffset costOffset = default(VectorOffset),
      VectorOffset authorizationOffset = default(VectorOffset),
      int summon_config_id = 0) {
    builder.StartTable(17);
    ExploreTools.AddSummonConfigId(builder, summon_config_id);
    ExploreTools.AddAuthorization(builder, authorizationOffset);
    ExploreTools.AddCost(builder, costOffset);
    ExploreTools.AddSkillGroupId(builder, skill_group_id);
    ExploreTools.AddSortId(builder, sort_id);
    ExploreTools.AddBattleViewIcon(builder, battle_view_iconOffset);
    ExploreTools.AddBackGround(builder, back_groundOffset);
    ExploreTools.AddIcon(builder, iconOffset);
    ExploreTools.AddHelpId(builder, help_id);
    ExploreTools.AddCurrentSkillInfo(builder, current_skill_infoOffset);
    ExploreTools.AddSkillType(builder, skill_type);
    ExploreTools.AddName(builder, nameOffset);
    ExploreTools.AddPhantomSkillId(builder, phantom_skill_id);
    ExploreTools.AddIsUseInPhantomTeam(builder, is_use_in_phantom_team);
    ExploreTools.AddShowUnlock(builder, show_unlock);
    ExploreTools.AddAutoFill(builder, auto_fill);
    ExploreTools.AddCanEquip(builder, can_equip);
    return ExploreTools.EndExploreTools(builder);
  }

  public static void StartExploreTools(FlatBufferBuilder builder) { builder.StartTable(17); }
  public static void AddPhantomSkillId(FlatBufferBuilder builder, int phantomSkillId) { builder.AddInt(0, phantomSkillId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddSkillType(FlatBufferBuilder builder, int skillType) { builder.AddInt(2, skillType, 0); }
  public static void AddCanEquip(FlatBufferBuilder builder, bool canEquip) { builder.AddBool(3, canEquip, false); }
  public static void AddCurrentSkillInfo(FlatBufferBuilder builder, StringOffset currentSkillInfoOffset) { builder.AddOffset(4, currentSkillInfoOffset.Value, 0); }
  public static void AddHelpId(FlatBufferBuilder builder, int helpId) { builder.AddInt(5, helpId, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(6, iconOffset.Value, 0); }
  public static void AddBackGround(FlatBufferBuilder builder, StringOffset backGroundOffset) { builder.AddOffset(7, backGroundOffset.Value, 0); }
  public static void AddBattleViewIcon(FlatBufferBuilder builder, StringOffset battleViewIconOffset) { builder.AddOffset(8, battleViewIconOffset.Value, 0); }
  public static void AddSortId(FlatBufferBuilder builder, int sortId) { builder.AddInt(9, sortId, 0); }
  public static void AddAutoFill(FlatBufferBuilder builder, bool autoFill) { builder.AddBool(10, autoFill, false); }
  public static void AddShowUnlock(FlatBufferBuilder builder, bool showUnlock) { builder.AddBool(11, showUnlock, false); }
  public static void AddSkillGroupId(FlatBufferBuilder builder, int skillGroupId) { builder.AddInt(12, skillGroupId, 0); }
  public static void AddIsUseInPhantomTeam(FlatBufferBuilder builder, bool isUseInPhantomTeam) { builder.AddBool(13, isUseInPhantomTeam, false); }
  public static void AddCost(FlatBufferBuilder builder, VectorOffset costOffset) { builder.AddOffset(14, costOffset.Value, 0); }
  public static VectorOffset CreateCostVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCostVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCostVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCostVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAuthorization(FlatBufferBuilder builder, VectorOffset authorizationOffset) { builder.AddOffset(15, authorizationOffset.Value, 0); }
  public static VectorOffset CreateAuthorizationVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAuthorizationVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAuthorizationVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAuthorizationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAuthorizationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSummonConfigId(FlatBufferBuilder builder, int summonConfigId) { builder.AddInt(16, summonConfigId, 0); }
  public static Offset<WWParser.Defs.ExploreTools> EndExploreTools(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ExploreTools>(o);
  }
  public ExploreToolsT UnPack() {
    var _o = new ExploreToolsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ExploreToolsT _o) {
    _o.PhantomSkillId = this.PhantomSkillId;
    _o.Name = this.Name;
    _o.SkillType = this.SkillType;
    _o.CanEquip = this.CanEquip;
    _o.CurrentSkillInfo = this.CurrentSkillInfo;
    _o.HelpId = this.HelpId;
    _o.Icon = this.Icon;
    _o.BackGround = this.BackGround;
    _o.BattleViewIcon = this.BattleViewIcon;
    _o.SortId = this.SortId;
    _o.AutoFill = this.AutoFill;
    _o.ShowUnlock = this.ShowUnlock;
    _o.SkillGroupId = this.SkillGroupId;
    _o.IsUseInPhantomTeam = this.IsUseInPhantomTeam;
    _o.Cost = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.CostLength; ++_j) {_o.Cost.Add(this.Cost(_j).HasValue ? this.Cost(_j).Value.UnPack() : null);}
    _o.Authorization = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.AuthorizationLength; ++_j) {_o.Authorization.Add(this.Authorization(_j).HasValue ? this.Authorization(_j).Value.UnPack() : null);}
    _o.SummonConfigId = this.SummonConfigId;
  }
  public static Offset<WWParser.Defs.ExploreTools> Pack(FlatBufferBuilder builder, ExploreToolsT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ExploreTools>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _current_skill_info = _o.CurrentSkillInfo == null ? default(StringOffset) : builder.CreateString(_o.CurrentSkillInfo);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _back_ground = _o.BackGround == null ? default(StringOffset) : builder.CreateString(_o.BackGround);
    var _battle_view_icon = _o.BattleViewIcon == null ? default(StringOffset) : builder.CreateString(_o.BattleViewIcon);
    var _cost = default(VectorOffset);
    if (_o.Cost != null) {
      var __cost = new Offset<WWParser.Defs.DicIntInt>[_o.Cost.Count];
      for (var _j = 0; _j < __cost.Length; ++_j) { __cost[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.Cost[_j]); }
      _cost = CreateCostVector(builder, __cost);
    }
    var _authorization = default(VectorOffset);
    if (_o.Authorization != null) {
      var __authorization = new Offset<WWParser.Defs.DicIntInt>[_o.Authorization.Count];
      for (var _j = 0; _j < __authorization.Length; ++_j) { __authorization[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.Authorization[_j]); }
      _authorization = CreateAuthorizationVector(builder, __authorization);
    }
    return CreateExploreTools(
      builder,
      _o.PhantomSkillId,
      _name,
      _o.SkillType,
      _o.CanEquip,
      _current_skill_info,
      _o.HelpId,
      _icon,
      _back_ground,
      _battle_view_icon,
      _o.SortId,
      _o.AutoFill,
      _o.ShowUnlock,
      _o.SkillGroupId,
      _o.IsUseInPhantomTeam,
      _cost,
      _authorization,
      _o.SummonConfigId);
  }
}

public class ExploreToolsT
{
  [Newtonsoft.Json.JsonProperty("phantom_skill_id")]
  public int PhantomSkillId { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_type")]
  public int SkillType { get; set; }
  [Newtonsoft.Json.JsonProperty("can_equip")]
  public bool CanEquip { get; set; }
  [Newtonsoft.Json.JsonProperty("current_skill_info")]
  public string CurrentSkillInfo { get; set; }
  [Newtonsoft.Json.JsonProperty("help_id")]
  public int HelpId { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("back_ground")]
  public string BackGround { get; set; }
  [Newtonsoft.Json.JsonProperty("battle_view_icon")]
  public string BattleViewIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_id")]
  public int SortId { get; set; }
  [Newtonsoft.Json.JsonProperty("auto_fill")]
  public bool AutoFill { get; set; }
  [Newtonsoft.Json.JsonProperty("show_unlock")]
  public bool ShowUnlock { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_group_id")]
  public int SkillGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("is_use_in_phantom_team")]
  public bool IsUseInPhantomTeam { get; set; }
  [Newtonsoft.Json.JsonProperty("cost")]
  public List<WWParser.Defs.DicIntIntT> Cost { get; set; }
  [Newtonsoft.Json.JsonProperty("authorization")]
  public List<WWParser.Defs.DicIntIntT> Authorization { get; set; }
  [Newtonsoft.Json.JsonProperty("summon_config_id")]
  public int SummonConfigId { get; set; }

  public ExploreToolsT() {
    this.PhantomSkillId = 0;
    this.Name = null;
    this.SkillType = 0;
    this.CanEquip = false;
    this.CurrentSkillInfo = null;
    this.HelpId = 0;
    this.Icon = null;
    this.BackGround = null;
    this.BattleViewIcon = null;
    this.SortId = 0;
    this.AutoFill = false;
    this.ShowUnlock = false;
    this.SkillGroupId = 0;
    this.IsUseInPhantomTeam = false;
    this.Cost = null;
    this.Authorization = null;
    this.SummonConfigId = 0;
  }
}


static public class ExploreToolsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PhantomSkillId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*SkillType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*CanEquip*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 12 /*CurrentSkillInfo*/, false)
      && verifier.VerifyField(tablePos, 14 /*HelpId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 18 /*BackGround*/, false)
      && verifier.VerifyString(tablePos, 20 /*BattleViewIcon*/, false)
      && verifier.VerifyField(tablePos, 22 /*SortId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*AutoFill*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 26 /*ShowUnlock*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 28 /*SkillGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*IsUseInPhantomTeam*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfTables(tablePos, 32 /*Cost*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 34 /*Authorization*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 36 /*SummonConfigId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
