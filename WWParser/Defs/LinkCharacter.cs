// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LinkCharacter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static LinkCharacter GetRootAsLinkCharacter(ByteBuffer _bb) { return GetRootAsLinkCharacter(_bb, new LinkCharacter()); }
  public static LinkCharacter GetRootAsLinkCharacter(ByteBuffer _bb, LinkCharacter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LinkCharacter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RoleId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NeedLoadMesh { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string CharacterDataAsset { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharacterDataAssetBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCharacterDataAssetBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCharacterDataAssetArray() { return __p.__vector_as_array<byte>(10); }
  public string WeaponMeshList(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int WeaponMeshListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string WeaponAnimList(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int WeaponAnimListLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string CompNameList(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CompNameListLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string RoleLinkAudio { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoleLinkAudioBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetRoleLinkAudioBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetRoleLinkAudioArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<WWParser.Defs.LinkCharacter> CreateLinkCharacter(FlatBufferBuilder builder,
      int id = 0,
      int role_id = 0,
      int need_load_mesh = 0,
      StringOffset character_data_assetOffset = default(StringOffset),
      VectorOffset weapon_mesh_listOffset = default(VectorOffset),
      VectorOffset weapon_anim_listOffset = default(VectorOffset),
      VectorOffset comp_name_listOffset = default(VectorOffset),
      StringOffset role_link_audioOffset = default(StringOffset)) {
    builder.StartTable(8);
    LinkCharacter.AddRoleLinkAudio(builder, role_link_audioOffset);
    LinkCharacter.AddCompNameList(builder, comp_name_listOffset);
    LinkCharacter.AddWeaponAnimList(builder, weapon_anim_listOffset);
    LinkCharacter.AddWeaponMeshList(builder, weapon_mesh_listOffset);
    LinkCharacter.AddCharacterDataAsset(builder, character_data_assetOffset);
    LinkCharacter.AddNeedLoadMesh(builder, need_load_mesh);
    LinkCharacter.AddRoleId(builder, role_id);
    LinkCharacter.AddId(builder, id);
    return LinkCharacter.EndLinkCharacter(builder);
  }

  public static void StartLinkCharacter(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddRoleId(FlatBufferBuilder builder, int roleId) { builder.AddInt(1, roleId, 0); }
  public static void AddNeedLoadMesh(FlatBufferBuilder builder, int needLoadMesh) { builder.AddInt(2, needLoadMesh, 0); }
  public static void AddCharacterDataAsset(FlatBufferBuilder builder, StringOffset characterDataAssetOffset) { builder.AddOffset(3, characterDataAssetOffset.Value, 0); }
  public static void AddWeaponMeshList(FlatBufferBuilder builder, VectorOffset weaponMeshListOffset) { builder.AddOffset(4, weaponMeshListOffset.Value, 0); }
  public static VectorOffset CreateWeaponMeshListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateWeaponMeshListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponMeshListVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponMeshListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartWeaponMeshListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWeaponAnimList(FlatBufferBuilder builder, VectorOffset weaponAnimListOffset) { builder.AddOffset(5, weaponAnimListOffset.Value, 0); }
  public static VectorOffset CreateWeaponAnimListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateWeaponAnimListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponAnimListVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponAnimListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartWeaponAnimListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCompNameList(FlatBufferBuilder builder, VectorOffset compNameListOffset) { builder.AddOffset(6, compNameListOffset.Value, 0); }
  public static VectorOffset CreateCompNameListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCompNameListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompNameListVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompNameListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCompNameListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRoleLinkAudio(FlatBufferBuilder builder, StringOffset roleLinkAudioOffset) { builder.AddOffset(7, roleLinkAudioOffset.Value, 0); }
  public static Offset<WWParser.Defs.LinkCharacter> EndLinkCharacter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.LinkCharacter>(o);
  }
  public LinkCharacterT UnPack() {
    var _o = new LinkCharacterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LinkCharacterT _o) {
    _o.Id = this.Id;
    _o.RoleId = this.RoleId;
    _o.NeedLoadMesh = this.NeedLoadMesh;
    _o.CharacterDataAsset = this.CharacterDataAsset;
    _o.WeaponMeshList = new List<string>();
    for (var _j = 0; _j < this.WeaponMeshListLength; ++_j) {_o.WeaponMeshList.Add(this.WeaponMeshList(_j));}
    _o.WeaponAnimList = new List<string>();
    for (var _j = 0; _j < this.WeaponAnimListLength; ++_j) {_o.WeaponAnimList.Add(this.WeaponAnimList(_j));}
    _o.CompNameList = new List<string>();
    for (var _j = 0; _j < this.CompNameListLength; ++_j) {_o.CompNameList.Add(this.CompNameList(_j));}
    _o.RoleLinkAudio = this.RoleLinkAudio;
  }
  public static Offset<WWParser.Defs.LinkCharacter> Pack(FlatBufferBuilder builder, LinkCharacterT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.LinkCharacter>);
    var _character_data_asset = _o.CharacterDataAsset == null ? default(StringOffset) : builder.CreateString(_o.CharacterDataAsset);
    var _weapon_mesh_list = default(VectorOffset);
    if (_o.WeaponMeshList != null) {
      var __weapon_mesh_list = new StringOffset[_o.WeaponMeshList.Count];
      for (var _j = 0; _j < __weapon_mesh_list.Length; ++_j) { __weapon_mesh_list[_j] = builder.CreateString(_o.WeaponMeshList[_j]); }
      _weapon_mesh_list = CreateWeaponMeshListVector(builder, __weapon_mesh_list);
    }
    var _weapon_anim_list = default(VectorOffset);
    if (_o.WeaponAnimList != null) {
      var __weapon_anim_list = new StringOffset[_o.WeaponAnimList.Count];
      for (var _j = 0; _j < __weapon_anim_list.Length; ++_j) { __weapon_anim_list[_j] = builder.CreateString(_o.WeaponAnimList[_j]); }
      _weapon_anim_list = CreateWeaponAnimListVector(builder, __weapon_anim_list);
    }
    var _comp_name_list = default(VectorOffset);
    if (_o.CompNameList != null) {
      var __comp_name_list = new StringOffset[_o.CompNameList.Count];
      for (var _j = 0; _j < __comp_name_list.Length; ++_j) { __comp_name_list[_j] = builder.CreateString(_o.CompNameList[_j]); }
      _comp_name_list = CreateCompNameListVector(builder, __comp_name_list);
    }
    var _role_link_audio = _o.RoleLinkAudio == null ? default(StringOffset) : builder.CreateString(_o.RoleLinkAudio);
    return CreateLinkCharacter(
      builder,
      _o.Id,
      _o.RoleId,
      _o.NeedLoadMesh,
      _character_data_asset,
      _weapon_mesh_list,
      _weapon_anim_list,
      _comp_name_list,
      _role_link_audio);
  }
}

public class LinkCharacterT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("role_id")]
  public int RoleId { get; set; }
  [Newtonsoft.Json.JsonProperty("need_load_mesh")]
  public int NeedLoadMesh { get; set; }
  [Newtonsoft.Json.JsonProperty("character_data_asset")]
  public string CharacterDataAsset { get; set; }
  [Newtonsoft.Json.JsonProperty("weapon_mesh_list")]
  public List<string> WeaponMeshList { get; set; }
  [Newtonsoft.Json.JsonProperty("weapon_anim_list")]
  public List<string> WeaponAnimList { get; set; }
  [Newtonsoft.Json.JsonProperty("comp_name_list")]
  public List<string> CompNameList { get; set; }
  [Newtonsoft.Json.JsonProperty("role_link_audio")]
  public string RoleLinkAudio { get; set; }

  public LinkCharacterT() {
    this.Id = 0;
    this.RoleId = 0;
    this.NeedLoadMesh = 0;
    this.CharacterDataAsset = null;
    this.WeaponMeshList = null;
    this.WeaponAnimList = null;
    this.CompNameList = null;
    this.RoleLinkAudio = null;
  }
}


static public class LinkCharacterVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*RoleId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*NeedLoadMesh*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*CharacterDataAsset*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*WeaponMeshList*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*WeaponAnimList*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 16 /*CompNameList*/, false)
      && verifier.VerifyString(tablePos, 18 /*RoleLinkAudio*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
