// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiBase : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AiBase GetRootAsAiBase(ByteBuffer _bb) { return GetRootAsAiBase(_bb, new AiBase()); }
  public static AiBase GetRootAsAiBase(ByteBuffer _bb, AiBase obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiBase __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string StateMachine { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStateMachineBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetStateMachineBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetStateMachineArray() { return __p.__vector_as_array<byte>(6); }
  public string AiController { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAiControllerBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAiControllerBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAiControllerArray() { return __p.__vector_as_array<byte>(8); }
  public string BehaviorTree { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBehaviorTreeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetBehaviorTreeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetBehaviorTreeArray() { return __p.__vector_as_array<byte>(10); }
  public WWParser.Defs.DicStringString? SubBehaviorConfigs(int j) { int o = __p.__offset(12); return o != 0 ? (WWParser.Defs.DicStringString?)(new WWParser.Defs.DicStringString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SubBehaviorConfigsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool Team { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int MonsterType { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)4; } }

  public static Offset<WWParser.Defs.AiBase> CreateAiBase(FlatBufferBuilder builder,
      int id = 0,
      StringOffset state_machineOffset = default(StringOffset),
      StringOffset ai_controllerOffset = default(StringOffset),
      StringOffset behavior_treeOffset = default(StringOffset),
      VectorOffset sub_behavior_configsOffset = default(VectorOffset),
      bool team = false,
      int monster_type = 4) {
    builder.StartTable(7);
    AiBase.AddMonsterType(builder, monster_type);
    AiBase.AddSubBehaviorConfigs(builder, sub_behavior_configsOffset);
    AiBase.AddBehaviorTree(builder, behavior_treeOffset);
    AiBase.AddAiController(builder, ai_controllerOffset);
    AiBase.AddStateMachine(builder, state_machineOffset);
    AiBase.AddId(builder, id);
    AiBase.AddTeam(builder, team);
    return AiBase.EndAiBase(builder);
  }

  public static void StartAiBase(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddStateMachine(FlatBufferBuilder builder, StringOffset stateMachineOffset) { builder.AddOffset(1, stateMachineOffset.Value, 0); }
  public static void AddAiController(FlatBufferBuilder builder, StringOffset aiControllerOffset) { builder.AddOffset(2, aiControllerOffset.Value, 0); }
  public static void AddBehaviorTree(FlatBufferBuilder builder, StringOffset behaviorTreeOffset) { builder.AddOffset(3, behaviorTreeOffset.Value, 0); }
  public static void AddSubBehaviorConfigs(FlatBufferBuilder builder, VectorOffset subBehaviorConfigsOffset) { builder.AddOffset(4, subBehaviorConfigsOffset.Value, 0); }
  public static VectorOffset CreateSubBehaviorConfigsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSubBehaviorConfigsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubBehaviorConfigsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicStringString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubBehaviorConfigsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicStringString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSubBehaviorConfigsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTeam(FlatBufferBuilder builder, bool team) { builder.AddBool(5, team, false); }
  public static void AddMonsterType(FlatBufferBuilder builder, int monsterType) { builder.AddInt(6, monsterType, 4); }
  public static Offset<WWParser.Defs.AiBase> EndAiBase(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AiBase>(o);
  }
  public AiBaseT UnPack() {
    var _o = new AiBaseT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AiBaseT _o) {
    _o.Id = this.Id;
    _o.StateMachine = this.StateMachine;
    _o.AiController = this.AiController;
    _o.BehaviorTree = this.BehaviorTree;
    _o.SubBehaviorConfigs = new List<WWParser.Defs.DicStringStringT>();
    for (var _j = 0; _j < this.SubBehaviorConfigsLength; ++_j) {_o.SubBehaviorConfigs.Add(this.SubBehaviorConfigs(_j).HasValue ? this.SubBehaviorConfigs(_j).Value.UnPack() : null);}
    _o.Team = this.Team;
    _o.MonsterType = this.MonsterType;
  }
  public static Offset<WWParser.Defs.AiBase> Pack(FlatBufferBuilder builder, AiBaseT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AiBase>);
    var _state_machine = _o.StateMachine == null ? default(StringOffset) : builder.CreateString(_o.StateMachine);
    var _ai_controller = _o.AiController == null ? default(StringOffset) : builder.CreateString(_o.AiController);
    var _behavior_tree = _o.BehaviorTree == null ? default(StringOffset) : builder.CreateString(_o.BehaviorTree);
    var _sub_behavior_configs = default(VectorOffset);
    if (_o.SubBehaviorConfigs != null) {
      var __sub_behavior_configs = new Offset<WWParser.Defs.DicStringString>[_o.SubBehaviorConfigs.Count];
      for (var _j = 0; _j < __sub_behavior_configs.Length; ++_j) { __sub_behavior_configs[_j] = WWParser.Defs.DicStringString.Pack(builder, _o.SubBehaviorConfigs[_j]); }
      _sub_behavior_configs = CreateSubBehaviorConfigsVector(builder, __sub_behavior_configs);
    }
    return CreateAiBase(
      builder,
      _o.Id,
      _state_machine,
      _ai_controller,
      _behavior_tree,
      _sub_behavior_configs,
      _o.Team,
      _o.MonsterType);
  }
}

public class AiBaseT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("state_machine")]
  public string StateMachine { get; set; }
  [Newtonsoft.Json.JsonProperty("ai_controller")]
  public string AiController { get; set; }
  [Newtonsoft.Json.JsonProperty("behavior_tree")]
  public string BehaviorTree { get; set; }
  [Newtonsoft.Json.JsonProperty("sub_behavior_configs")]
  public List<WWParser.Defs.DicStringStringT> SubBehaviorConfigs { get; set; }
  [Newtonsoft.Json.JsonProperty("team")]
  public bool Team { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_type")]
  public int MonsterType { get; set; }

  public AiBaseT() {
    this.Id = 0;
    this.StateMachine = null;
    this.AiController = null;
    this.BehaviorTree = null;
    this.SubBehaviorConfigs = null;
    this.Team = false;
    this.MonsterType = 4;
  }
}


static public class AiBaseVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*StateMachine*/, false)
      && verifier.VerifyString(tablePos, 8 /*AiController*/, false)
      && verifier.VerifyString(tablePos, 10 /*BehaviorTree*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 12 /*SubBehaviorConfigs*/, WWParser.Defs.DicStringStringVerify.Verify, false)
      && verifier.VerifyField(tablePos, 14 /*Team*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*MonsterType*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
