// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FarmGoldActivity : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FarmGoldActivity GetRootAsFarmGoldActivity(ByteBuffer _bb) { return GetRootAsFarmGoldActivity(_bb, new FarmGoldActivity()); }
  public static FarmGoldActivity GetRootAsFarmGoldActivity(ByteBuffer _bb, FarmGoldActivity obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FarmGoldActivity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EntranceId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroupId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SortId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PassScore { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string LevelRewardDesc { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLevelRewardDescBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetLevelRewardDescBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetLevelRewardDescArray() { return __p.__vector_as_array<byte>(18); }
  public int RewardId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int OpenDay { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PreLevel { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RecommendLevel { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DifficultyOptions(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DifficultyOptionsLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDifficultyOptionsBytes() { return __p.__vector_as_span<int>(28, 4); }
#else
  public ArraySegment<byte>? GetDifficultyOptionsBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public int[] GetDifficultyOptionsArray() { return __p.__vector_as_array<int>(28); }

  public static Offset<WWParser.Defs.FarmGoldActivity> CreateFarmGoldActivity(FlatBufferBuilder builder,
      int id = 0,
      int activity_id = 0,
      int inst_id = 0,
      int entrance_id = 0,
      int group_id = 0,
      int sort_id = 0,
      int pass_score = 0,
      StringOffset level_reward_descOffset = default(StringOffset),
      int reward_id = 0,
      int open_day = 0,
      int pre_level = 0,
      int recommend_level = 0,
      VectorOffset difficulty_optionsOffset = default(VectorOffset)) {
    builder.StartTable(13);
    FarmGoldActivity.AddDifficultyOptions(builder, difficulty_optionsOffset);
    FarmGoldActivity.AddRecommendLevel(builder, recommend_level);
    FarmGoldActivity.AddPreLevel(builder, pre_level);
    FarmGoldActivity.AddOpenDay(builder, open_day);
    FarmGoldActivity.AddRewardId(builder, reward_id);
    FarmGoldActivity.AddLevelRewardDesc(builder, level_reward_descOffset);
    FarmGoldActivity.AddPassScore(builder, pass_score);
    FarmGoldActivity.AddSortId(builder, sort_id);
    FarmGoldActivity.AddGroupId(builder, group_id);
    FarmGoldActivity.AddEntranceId(builder, entrance_id);
    FarmGoldActivity.AddInstId(builder, inst_id);
    FarmGoldActivity.AddActivityId(builder, activity_id);
    FarmGoldActivity.AddId(builder, id);
    return FarmGoldActivity.EndFarmGoldActivity(builder);
  }

  public static void StartFarmGoldActivity(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddInstId(FlatBufferBuilder builder, int instId) { builder.AddInt(2, instId, 0); }
  public static void AddEntranceId(FlatBufferBuilder builder, int entranceId) { builder.AddInt(3, entranceId, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, int groupId) { builder.AddInt(4, groupId, 0); }
  public static void AddSortId(FlatBufferBuilder builder, int sortId) { builder.AddInt(5, sortId, 0); }
  public static void AddPassScore(FlatBufferBuilder builder, int passScore) { builder.AddInt(6, passScore, 0); }
  public static void AddLevelRewardDesc(FlatBufferBuilder builder, StringOffset levelRewardDescOffset) { builder.AddOffset(7, levelRewardDescOffset.Value, 0); }
  public static void AddRewardId(FlatBufferBuilder builder, int rewardId) { builder.AddInt(8, rewardId, 0); }
  public static void AddOpenDay(FlatBufferBuilder builder, int openDay) { builder.AddInt(9, openDay, 0); }
  public static void AddPreLevel(FlatBufferBuilder builder, int preLevel) { builder.AddInt(10, preLevel, 0); }
  public static void AddRecommendLevel(FlatBufferBuilder builder, int recommendLevel) { builder.AddInt(11, recommendLevel, 0); }
  public static void AddDifficultyOptions(FlatBufferBuilder builder, VectorOffset difficultyOptionsOffset) { builder.AddOffset(12, difficultyOptionsOffset.Value, 0); }
  public static VectorOffset CreateDifficultyOptionsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyOptionsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyOptionsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyOptionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDifficultyOptionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.FarmGoldActivity> EndFarmGoldActivity(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FarmGoldActivity>(o);
  }
  public FarmGoldActivityT UnPack() {
    var _o = new FarmGoldActivityT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FarmGoldActivityT _o) {
    _o.Id = this.Id;
    _o.ActivityId = this.ActivityId;
    _o.InstId = this.InstId;
    _o.EntranceId = this.EntranceId;
    _o.GroupId = this.GroupId;
    _o.SortId = this.SortId;
    _o.PassScore = this.PassScore;
    _o.LevelRewardDesc = this.LevelRewardDesc;
    _o.RewardId = this.RewardId;
    _o.OpenDay = this.OpenDay;
    _o.PreLevel = this.PreLevel;
    _o.RecommendLevel = this.RecommendLevel;
    _o.DifficultyOptions = new List<int>();
    for (var _j = 0; _j < this.DifficultyOptionsLength; ++_j) {_o.DifficultyOptions.Add(this.DifficultyOptions(_j));}
  }
  public static Offset<WWParser.Defs.FarmGoldActivity> Pack(FlatBufferBuilder builder, FarmGoldActivityT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FarmGoldActivity>);
    var _level_reward_desc = _o.LevelRewardDesc == null ? default(StringOffset) : builder.CreateString(_o.LevelRewardDesc);
    var _difficulty_options = default(VectorOffset);
    if (_o.DifficultyOptions != null) {
      var __difficulty_options = _o.DifficultyOptions.ToArray();
      _difficulty_options = CreateDifficultyOptionsVector(builder, __difficulty_options);
    }
    return CreateFarmGoldActivity(
      builder,
      _o.Id,
      _o.ActivityId,
      _o.InstId,
      _o.EntranceId,
      _o.GroupId,
      _o.SortId,
      _o.PassScore,
      _level_reward_desc,
      _o.RewardId,
      _o.OpenDay,
      _o.PreLevel,
      _o.RecommendLevel,
      _difficulty_options);
  }
}

public class FarmGoldActivityT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("inst_id")]
  public int InstId { get; set; }
  [Newtonsoft.Json.JsonProperty("entrance_id")]
  public int EntranceId { get; set; }
  [Newtonsoft.Json.JsonProperty("group_id")]
  public int GroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_id")]
  public int SortId { get; set; }
  [Newtonsoft.Json.JsonProperty("pass_score")]
  public int PassScore { get; set; }
  [Newtonsoft.Json.JsonProperty("level_reward_desc")]
  public string LevelRewardDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_id")]
  public int RewardId { get; set; }
  [Newtonsoft.Json.JsonProperty("open_day")]
  public int OpenDay { get; set; }
  [Newtonsoft.Json.JsonProperty("pre_level")]
  public int PreLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("recommend_level")]
  public int RecommendLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("difficulty_options")]
  public List<int> DifficultyOptions { get; set; }

  public FarmGoldActivityT() {
    this.Id = 0;
    this.ActivityId = 0;
    this.InstId = 0;
    this.EntranceId = 0;
    this.GroupId = 0;
    this.SortId = 0;
    this.PassScore = 0;
    this.LevelRewardDesc = null;
    this.RewardId = 0;
    this.OpenDay = 0;
    this.PreLevel = 0;
    this.RecommendLevel = 0;
    this.DifficultyOptions = null;
  }
}


static public class FarmGoldActivityVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*InstId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*EntranceId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*GroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*SortId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*PassScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*LevelRewardDesc*/, false)
      && verifier.VerifyField(tablePos, 20 /*RewardId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*OpenDay*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*PreLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*RecommendLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 28 /*DifficultyOptions*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
