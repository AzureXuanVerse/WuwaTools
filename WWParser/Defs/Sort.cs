// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Sort : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Sort GetRootAsSort(ByteBuffer _bb) { return GetRootAsSort(_bb, new Sort()); }
  public static Sort GetRootAsSort(ByteBuffer _bb, Sort obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Sort __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FrontSortList(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FrontSortListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFrontSortListBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetFrontSortListBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetFrontSortListArray() { return __p.__vector_as_array<int>(6); }
  public int BaseSortList(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BaseSortListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBaseSortListBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetBaseSortListBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetBaseSortListArray() { return __p.__vector_as_array<int>(8); }
  public int AttributeSortList(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AttributeSortListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAttributeSortListBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetAttributeSortListBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetAttributeSortListArray() { return __p.__vector_as_array<int>(10); }
  public int LastSortList(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LastSortListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLastSortListBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetLastSortListBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetLastSortListArray() { return __p.__vector_as_array<int>(12); }
  public int LimitNum { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DataId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.Sort> CreateSort(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset front_sort_listOffset = default(VectorOffset),
      VectorOffset base_sort_listOffset = default(VectorOffset),
      VectorOffset attribute_sort_listOffset = default(VectorOffset),
      VectorOffset last_sort_listOffset = default(VectorOffset),
      int limit_num = 0,
      int data_id = 0) {
    builder.StartTable(7);
    Sort.AddDataId(builder, data_id);
    Sort.AddLimitNum(builder, limit_num);
    Sort.AddLastSortList(builder, last_sort_listOffset);
    Sort.AddAttributeSortList(builder, attribute_sort_listOffset);
    Sort.AddBaseSortList(builder, base_sort_listOffset);
    Sort.AddFrontSortList(builder, front_sort_listOffset);
    Sort.AddId(builder, id);
    return Sort.EndSort(builder);
  }

  public static void StartSort(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddFrontSortList(FlatBufferBuilder builder, VectorOffset frontSortListOffset) { builder.AddOffset(1, frontSortListOffset.Value, 0); }
  public static VectorOffset CreateFrontSortListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFrontSortListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFrontSortListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFrontSortListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFrontSortListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBaseSortList(FlatBufferBuilder builder, VectorOffset baseSortListOffset) { builder.AddOffset(2, baseSortListOffset.Value, 0); }
  public static VectorOffset CreateBaseSortListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBaseSortListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBaseSortListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBaseSortListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBaseSortListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAttributeSortList(FlatBufferBuilder builder, VectorOffset attributeSortListOffset) { builder.AddOffset(3, attributeSortListOffset.Value, 0); }
  public static VectorOffset CreateAttributeSortListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAttributeSortListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttributeSortListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttributeSortListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAttributeSortListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLastSortList(FlatBufferBuilder builder, VectorOffset lastSortListOffset) { builder.AddOffset(4, lastSortListOffset.Value, 0); }
  public static VectorOffset CreateLastSortListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLastSortListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLastSortListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLastSortListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLastSortListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLimitNum(FlatBufferBuilder builder, int limitNum) { builder.AddInt(5, limitNum, 0); }
  public static void AddDataId(FlatBufferBuilder builder, int dataId) { builder.AddInt(6, dataId, 0); }
  public static Offset<WWParser.Defs.Sort> EndSort(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Sort>(o);
  }
  public SortT UnPack() {
    var _o = new SortT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SortT _o) {
    _o.Id = this.Id;
    _o.FrontSortList = new List<int>();
    for (var _j = 0; _j < this.FrontSortListLength; ++_j) {_o.FrontSortList.Add(this.FrontSortList(_j));}
    _o.BaseSortList = new List<int>();
    for (var _j = 0; _j < this.BaseSortListLength; ++_j) {_o.BaseSortList.Add(this.BaseSortList(_j));}
    _o.AttributeSortList = new List<int>();
    for (var _j = 0; _j < this.AttributeSortListLength; ++_j) {_o.AttributeSortList.Add(this.AttributeSortList(_j));}
    _o.LastSortList = new List<int>();
    for (var _j = 0; _j < this.LastSortListLength; ++_j) {_o.LastSortList.Add(this.LastSortList(_j));}
    _o.LimitNum = this.LimitNum;
    _o.DataId = this.DataId;
  }
  public static Offset<WWParser.Defs.Sort> Pack(FlatBufferBuilder builder, SortT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Sort>);
    var _front_sort_list = default(VectorOffset);
    if (_o.FrontSortList != null) {
      var __front_sort_list = _o.FrontSortList.ToArray();
      _front_sort_list = CreateFrontSortListVector(builder, __front_sort_list);
    }
    var _base_sort_list = default(VectorOffset);
    if (_o.BaseSortList != null) {
      var __base_sort_list = _o.BaseSortList.ToArray();
      _base_sort_list = CreateBaseSortListVector(builder, __base_sort_list);
    }
    var _attribute_sort_list = default(VectorOffset);
    if (_o.AttributeSortList != null) {
      var __attribute_sort_list = _o.AttributeSortList.ToArray();
      _attribute_sort_list = CreateAttributeSortListVector(builder, __attribute_sort_list);
    }
    var _last_sort_list = default(VectorOffset);
    if (_o.LastSortList != null) {
      var __last_sort_list = _o.LastSortList.ToArray();
      _last_sort_list = CreateLastSortListVector(builder, __last_sort_list);
    }
    return CreateSort(
      builder,
      _o.Id,
      _front_sort_list,
      _base_sort_list,
      _attribute_sort_list,
      _last_sort_list,
      _o.LimitNum,
      _o.DataId);
  }
}

public class SortT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("front_sort_list")]
  public List<int> FrontSortList { get; set; }
  [Newtonsoft.Json.JsonProperty("base_sort_list")]
  public List<int> BaseSortList { get; set; }
  [Newtonsoft.Json.JsonProperty("attribute_sort_list")]
  public List<int> AttributeSortList { get; set; }
  [Newtonsoft.Json.JsonProperty("last_sort_list")]
  public List<int> LastSortList { get; set; }
  [Newtonsoft.Json.JsonProperty("limit_num")]
  public int LimitNum { get; set; }
  [Newtonsoft.Json.JsonProperty("data_id")]
  public int DataId { get; set; }

  public SortT() {
    this.Id = 0;
    this.FrontSortList = null;
    this.BaseSortList = null;
    this.AttributeSortList = null;
    this.LastSortList = null;
    this.LimitNum = 0;
    this.DataId = 0;
  }
}


static public class SortVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*FrontSortList*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*BaseSortList*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*AttributeSortList*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*LastSortList*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 14 /*LimitNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*DataId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
