// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DangoMonopolyGrid : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DangoMonopolyGrid GetRootAsDangoMonopolyGrid(ByteBuffer _bb) { return GetRootAsDangoMonopolyGrid(_bb, new DangoMonopolyGrid()); }
  public static DangoMonopolyGrid GetRootAsDangoMonopolyGrid(ByteBuffer _bb, DangoMonopolyGrid obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DangoMonopolyGrid __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GridId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GridGroupId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GridInfo(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int GridInfoLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetGridInfoBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetGridInfoBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetGridInfoArray() { return __p.__vector_as_array<int>(10); }
  public int AddPropertyId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RemovePropertyId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.DangoMonopolyGrid> CreateDangoMonopolyGrid(FlatBufferBuilder builder,
      int id = 0,
      int grid_id = 0,
      int grid_group_id = 0,
      VectorOffset grid_infoOffset = default(VectorOffset),
      int add_property_id = 0,
      int remove_property_id = 0) {
    builder.StartTable(6);
    DangoMonopolyGrid.AddRemovePropertyId(builder, remove_property_id);
    DangoMonopolyGrid.AddAddPropertyId(builder, add_property_id);
    DangoMonopolyGrid.AddGridInfo(builder, grid_infoOffset);
    DangoMonopolyGrid.AddGridGroupId(builder, grid_group_id);
    DangoMonopolyGrid.AddGridId(builder, grid_id);
    DangoMonopolyGrid.AddId(builder, id);
    return DangoMonopolyGrid.EndDangoMonopolyGrid(builder);
  }

  public static void StartDangoMonopolyGrid(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddGridId(FlatBufferBuilder builder, int gridId) { builder.AddInt(1, gridId, 0); }
  public static void AddGridGroupId(FlatBufferBuilder builder, int gridGroupId) { builder.AddInt(2, gridGroupId, 0); }
  public static void AddGridInfo(FlatBufferBuilder builder, VectorOffset gridInfoOffset) { builder.AddOffset(3, gridInfoOffset.Value, 0); }
  public static VectorOffset CreateGridInfoVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGridInfoVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGridInfoVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGridInfoVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGridInfoVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAddPropertyId(FlatBufferBuilder builder, int addPropertyId) { builder.AddInt(4, addPropertyId, 0); }
  public static void AddRemovePropertyId(FlatBufferBuilder builder, int removePropertyId) { builder.AddInt(5, removePropertyId, 0); }
  public static Offset<WWParser.Defs.DangoMonopolyGrid> EndDangoMonopolyGrid(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DangoMonopolyGrid>(o);
  }
  public DangoMonopolyGridT UnPack() {
    var _o = new DangoMonopolyGridT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DangoMonopolyGridT _o) {
    _o.Id = this.Id;
    _o.GridId = this.GridId;
    _o.GridGroupId = this.GridGroupId;
    _o.GridInfo = new List<int>();
    for (var _j = 0; _j < this.GridInfoLength; ++_j) {_o.GridInfo.Add(this.GridInfo(_j));}
    _o.AddPropertyId = this.AddPropertyId;
    _o.RemovePropertyId = this.RemovePropertyId;
  }
  public static Offset<WWParser.Defs.DangoMonopolyGrid> Pack(FlatBufferBuilder builder, DangoMonopolyGridT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DangoMonopolyGrid>);
    var _grid_info = default(VectorOffset);
    if (_o.GridInfo != null) {
      var __grid_info = _o.GridInfo.ToArray();
      _grid_info = CreateGridInfoVector(builder, __grid_info);
    }
    return CreateDangoMonopolyGrid(
      builder,
      _o.Id,
      _o.GridId,
      _o.GridGroupId,
      _grid_info,
      _o.AddPropertyId,
      _o.RemovePropertyId);
  }
}

public class DangoMonopolyGridT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("grid_id")]
  public int GridId { get; set; }
  [Newtonsoft.Json.JsonProperty("grid_group_id")]
  public int GridGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("grid_info")]
  public List<int> GridInfo { get; set; }
  [Newtonsoft.Json.JsonProperty("add_property_id")]
  public int AddPropertyId { get; set; }
  [Newtonsoft.Json.JsonProperty("remove_property_id")]
  public int RemovePropertyId { get; set; }

  public DangoMonopolyGridT() {
    this.Id = 0;
    this.GridId = 0;
    this.GridGroupId = 0;
    this.GridInfo = null;
    this.AddPropertyId = 0;
    this.RemovePropertyId = 0;
  }
}


static public class DangoMonopolyGridVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*GridId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*GridGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*GridInfo*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 12 /*AddPropertyId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*RemovePropertyId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
