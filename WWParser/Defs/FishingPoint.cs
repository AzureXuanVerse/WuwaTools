// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FishingPoint : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FishingPoint GetRootAsFishingPoint(ByteBuffer _bb) { return GetRootAsFishingPoint(_bb, new FishingPoint()); }
  public static FishingPoint GetRootAsFishingPoint(ByteBuffer _bb, FishingPoint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FishingPoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EntityConfigId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShowItem { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GamePlayId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockTech { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroupId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SceneConfigId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)8; } }
  public WWParser.Defs.DicIntInt? RewardItem(int j) { int o = __p.__offset(18); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RewardItemLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntInt? OutGrowth(int j) { int o = __p.__offset(20); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OutGrowthLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int DoubleRate { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Count { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RefreshTime { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.FishingPoint> CreateFishingPoint(FlatBufferBuilder builder,
      int id = 0,
      int entity_config_id = 0,
      int show_item = 0,
      int game_play_id = 0,
      int unlock_tech = 0,
      int group_id = 0,
      int scene_config_id = 8,
      VectorOffset reward_itemOffset = default(VectorOffset),
      VectorOffset out_growthOffset = default(VectorOffset),
      int double_rate = 0,
      int count = 0,
      int refresh_time = 0) {
    builder.StartTable(12);
    FishingPoint.AddRefreshTime(builder, refresh_time);
    FishingPoint.AddCount(builder, count);
    FishingPoint.AddDoubleRate(builder, double_rate);
    FishingPoint.AddOutGrowth(builder, out_growthOffset);
    FishingPoint.AddRewardItem(builder, reward_itemOffset);
    FishingPoint.AddSceneConfigId(builder, scene_config_id);
    FishingPoint.AddGroupId(builder, group_id);
    FishingPoint.AddUnlockTech(builder, unlock_tech);
    FishingPoint.AddGamePlayId(builder, game_play_id);
    FishingPoint.AddShowItem(builder, show_item);
    FishingPoint.AddEntityConfigId(builder, entity_config_id);
    FishingPoint.AddId(builder, id);
    return FishingPoint.EndFishingPoint(builder);
  }

  public static void StartFishingPoint(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddEntityConfigId(FlatBufferBuilder builder, int entityConfigId) { builder.AddInt(1, entityConfigId, 0); }
  public static void AddShowItem(FlatBufferBuilder builder, int showItem) { builder.AddInt(2, showItem, 0); }
  public static void AddGamePlayId(FlatBufferBuilder builder, int gamePlayId) { builder.AddInt(3, gamePlayId, 0); }
  public static void AddUnlockTech(FlatBufferBuilder builder, int unlockTech) { builder.AddInt(4, unlockTech, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, int groupId) { builder.AddInt(5, groupId, 0); }
  public static void AddSceneConfigId(FlatBufferBuilder builder, int sceneConfigId) { builder.AddInt(6, sceneConfigId, 8); }
  public static void AddRewardItem(FlatBufferBuilder builder, VectorOffset rewardItemOffset) { builder.AddOffset(7, rewardItemOffset.Value, 0); }
  public static VectorOffset CreateRewardItemVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRewardItemVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardItemVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardItemVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardItemVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOutGrowth(FlatBufferBuilder builder, VectorOffset outGrowthOffset) { builder.AddOffset(8, outGrowthOffset.Value, 0); }
  public static VectorOffset CreateOutGrowthVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOutGrowthVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOutGrowthVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOutGrowthVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOutGrowthVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDoubleRate(FlatBufferBuilder builder, int doubleRate) { builder.AddInt(9, doubleRate, 0); }
  public static void AddCount(FlatBufferBuilder builder, int count) { builder.AddInt(10, count, 0); }
  public static void AddRefreshTime(FlatBufferBuilder builder, int refreshTime) { builder.AddInt(11, refreshTime, 0); }
  public static Offset<WWParser.Defs.FishingPoint> EndFishingPoint(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FishingPoint>(o);
  }
  public FishingPointT UnPack() {
    var _o = new FishingPointT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FishingPointT _o) {
    _o.Id = this.Id;
    _o.EntityConfigId = this.EntityConfigId;
    _o.ShowItem = this.ShowItem;
    _o.GamePlayId = this.GamePlayId;
    _o.UnlockTech = this.UnlockTech;
    _o.GroupId = this.GroupId;
    _o.SceneConfigId = this.SceneConfigId;
    _o.RewardItem = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.RewardItemLength; ++_j) {_o.RewardItem.Add(this.RewardItem(_j).HasValue ? this.RewardItem(_j).Value.UnPack() : null);}
    _o.OutGrowth = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.OutGrowthLength; ++_j) {_o.OutGrowth.Add(this.OutGrowth(_j).HasValue ? this.OutGrowth(_j).Value.UnPack() : null);}
    _o.DoubleRate = this.DoubleRate;
    _o.Count = this.Count;
    _o.RefreshTime = this.RefreshTime;
  }
  public static Offset<WWParser.Defs.FishingPoint> Pack(FlatBufferBuilder builder, FishingPointT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FishingPoint>);
    var _reward_item = default(VectorOffset);
    if (_o.RewardItem != null) {
      var __reward_item = new Offset<WWParser.Defs.DicIntInt>[_o.RewardItem.Count];
      for (var _j = 0; _j < __reward_item.Length; ++_j) { __reward_item[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.RewardItem[_j]); }
      _reward_item = CreateRewardItemVector(builder, __reward_item);
    }
    var _out_growth = default(VectorOffset);
    if (_o.OutGrowth != null) {
      var __out_growth = new Offset<WWParser.Defs.DicIntInt>[_o.OutGrowth.Count];
      for (var _j = 0; _j < __out_growth.Length; ++_j) { __out_growth[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.OutGrowth[_j]); }
      _out_growth = CreateOutGrowthVector(builder, __out_growth);
    }
    return CreateFishingPoint(
      builder,
      _o.Id,
      _o.EntityConfigId,
      _o.ShowItem,
      _o.GamePlayId,
      _o.UnlockTech,
      _o.GroupId,
      _o.SceneConfigId,
      _reward_item,
      _out_growth,
      _o.DoubleRate,
      _o.Count,
      _o.RefreshTime);
  }
}

public class FishingPointT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("entity_config_id")]
  public int EntityConfigId { get; set; }
  [Newtonsoft.Json.JsonProperty("show_item")]
  public int ShowItem { get; set; }
  [Newtonsoft.Json.JsonProperty("game_play_id")]
  public int GamePlayId { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_tech")]
  public int UnlockTech { get; set; }
  [Newtonsoft.Json.JsonProperty("group_id")]
  public int GroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("scene_config_id")]
  public int SceneConfigId { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_item")]
  public List<WWParser.Defs.DicIntIntT> RewardItem { get; set; }
  [Newtonsoft.Json.JsonProperty("out_growth")]
  public List<WWParser.Defs.DicIntIntT> OutGrowth { get; set; }
  [Newtonsoft.Json.JsonProperty("double_rate")]
  public int DoubleRate { get; set; }
  [Newtonsoft.Json.JsonProperty("count")]
  public int Count { get; set; }
  [Newtonsoft.Json.JsonProperty("refresh_time")]
  public int RefreshTime { get; set; }

  public FishingPointT() {
    this.Id = 0;
    this.EntityConfigId = 0;
    this.ShowItem = 0;
    this.GamePlayId = 0;
    this.UnlockTech = 0;
    this.GroupId = 0;
    this.SceneConfigId = 8;
    this.RewardItem = null;
    this.OutGrowth = null;
    this.DoubleRate = 0;
    this.Count = 0;
    this.RefreshTime = 0;
  }
}


static public class FishingPointVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*EntityConfigId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ShowItem*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*GamePlayId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*UnlockTech*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*GroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*SceneConfigId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 18 /*RewardItem*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 20 /*OutGrowth*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 22 /*DoubleRate*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*Count*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*RefreshTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
