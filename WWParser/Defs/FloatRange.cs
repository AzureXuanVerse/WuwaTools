// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FloatRange : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FloatRange GetRootAsFloatRange(ByteBuffer _bb) { return GetRootAsFloatRange(_bb, new FloatRange()); }
  public static FloatRange GetRootAsFloatRange(ByteBuffer _bb, FloatRange obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FloatRange __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Min { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Max { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<WWParser.Defs.FloatRange> CreateFloatRange(FlatBufferBuilder builder,
      float min = 0.0f,
      float max = 0.0f) {
    builder.StartTable(2);
    FloatRange.AddMax(builder, max);
    FloatRange.AddMin(builder, min);
    return FloatRange.EndFloatRange(builder);
  }

  public static void StartFloatRange(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMin(FlatBufferBuilder builder, float min) { builder.AddFloat(0, min, 0.0f); }
  public static void AddMax(FlatBufferBuilder builder, float max) { builder.AddFloat(1, max, 0.0f); }
  public static Offset<WWParser.Defs.FloatRange> EndFloatRange(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FloatRange>(o);
  }
  public FloatRangeT UnPack() {
    var _o = new FloatRangeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FloatRangeT _o) {
    _o.Min = this.Min;
    _o.Max = this.Max;
  }
  public static Offset<WWParser.Defs.FloatRange> Pack(FlatBufferBuilder builder, FloatRangeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FloatRange>);
    return CreateFloatRange(
      builder,
      _o.Min,
      _o.Max);
  }
}

public class FloatRangeT
{
  [Newtonsoft.Json.JsonProperty("min")]
  public float Min { get; set; }
  [Newtonsoft.Json.JsonProperty("max")]
  public float Max { get; set; }

  public FloatRangeT() {
    this.Min = 0.0f;
    this.Max = 0.0f;
  }
}


static public class FloatRangeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Min*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Max*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
