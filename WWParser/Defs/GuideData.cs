// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GuideData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GuideData GetRootAsGuideData(ByteBuffer _bb) { return GetRootAsGuideData(_bb, new GuideData()); }
  public static GuideData GetRootAsGuideData(ByteBuffer _bb, GuideData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GuideData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TitleText { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleTextBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTitleTextBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTitleTextArray() { return __p.__vector_as_array<byte>(6); }
  public string NoteText { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNoteTextBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNoteTextBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNoteTextArray() { return __p.__vector_as_array<byte>(8); }
  public string BgTexture { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgTextureBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetBgTextureBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetBgTextureArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<WWParser.Defs.GuideData> CreateGuideData(FlatBufferBuilder builder,
      int id = 0,
      StringOffset title_textOffset = default(StringOffset),
      StringOffset note_textOffset = default(StringOffset),
      StringOffset bg_textureOffset = default(StringOffset)) {
    builder.StartTable(4);
    GuideData.AddBgTexture(builder, bg_textureOffset);
    GuideData.AddNoteText(builder, note_textOffset);
    GuideData.AddTitleText(builder, title_textOffset);
    GuideData.AddId(builder, id);
    return GuideData.EndGuideData(builder);
  }

  public static void StartGuideData(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTitleText(FlatBufferBuilder builder, StringOffset titleTextOffset) { builder.AddOffset(1, titleTextOffset.Value, 0); }
  public static void AddNoteText(FlatBufferBuilder builder, StringOffset noteTextOffset) { builder.AddOffset(2, noteTextOffset.Value, 0); }
  public static void AddBgTexture(FlatBufferBuilder builder, StringOffset bgTextureOffset) { builder.AddOffset(3, bgTextureOffset.Value, 0); }
  public static Offset<WWParser.Defs.GuideData> EndGuideData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.GuideData>(o);
  }
  public GuideDataT UnPack() {
    var _o = new GuideDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GuideDataT _o) {
    _o.Id = this.Id;
    _o.TitleText = this.TitleText;
    _o.NoteText = this.NoteText;
    _o.BgTexture = this.BgTexture;
  }
  public static Offset<WWParser.Defs.GuideData> Pack(FlatBufferBuilder builder, GuideDataT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.GuideData>);
    var _title_text = _o.TitleText == null ? default(StringOffset) : builder.CreateString(_o.TitleText);
    var _note_text = _o.NoteText == null ? default(StringOffset) : builder.CreateString(_o.NoteText);
    var _bg_texture = _o.BgTexture == null ? default(StringOffset) : builder.CreateString(_o.BgTexture);
    return CreateGuideData(
      builder,
      _o.Id,
      _title_text,
      _note_text,
      _bg_texture);
  }
}

public class GuideDataT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("title_text")]
  public string TitleText { get; set; }
  [Newtonsoft.Json.JsonProperty("note_text")]
  public string NoteText { get; set; }
  [Newtonsoft.Json.JsonProperty("bg_texture")]
  public string BgTexture { get; set; }

  public GuideDataT() {
    this.Id = 0;
    this.TitleText = null;
    this.NoteText = null;
    this.BgTexture = null;
  }
}


static public class GuideDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*TitleText*/, false)
      && verifier.VerifyString(tablePos, 8 /*NoteText*/, false)
      && verifier.VerifyString(tablePos, 10 /*BgTexture*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
