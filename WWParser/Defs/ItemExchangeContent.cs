// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ItemExchangeContent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ItemExchangeContent GetRootAsItemExchangeContent(ByteBuffer _bb) { return GetRootAsItemExchangeContent(_bb, new ItemExchangeContent()); }
  public static ItemExchangeContent GetRootAsItemExchangeContent(ByteBuffer _bb, ItemExchangeContent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemExchangeContent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ItemId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Times { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GainCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? Consume(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConsumeLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.ItemExchangeContent> CreateItemExchangeContent(FlatBufferBuilder builder,
      int item_id = 0,
      int times = 0,
      int gain_count = 0,
      VectorOffset consumeOffset = default(VectorOffset)) {
    builder.StartTable(4);
    ItemExchangeContent.AddConsume(builder, consumeOffset);
    ItemExchangeContent.AddGainCount(builder, gain_count);
    ItemExchangeContent.AddTimes(builder, times);
    ItemExchangeContent.AddItemId(builder, item_id);
    return ItemExchangeContent.EndItemExchangeContent(builder);
  }

  public static void StartItemExchangeContent(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddItemId(FlatBufferBuilder builder, int itemId) { builder.AddInt(0, itemId, 0); }
  public static void AddTimes(FlatBufferBuilder builder, int times) { builder.AddInt(1, times, 0); }
  public static void AddGainCount(FlatBufferBuilder builder, int gainCount) { builder.AddInt(2, gainCount, 0); }
  public static void AddConsume(FlatBufferBuilder builder, VectorOffset consumeOffset) { builder.AddOffset(3, consumeOffset.Value, 0); }
  public static VectorOffset CreateConsumeVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConsumeVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConsumeVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConsumeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConsumeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.ItemExchangeContent> EndItemExchangeContent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ItemExchangeContent>(o);
  }
  public ItemExchangeContentT UnPack() {
    var _o = new ItemExchangeContentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemExchangeContentT _o) {
    _o.ItemId = this.ItemId;
    _o.Times = this.Times;
    _o.GainCount = this.GainCount;
    _o.Consume = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.ConsumeLength; ++_j) {_o.Consume.Add(this.Consume(_j).HasValue ? this.Consume(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.ItemExchangeContent> Pack(FlatBufferBuilder builder, ItemExchangeContentT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ItemExchangeContent>);
    var _consume = default(VectorOffset);
    if (_o.Consume != null) {
      var __consume = new Offset<WWParser.Defs.DicIntInt>[_o.Consume.Count];
      for (var _j = 0; _j < __consume.Length; ++_j) { __consume[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.Consume[_j]); }
      _consume = CreateConsumeVector(builder, __consume);
    }
    return CreateItemExchangeContent(
      builder,
      _o.ItemId,
      _o.Times,
      _o.GainCount,
      _consume);
  }
}

public class ItemExchangeContentT
{
  [Newtonsoft.Json.JsonProperty("item_id")]
  public int ItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("times")]
  public int Times { get; set; }
  [Newtonsoft.Json.JsonProperty("gain_count")]
  public int GainCount { get; set; }
  [Newtonsoft.Json.JsonProperty("consume")]
  public List<WWParser.Defs.DicIntIntT> Consume { get; set; }

  public ItemExchangeContentT() {
    this.ItemId = 0;
    this.Times = 0;
    this.GainCount = 0;
    this.Consume = null;
  }
}


static public class ItemExchangeContentVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Times*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*GainCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*Consume*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
