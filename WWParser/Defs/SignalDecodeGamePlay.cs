// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SignalDecodeGamePlay : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SignalDecodeGamePlay GetRootAsSignalDecodeGamePlay(ByteBuffer _bb) { return GetRootAsSignalDecodeGamePlay(_bb, new SignalDecodeGamePlay()); }
  public static SignalDecodeGamePlay GetRootAsSignalDecodeGamePlay(ByteBuffer _bb, SignalDecodeGamePlay obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SignalDecodeGamePlay __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int SignalData1 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SignalData2 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SignalData3 { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SignalData4 { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.SignalDecodeGamePlay> CreateSignalDecodeGamePlay(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      int signal_data1 = 0,
      int signal_data2 = 0,
      int signal_data3 = 0,
      int signal_data4 = 0) {
    builder.StartTable(6);
    SignalDecodeGamePlay.AddSignalData4(builder, signal_data4);
    SignalDecodeGamePlay.AddSignalData3(builder, signal_data3);
    SignalDecodeGamePlay.AddSignalData2(builder, signal_data2);
    SignalDecodeGamePlay.AddSignalData1(builder, signal_data1);
    SignalDecodeGamePlay.AddName(builder, nameOffset);
    SignalDecodeGamePlay.AddId(builder, idOffset);
    return SignalDecodeGamePlay.EndSignalDecodeGamePlay(builder);
  }

  public static void StartSignalDecodeGamePlay(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddSignalData1(FlatBufferBuilder builder, int signalData1) { builder.AddInt(2, signalData1, 0); }
  public static void AddSignalData2(FlatBufferBuilder builder, int signalData2) { builder.AddInt(3, signalData2, 0); }
  public static void AddSignalData3(FlatBufferBuilder builder, int signalData3) { builder.AddInt(4, signalData3, 0); }
  public static void AddSignalData4(FlatBufferBuilder builder, int signalData4) { builder.AddInt(5, signalData4, 0); }
  public static Offset<WWParser.Defs.SignalDecodeGamePlay> EndSignalDecodeGamePlay(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SignalDecodeGamePlay>(o);
  }
  public SignalDecodeGamePlayT UnPack() {
    var _o = new SignalDecodeGamePlayT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SignalDecodeGamePlayT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.SignalData1 = this.SignalData1;
    _o.SignalData2 = this.SignalData2;
    _o.SignalData3 = this.SignalData3;
    _o.SignalData4 = this.SignalData4;
  }
  public static Offset<WWParser.Defs.SignalDecodeGamePlay> Pack(FlatBufferBuilder builder, SignalDecodeGamePlayT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SignalDecodeGamePlay>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateSignalDecodeGamePlay(
      builder,
      _id,
      _name,
      _o.SignalData1,
      _o.SignalData2,
      _o.SignalData3,
      _o.SignalData4);
  }
}

public class SignalDecodeGamePlayT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("signal_data1")]
  public int SignalData1 { get; set; }
  [Newtonsoft.Json.JsonProperty("signal_data2")]
  public int SignalData2 { get; set; }
  [Newtonsoft.Json.JsonProperty("signal_data3")]
  public int SignalData3 { get; set; }
  [Newtonsoft.Json.JsonProperty("signal_data4")]
  public int SignalData4 { get; set; }

  public SignalDecodeGamePlayT() {
    this.Id = null;
    this.Name = null;
    this.SignalData1 = 0;
    this.SignalData2 = 0;
    this.SignalData3 = 0;
    this.SignalData4 = 0;
  }
}


static public class SignalDecodeGamePlayVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*SignalData1*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*SignalData2*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*SignalData3*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*SignalData4*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
