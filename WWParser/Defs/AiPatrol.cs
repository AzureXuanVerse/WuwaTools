// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiPatrol : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AiPatrol GetRootAsAiPatrol(ByteBuffer _bb) { return GetRootAsAiPatrol(_bb, new AiPatrol()); }
  public static AiPatrol GetRootAsAiPatrol(ByteBuffer _bb, AiPatrol obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiPatrol __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool CirclePatrol { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string PathSpline { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathSplineBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPathSplineBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPathSplineArray() { return __p.__vector_as_array<byte>(8); }
  public bool IsNavigation { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int StartIndex { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float LimitNpcDistance { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1000.0f; } }
  public float TurnSpeed { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)180.0f; } }
  public bool Loop { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float EndDistance { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)50.0f; } }
  public float Sampling { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool Containz { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.AiPatrol> CreateAiPatrol(FlatBufferBuilder builder,
      int id = 0,
      bool circle_patrol = false,
      StringOffset path_splineOffset = default(StringOffset),
      bool is_navigation = false,
      int start_index = 0,
      float limit_npc_distance = 1000.0f,
      float turn_speed = 180.0f,
      bool loop = false,
      float end_distance = 50.0f,
      float sampling = 0.0f,
      bool containz = false) {
    builder.StartTable(11);
    AiPatrol.AddSampling(builder, sampling);
    AiPatrol.AddEndDistance(builder, end_distance);
    AiPatrol.AddTurnSpeed(builder, turn_speed);
    AiPatrol.AddLimitNpcDistance(builder, limit_npc_distance);
    AiPatrol.AddStartIndex(builder, start_index);
    AiPatrol.AddPathSpline(builder, path_splineOffset);
    AiPatrol.AddId(builder, id);
    AiPatrol.AddContainz(builder, containz);
    AiPatrol.AddLoop(builder, loop);
    AiPatrol.AddIsNavigation(builder, is_navigation);
    AiPatrol.AddCirclePatrol(builder, circle_patrol);
    return AiPatrol.EndAiPatrol(builder);
  }

  public static void StartAiPatrol(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddCirclePatrol(FlatBufferBuilder builder, bool circlePatrol) { builder.AddBool(1, circlePatrol, false); }
  public static void AddPathSpline(FlatBufferBuilder builder, StringOffset pathSplineOffset) { builder.AddOffset(2, pathSplineOffset.Value, 0); }
  public static void AddIsNavigation(FlatBufferBuilder builder, bool isNavigation) { builder.AddBool(3, isNavigation, false); }
  public static void AddStartIndex(FlatBufferBuilder builder, int startIndex) { builder.AddInt(4, startIndex, 0); }
  public static void AddLimitNpcDistance(FlatBufferBuilder builder, float limitNpcDistance) { builder.AddFloat(5, limitNpcDistance, 1000.0f); }
  public static void AddTurnSpeed(FlatBufferBuilder builder, float turnSpeed) { builder.AddFloat(6, turnSpeed, 180.0f); }
  public static void AddLoop(FlatBufferBuilder builder, bool loop) { builder.AddBool(7, loop, false); }
  public static void AddEndDistance(FlatBufferBuilder builder, float endDistance) { builder.AddFloat(8, endDistance, 50.0f); }
  public static void AddSampling(FlatBufferBuilder builder, float sampling) { builder.AddFloat(9, sampling, 0.0f); }
  public static void AddContainz(FlatBufferBuilder builder, bool containz) { builder.AddBool(10, containz, false); }
  public static Offset<WWParser.Defs.AiPatrol> EndAiPatrol(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AiPatrol>(o);
  }
  public AiPatrolT UnPack() {
    var _o = new AiPatrolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AiPatrolT _o) {
    _o.Id = this.Id;
    _o.CirclePatrol = this.CirclePatrol;
    _o.PathSpline = this.PathSpline;
    _o.IsNavigation = this.IsNavigation;
    _o.StartIndex = this.StartIndex;
    _o.LimitNpcDistance = this.LimitNpcDistance;
    _o.TurnSpeed = this.TurnSpeed;
    _o.Loop = this.Loop;
    _o.EndDistance = this.EndDistance;
    _o.Sampling = this.Sampling;
    _o.Containz = this.Containz;
  }
  public static Offset<WWParser.Defs.AiPatrol> Pack(FlatBufferBuilder builder, AiPatrolT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AiPatrol>);
    var _path_spline = _o.PathSpline == null ? default(StringOffset) : builder.CreateString(_o.PathSpline);
    return CreateAiPatrol(
      builder,
      _o.Id,
      _o.CirclePatrol,
      _path_spline,
      _o.IsNavigation,
      _o.StartIndex,
      _o.LimitNpcDistance,
      _o.TurnSpeed,
      _o.Loop,
      _o.EndDistance,
      _o.Sampling,
      _o.Containz);
  }
}

public class AiPatrolT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("circle_patrol")]
  public bool CirclePatrol { get; set; }
  [Newtonsoft.Json.JsonProperty("path_spline")]
  public string PathSpline { get; set; }
  [Newtonsoft.Json.JsonProperty("is_navigation")]
  public bool IsNavigation { get; set; }
  [Newtonsoft.Json.JsonProperty("start_index")]
  public int StartIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("limit_npc_distance")]
  public float LimitNpcDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("turn_speed")]
  public float TurnSpeed { get; set; }
  [Newtonsoft.Json.JsonProperty("loop")]
  public bool Loop { get; set; }
  [Newtonsoft.Json.JsonProperty("end_distance")]
  public float EndDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("sampling")]
  public float Sampling { get; set; }
  [Newtonsoft.Json.JsonProperty("containz")]
  public bool Containz { get; set; }

  public AiPatrolT() {
    this.Id = 0;
    this.CirclePatrol = false;
    this.PathSpline = null;
    this.IsNavigation = false;
    this.StartIndex = 0;
    this.LimitNpcDistance = 1000.0f;
    this.TurnSpeed = 180.0f;
    this.Loop = false;
    this.EndDistance = 50.0f;
    this.Sampling = 0.0f;
    this.Containz = false;
  }
}


static public class AiPatrolVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*CirclePatrol*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 8 /*PathSpline*/, false)
      && verifier.VerifyField(tablePos, 10 /*IsNavigation*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*StartIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*LimitNpcDistance*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*TurnSpeed*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Loop*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 20 /*EndDistance*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*Sampling*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*Containz*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
