// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DangoSkill : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DangoSkill GetRootAsDangoSkill(ByteBuffer _bb) { return GetRootAsDangoSkill(_bb, new DangoSkill()); }
  public static DangoSkill GetRootAsDangoSkill(ByteBuffer _bb, DangoSkill obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DangoSkill __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Desc { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(8); }
  public string ActivateDesc { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActivateDescBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetActivateDescBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetActivateDescArray() { return __p.__vector_as_array<byte>(10); }
  public int SkillEffect { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Params(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ParamsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.DangoSkill> CreateDangoSkill(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      StringOffset activate_descOffset = default(StringOffset),
      int skill_effect = 0,
      VectorOffset @paramsOffset = default(VectorOffset)) {
    builder.StartTable(6);
    DangoSkill.AddParams(builder, @paramsOffset);
    DangoSkill.AddSkillEffect(builder, skill_effect);
    DangoSkill.AddActivateDesc(builder, activate_descOffset);
    DangoSkill.AddDesc(builder, descOffset);
    DangoSkill.AddName(builder, nameOffset);
    DangoSkill.AddId(builder, id);
    return DangoSkill.EndDangoSkill(builder);
  }

  public static void StartDangoSkill(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(2, descOffset.Value, 0); }
  public static void AddActivateDesc(FlatBufferBuilder builder, StringOffset activateDescOffset) { builder.AddOffset(3, activateDescOffset.Value, 0); }
  public static void AddSkillEffect(FlatBufferBuilder builder, int skillEffect) { builder.AddInt(4, skillEffect, 0); }
  public static void AddParams(FlatBufferBuilder builder, VectorOffset paramsOffset) { builder.AddOffset(5, paramsOffset.Value, 0); }
  public static VectorOffset CreateParamsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateParamsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParamsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParamsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.DangoSkill> EndDangoSkill(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DangoSkill>(o);
  }
  public DangoSkillT UnPack() {
    var _o = new DangoSkillT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DangoSkillT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.Desc = this.Desc;
    _o.ActivateDesc = this.ActivateDesc;
    _o.SkillEffect = this.SkillEffect;
    _o.Params = new List<string>();
    for (var _j = 0; _j < this.ParamsLength; ++_j) {_o.Params.Add(this.Params(_j));}
  }
  public static Offset<WWParser.Defs.DangoSkill> Pack(FlatBufferBuilder builder, DangoSkillT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DangoSkill>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    var _activate_desc = _o.ActivateDesc == null ? default(StringOffset) : builder.CreateString(_o.ActivateDesc);
    var _params = default(VectorOffset);
    if (_o.Params != null) {
      var __params = new StringOffset[_o.Params.Count];
      for (var _j = 0; _j < __params.Length; ++_j) { __params[_j] = builder.CreateString(_o.Params[_j]); }
      _params = CreateParamsVector(builder, __params);
    }
    return CreateDangoSkill(
      builder,
      _o.Id,
      _name,
      _desc,
      _activate_desc,
      _o.SkillEffect,
      _params);
  }
}

public class DangoSkillT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }
  [Newtonsoft.Json.JsonProperty("activate_desc")]
  public string ActivateDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_effect")]
  public int SkillEffect { get; set; }
  [Newtonsoft.Json.JsonProperty("params")]
  public List<string> Params { get; set; }

  public DangoSkillT() {
    this.Id = 0;
    this.Name = null;
    this.Desc = null;
    this.ActivateDesc = null;
    this.SkillEffect = 0;
    this.Params = null;
  }
}


static public class DangoSkillVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyString(tablePos, 8 /*Desc*/, false)
      && verifier.VerifyString(tablePos, 10 /*ActivateDesc*/, false)
      && verifier.VerifyField(tablePos, 12 /*SkillEffect*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*Params*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
