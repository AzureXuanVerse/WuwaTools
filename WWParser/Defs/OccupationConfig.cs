// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct OccupationConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static OccupationConfig GetRootAsOccupationConfig(ByteBuffer _bb) { return GetRootAsOccupationConfig(_bb, new OccupationConfig()); }
  public static OccupationConfig GetRootAsOccupationConfig(ByteBuffer _bb, OccupationConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OccupationConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string OccupationType { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOccupationTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetOccupationTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetOccupationTypeArray() { return __p.__vector_as_array<byte>(6); }
  public int NameStringKey { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Name { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string OccupationData { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOccupationDataBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOccupationDataBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOccupationDataArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<WWParser.Defs.OccupationConfig> CreateOccupationConfig(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset occupation_typeOffset = default(StringOffset),
      int name_string_key = 0,
      int name = 0,
      StringOffset occupation_dataOffset = default(StringOffset)) {
    builder.StartTable(5);
    OccupationConfig.AddOccupationData(builder, occupation_dataOffset);
    OccupationConfig.AddName(builder, name);
    OccupationConfig.AddNameStringKey(builder, name_string_key);
    OccupationConfig.AddOccupationType(builder, occupation_typeOffset);
    OccupationConfig.AddId(builder, idOffset);
    return OccupationConfig.EndOccupationConfig(builder);
  }

  public static void StartOccupationConfig(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddOccupationType(FlatBufferBuilder builder, StringOffset occupationTypeOffset) { builder.AddOffset(1, occupationTypeOffset.Value, 0); }
  public static void AddNameStringKey(FlatBufferBuilder builder, int nameStringKey) { builder.AddInt(2, nameStringKey, 0); }
  public static void AddName(FlatBufferBuilder builder, int name) { builder.AddInt(3, name, 0); }
  public static void AddOccupationData(FlatBufferBuilder builder, StringOffset occupationDataOffset) { builder.AddOffset(4, occupationDataOffset.Value, 0); }
  public static Offset<WWParser.Defs.OccupationConfig> EndOccupationConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.OccupationConfig>(o);
  }
  public OccupationConfigT UnPack() {
    var _o = new OccupationConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OccupationConfigT _o) {
    _o.Id = this.Id;
    _o.OccupationType = this.OccupationType;
    _o.NameStringKey = this.NameStringKey;
    _o.Name = this.Name;
    _o.OccupationData = this.OccupationData;
  }
  public static Offset<WWParser.Defs.OccupationConfig> Pack(FlatBufferBuilder builder, OccupationConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.OccupationConfig>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _occupation_type = _o.OccupationType == null ? default(StringOffset) : builder.CreateString(_o.OccupationType);
    var _occupation_data = _o.OccupationData == null ? default(StringOffset) : builder.CreateString(_o.OccupationData);
    return CreateOccupationConfig(
      builder,
      _id,
      _occupation_type,
      _o.NameStringKey,
      _o.Name,
      _occupation_data);
  }
}

public class OccupationConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("occupation_type")]
  public string OccupationType { get; set; }
  [Newtonsoft.Json.JsonProperty("name_string_key")]
  public int NameStringKey { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public int Name { get; set; }
  [Newtonsoft.Json.JsonProperty("occupation_data")]
  public string OccupationData { get; set; }

  public OccupationConfigT() {
    this.Id = null;
    this.OccupationType = null;
    this.NameStringKey = 0;
    this.Name = 0;
    this.OccupationData = null;
  }
}


static public class OccupationConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*OccupationType*/, false)
      && verifier.VerifyField(tablePos, 8 /*NameStringKey*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Name*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*OccupationData*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
