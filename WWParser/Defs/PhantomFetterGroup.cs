// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PhantomFetterGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PhantomFetterGroup GetRootAsPhantomFetterGroup(ByteBuffer _bb) { return GetRootAsPhantomFetterGroup(_bb, new PhantomFetterGroup()); }
  public static PhantomFetterGroup GetRootAsPhantomFetterGroup(ByteBuffer _bb, PhantomFetterGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PhantomFetterGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? FetterMap(int j) { int o = __p.__offset(6); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FetterMapLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string FetterGroupName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFetterGroupNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetFetterGroupNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetFetterGroupNameArray() { return __p.__vector_as_array<byte>(8); }
  public int AccessId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string FetterGroupDesc { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFetterGroupDescBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetFetterGroupDescBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetFetterGroupDescArray() { return __p.__vector_as_array<byte>(12); }
  public string FetterElementColor { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFetterElementColorBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetFetterElementColorBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetFetterElementColorArray() { return __p.__vector_as_array<byte>(14); }
  public string FetterElementPath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFetterElementPathBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetFetterElementPathBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetFetterElementPathArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<WWParser.Defs.PhantomFetterGroup> CreatePhantomFetterGroup(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset fetter_mapOffset = default(VectorOffset),
      StringOffset fetter_group_nameOffset = default(StringOffset),
      int access_id = 0,
      StringOffset fetter_group_descOffset = default(StringOffset),
      StringOffset fetter_element_colorOffset = default(StringOffset),
      StringOffset fetter_element_pathOffset = default(StringOffset)) {
    builder.StartTable(7);
    PhantomFetterGroup.AddFetterElementPath(builder, fetter_element_pathOffset);
    PhantomFetterGroup.AddFetterElementColor(builder, fetter_element_colorOffset);
    PhantomFetterGroup.AddFetterGroupDesc(builder, fetter_group_descOffset);
    PhantomFetterGroup.AddAccessId(builder, access_id);
    PhantomFetterGroup.AddFetterGroupName(builder, fetter_group_nameOffset);
    PhantomFetterGroup.AddFetterMap(builder, fetter_mapOffset);
    PhantomFetterGroup.AddId(builder, id);
    return PhantomFetterGroup.EndPhantomFetterGroup(builder);
  }

  public static void StartPhantomFetterGroup(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddFetterMap(FlatBufferBuilder builder, VectorOffset fetterMapOffset) { builder.AddOffset(1, fetterMapOffset.Value, 0); }
  public static VectorOffset CreateFetterMapVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFetterMapVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFetterMapVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFetterMapVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFetterMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFetterGroupName(FlatBufferBuilder builder, StringOffset fetterGroupNameOffset) { builder.AddOffset(2, fetterGroupNameOffset.Value, 0); }
  public static void AddAccessId(FlatBufferBuilder builder, int accessId) { builder.AddInt(3, accessId, 0); }
  public static void AddFetterGroupDesc(FlatBufferBuilder builder, StringOffset fetterGroupDescOffset) { builder.AddOffset(4, fetterGroupDescOffset.Value, 0); }
  public static void AddFetterElementColor(FlatBufferBuilder builder, StringOffset fetterElementColorOffset) { builder.AddOffset(5, fetterElementColorOffset.Value, 0); }
  public static void AddFetterElementPath(FlatBufferBuilder builder, StringOffset fetterElementPathOffset) { builder.AddOffset(6, fetterElementPathOffset.Value, 0); }
  public static Offset<WWParser.Defs.PhantomFetterGroup> EndPhantomFetterGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PhantomFetterGroup>(o);
  }
  public PhantomFetterGroupT UnPack() {
    var _o = new PhantomFetterGroupT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PhantomFetterGroupT _o) {
    _o.Id = this.Id;
    _o.FetterMap = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.FetterMapLength; ++_j) {_o.FetterMap.Add(this.FetterMap(_j).HasValue ? this.FetterMap(_j).Value.UnPack() : null);}
    _o.FetterGroupName = this.FetterGroupName;
    _o.AccessId = this.AccessId;
    _o.FetterGroupDesc = this.FetterGroupDesc;
    _o.FetterElementColor = this.FetterElementColor;
    _o.FetterElementPath = this.FetterElementPath;
  }
  public static Offset<WWParser.Defs.PhantomFetterGroup> Pack(FlatBufferBuilder builder, PhantomFetterGroupT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PhantomFetterGroup>);
    var _fetter_map = default(VectorOffset);
    if (_o.FetterMap != null) {
      var __fetter_map = new Offset<WWParser.Defs.DicIntInt>[_o.FetterMap.Count];
      for (var _j = 0; _j < __fetter_map.Length; ++_j) { __fetter_map[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.FetterMap[_j]); }
      _fetter_map = CreateFetterMapVector(builder, __fetter_map);
    }
    var _fetter_group_name = _o.FetterGroupName == null ? default(StringOffset) : builder.CreateString(_o.FetterGroupName);
    var _fetter_group_desc = _o.FetterGroupDesc == null ? default(StringOffset) : builder.CreateString(_o.FetterGroupDesc);
    var _fetter_element_color = _o.FetterElementColor == null ? default(StringOffset) : builder.CreateString(_o.FetterElementColor);
    var _fetter_element_path = _o.FetterElementPath == null ? default(StringOffset) : builder.CreateString(_o.FetterElementPath);
    return CreatePhantomFetterGroup(
      builder,
      _o.Id,
      _fetter_map,
      _fetter_group_name,
      _o.AccessId,
      _fetter_group_desc,
      _fetter_element_color,
      _fetter_element_path);
  }
}

public class PhantomFetterGroupT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("fetter_map")]
  public List<WWParser.Defs.DicIntIntT> FetterMap { get; set; }
  [Newtonsoft.Json.JsonProperty("fetter_group_name")]
  public string FetterGroupName { get; set; }
  [Newtonsoft.Json.JsonProperty("access_id")]
  public int AccessId { get; set; }
  [Newtonsoft.Json.JsonProperty("fetter_group_desc")]
  public string FetterGroupDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("fetter_element_color")]
  public string FetterElementColor { get; set; }
  [Newtonsoft.Json.JsonProperty("fetter_element_path")]
  public string FetterElementPath { get; set; }

  public PhantomFetterGroupT() {
    this.Id = 0;
    this.FetterMap = null;
    this.FetterGroupName = null;
    this.AccessId = 0;
    this.FetterGroupDesc = null;
    this.FetterElementColor = null;
    this.FetterElementPath = null;
  }
}


static public class PhantomFetterGroupVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*FetterMap*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyString(tablePos, 8 /*FetterGroupName*/, false)
      && verifier.VerifyField(tablePos, 10 /*AccessId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*FetterGroupDesc*/, false)
      && verifier.VerifyString(tablePos, 14 /*FetterElementColor*/, false)
      && verifier.VerifyString(tablePos, 16 /*FetterElementPath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
