// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TaskMark : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TaskMark GetRootAsTaskMark(ByteBuffer _bb) { return GetRootAsTaskMark(_bb, new TaskMark()); }
  public static TaskMark GetRootAsTaskMark(ByteBuffer _bb, TaskMark obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TaskMark __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MarkId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QuestId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MarkPic { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMarkPicBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMarkPicBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMarkPicArray() { return __p.__vector_as_array<byte>(8); }
  public string MarkAcceptablePic { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMarkAcceptablePicBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMarkAcceptablePicBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMarkAcceptablePicArray() { return __p.__vector_as_array<byte>(10); }
  public string NpcTaskIcon { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNpcTaskIconBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetNpcTaskIconBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetNpcTaskIconArray() { return __p.__vector_as_array<byte>(12); }
  public int IconDistant { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)20000; } }
  public string TrackTextStartEffectColor { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrackTextStartEffectColorBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTrackTextStartEffectColorBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTrackTextStartEffectColorArray() { return __p.__vector_as_array<byte>(16); }
  public int ShowRange(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ShowRangeLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetShowRangeBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetShowRangeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetShowRangeArray() { return __p.__vector_as_array<int>(18); }
  public int ShowPriority { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Scale { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public float FxScale { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }

  public static Offset<WWParser.Defs.TaskMark> CreateTaskMark(FlatBufferBuilder builder,
      int mark_id = 0,
      int quest_id = 0,
      StringOffset mark_picOffset = default(StringOffset),
      StringOffset mark_acceptable_picOffset = default(StringOffset),
      StringOffset npc_task_iconOffset = default(StringOffset),
      int icon_distant = 20000,
      StringOffset track_text_start_effect_colorOffset = default(StringOffset),
      VectorOffset show_rangeOffset = default(VectorOffset),
      int show_priority = 0,
      float scale = 1.0f,
      float fx_scale = 1.0f) {
    builder.StartTable(11);
    TaskMark.AddFxScale(builder, fx_scale);
    TaskMark.AddScale(builder, scale);
    TaskMark.AddShowPriority(builder, show_priority);
    TaskMark.AddShowRange(builder, show_rangeOffset);
    TaskMark.AddTrackTextStartEffectColor(builder, track_text_start_effect_colorOffset);
    TaskMark.AddIconDistant(builder, icon_distant);
    TaskMark.AddNpcTaskIcon(builder, npc_task_iconOffset);
    TaskMark.AddMarkAcceptablePic(builder, mark_acceptable_picOffset);
    TaskMark.AddMarkPic(builder, mark_picOffset);
    TaskMark.AddQuestId(builder, quest_id);
    TaskMark.AddMarkId(builder, mark_id);
    return TaskMark.EndTaskMark(builder);
  }

  public static void StartTaskMark(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddMarkId(FlatBufferBuilder builder, int markId) { builder.AddInt(0, markId, 0); }
  public static void AddQuestId(FlatBufferBuilder builder, int questId) { builder.AddInt(1, questId, 0); }
  public static void AddMarkPic(FlatBufferBuilder builder, StringOffset markPicOffset) { builder.AddOffset(2, markPicOffset.Value, 0); }
  public static void AddMarkAcceptablePic(FlatBufferBuilder builder, StringOffset markAcceptablePicOffset) { builder.AddOffset(3, markAcceptablePicOffset.Value, 0); }
  public static void AddNpcTaskIcon(FlatBufferBuilder builder, StringOffset npcTaskIconOffset) { builder.AddOffset(4, npcTaskIconOffset.Value, 0); }
  public static void AddIconDistant(FlatBufferBuilder builder, int iconDistant) { builder.AddInt(5, iconDistant, 20000); }
  public static void AddTrackTextStartEffectColor(FlatBufferBuilder builder, StringOffset trackTextStartEffectColorOffset) { builder.AddOffset(6, trackTextStartEffectColorOffset.Value, 0); }
  public static void AddShowRange(FlatBufferBuilder builder, VectorOffset showRangeOffset) { builder.AddOffset(7, showRangeOffset.Value, 0); }
  public static VectorOffset CreateShowRangeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateShowRangeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowRangeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShowRangeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShowRangeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShowPriority(FlatBufferBuilder builder, int showPriority) { builder.AddInt(8, showPriority, 0); }
  public static void AddScale(FlatBufferBuilder builder, float scale) { builder.AddFloat(9, scale, 1.0f); }
  public static void AddFxScale(FlatBufferBuilder builder, float fxScale) { builder.AddFloat(10, fxScale, 1.0f); }
  public static Offset<WWParser.Defs.TaskMark> EndTaskMark(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.TaskMark>(o);
  }
  public TaskMarkT UnPack() {
    var _o = new TaskMarkT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TaskMarkT _o) {
    _o.MarkId = this.MarkId;
    _o.QuestId = this.QuestId;
    _o.MarkPic = this.MarkPic;
    _o.MarkAcceptablePic = this.MarkAcceptablePic;
    _o.NpcTaskIcon = this.NpcTaskIcon;
    _o.IconDistant = this.IconDistant;
    _o.TrackTextStartEffectColor = this.TrackTextStartEffectColor;
    _o.ShowRange = new List<int>();
    for (var _j = 0; _j < this.ShowRangeLength; ++_j) {_o.ShowRange.Add(this.ShowRange(_j));}
    _o.ShowPriority = this.ShowPriority;
    _o.Scale = this.Scale;
    _o.FxScale = this.FxScale;
  }
  public static Offset<WWParser.Defs.TaskMark> Pack(FlatBufferBuilder builder, TaskMarkT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.TaskMark>);
    var _mark_pic = _o.MarkPic == null ? default(StringOffset) : builder.CreateString(_o.MarkPic);
    var _mark_acceptable_pic = _o.MarkAcceptablePic == null ? default(StringOffset) : builder.CreateString(_o.MarkAcceptablePic);
    var _npc_task_icon = _o.NpcTaskIcon == null ? default(StringOffset) : builder.CreateString(_o.NpcTaskIcon);
    var _track_text_start_effect_color = _o.TrackTextStartEffectColor == null ? default(StringOffset) : builder.CreateString(_o.TrackTextStartEffectColor);
    var _show_range = default(VectorOffset);
    if (_o.ShowRange != null) {
      var __show_range = _o.ShowRange.ToArray();
      _show_range = CreateShowRangeVector(builder, __show_range);
    }
    return CreateTaskMark(
      builder,
      _o.MarkId,
      _o.QuestId,
      _mark_pic,
      _mark_acceptable_pic,
      _npc_task_icon,
      _o.IconDistant,
      _track_text_start_effect_color,
      _show_range,
      _o.ShowPriority,
      _o.Scale,
      _o.FxScale);
  }
}

public class TaskMarkT
{
  [Newtonsoft.Json.JsonProperty("mark_id")]
  public int MarkId { get; set; }
  [Newtonsoft.Json.JsonProperty("quest_id")]
  public int QuestId { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_pic")]
  public string MarkPic { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_acceptable_pic")]
  public string MarkAcceptablePic { get; set; }
  [Newtonsoft.Json.JsonProperty("npc_task_icon")]
  public string NpcTaskIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_distant")]
  public int IconDistant { get; set; }
  [Newtonsoft.Json.JsonProperty("track_text_start_effect_color")]
  public string TrackTextStartEffectColor { get; set; }
  [Newtonsoft.Json.JsonProperty("show_range")]
  public List<int> ShowRange { get; set; }
  [Newtonsoft.Json.JsonProperty("show_priority")]
  public int ShowPriority { get; set; }
  [Newtonsoft.Json.JsonProperty("scale")]
  public float Scale { get; set; }
  [Newtonsoft.Json.JsonProperty("fx_scale")]
  public float FxScale { get; set; }

  public TaskMarkT() {
    this.MarkId = 0;
    this.QuestId = 0;
    this.MarkPic = null;
    this.MarkAcceptablePic = null;
    this.NpcTaskIcon = null;
    this.IconDistant = 20000;
    this.TrackTextStartEffectColor = null;
    this.ShowRange = null;
    this.ShowPriority = 0;
    this.Scale = 1.0f;
    this.FxScale = 1.0f;
  }
}


static public class TaskMarkVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*MarkId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*QuestId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*MarkPic*/, false)
      && verifier.VerifyString(tablePos, 10 /*MarkAcceptablePic*/, false)
      && verifier.VerifyString(tablePos, 12 /*NpcTaskIcon*/, false)
      && verifier.VerifyField(tablePos, 14 /*IconDistant*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*TrackTextStartEffectColor*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*ShowRange*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 20 /*ShowPriority*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*Scale*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*FxScale*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
