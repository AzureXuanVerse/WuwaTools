// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiTeamAttack : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AiTeamAttack GetRootAsAiTeamAttack(ByteBuffer _bb) { return GetRootAsAiTeamAttack(_bb, new AiTeamAttack()); }
  public static AiTeamAttack GetRootAsAiTeamAttack(ByteBuffer _bb, AiTeamAttack obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiTeamAttack __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float ExtraWeight { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)3000.0f; } }
  public float DistanceCoefficient { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public float AngleCoefficient { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)100.0f; } }

  public static Offset<WWParser.Defs.AiTeamAttack> CreateAiTeamAttack(FlatBufferBuilder builder,
      int id = 0,
      float extra_weight = 3000.0f,
      float distance_coefficient = 1.0f,
      float angle_coefficient = 100.0f) {
    builder.StartTable(4);
    AiTeamAttack.AddAngleCoefficient(builder, angle_coefficient);
    AiTeamAttack.AddDistanceCoefficient(builder, distance_coefficient);
    AiTeamAttack.AddExtraWeight(builder, extra_weight);
    AiTeamAttack.AddId(builder, id);
    return AiTeamAttack.EndAiTeamAttack(builder);
  }

  public static void StartAiTeamAttack(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddExtraWeight(FlatBufferBuilder builder, float extraWeight) { builder.AddFloat(1, extraWeight, 3000.0f); }
  public static void AddDistanceCoefficient(FlatBufferBuilder builder, float distanceCoefficient) { builder.AddFloat(2, distanceCoefficient, 1.0f); }
  public static void AddAngleCoefficient(FlatBufferBuilder builder, float angleCoefficient) { builder.AddFloat(3, angleCoefficient, 100.0f); }
  public static Offset<WWParser.Defs.AiTeamAttack> EndAiTeamAttack(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AiTeamAttack>(o);
  }
  public AiTeamAttackT UnPack() {
    var _o = new AiTeamAttackT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AiTeamAttackT _o) {
    _o.Id = this.Id;
    _o.ExtraWeight = this.ExtraWeight;
    _o.DistanceCoefficient = this.DistanceCoefficient;
    _o.AngleCoefficient = this.AngleCoefficient;
  }
  public static Offset<WWParser.Defs.AiTeamAttack> Pack(FlatBufferBuilder builder, AiTeamAttackT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AiTeamAttack>);
    return CreateAiTeamAttack(
      builder,
      _o.Id,
      _o.ExtraWeight,
      _o.DistanceCoefficient,
      _o.AngleCoefficient);
  }
}

public class AiTeamAttackT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("extra_weight")]
  public float ExtraWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("distance_coefficient")]
  public float DistanceCoefficient { get; set; }
  [Newtonsoft.Json.JsonProperty("angle_coefficient")]
  public float AngleCoefficient { get; set; }

  public AiTeamAttackT() {
    this.Id = 0;
    this.ExtraWeight = 3000.0f;
    this.DistanceCoefficient = 1.0f;
    this.AngleCoefficient = 100.0f;
  }
}


static public class AiTeamAttackVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ExtraWeight*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*DistanceCoefficient*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*AngleCoefficient*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
