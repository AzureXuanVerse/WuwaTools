// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CircumScoreReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CircumScoreReward GetRootAsCircumScoreReward(ByteBuffer _bb) { return GetRootAsCircumScoreReward(_bb, new CircumScoreReward()); }
  public static CircumScoreReward GetRootAsCircumScoreReward(ByteBuffer _bb, CircumScoreReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CircumScoreReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NeedScore { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DropGroup { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.CircumScoreReward> CreateCircumScoreReward(FlatBufferBuilder builder,
      int id = 0,
      int need_score = 0,
      int drop_group = 0) {
    builder.StartTable(3);
    CircumScoreReward.AddDropGroup(builder, drop_group);
    CircumScoreReward.AddNeedScore(builder, need_score);
    CircumScoreReward.AddId(builder, id);
    return CircumScoreReward.EndCircumScoreReward(builder);
  }

  public static void StartCircumScoreReward(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddNeedScore(FlatBufferBuilder builder, int needScore) { builder.AddInt(1, needScore, 0); }
  public static void AddDropGroup(FlatBufferBuilder builder, int dropGroup) { builder.AddInt(2, dropGroup, 0); }
  public static Offset<WWParser.Defs.CircumScoreReward> EndCircumScoreReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.CircumScoreReward>(o);
  }
  public CircumScoreRewardT UnPack() {
    var _o = new CircumScoreRewardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CircumScoreRewardT _o) {
    _o.Id = this.Id;
    _o.NeedScore = this.NeedScore;
    _o.DropGroup = this.DropGroup;
  }
  public static Offset<WWParser.Defs.CircumScoreReward> Pack(FlatBufferBuilder builder, CircumScoreRewardT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.CircumScoreReward>);
    return CreateCircumScoreReward(
      builder,
      _o.Id,
      _o.NeedScore,
      _o.DropGroup);
  }
}

public class CircumScoreRewardT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("need_score")]
  public int NeedScore { get; set; }
  [Newtonsoft.Json.JsonProperty("drop_group")]
  public int DropGroup { get; set; }

  public CircumScoreRewardT() {
    this.Id = 0;
    this.NeedScore = 0;
    this.DropGroup = 0;
  }
}


static public class CircumScoreRewardVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*NeedScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*DropGroup*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
