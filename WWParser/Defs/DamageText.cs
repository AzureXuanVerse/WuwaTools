// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DamageText : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DamageText GetRootAsDamageText(ByteBuffer _bb) { return GetRootAsDamageText(_bb, new DamageText()); }
  public static DamageText GetRootAsDamageText(ByteBuffer _bb, DamageText obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DamageText __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string CommonIcon { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommonIconBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCommonIconBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCommonIconArray() { return __p.__vector_as_array<byte>(6); }
  public string CritIcon { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCritIconBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCritIconBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCritIconArray() { return __p.__vector_as_array<byte>(8); }
  public string CritNiagaraPath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCritNiagaraPathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCritNiagaraPathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCritNiagaraPathArray() { return __p.__vector_as_array<byte>(10); }
  public string TextColor { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextColorBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTextColorBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTextColorArray() { return __p.__vector_as_array<byte>(12); }
  public string StrokeColor { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrokeColorBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetStrokeColorBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetStrokeColorArray() { return __p.__vector_as_array<byte>(14); }
  public string CritTextColor { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCritTextColorBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetCritTextColorBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetCritTextColorArray() { return __p.__vector_as_array<byte>(16); }
  public string CritStrokeColor { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCritStrokeColorBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetCritStrokeColorBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetCritStrokeColorArray() { return __p.__vector_as_array<byte>(18); }
  public int MinDeviationx { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MinDeviationy { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxDeviationx { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxDeviationy { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string OwnDamageSequence { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOwnDamageSequenceBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetOwnDamageSequenceBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetOwnDamageSequenceArray() { return __p.__vector_as_array<byte>(28); }
  public string OwnCriticalDamageSequence { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOwnCriticalDamageSequenceBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetOwnCriticalDamageSequenceBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetOwnCriticalDamageSequenceArray() { return __p.__vector_as_array<byte>(30); }
  public string MonsterDamageSequence { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMonsterDamageSequenceBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetMonsterDamageSequenceBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetMonsterDamageSequenceArray() { return __p.__vector_as_array<byte>(32); }
  public string MonsterCriticalDamageSequence { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMonsterCriticalDamageSequenceBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetMonsterCriticalDamageSequenceBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetMonsterCriticalDamageSequenceArray() { return __p.__vector_as_array<byte>(34); }
  public string DamageTextSequence { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDamageTextSequenceBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetDamageTextSequenceBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetDamageTextSequenceArray() { return __p.__vector_as_array<byte>(36); }
  public bool IsPreload { get { int o = __p.__offset(38); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string OwnCommonDamageCurvePath(int j) { int o = __p.__offset(40); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int OwnCommonDamageCurvePathLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string OwnCriticalDamageCurvePath(int j) { int o = __p.__offset(42); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int OwnCriticalDamageCurvePathLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string MonsterCommonDamageCurvePath(int j) { int o = __p.__offset(44); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MonsterCommonDamageCurvePathLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string MonsterCriticalDamageCurvePath(int j) { int o = __p.__offset(46); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MonsterCriticalDamageCurvePathLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.DamageText> CreateDamageText(FlatBufferBuilder builder,
      int id = 0,
      StringOffset common_iconOffset = default(StringOffset),
      StringOffset crit_iconOffset = default(StringOffset),
      StringOffset crit_niagara_pathOffset = default(StringOffset),
      StringOffset text_colorOffset = default(StringOffset),
      StringOffset stroke_colorOffset = default(StringOffset),
      StringOffset crit_text_colorOffset = default(StringOffset),
      StringOffset crit_stroke_colorOffset = default(StringOffset),
      int min_deviationx = 0,
      int min_deviationy = 0,
      int max_deviationx = 0,
      int max_deviationy = 0,
      StringOffset own_damage_sequenceOffset = default(StringOffset),
      StringOffset own_critical_damage_sequenceOffset = default(StringOffset),
      StringOffset monster_damage_sequenceOffset = default(StringOffset),
      StringOffset monster_critical_damage_sequenceOffset = default(StringOffset),
      StringOffset damage_text_sequenceOffset = default(StringOffset),
      bool is_preload = false,
      VectorOffset own_common_damage_curve_pathOffset = default(VectorOffset),
      VectorOffset own_critical_damage_curve_pathOffset = default(VectorOffset),
      VectorOffset monster_common_damage_curve_pathOffset = default(VectorOffset),
      VectorOffset monster_critical_damage_curve_pathOffset = default(VectorOffset)) {
    builder.StartTable(22);
    DamageText.AddMonsterCriticalDamageCurvePath(builder, monster_critical_damage_curve_pathOffset);
    DamageText.AddMonsterCommonDamageCurvePath(builder, monster_common_damage_curve_pathOffset);
    DamageText.AddOwnCriticalDamageCurvePath(builder, own_critical_damage_curve_pathOffset);
    DamageText.AddOwnCommonDamageCurvePath(builder, own_common_damage_curve_pathOffset);
    DamageText.AddDamageTextSequence(builder, damage_text_sequenceOffset);
    DamageText.AddMonsterCriticalDamageSequence(builder, monster_critical_damage_sequenceOffset);
    DamageText.AddMonsterDamageSequence(builder, monster_damage_sequenceOffset);
    DamageText.AddOwnCriticalDamageSequence(builder, own_critical_damage_sequenceOffset);
    DamageText.AddOwnDamageSequence(builder, own_damage_sequenceOffset);
    DamageText.AddMaxDeviationy(builder, max_deviationy);
    DamageText.AddMaxDeviationx(builder, max_deviationx);
    DamageText.AddMinDeviationy(builder, min_deviationy);
    DamageText.AddMinDeviationx(builder, min_deviationx);
    DamageText.AddCritStrokeColor(builder, crit_stroke_colorOffset);
    DamageText.AddCritTextColor(builder, crit_text_colorOffset);
    DamageText.AddStrokeColor(builder, stroke_colorOffset);
    DamageText.AddTextColor(builder, text_colorOffset);
    DamageText.AddCritNiagaraPath(builder, crit_niagara_pathOffset);
    DamageText.AddCritIcon(builder, crit_iconOffset);
    DamageText.AddCommonIcon(builder, common_iconOffset);
    DamageText.AddId(builder, id);
    DamageText.AddIsPreload(builder, is_preload);
    return DamageText.EndDamageText(builder);
  }

  public static void StartDamageText(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddCommonIcon(FlatBufferBuilder builder, StringOffset commonIconOffset) { builder.AddOffset(1, commonIconOffset.Value, 0); }
  public static void AddCritIcon(FlatBufferBuilder builder, StringOffset critIconOffset) { builder.AddOffset(2, critIconOffset.Value, 0); }
  public static void AddCritNiagaraPath(FlatBufferBuilder builder, StringOffset critNiagaraPathOffset) { builder.AddOffset(3, critNiagaraPathOffset.Value, 0); }
  public static void AddTextColor(FlatBufferBuilder builder, StringOffset textColorOffset) { builder.AddOffset(4, textColorOffset.Value, 0); }
  public static void AddStrokeColor(FlatBufferBuilder builder, StringOffset strokeColorOffset) { builder.AddOffset(5, strokeColorOffset.Value, 0); }
  public static void AddCritTextColor(FlatBufferBuilder builder, StringOffset critTextColorOffset) { builder.AddOffset(6, critTextColorOffset.Value, 0); }
  public static void AddCritStrokeColor(FlatBufferBuilder builder, StringOffset critStrokeColorOffset) { builder.AddOffset(7, critStrokeColorOffset.Value, 0); }
  public static void AddMinDeviationx(FlatBufferBuilder builder, int minDeviationx) { builder.AddInt(8, minDeviationx, 0); }
  public static void AddMinDeviationy(FlatBufferBuilder builder, int minDeviationy) { builder.AddInt(9, minDeviationy, 0); }
  public static void AddMaxDeviationx(FlatBufferBuilder builder, int maxDeviationx) { builder.AddInt(10, maxDeviationx, 0); }
  public static void AddMaxDeviationy(FlatBufferBuilder builder, int maxDeviationy) { builder.AddInt(11, maxDeviationy, 0); }
  public static void AddOwnDamageSequence(FlatBufferBuilder builder, StringOffset ownDamageSequenceOffset) { builder.AddOffset(12, ownDamageSequenceOffset.Value, 0); }
  public static void AddOwnCriticalDamageSequence(FlatBufferBuilder builder, StringOffset ownCriticalDamageSequenceOffset) { builder.AddOffset(13, ownCriticalDamageSequenceOffset.Value, 0); }
  public static void AddMonsterDamageSequence(FlatBufferBuilder builder, StringOffset monsterDamageSequenceOffset) { builder.AddOffset(14, monsterDamageSequenceOffset.Value, 0); }
  public static void AddMonsterCriticalDamageSequence(FlatBufferBuilder builder, StringOffset monsterCriticalDamageSequenceOffset) { builder.AddOffset(15, monsterCriticalDamageSequenceOffset.Value, 0); }
  public static void AddDamageTextSequence(FlatBufferBuilder builder, StringOffset damageTextSequenceOffset) { builder.AddOffset(16, damageTextSequenceOffset.Value, 0); }
  public static void AddIsPreload(FlatBufferBuilder builder, bool isPreload) { builder.AddBool(17, isPreload, false); }
  public static void AddOwnCommonDamageCurvePath(FlatBufferBuilder builder, VectorOffset ownCommonDamageCurvePathOffset) { builder.AddOffset(18, ownCommonDamageCurvePathOffset.Value, 0); }
  public static VectorOffset CreateOwnCommonDamageCurvePathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOwnCommonDamageCurvePathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOwnCommonDamageCurvePathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOwnCommonDamageCurvePathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOwnCommonDamageCurvePathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOwnCriticalDamageCurvePath(FlatBufferBuilder builder, VectorOffset ownCriticalDamageCurvePathOffset) { builder.AddOffset(19, ownCriticalDamageCurvePathOffset.Value, 0); }
  public static VectorOffset CreateOwnCriticalDamageCurvePathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOwnCriticalDamageCurvePathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOwnCriticalDamageCurvePathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOwnCriticalDamageCurvePathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOwnCriticalDamageCurvePathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMonsterCommonDamageCurvePath(FlatBufferBuilder builder, VectorOffset monsterCommonDamageCurvePathOffset) { builder.AddOffset(20, monsterCommonDamageCurvePathOffset.Value, 0); }
  public static VectorOffset CreateMonsterCommonDamageCurvePathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMonsterCommonDamageCurvePathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMonsterCommonDamageCurvePathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMonsterCommonDamageCurvePathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMonsterCommonDamageCurvePathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMonsterCriticalDamageCurvePath(FlatBufferBuilder builder, VectorOffset monsterCriticalDamageCurvePathOffset) { builder.AddOffset(21, monsterCriticalDamageCurvePathOffset.Value, 0); }
  public static VectorOffset CreateMonsterCriticalDamageCurvePathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMonsterCriticalDamageCurvePathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMonsterCriticalDamageCurvePathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMonsterCriticalDamageCurvePathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMonsterCriticalDamageCurvePathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.DamageText> EndDamageText(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DamageText>(o);
  }
  public DamageTextT UnPack() {
    var _o = new DamageTextT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DamageTextT _o) {
    _o.Id = this.Id;
    _o.CommonIcon = this.CommonIcon;
    _o.CritIcon = this.CritIcon;
    _o.CritNiagaraPath = this.CritNiagaraPath;
    _o.TextColor = this.TextColor;
    _o.StrokeColor = this.StrokeColor;
    _o.CritTextColor = this.CritTextColor;
    _o.CritStrokeColor = this.CritStrokeColor;
    _o.MinDeviationx = this.MinDeviationx;
    _o.MinDeviationy = this.MinDeviationy;
    _o.MaxDeviationx = this.MaxDeviationx;
    _o.MaxDeviationy = this.MaxDeviationy;
    _o.OwnDamageSequence = this.OwnDamageSequence;
    _o.OwnCriticalDamageSequence = this.OwnCriticalDamageSequence;
    _o.MonsterDamageSequence = this.MonsterDamageSequence;
    _o.MonsterCriticalDamageSequence = this.MonsterCriticalDamageSequence;
    _o.DamageTextSequence = this.DamageTextSequence;
    _o.IsPreload = this.IsPreload;
    _o.OwnCommonDamageCurvePath = new List<string>();
    for (var _j = 0; _j < this.OwnCommonDamageCurvePathLength; ++_j) {_o.OwnCommonDamageCurvePath.Add(this.OwnCommonDamageCurvePath(_j));}
    _o.OwnCriticalDamageCurvePath = new List<string>();
    for (var _j = 0; _j < this.OwnCriticalDamageCurvePathLength; ++_j) {_o.OwnCriticalDamageCurvePath.Add(this.OwnCriticalDamageCurvePath(_j));}
    _o.MonsterCommonDamageCurvePath = new List<string>();
    for (var _j = 0; _j < this.MonsterCommonDamageCurvePathLength; ++_j) {_o.MonsterCommonDamageCurvePath.Add(this.MonsterCommonDamageCurvePath(_j));}
    _o.MonsterCriticalDamageCurvePath = new List<string>();
    for (var _j = 0; _j < this.MonsterCriticalDamageCurvePathLength; ++_j) {_o.MonsterCriticalDamageCurvePath.Add(this.MonsterCriticalDamageCurvePath(_j));}
  }
  public static Offset<WWParser.Defs.DamageText> Pack(FlatBufferBuilder builder, DamageTextT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DamageText>);
    var _common_icon = _o.CommonIcon == null ? default(StringOffset) : builder.CreateString(_o.CommonIcon);
    var _crit_icon = _o.CritIcon == null ? default(StringOffset) : builder.CreateString(_o.CritIcon);
    var _crit_niagara_path = _o.CritNiagaraPath == null ? default(StringOffset) : builder.CreateString(_o.CritNiagaraPath);
    var _text_color = _o.TextColor == null ? default(StringOffset) : builder.CreateString(_o.TextColor);
    var _stroke_color = _o.StrokeColor == null ? default(StringOffset) : builder.CreateString(_o.StrokeColor);
    var _crit_text_color = _o.CritTextColor == null ? default(StringOffset) : builder.CreateString(_o.CritTextColor);
    var _crit_stroke_color = _o.CritStrokeColor == null ? default(StringOffset) : builder.CreateString(_o.CritStrokeColor);
    var _own_damage_sequence = _o.OwnDamageSequence == null ? default(StringOffset) : builder.CreateString(_o.OwnDamageSequence);
    var _own_critical_damage_sequence = _o.OwnCriticalDamageSequence == null ? default(StringOffset) : builder.CreateString(_o.OwnCriticalDamageSequence);
    var _monster_damage_sequence = _o.MonsterDamageSequence == null ? default(StringOffset) : builder.CreateString(_o.MonsterDamageSequence);
    var _monster_critical_damage_sequence = _o.MonsterCriticalDamageSequence == null ? default(StringOffset) : builder.CreateString(_o.MonsterCriticalDamageSequence);
    var _damage_text_sequence = _o.DamageTextSequence == null ? default(StringOffset) : builder.CreateString(_o.DamageTextSequence);
    var _own_common_damage_curve_path = default(VectorOffset);
    if (_o.OwnCommonDamageCurvePath != null) {
      var __own_common_damage_curve_path = new StringOffset[_o.OwnCommonDamageCurvePath.Count];
      for (var _j = 0; _j < __own_common_damage_curve_path.Length; ++_j) { __own_common_damage_curve_path[_j] = builder.CreateString(_o.OwnCommonDamageCurvePath[_j]); }
      _own_common_damage_curve_path = CreateOwnCommonDamageCurvePathVector(builder, __own_common_damage_curve_path);
    }
    var _own_critical_damage_curve_path = default(VectorOffset);
    if (_o.OwnCriticalDamageCurvePath != null) {
      var __own_critical_damage_curve_path = new StringOffset[_o.OwnCriticalDamageCurvePath.Count];
      for (var _j = 0; _j < __own_critical_damage_curve_path.Length; ++_j) { __own_critical_damage_curve_path[_j] = builder.CreateString(_o.OwnCriticalDamageCurvePath[_j]); }
      _own_critical_damage_curve_path = CreateOwnCriticalDamageCurvePathVector(builder, __own_critical_damage_curve_path);
    }
    var _monster_common_damage_curve_path = default(VectorOffset);
    if (_o.MonsterCommonDamageCurvePath != null) {
      var __monster_common_damage_curve_path = new StringOffset[_o.MonsterCommonDamageCurvePath.Count];
      for (var _j = 0; _j < __monster_common_damage_curve_path.Length; ++_j) { __monster_common_damage_curve_path[_j] = builder.CreateString(_o.MonsterCommonDamageCurvePath[_j]); }
      _monster_common_damage_curve_path = CreateMonsterCommonDamageCurvePathVector(builder, __monster_common_damage_curve_path);
    }
    var _monster_critical_damage_curve_path = default(VectorOffset);
    if (_o.MonsterCriticalDamageCurvePath != null) {
      var __monster_critical_damage_curve_path = new StringOffset[_o.MonsterCriticalDamageCurvePath.Count];
      for (var _j = 0; _j < __monster_critical_damage_curve_path.Length; ++_j) { __monster_critical_damage_curve_path[_j] = builder.CreateString(_o.MonsterCriticalDamageCurvePath[_j]); }
      _monster_critical_damage_curve_path = CreateMonsterCriticalDamageCurvePathVector(builder, __monster_critical_damage_curve_path);
    }
    return CreateDamageText(
      builder,
      _o.Id,
      _common_icon,
      _crit_icon,
      _crit_niagara_path,
      _text_color,
      _stroke_color,
      _crit_text_color,
      _crit_stroke_color,
      _o.MinDeviationx,
      _o.MinDeviationy,
      _o.MaxDeviationx,
      _o.MaxDeviationy,
      _own_damage_sequence,
      _own_critical_damage_sequence,
      _monster_damage_sequence,
      _monster_critical_damage_sequence,
      _damage_text_sequence,
      _o.IsPreload,
      _own_common_damage_curve_path,
      _own_critical_damage_curve_path,
      _monster_common_damage_curve_path,
      _monster_critical_damage_curve_path);
  }
}

public class DamageTextT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("common_icon")]
  public string CommonIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("crit_icon")]
  public string CritIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("crit_niagara_path")]
  public string CritNiagaraPath { get; set; }
  [Newtonsoft.Json.JsonProperty("text_color")]
  public string TextColor { get; set; }
  [Newtonsoft.Json.JsonProperty("stroke_color")]
  public string StrokeColor { get; set; }
  [Newtonsoft.Json.JsonProperty("crit_text_color")]
  public string CritTextColor { get; set; }
  [Newtonsoft.Json.JsonProperty("crit_stroke_color")]
  public string CritStrokeColor { get; set; }
  [Newtonsoft.Json.JsonProperty("min_deviationx")]
  public int MinDeviationx { get; set; }
  [Newtonsoft.Json.JsonProperty("min_deviationy")]
  public int MinDeviationy { get; set; }
  [Newtonsoft.Json.JsonProperty("max_deviationx")]
  public int MaxDeviationx { get; set; }
  [Newtonsoft.Json.JsonProperty("max_deviationy")]
  public int MaxDeviationy { get; set; }
  [Newtonsoft.Json.JsonProperty("own_damage_sequence")]
  public string OwnDamageSequence { get; set; }
  [Newtonsoft.Json.JsonProperty("own_critical_damage_sequence")]
  public string OwnCriticalDamageSequence { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_damage_sequence")]
  public string MonsterDamageSequence { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_critical_damage_sequence")]
  public string MonsterCriticalDamageSequence { get; set; }
  [Newtonsoft.Json.JsonProperty("damage_text_sequence")]
  public string DamageTextSequence { get; set; }
  [Newtonsoft.Json.JsonProperty("is_preload")]
  public bool IsPreload { get; set; }
  [Newtonsoft.Json.JsonProperty("own_common_damage_curve_path")]
  public List<string> OwnCommonDamageCurvePath { get; set; }
  [Newtonsoft.Json.JsonProperty("own_critical_damage_curve_path")]
  public List<string> OwnCriticalDamageCurvePath { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_common_damage_curve_path")]
  public List<string> MonsterCommonDamageCurvePath { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_critical_damage_curve_path")]
  public List<string> MonsterCriticalDamageCurvePath { get; set; }

  public DamageTextT() {
    this.Id = 0;
    this.CommonIcon = null;
    this.CritIcon = null;
    this.CritNiagaraPath = null;
    this.TextColor = null;
    this.StrokeColor = null;
    this.CritTextColor = null;
    this.CritStrokeColor = null;
    this.MinDeviationx = 0;
    this.MinDeviationy = 0;
    this.MaxDeviationx = 0;
    this.MaxDeviationy = 0;
    this.OwnDamageSequence = null;
    this.OwnCriticalDamageSequence = null;
    this.MonsterDamageSequence = null;
    this.MonsterCriticalDamageSequence = null;
    this.DamageTextSequence = null;
    this.IsPreload = false;
    this.OwnCommonDamageCurvePath = null;
    this.OwnCriticalDamageCurvePath = null;
    this.MonsterCommonDamageCurvePath = null;
    this.MonsterCriticalDamageCurvePath = null;
  }
}


static public class DamageTextVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*CommonIcon*/, false)
      && verifier.VerifyString(tablePos, 8 /*CritIcon*/, false)
      && verifier.VerifyString(tablePos, 10 /*CritNiagaraPath*/, false)
      && verifier.VerifyString(tablePos, 12 /*TextColor*/, false)
      && verifier.VerifyString(tablePos, 14 /*StrokeColor*/, false)
      && verifier.VerifyString(tablePos, 16 /*CritTextColor*/, false)
      && verifier.VerifyString(tablePos, 18 /*CritStrokeColor*/, false)
      && verifier.VerifyField(tablePos, 20 /*MinDeviationx*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*MinDeviationy*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*MaxDeviationx*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*MaxDeviationy*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 28 /*OwnDamageSequence*/, false)
      && verifier.VerifyString(tablePos, 30 /*OwnCriticalDamageSequence*/, false)
      && verifier.VerifyString(tablePos, 32 /*MonsterDamageSequence*/, false)
      && verifier.VerifyString(tablePos, 34 /*MonsterCriticalDamageSequence*/, false)
      && verifier.VerifyString(tablePos, 36 /*DamageTextSequence*/, false)
      && verifier.VerifyField(tablePos, 38 /*IsPreload*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 40 /*OwnCommonDamageCurvePath*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 42 /*OwnCriticalDamageCurvePath*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 44 /*MonsterCommonDamageCurvePath*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 46 /*MonsterCriticalDamageCurvePath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
