// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PreheatVote : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PreheatVote GetRootAsPreheatVote(ByteBuffer _bb) { return GetRootAsPreheatVote(_bb, new PreheatVote()); }
  public static PreheatVote GetRootAsPreheatVote(ByteBuffer _bb, PreheatVote obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PreheatVote __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(6); }
  public string Content { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetContentBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetContentArray() { return __p.__vector_as_array<byte>(8); }
  public string Option1 { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOption1Bytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOption1Bytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOption1Array() { return __p.__vector_as_array<byte>(10); }
  public string Option2 { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOption2Bytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOption2Bytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOption2Array() { return __p.__vector_as_array<byte>(12); }
  public string NpcIconPath { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNpcIconPathBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNpcIconPathBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNpcIconPathArray() { return __p.__vector_as_array<byte>(14); }
  public string NpcContent { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNpcContentBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetNpcContentBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetNpcContentArray() { return __p.__vector_as_array<byte>(16); }
  public string OptionContent1 { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOptionContent1Bytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetOptionContent1Bytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetOptionContent1Array() { return __p.__vector_as_array<byte>(18); }
  public string OptionContent2 { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOptionContent2Bytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetOptionContent2Bytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetOptionContent2Array() { return __p.__vector_as_array<byte>(20); }
  public string OptionTheme1 { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOptionTheme1Bytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetOptionTheme1Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetOptionTheme1Array() { return __p.__vector_as_array<byte>(22); }
  public string OptionTheme2 { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOptionTheme2Bytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetOptionTheme2Bytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetOptionTheme2Array() { return __p.__vector_as_array<byte>(24); }

  public static Offset<WWParser.Defs.PreheatVote> CreatePreheatVote(FlatBufferBuilder builder,
      int id = 0,
      StringOffset titleOffset = default(StringOffset),
      StringOffset contentOffset = default(StringOffset),
      StringOffset option1Offset = default(StringOffset),
      StringOffset option2Offset = default(StringOffset),
      StringOffset npc_icon_pathOffset = default(StringOffset),
      StringOffset npc_contentOffset = default(StringOffset),
      StringOffset option_content1Offset = default(StringOffset),
      StringOffset option_content2Offset = default(StringOffset),
      StringOffset option_theme1Offset = default(StringOffset),
      StringOffset option_theme2Offset = default(StringOffset)) {
    builder.StartTable(11);
    PreheatVote.AddOptionTheme2(builder, option_theme2Offset);
    PreheatVote.AddOptionTheme1(builder, option_theme1Offset);
    PreheatVote.AddOptionContent2(builder, option_content2Offset);
    PreheatVote.AddOptionContent1(builder, option_content1Offset);
    PreheatVote.AddNpcContent(builder, npc_contentOffset);
    PreheatVote.AddNpcIconPath(builder, npc_icon_pathOffset);
    PreheatVote.AddOption2(builder, option2Offset);
    PreheatVote.AddOption1(builder, option1Offset);
    PreheatVote.AddContent(builder, contentOffset);
    PreheatVote.AddTitle(builder, titleOffset);
    PreheatVote.AddId(builder, id);
    return PreheatVote.EndPreheatVote(builder);
  }

  public static void StartPreheatVote(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(1, titleOffset.Value, 0); }
  public static void AddContent(FlatBufferBuilder builder, StringOffset contentOffset) { builder.AddOffset(2, contentOffset.Value, 0); }
  public static void AddOption1(FlatBufferBuilder builder, StringOffset option1Offset) { builder.AddOffset(3, option1Offset.Value, 0); }
  public static void AddOption2(FlatBufferBuilder builder, StringOffset option2Offset) { builder.AddOffset(4, option2Offset.Value, 0); }
  public static void AddNpcIconPath(FlatBufferBuilder builder, StringOffset npcIconPathOffset) { builder.AddOffset(5, npcIconPathOffset.Value, 0); }
  public static void AddNpcContent(FlatBufferBuilder builder, StringOffset npcContentOffset) { builder.AddOffset(6, npcContentOffset.Value, 0); }
  public static void AddOptionContent1(FlatBufferBuilder builder, StringOffset optionContent1Offset) { builder.AddOffset(7, optionContent1Offset.Value, 0); }
  public static void AddOptionContent2(FlatBufferBuilder builder, StringOffset optionContent2Offset) { builder.AddOffset(8, optionContent2Offset.Value, 0); }
  public static void AddOptionTheme1(FlatBufferBuilder builder, StringOffset optionTheme1Offset) { builder.AddOffset(9, optionTheme1Offset.Value, 0); }
  public static void AddOptionTheme2(FlatBufferBuilder builder, StringOffset optionTheme2Offset) { builder.AddOffset(10, optionTheme2Offset.Value, 0); }
  public static Offset<WWParser.Defs.PreheatVote> EndPreheatVote(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PreheatVote>(o);
  }
  public PreheatVoteT UnPack() {
    var _o = new PreheatVoteT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PreheatVoteT _o) {
    _o.Id = this.Id;
    _o.Title = this.Title;
    _o.Content = this.Content;
    _o.Option1 = this.Option1;
    _o.Option2 = this.Option2;
    _o.NpcIconPath = this.NpcIconPath;
    _o.NpcContent = this.NpcContent;
    _o.OptionContent1 = this.OptionContent1;
    _o.OptionContent2 = this.OptionContent2;
    _o.OptionTheme1 = this.OptionTheme1;
    _o.OptionTheme2 = this.OptionTheme2;
  }
  public static Offset<WWParser.Defs.PreheatVote> Pack(FlatBufferBuilder builder, PreheatVoteT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PreheatVote>);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _content = _o.Content == null ? default(StringOffset) : builder.CreateString(_o.Content);
    var _option1 = _o.Option1 == null ? default(StringOffset) : builder.CreateString(_o.Option1);
    var _option2 = _o.Option2 == null ? default(StringOffset) : builder.CreateString(_o.Option2);
    var _npc_icon_path = _o.NpcIconPath == null ? default(StringOffset) : builder.CreateString(_o.NpcIconPath);
    var _npc_content = _o.NpcContent == null ? default(StringOffset) : builder.CreateString(_o.NpcContent);
    var _option_content1 = _o.OptionContent1 == null ? default(StringOffset) : builder.CreateString(_o.OptionContent1);
    var _option_content2 = _o.OptionContent2 == null ? default(StringOffset) : builder.CreateString(_o.OptionContent2);
    var _option_theme1 = _o.OptionTheme1 == null ? default(StringOffset) : builder.CreateString(_o.OptionTheme1);
    var _option_theme2 = _o.OptionTheme2 == null ? default(StringOffset) : builder.CreateString(_o.OptionTheme2);
    return CreatePreheatVote(
      builder,
      _o.Id,
      _title,
      _content,
      _option1,
      _option2,
      _npc_icon_path,
      _npc_content,
      _option_content1,
      _option_content2,
      _option_theme1,
      _option_theme2);
  }
}

public class PreheatVoteT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("content")]
  public string Content { get; set; }
  [Newtonsoft.Json.JsonProperty("option1")]
  public string Option1 { get; set; }
  [Newtonsoft.Json.JsonProperty("option2")]
  public string Option2 { get; set; }
  [Newtonsoft.Json.JsonProperty("npc_icon_path")]
  public string NpcIconPath { get; set; }
  [Newtonsoft.Json.JsonProperty("npc_content")]
  public string NpcContent { get; set; }
  [Newtonsoft.Json.JsonProperty("option_content1")]
  public string OptionContent1 { get; set; }
  [Newtonsoft.Json.JsonProperty("option_content2")]
  public string OptionContent2 { get; set; }
  [Newtonsoft.Json.JsonProperty("option_theme1")]
  public string OptionTheme1 { get; set; }
  [Newtonsoft.Json.JsonProperty("option_theme2")]
  public string OptionTheme2 { get; set; }

  public PreheatVoteT() {
    this.Id = 0;
    this.Title = null;
    this.Content = null;
    this.Option1 = null;
    this.Option2 = null;
    this.NpcIconPath = null;
    this.NpcContent = null;
    this.OptionContent1 = null;
    this.OptionContent2 = null;
    this.OptionTheme1 = null;
    this.OptionTheme2 = null;
  }
}


static public class PreheatVoteVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Title*/, false)
      && verifier.VerifyString(tablePos, 8 /*Content*/, false)
      && verifier.VerifyString(tablePos, 10 /*Option1*/, false)
      && verifier.VerifyString(tablePos, 12 /*Option2*/, false)
      && verifier.VerifyString(tablePos, 14 /*NpcIconPath*/, false)
      && verifier.VerifyString(tablePos, 16 /*NpcContent*/, false)
      && verifier.VerifyString(tablePos, 18 /*OptionContent1*/, false)
      && verifier.VerifyString(tablePos, 20 /*OptionContent2*/, false)
      && verifier.VerifyString(tablePos, 22 /*OptionTheme1*/, false)
      && verifier.VerifyString(tablePos, 24 /*OptionTheme2*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
