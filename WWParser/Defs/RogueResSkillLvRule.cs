// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueResSkillLvRule : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueResSkillLvRule GetRootAsRogueResSkillLvRule(ByteBuffer _bb) { return GetRootAsRogueResSkillLvRule(_bb, new RogueResSkillLvRule()); }
  public static RogueResSkillLvRule GetRootAsRogueResSkillLvRule(ByteBuffer _bb, RogueResSkillLvRule obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueResSkillLvRule __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Level { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? SkillLevel(int j) { int o = __p.__offset(6); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SkillLevelLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.RogueResSkillLvRule> CreateRogueResSkillLvRule(FlatBufferBuilder builder,
      int level = 0,
      VectorOffset skill_levelOffset = default(VectorOffset)) {
    builder.StartTable(2);
    RogueResSkillLvRule.AddSkillLevel(builder, skill_levelOffset);
    RogueResSkillLvRule.AddLevel(builder, level);
    return RogueResSkillLvRule.EndRogueResSkillLvRule(builder);
  }

  public static void StartRogueResSkillLvRule(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(0, level, 0); }
  public static void AddSkillLevel(FlatBufferBuilder builder, VectorOffset skillLevelOffset) { builder.AddOffset(1, skillLevelOffset.Value, 0); }
  public static VectorOffset CreateSkillLevelVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSkillLevelVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillLevelVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillLevelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSkillLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.RogueResSkillLvRule> EndRogueResSkillLvRule(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueResSkillLvRule>(o);
  }
  public RogueResSkillLvRuleT UnPack() {
    var _o = new RogueResSkillLvRuleT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueResSkillLvRuleT _o) {
    _o.Level = this.Level;
    _o.SkillLevel = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.SkillLevelLength; ++_j) {_o.SkillLevel.Add(this.SkillLevel(_j).HasValue ? this.SkillLevel(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.RogueResSkillLvRule> Pack(FlatBufferBuilder builder, RogueResSkillLvRuleT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueResSkillLvRule>);
    var _skill_level = default(VectorOffset);
    if (_o.SkillLevel != null) {
      var __skill_level = new Offset<WWParser.Defs.DicIntInt>[_o.SkillLevel.Count];
      for (var _j = 0; _j < __skill_level.Length; ++_j) { __skill_level[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.SkillLevel[_j]); }
      _skill_level = CreateSkillLevelVector(builder, __skill_level);
    }
    return CreateRogueResSkillLvRule(
      builder,
      _o.Level,
      _skill_level);
  }
}

public class RogueResSkillLvRuleT
{
  [Newtonsoft.Json.JsonProperty("level")]
  public int Level { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_level")]
  public List<WWParser.Defs.DicIntIntT> SkillLevel { get; set; }

  public RogueResSkillLvRuleT() {
    this.Level = 0;
    this.SkillLevel = null;
  }
}


static public class RogueResSkillLvRuleVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*SkillLevel*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
