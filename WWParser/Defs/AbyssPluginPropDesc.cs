// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AbyssPluginPropDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AbyssPluginPropDesc GetRootAsAbyssPluginPropDesc(ByteBuffer _bb) { return GetRootAsAbyssPluginPropDesc(_bb, new AbyssPluginPropDesc()); }
  public static AbyssPluginPropDesc GetRootAsAbyssPluginPropDesc(ByteBuffer _bb, AbyssPluginPropDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AbyssPluginPropDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BgColor { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgColorBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetBgColorBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetBgColorArray() { return __p.__vector_as_array<byte>(6); }
  public int AddType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public string Icon { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(12); }
  public string TextFormat { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextFormatBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTextFormatBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTextFormatArray() { return __p.__vector_as_array<byte>(14); }
  public string MaxTextFormat { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMaxTextFormatBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetMaxTextFormatBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetMaxTextFormatArray() { return __p.__vector_as_array<byte>(16); }
  public int MaxValue { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.AbyssPluginPropDesc> CreateAbyssPluginPropDesc(FlatBufferBuilder builder,
      int id = 0,
      StringOffset bg_colorOffset = default(StringOffset),
      int add_type = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset text_formatOffset = default(StringOffset),
      StringOffset max_text_formatOffset = default(StringOffset),
      int max_value = 0) {
    builder.StartTable(8);
    AbyssPluginPropDesc.AddMaxValue(builder, max_value);
    AbyssPluginPropDesc.AddMaxTextFormat(builder, max_text_formatOffset);
    AbyssPluginPropDesc.AddTextFormat(builder, text_formatOffset);
    AbyssPluginPropDesc.AddIcon(builder, iconOffset);
    AbyssPluginPropDesc.AddName(builder, nameOffset);
    AbyssPluginPropDesc.AddAddType(builder, add_type);
    AbyssPluginPropDesc.AddBgColor(builder, bg_colorOffset);
    AbyssPluginPropDesc.AddId(builder, id);
    return AbyssPluginPropDesc.EndAbyssPluginPropDesc(builder);
  }

  public static void StartAbyssPluginPropDesc(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddBgColor(FlatBufferBuilder builder, StringOffset bgColorOffset) { builder.AddOffset(1, bgColorOffset.Value, 0); }
  public static void AddAddType(FlatBufferBuilder builder, int addType) { builder.AddInt(2, addType, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(4, iconOffset.Value, 0); }
  public static void AddTextFormat(FlatBufferBuilder builder, StringOffset textFormatOffset) { builder.AddOffset(5, textFormatOffset.Value, 0); }
  public static void AddMaxTextFormat(FlatBufferBuilder builder, StringOffset maxTextFormatOffset) { builder.AddOffset(6, maxTextFormatOffset.Value, 0); }
  public static void AddMaxValue(FlatBufferBuilder builder, int maxValue) { builder.AddInt(7, maxValue, 0); }
  public static Offset<WWParser.Defs.AbyssPluginPropDesc> EndAbyssPluginPropDesc(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AbyssPluginPropDesc>(o);
  }
  public AbyssPluginPropDescT UnPack() {
    var _o = new AbyssPluginPropDescT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AbyssPluginPropDescT _o) {
    _o.Id = this.Id;
    _o.BgColor = this.BgColor;
    _o.AddType = this.AddType;
    _o.Name = this.Name;
    _o.Icon = this.Icon;
    _o.TextFormat = this.TextFormat;
    _o.MaxTextFormat = this.MaxTextFormat;
    _o.MaxValue = this.MaxValue;
  }
  public static Offset<WWParser.Defs.AbyssPluginPropDesc> Pack(FlatBufferBuilder builder, AbyssPluginPropDescT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AbyssPluginPropDesc>);
    var _bg_color = _o.BgColor == null ? default(StringOffset) : builder.CreateString(_o.BgColor);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _text_format = _o.TextFormat == null ? default(StringOffset) : builder.CreateString(_o.TextFormat);
    var _max_text_format = _o.MaxTextFormat == null ? default(StringOffset) : builder.CreateString(_o.MaxTextFormat);
    return CreateAbyssPluginPropDesc(
      builder,
      _o.Id,
      _bg_color,
      _o.AddType,
      _name,
      _icon,
      _text_format,
      _max_text_format,
      _o.MaxValue);
  }
}

public class AbyssPluginPropDescT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("bg_color")]
  public string BgColor { get; set; }
  [Newtonsoft.Json.JsonProperty("add_type")]
  public int AddType { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("text_format")]
  public string TextFormat { get; set; }
  [Newtonsoft.Json.JsonProperty("max_text_format")]
  public string MaxTextFormat { get; set; }
  [Newtonsoft.Json.JsonProperty("max_value")]
  public int MaxValue { get; set; }

  public AbyssPluginPropDescT() {
    this.Id = 0;
    this.BgColor = null;
    this.AddType = 0;
    this.Name = null;
    this.Icon = null;
    this.TextFormat = null;
    this.MaxTextFormat = null;
    this.MaxValue = 0;
  }
}


static public class AbyssPluginPropDescVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*BgColor*/, false)
      && verifier.VerifyField(tablePos, 8 /*AddType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Name*/, false)
      && verifier.VerifyString(tablePos, 12 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 14 /*TextFormat*/, false)
      && verifier.VerifyString(tablePos, 16 /*MaxTextFormat*/, false)
      && verifier.VerifyField(tablePos, 18 /*MaxValue*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
