// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AchievementGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AchievementGroup GetRootAsAchievementGroup(ByteBuffer _bb) { return GetRootAsAchievementGroup(_bb, new AchievementGroup()); }
  public static AchievementGroup GetRootAsAchievementGroup(ByteBuffer _bb, AchievementGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AchievementGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Category { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Sort { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public string SmallIcon { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSmallIconBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetSmallIconBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetSmallIconArray() { return __p.__vector_as_array<byte>(12); }
  public string Icon { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(14); }
  public string BackgroundIcon { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBackgroundIconBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetBackgroundIconBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetBackgroundIconArray() { return __p.__vector_as_array<byte>(16); }
  public int DropId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Enable { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.AchievementGroup> CreateAchievementGroup(FlatBufferBuilder builder,
      int id = 0,
      int category = 0,
      int sort = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset small_iconOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset background_iconOffset = default(StringOffset),
      int drop_id = 0,
      bool enable = false) {
    builder.StartTable(9);
    AchievementGroup.AddDropId(builder, drop_id);
    AchievementGroup.AddBackgroundIcon(builder, background_iconOffset);
    AchievementGroup.AddIcon(builder, iconOffset);
    AchievementGroup.AddSmallIcon(builder, small_iconOffset);
    AchievementGroup.AddName(builder, nameOffset);
    AchievementGroup.AddSort(builder, sort);
    AchievementGroup.AddCategory(builder, category);
    AchievementGroup.AddId(builder, id);
    AchievementGroup.AddEnable(builder, enable);
    return AchievementGroup.EndAchievementGroup(builder);
  }

  public static void StartAchievementGroup(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddCategory(FlatBufferBuilder builder, int category) { builder.AddInt(1, category, 0); }
  public static void AddSort(FlatBufferBuilder builder, int sort) { builder.AddInt(2, sort, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddSmallIcon(FlatBufferBuilder builder, StringOffset smallIconOffset) { builder.AddOffset(4, smallIconOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(5, iconOffset.Value, 0); }
  public static void AddBackgroundIcon(FlatBufferBuilder builder, StringOffset backgroundIconOffset) { builder.AddOffset(6, backgroundIconOffset.Value, 0); }
  public static void AddDropId(FlatBufferBuilder builder, int dropId) { builder.AddInt(7, dropId, 0); }
  public static void AddEnable(FlatBufferBuilder builder, bool enable) { builder.AddBool(8, enable, false); }
  public static Offset<WWParser.Defs.AchievementGroup> EndAchievementGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AchievementGroup>(o);
  }
  public AchievementGroupT UnPack() {
    var _o = new AchievementGroupT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AchievementGroupT _o) {
    _o.Id = this.Id;
    _o.Category = this.Category;
    _o.Sort = this.Sort;
    _o.Name = this.Name;
    _o.SmallIcon = this.SmallIcon;
    _o.Icon = this.Icon;
    _o.BackgroundIcon = this.BackgroundIcon;
    _o.DropId = this.DropId;
    _o.Enable = this.Enable;
  }
  public static Offset<WWParser.Defs.AchievementGroup> Pack(FlatBufferBuilder builder, AchievementGroupT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AchievementGroup>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _small_icon = _o.SmallIcon == null ? default(StringOffset) : builder.CreateString(_o.SmallIcon);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _background_icon = _o.BackgroundIcon == null ? default(StringOffset) : builder.CreateString(_o.BackgroundIcon);
    return CreateAchievementGroup(
      builder,
      _o.Id,
      _o.Category,
      _o.Sort,
      _name,
      _small_icon,
      _icon,
      _background_icon,
      _o.DropId,
      _o.Enable);
  }
}

public class AchievementGroupT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("category")]
  public int Category { get; set; }
  [Newtonsoft.Json.JsonProperty("sort")]
  public int Sort { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("small_icon")]
  public string SmallIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("background_icon")]
  public string BackgroundIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("drop_id")]
  public int DropId { get; set; }
  [Newtonsoft.Json.JsonProperty("enable")]
  public bool Enable { get; set; }

  public AchievementGroupT() {
    this.Id = 0;
    this.Category = 0;
    this.Sort = 0;
    this.Name = null;
    this.SmallIcon = null;
    this.Icon = null;
    this.BackgroundIcon = null;
    this.DropId = 0;
    this.Enable = false;
  }
}


static public class AchievementGroupVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Category*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Sort*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Name*/, false)
      && verifier.VerifyString(tablePos, 12 /*SmallIcon*/, false)
      && verifier.VerifyString(tablePos, 14 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 16 /*BackgroundIcon*/, false)
      && verifier.VerifyField(tablePos, 18 /*DropId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*Enable*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
