// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SCreatureGenNavAssistAreaExportDefine : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SCreatureGenNavAssistAreaExportDefine GetRootAsSCreatureGenNavAssistAreaExportDefine(ByteBuffer _bb) { return GetRootAsSCreatureGenNavAssistAreaExportDefine(_bb, new SCreatureGenNavAssistAreaExportDefine()); }
  public static SCreatureGenNavAssistAreaExportDefine GetRootAsSCreatureGenNavAssistAreaExportDefine(ByteBuffer _bb, SCreatureGenNavAssistAreaExportDefine obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SCreatureGenNavAssistAreaExportDefine __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public WWParser.Defs.IntVector? Points(int j) { int o = __p.__offset(4); return o != 0 ? (WWParser.Defs.IntVector?)(new WWParser.Defs.IntVector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PointsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.SCreatureGenNavAssistAreaExportDefine> CreateSCreatureGenNavAssistAreaExportDefine(FlatBufferBuilder builder,
      VectorOffset pointsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SCreatureGenNavAssistAreaExportDefine.AddPoints(builder, pointsOffset);
    return SCreatureGenNavAssistAreaExportDefine.EndSCreatureGenNavAssistAreaExportDefine(builder);
  }

  public static void StartSCreatureGenNavAssistAreaExportDefine(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPoints(FlatBufferBuilder builder, VectorOffset pointsOffset) { builder.AddOffset(0, pointsOffset.Value, 0); }
  public static VectorOffset CreatePointsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.IntVector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePointsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.IntVector>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePointsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.IntVector>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePointsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.IntVector>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.SCreatureGenNavAssistAreaExportDefine> EndSCreatureGenNavAssistAreaExportDefine(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SCreatureGenNavAssistAreaExportDefine>(o);
  }
  public SCreatureGenNavAssistAreaExportDefineT UnPack() {
    var _o = new SCreatureGenNavAssistAreaExportDefineT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SCreatureGenNavAssistAreaExportDefineT _o) {
    _o.Points = new List<WWParser.Defs.IntVectorT>();
    for (var _j = 0; _j < this.PointsLength; ++_j) {_o.Points.Add(this.Points(_j).HasValue ? this.Points(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.SCreatureGenNavAssistAreaExportDefine> Pack(FlatBufferBuilder builder, SCreatureGenNavAssistAreaExportDefineT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SCreatureGenNavAssistAreaExportDefine>);
    var _points = default(VectorOffset);
    if (_o.Points != null) {
      var __points = new Offset<WWParser.Defs.IntVector>[_o.Points.Count];
      for (var _j = 0; _j < __points.Length; ++_j) { __points[_j] = WWParser.Defs.IntVector.Pack(builder, _o.Points[_j]); }
      _points = CreatePointsVector(builder, __points);
    }
    return CreateSCreatureGenNavAssistAreaExportDefine(
      builder,
      _points);
  }
}

public class SCreatureGenNavAssistAreaExportDefineT
{
  [Newtonsoft.Json.JsonProperty("points")]
  public List<WWParser.Defs.IntVectorT> Points { get; set; }

  public SCreatureGenNavAssistAreaExportDefineT() {
    this.Points = null;
  }
}


static public class SCreatureGenNavAssistAreaExportDefineVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Points*/, WWParser.Defs.IntVectorVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
