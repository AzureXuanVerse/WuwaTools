// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ResonantChain : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ResonantChain GetRootAsResonantChain(ByteBuffer _bb) { return GetRootAsResonantChain(_bb, new ResonantChain()); }
  public static ResonantChain GetRootAsResonantChain(ByteBuffer _bb, ResonantChain obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ResonantChain __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroupIndex { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NodeType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string NodeIndex { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNodeIndexBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetNodeIndexBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetNodeIndexArray() { return __p.__vector_as_array<byte>(12); }
  public string NodeName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNodeNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNodeNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNodeNameArray() { return __p.__vector_as_array<byte>(14); }
  public string AttributesDescription { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributesDescriptionBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetAttributesDescriptionBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetAttributesDescriptionArray() { return __p.__vector_as_array<byte>(16); }
  public string BgDescription { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgDescriptionBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetBgDescriptionBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetBgDescriptionArray() { return __p.__vector_as_array<byte>(18); }
  public double BuffIds(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int BuffIdsLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetBuffIdsBytes() { return __p.__vector_as_span<double>(20, 8); }
#else
  public ArraySegment<byte>? GetBuffIdsBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public double[] GetBuffIdsArray() { return __p.__vector_as_array<double>(20); }
  public WWParser.Defs.ConfigPropValue? AddProp(int j) { int o = __p.__offset(22); return o != 0 ? (WWParser.Defs.ConfigPropValue?)(new WWParser.Defs.ConfigPropValue()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AddPropLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntInt? ActivateConsume(int j) { int o = __p.__offset(24); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ActivateConsumeLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string AttributesDescriptionParams(int j) { int o = __p.__offset(26); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AttributesDescriptionParamsLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string NodeIcon { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNodeIconBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetNodeIconBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetNodeIconArray() { return __p.__vector_as_array<byte>(28); }

  public static Offset<WWParser.Defs.ResonantChain> CreateResonantChain(FlatBufferBuilder builder,
      int id = 0,
      int group_id = 0,
      int group_index = 0,
      int node_type = 0,
      StringOffset node_indexOffset = default(StringOffset),
      StringOffset node_nameOffset = default(StringOffset),
      StringOffset attributes_descriptionOffset = default(StringOffset),
      StringOffset bg_descriptionOffset = default(StringOffset),
      VectorOffset buff_idsOffset = default(VectorOffset),
      VectorOffset add_propOffset = default(VectorOffset),
      VectorOffset activate_consumeOffset = default(VectorOffset),
      VectorOffset attributes_description_paramsOffset = default(VectorOffset),
      StringOffset node_iconOffset = default(StringOffset)) {
    builder.StartTable(13);
    ResonantChain.AddNodeIcon(builder, node_iconOffset);
    ResonantChain.AddAttributesDescriptionParams(builder, attributes_description_paramsOffset);
    ResonantChain.AddActivateConsume(builder, activate_consumeOffset);
    ResonantChain.AddAddProp(builder, add_propOffset);
    ResonantChain.AddBuffIds(builder, buff_idsOffset);
    ResonantChain.AddBgDescription(builder, bg_descriptionOffset);
    ResonantChain.AddAttributesDescription(builder, attributes_descriptionOffset);
    ResonantChain.AddNodeName(builder, node_nameOffset);
    ResonantChain.AddNodeIndex(builder, node_indexOffset);
    ResonantChain.AddNodeType(builder, node_type);
    ResonantChain.AddGroupIndex(builder, group_index);
    ResonantChain.AddGroupId(builder, group_id);
    ResonantChain.AddId(builder, id);
    return ResonantChain.EndResonantChain(builder);
  }

  public static void StartResonantChain(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, int groupId) { builder.AddInt(1, groupId, 0); }
  public static void AddGroupIndex(FlatBufferBuilder builder, int groupIndex) { builder.AddInt(2, groupIndex, 0); }
  public static void AddNodeType(FlatBufferBuilder builder, int nodeType) { builder.AddInt(3, nodeType, 0); }
  public static void AddNodeIndex(FlatBufferBuilder builder, StringOffset nodeIndexOffset) { builder.AddOffset(4, nodeIndexOffset.Value, 0); }
  public static void AddNodeName(FlatBufferBuilder builder, StringOffset nodeNameOffset) { builder.AddOffset(5, nodeNameOffset.Value, 0); }
  public static void AddAttributesDescription(FlatBufferBuilder builder, StringOffset attributesDescriptionOffset) { builder.AddOffset(6, attributesDescriptionOffset.Value, 0); }
  public static void AddBgDescription(FlatBufferBuilder builder, StringOffset bgDescriptionOffset) { builder.AddOffset(7, bgDescriptionOffset.Value, 0); }
  public static void AddBuffIds(FlatBufferBuilder builder, VectorOffset buffIdsOffset) { builder.AddOffset(8, buffIdsOffset.Value, 0); }
  public static VectorOffset CreateBuffIdsVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddAddProp(FlatBufferBuilder builder, VectorOffset addPropOffset) { builder.AddOffset(9, addPropOffset.Value, 0); }
  public static VectorOffset CreateAddPropVector(FlatBufferBuilder builder, Offset<WWParser.Defs.ConfigPropValue>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAddPropVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.ConfigPropValue>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAddPropVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.ConfigPropValue>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAddPropVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.ConfigPropValue>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAddPropVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddActivateConsume(FlatBufferBuilder builder, VectorOffset activateConsumeOffset) { builder.AddOffset(10, activateConsumeOffset.Value, 0); }
  public static VectorOffset CreateActivateConsumeVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateActivateConsumeVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActivateConsumeVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActivateConsumeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartActivateConsumeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAttributesDescriptionParams(FlatBufferBuilder builder, VectorOffset attributesDescriptionParamsOffset) { builder.AddOffset(11, attributesDescriptionParamsOffset.Value, 0); }
  public static VectorOffset CreateAttributesDescriptionParamsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAttributesDescriptionParamsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttributesDescriptionParamsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttributesDescriptionParamsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAttributesDescriptionParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNodeIcon(FlatBufferBuilder builder, StringOffset nodeIconOffset) { builder.AddOffset(12, nodeIconOffset.Value, 0); }
  public static Offset<WWParser.Defs.ResonantChain> EndResonantChain(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ResonantChain>(o);
  }
  public ResonantChainT UnPack() {
    var _o = new ResonantChainT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ResonantChainT _o) {
    _o.Id = this.Id;
    _o.GroupId = this.GroupId;
    _o.GroupIndex = this.GroupIndex;
    _o.NodeType = this.NodeType;
    _o.NodeIndex = this.NodeIndex;
    _o.NodeName = this.NodeName;
    _o.AttributesDescription = this.AttributesDescription;
    _o.BgDescription = this.BgDescription;
    _o.BuffIds = new List<double>();
    for (var _j = 0; _j < this.BuffIdsLength; ++_j) {_o.BuffIds.Add(this.BuffIds(_j));}
    _o.AddProp = new List<WWParser.Defs.ConfigPropValueT>();
    for (var _j = 0; _j < this.AddPropLength; ++_j) {_o.AddProp.Add(this.AddProp(_j).HasValue ? this.AddProp(_j).Value.UnPack() : null);}
    _o.ActivateConsume = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.ActivateConsumeLength; ++_j) {_o.ActivateConsume.Add(this.ActivateConsume(_j).HasValue ? this.ActivateConsume(_j).Value.UnPack() : null);}
    _o.AttributesDescriptionParams = new List<string>();
    for (var _j = 0; _j < this.AttributesDescriptionParamsLength; ++_j) {_o.AttributesDescriptionParams.Add(this.AttributesDescriptionParams(_j));}
    _o.NodeIcon = this.NodeIcon;
  }
  public static Offset<WWParser.Defs.ResonantChain> Pack(FlatBufferBuilder builder, ResonantChainT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ResonantChain>);
    var _node_index = _o.NodeIndex == null ? default(StringOffset) : builder.CreateString(_o.NodeIndex);
    var _node_name = _o.NodeName == null ? default(StringOffset) : builder.CreateString(_o.NodeName);
    var _attributes_description = _o.AttributesDescription == null ? default(StringOffset) : builder.CreateString(_o.AttributesDescription);
    var _bg_description = _o.BgDescription == null ? default(StringOffset) : builder.CreateString(_o.BgDescription);
    var _buff_ids = default(VectorOffset);
    if (_o.BuffIds != null) {
      var __buff_ids = _o.BuffIds.ToArray();
      _buff_ids = CreateBuffIdsVector(builder, __buff_ids);
    }
    var _add_prop = default(VectorOffset);
    if (_o.AddProp != null) {
      var __add_prop = new Offset<WWParser.Defs.ConfigPropValue>[_o.AddProp.Count];
      for (var _j = 0; _j < __add_prop.Length; ++_j) { __add_prop[_j] = WWParser.Defs.ConfigPropValue.Pack(builder, _o.AddProp[_j]); }
      _add_prop = CreateAddPropVector(builder, __add_prop);
    }
    var _activate_consume = default(VectorOffset);
    if (_o.ActivateConsume != null) {
      var __activate_consume = new Offset<WWParser.Defs.DicIntInt>[_o.ActivateConsume.Count];
      for (var _j = 0; _j < __activate_consume.Length; ++_j) { __activate_consume[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.ActivateConsume[_j]); }
      _activate_consume = CreateActivateConsumeVector(builder, __activate_consume);
    }
    var _attributes_description_params = default(VectorOffset);
    if (_o.AttributesDescriptionParams != null) {
      var __attributes_description_params = new StringOffset[_o.AttributesDescriptionParams.Count];
      for (var _j = 0; _j < __attributes_description_params.Length; ++_j) { __attributes_description_params[_j] = builder.CreateString(_o.AttributesDescriptionParams[_j]); }
      _attributes_description_params = CreateAttributesDescriptionParamsVector(builder, __attributes_description_params);
    }
    var _node_icon = _o.NodeIcon == null ? default(StringOffset) : builder.CreateString(_o.NodeIcon);
    return CreateResonantChain(
      builder,
      _o.Id,
      _o.GroupId,
      _o.GroupIndex,
      _o.NodeType,
      _node_index,
      _node_name,
      _attributes_description,
      _bg_description,
      _buff_ids,
      _add_prop,
      _activate_consume,
      _attributes_description_params,
      _node_icon);
  }
}

public class ResonantChainT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("group_id")]
  public int GroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("group_index")]
  public int GroupIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("node_type")]
  public int NodeType { get; set; }
  [Newtonsoft.Json.JsonProperty("node_index")]
  public string NodeIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("node_name")]
  public string NodeName { get; set; }
  [Newtonsoft.Json.JsonProperty("attributes_description")]
  public string AttributesDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("bg_description")]
  public string BgDescription { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_ids")]
  public List<double> BuffIds { get; set; }
  [Newtonsoft.Json.JsonProperty("add_prop")]
  public List<WWParser.Defs.ConfigPropValueT> AddProp { get; set; }
  [Newtonsoft.Json.JsonProperty("activate_consume")]
  public List<WWParser.Defs.DicIntIntT> ActivateConsume { get; set; }
  [Newtonsoft.Json.JsonProperty("attributes_description_params")]
  public List<string> AttributesDescriptionParams { get; set; }
  [Newtonsoft.Json.JsonProperty("node_icon")]
  public string NodeIcon { get; set; }

  public ResonantChainT() {
    this.Id = 0;
    this.GroupId = 0;
    this.GroupIndex = 0;
    this.NodeType = 0;
    this.NodeIndex = null;
    this.NodeName = null;
    this.AttributesDescription = null;
    this.BgDescription = null;
    this.BuffIds = null;
    this.AddProp = null;
    this.ActivateConsume = null;
    this.AttributesDescriptionParams = null;
    this.NodeIcon = null;
  }
}


static public class ResonantChainVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*GroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*GroupIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*NodeType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*NodeIndex*/, false)
      && verifier.VerifyString(tablePos, 14 /*NodeName*/, false)
      && verifier.VerifyString(tablePos, 16 /*AttributesDescription*/, false)
      && verifier.VerifyString(tablePos, 18 /*BgDescription*/, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*BuffIds*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 22 /*AddProp*/, WWParser.Defs.ConfigPropValueVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 24 /*ActivateConsume*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfStrings(tablePos, 26 /*AttributesDescriptionParams*/, false)
      && verifier.VerifyString(tablePos, 28 /*NodeIcon*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
