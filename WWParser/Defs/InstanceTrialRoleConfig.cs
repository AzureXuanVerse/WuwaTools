// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct InstanceTrialRoleConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static InstanceTrialRoleConfig GetRootAsInstanceTrialRoleConfig(ByteBuffer _bb) { return GetRootAsInstanceTrialRoleConfig(_bb, new InstanceTrialRoleConfig()); }
  public static InstanceTrialRoleConfig GetRootAsInstanceTrialRoleConfig(ByteBuffer _bb, InstanceTrialRoleConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InstanceTrialRoleConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaleFormation(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MaleFormationLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetMaleFormationBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetMaleFormationBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetMaleFormationArray() { return __p.__vector_as_array<int>(6); }
  public int FemaleFormation(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FemaleFormationLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFemaleFormationBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetFemaleFormationBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetFemaleFormationArray() { return __p.__vector_as_array<int>(8); }
  public int MaleDelayFormation(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MaleDelayFormationLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetMaleDelayFormationBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetMaleDelayFormationBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetMaleDelayFormationArray() { return __p.__vector_as_array<int>(10); }
  public int FemaleDelayFormation(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FemaleDelayFormationLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFemaleDelayFormationBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetFemaleDelayFormationBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetFemaleDelayFormationArray() { return __p.__vector_as_array<int>(12); }
  public bool OnlyTrial { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool AutoChange { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ShowInEntrance { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.InstanceTrialRoleConfig> CreateInstanceTrialRoleConfig(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset male_formationOffset = default(VectorOffset),
      VectorOffset female_formationOffset = default(VectorOffset),
      VectorOffset male_delay_formationOffset = default(VectorOffset),
      VectorOffset female_delay_formationOffset = default(VectorOffset),
      bool only_trial = false,
      bool auto_change = false,
      bool show_in_entrance = false) {
    builder.StartTable(8);
    InstanceTrialRoleConfig.AddFemaleDelayFormation(builder, female_delay_formationOffset);
    InstanceTrialRoleConfig.AddMaleDelayFormation(builder, male_delay_formationOffset);
    InstanceTrialRoleConfig.AddFemaleFormation(builder, female_formationOffset);
    InstanceTrialRoleConfig.AddMaleFormation(builder, male_formationOffset);
    InstanceTrialRoleConfig.AddId(builder, id);
    InstanceTrialRoleConfig.AddShowInEntrance(builder, show_in_entrance);
    InstanceTrialRoleConfig.AddAutoChange(builder, auto_change);
    InstanceTrialRoleConfig.AddOnlyTrial(builder, only_trial);
    return InstanceTrialRoleConfig.EndInstanceTrialRoleConfig(builder);
  }

  public static void StartInstanceTrialRoleConfig(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMaleFormation(FlatBufferBuilder builder, VectorOffset maleFormationOffset) { builder.AddOffset(1, maleFormationOffset.Value, 0); }
  public static VectorOffset CreateMaleFormationVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMaleFormationVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMaleFormationVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMaleFormationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMaleFormationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFemaleFormation(FlatBufferBuilder builder, VectorOffset femaleFormationOffset) { builder.AddOffset(2, femaleFormationOffset.Value, 0); }
  public static VectorOffset CreateFemaleFormationVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFemaleFormationVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFemaleFormationVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFemaleFormationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFemaleFormationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMaleDelayFormation(FlatBufferBuilder builder, VectorOffset maleDelayFormationOffset) { builder.AddOffset(3, maleDelayFormationOffset.Value, 0); }
  public static VectorOffset CreateMaleDelayFormationVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMaleDelayFormationVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMaleDelayFormationVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMaleDelayFormationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMaleDelayFormationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFemaleDelayFormation(FlatBufferBuilder builder, VectorOffset femaleDelayFormationOffset) { builder.AddOffset(4, femaleDelayFormationOffset.Value, 0); }
  public static VectorOffset CreateFemaleDelayFormationVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFemaleDelayFormationVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFemaleDelayFormationVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFemaleDelayFormationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFemaleDelayFormationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOnlyTrial(FlatBufferBuilder builder, bool onlyTrial) { builder.AddBool(5, onlyTrial, false); }
  public static void AddAutoChange(FlatBufferBuilder builder, bool autoChange) { builder.AddBool(6, autoChange, false); }
  public static void AddShowInEntrance(FlatBufferBuilder builder, bool showInEntrance) { builder.AddBool(7, showInEntrance, false); }
  public static Offset<WWParser.Defs.InstanceTrialRoleConfig> EndInstanceTrialRoleConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.InstanceTrialRoleConfig>(o);
  }
  public InstanceTrialRoleConfigT UnPack() {
    var _o = new InstanceTrialRoleConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InstanceTrialRoleConfigT _o) {
    _o.Id = this.Id;
    _o.MaleFormation = new List<int>();
    for (var _j = 0; _j < this.MaleFormationLength; ++_j) {_o.MaleFormation.Add(this.MaleFormation(_j));}
    _o.FemaleFormation = new List<int>();
    for (var _j = 0; _j < this.FemaleFormationLength; ++_j) {_o.FemaleFormation.Add(this.FemaleFormation(_j));}
    _o.MaleDelayFormation = new List<int>();
    for (var _j = 0; _j < this.MaleDelayFormationLength; ++_j) {_o.MaleDelayFormation.Add(this.MaleDelayFormation(_j));}
    _o.FemaleDelayFormation = new List<int>();
    for (var _j = 0; _j < this.FemaleDelayFormationLength; ++_j) {_o.FemaleDelayFormation.Add(this.FemaleDelayFormation(_j));}
    _o.OnlyTrial = this.OnlyTrial;
    _o.AutoChange = this.AutoChange;
    _o.ShowInEntrance = this.ShowInEntrance;
  }
  public static Offset<WWParser.Defs.InstanceTrialRoleConfig> Pack(FlatBufferBuilder builder, InstanceTrialRoleConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.InstanceTrialRoleConfig>);
    var _male_formation = default(VectorOffset);
    if (_o.MaleFormation != null) {
      var __male_formation = _o.MaleFormation.ToArray();
      _male_formation = CreateMaleFormationVector(builder, __male_formation);
    }
    var _female_formation = default(VectorOffset);
    if (_o.FemaleFormation != null) {
      var __female_formation = _o.FemaleFormation.ToArray();
      _female_formation = CreateFemaleFormationVector(builder, __female_formation);
    }
    var _male_delay_formation = default(VectorOffset);
    if (_o.MaleDelayFormation != null) {
      var __male_delay_formation = _o.MaleDelayFormation.ToArray();
      _male_delay_formation = CreateMaleDelayFormationVector(builder, __male_delay_formation);
    }
    var _female_delay_formation = default(VectorOffset);
    if (_o.FemaleDelayFormation != null) {
      var __female_delay_formation = _o.FemaleDelayFormation.ToArray();
      _female_delay_formation = CreateFemaleDelayFormationVector(builder, __female_delay_formation);
    }
    return CreateInstanceTrialRoleConfig(
      builder,
      _o.Id,
      _male_formation,
      _female_formation,
      _male_delay_formation,
      _female_delay_formation,
      _o.OnlyTrial,
      _o.AutoChange,
      _o.ShowInEntrance);
  }
}

public class InstanceTrialRoleConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("male_formation")]
  public List<int> MaleFormation { get; set; }
  [Newtonsoft.Json.JsonProperty("female_formation")]
  public List<int> FemaleFormation { get; set; }
  [Newtonsoft.Json.JsonProperty("male_delay_formation")]
  public List<int> MaleDelayFormation { get; set; }
  [Newtonsoft.Json.JsonProperty("female_delay_formation")]
  public List<int> FemaleDelayFormation { get; set; }
  [Newtonsoft.Json.JsonProperty("only_trial")]
  public bool OnlyTrial { get; set; }
  [Newtonsoft.Json.JsonProperty("auto_change")]
  public bool AutoChange { get; set; }
  [Newtonsoft.Json.JsonProperty("show_in_entrance")]
  public bool ShowInEntrance { get; set; }

  public InstanceTrialRoleConfigT() {
    this.Id = 0;
    this.MaleFormation = null;
    this.FemaleFormation = null;
    this.MaleDelayFormation = null;
    this.FemaleDelayFormation = null;
    this.OnlyTrial = false;
    this.AutoChange = false;
    this.ShowInEntrance = false;
  }
}


static public class InstanceTrialRoleConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*MaleFormation*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*FemaleFormation*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*MaleDelayFormation*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*FemaleDelayFormation*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 14 /*OnlyTrial*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*AutoChange*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*ShowInEntrance*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
