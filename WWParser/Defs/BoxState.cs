// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BoxState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BoxState GetRootAsBoxState(ByteBuffer _bb) { return GetRootAsBoxState(_bb, new BoxState()); }
  public static BoxState GetRootAsBoxState(ByteBuffer _bb, BoxState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BoxState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TagId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string Effect { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetEffectBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetEffectArray() { return __p.__vector_as_array<byte>(10); }
  public bool IsInteraction { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float Interval { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int NextState { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.BoxState> CreateBoxState(FlatBufferBuilder builder,
      int id = 0,
      int tag_id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset effectOffset = default(StringOffset),
      bool is_interaction = false,
      float interval = 0.0f,
      int next_state = 0) {
    builder.StartTable(7);
    BoxState.AddNextState(builder, next_state);
    BoxState.AddInterval(builder, interval);
    BoxState.AddEffect(builder, effectOffset);
    BoxState.AddName(builder, nameOffset);
    BoxState.AddTagId(builder, tag_id);
    BoxState.AddId(builder, id);
    BoxState.AddIsInteraction(builder, is_interaction);
    return BoxState.EndBoxState(builder);
  }

  public static void StartBoxState(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTagId(FlatBufferBuilder builder, int tagId) { builder.AddInt(1, tagId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddEffect(FlatBufferBuilder builder, StringOffset effectOffset) { builder.AddOffset(3, effectOffset.Value, 0); }
  public static void AddIsInteraction(FlatBufferBuilder builder, bool isInteraction) { builder.AddBool(4, isInteraction, false); }
  public static void AddInterval(FlatBufferBuilder builder, float interval) { builder.AddFloat(5, interval, 0.0f); }
  public static void AddNextState(FlatBufferBuilder builder, int nextState) { builder.AddInt(6, nextState, 0); }
  public static Offset<WWParser.Defs.BoxState> EndBoxState(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BoxState>(o);
  }
  public BoxStateT UnPack() {
    var _o = new BoxStateT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BoxStateT _o) {
    _o.Id = this.Id;
    _o.TagId = this.TagId;
    _o.Name = this.Name;
    _o.Effect = this.Effect;
    _o.IsInteraction = this.IsInteraction;
    _o.Interval = this.Interval;
    _o.NextState = this.NextState;
  }
  public static Offset<WWParser.Defs.BoxState> Pack(FlatBufferBuilder builder, BoxStateT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BoxState>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _effect = _o.Effect == null ? default(StringOffset) : builder.CreateString(_o.Effect);
    return CreateBoxState(
      builder,
      _o.Id,
      _o.TagId,
      _name,
      _effect,
      _o.IsInteraction,
      _o.Interval,
      _o.NextState);
  }
}

public class BoxStateT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("tag_id")]
  public int TagId { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("effect")]
  public string Effect { get; set; }
  [Newtonsoft.Json.JsonProperty("is_interaction")]
  public bool IsInteraction { get; set; }
  [Newtonsoft.Json.JsonProperty("interval")]
  public float Interval { get; set; }
  [Newtonsoft.Json.JsonProperty("next_state")]
  public int NextState { get; set; }

  public BoxStateT() {
    this.Id = 0;
    this.TagId = 0;
    this.Name = null;
    this.Effect = null;
    this.IsInteraction = false;
    this.Interval = 0.0f;
    this.NextState = 0;
  }
}


static public class BoxStateVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*TagId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyString(tablePos, 10 /*Effect*/, false)
      && verifier.VerifyField(tablePos, 12 /*IsInteraction*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*Interval*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*NextState*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
