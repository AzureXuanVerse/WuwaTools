// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AbpMontageData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AbpMontageData GetRootAsAbpMontageData(ByteBuffer _bb) { return GetRootAsAbpMontageData(_bb, new AbpMontageData()); }
  public static AbpMontageData GetRootAsAbpMontageData(ByteBuffer _bb, AbpMontageData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AbpMontageData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Montage { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMontageBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetMontageBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetMontageArray() { return __p.__vector_as_array<byte>(6); }
  public string MaleVariant { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMaleVariantBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMaleVariantBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMaleVariantArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<WWParser.Defs.AbpMontageData> CreateAbpMontageData(FlatBufferBuilder builder,
      int id = 0,
      StringOffset montageOffset = default(StringOffset),
      StringOffset male_variantOffset = default(StringOffset)) {
    builder.StartTable(3);
    AbpMontageData.AddMaleVariant(builder, male_variantOffset);
    AbpMontageData.AddMontage(builder, montageOffset);
    AbpMontageData.AddId(builder, id);
    return AbpMontageData.EndAbpMontageData(builder);
  }

  public static void StartAbpMontageData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMontage(FlatBufferBuilder builder, StringOffset montageOffset) { builder.AddOffset(1, montageOffset.Value, 0); }
  public static void AddMaleVariant(FlatBufferBuilder builder, StringOffset maleVariantOffset) { builder.AddOffset(2, maleVariantOffset.Value, 0); }
  public static Offset<WWParser.Defs.AbpMontageData> EndAbpMontageData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AbpMontageData>(o);
  }
  public AbpMontageDataT UnPack() {
    var _o = new AbpMontageDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AbpMontageDataT _o) {
    _o.Id = this.Id;
    _o.Montage = this.Montage;
    _o.MaleVariant = this.MaleVariant;
  }
  public static Offset<WWParser.Defs.AbpMontageData> Pack(FlatBufferBuilder builder, AbpMontageDataT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AbpMontageData>);
    var _montage = _o.Montage == null ? default(StringOffset) : builder.CreateString(_o.Montage);
    var _male_variant = _o.MaleVariant == null ? default(StringOffset) : builder.CreateString(_o.MaleVariant);
    return CreateAbpMontageData(
      builder,
      _o.Id,
      _montage,
      _male_variant);
  }
}

public class AbpMontageDataT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("montage")]
  public string Montage { get; set; }
  [Newtonsoft.Json.JsonProperty("male_variant")]
  public string MaleVariant { get; set; }

  public AbpMontageDataT() {
    this.Id = 0;
    this.Montage = null;
    this.MaleVariant = null;
  }
}


static public class AbpMontageDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Montage*/, false)
      && verifier.VerifyString(tablePos, 8 /*MaleVariant*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
