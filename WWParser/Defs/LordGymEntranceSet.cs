// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LordGymEntranceSet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static LordGymEntranceSet GetRootAsLordGymEntranceSet(ByteBuffer _bb) { return GetRootAsLordGymEntranceSet(_bb, new LordGymEntranceSet()); }
  public static LordGymEntranceSet GetRootAsLordGymEntranceSet(ByteBuffer _bb, LordGymEntranceSet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LordGymEntranceSet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PreviewRewardId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MarkId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LordEntranceList(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LordEntranceListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLordEntranceListBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetLordEntranceListBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetLordEntranceListArray() { return __p.__vector_as_array<int>(10); }
  public int MapNoteUnlockCondition { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(14); }
  public string Description { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(16); }
  public int HelpId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.LordGymEntranceSet> CreateLordGymEntranceSet(FlatBufferBuilder builder,
      int id = 0,
      int preview_reward_id = 0,
      int mark_id = 0,
      VectorOffset lord_entrance_listOffset = default(VectorOffset),
      int map_note_unlock_condition = 0,
      StringOffset titleOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      int help_id = 0) {
    builder.StartTable(8);
    LordGymEntranceSet.AddHelpId(builder, help_id);
    LordGymEntranceSet.AddDescription(builder, descriptionOffset);
    LordGymEntranceSet.AddTitle(builder, titleOffset);
    LordGymEntranceSet.AddMapNoteUnlockCondition(builder, map_note_unlock_condition);
    LordGymEntranceSet.AddLordEntranceList(builder, lord_entrance_listOffset);
    LordGymEntranceSet.AddMarkId(builder, mark_id);
    LordGymEntranceSet.AddPreviewRewardId(builder, preview_reward_id);
    LordGymEntranceSet.AddId(builder, id);
    return LordGymEntranceSet.EndLordGymEntranceSet(builder);
  }

  public static void StartLordGymEntranceSet(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPreviewRewardId(FlatBufferBuilder builder, int previewRewardId) { builder.AddInt(1, previewRewardId, 0); }
  public static void AddMarkId(FlatBufferBuilder builder, int markId) { builder.AddInt(2, markId, 0); }
  public static void AddLordEntranceList(FlatBufferBuilder builder, VectorOffset lordEntranceListOffset) { builder.AddOffset(3, lordEntranceListOffset.Value, 0); }
  public static VectorOffset CreateLordEntranceListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLordEntranceListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLordEntranceListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLordEntranceListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLordEntranceListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMapNoteUnlockCondition(FlatBufferBuilder builder, int mapNoteUnlockCondition) { builder.AddInt(4, mapNoteUnlockCondition, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(5, titleOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(6, descriptionOffset.Value, 0); }
  public static void AddHelpId(FlatBufferBuilder builder, int helpId) { builder.AddInt(7, helpId, 0); }
  public static Offset<WWParser.Defs.LordGymEntranceSet> EndLordGymEntranceSet(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.LordGymEntranceSet>(o);
  }
  public LordGymEntranceSetT UnPack() {
    var _o = new LordGymEntranceSetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LordGymEntranceSetT _o) {
    _o.Id = this.Id;
    _o.PreviewRewardId = this.PreviewRewardId;
    _o.MarkId = this.MarkId;
    _o.LordEntranceList = new List<int>();
    for (var _j = 0; _j < this.LordEntranceListLength; ++_j) {_o.LordEntranceList.Add(this.LordEntranceList(_j));}
    _o.MapNoteUnlockCondition = this.MapNoteUnlockCondition;
    _o.Title = this.Title;
    _o.Description = this.Description;
    _o.HelpId = this.HelpId;
  }
  public static Offset<WWParser.Defs.LordGymEntranceSet> Pack(FlatBufferBuilder builder, LordGymEntranceSetT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.LordGymEntranceSet>);
    var _lord_entrance_list = default(VectorOffset);
    if (_o.LordEntranceList != null) {
      var __lord_entrance_list = _o.LordEntranceList.ToArray();
      _lord_entrance_list = CreateLordEntranceListVector(builder, __lord_entrance_list);
    }
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    return CreateLordGymEntranceSet(
      builder,
      _o.Id,
      _o.PreviewRewardId,
      _o.MarkId,
      _lord_entrance_list,
      _o.MapNoteUnlockCondition,
      _title,
      _description,
      _o.HelpId);
  }
}

public class LordGymEntranceSetT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("preview_reward_id")]
  public int PreviewRewardId { get; set; }
  [Newtonsoft.Json.JsonProperty("mark_id")]
  public int MarkId { get; set; }
  [Newtonsoft.Json.JsonProperty("lord_entrance_list")]
  public List<int> LordEntranceList { get; set; }
  [Newtonsoft.Json.JsonProperty("map_note_unlock_condition")]
  public int MapNoteUnlockCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("description")]
  public string Description { get; set; }
  [Newtonsoft.Json.JsonProperty("help_id")]
  public int HelpId { get; set; }

  public LordGymEntranceSetT() {
    this.Id = 0;
    this.PreviewRewardId = 0;
    this.MarkId = 0;
    this.LordEntranceList = null;
    this.MapNoteUnlockCondition = 0;
    this.Title = null;
    this.Description = null;
    this.HelpId = 0;
  }
}


static public class LordGymEntranceSetVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*PreviewRewardId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*MarkId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*LordEntranceList*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 12 /*MapNoteUnlockCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*Title*/, false)
      && verifier.VerifyString(tablePos, 16 /*Description*/, false)
      && verifier.VerifyField(tablePos, 18 /*HelpId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
