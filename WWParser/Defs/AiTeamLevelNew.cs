// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiTeamLevelNew : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AiTeamLevelNew GetRootAsAiTeamLevelNew(ByteBuffer _bb) { return GetRootAsAiTeamLevelNew(_bb, new AiTeamLevelNew()); }
  public static AiTeamLevelNew GetRootAsAiTeamLevelNew(ByteBuffer _bb, AiTeamLevelNew obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiTeamLevelNew __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int PositionId(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PositionIdLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPositionIdBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetPositionIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetPositionIdArray() { return __p.__vector_as_array<int>(6); }
  public WWParser.Defs.FloatRange? AllocationPeriodic { get { int o = __p.__offset(8); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int AttackerNum { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)2; } }
  public WWParser.Defs.FloatRange? AttackCountDown { get { int o = __p.__offset(12); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.FloatRange? NoAttackCountDown { get { int o = __p.__offset(14); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public WWParser.Defs.FloatRange? BeAttackCountDown { get { int o = __p.__offset(16); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float EliteRatio(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int EliteRatioLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetEliteRatioBytes() { return __p.__vector_as_span<float>(18, 4); }
#else
  public ArraySegment<byte>? GetEliteRatioBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public float[] GetEliteRatioArray() { return __p.__vector_as_array<float>(18); }
  public float RangeRatio(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int RangeRatioLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetRangeRatioBytes() { return __p.__vector_as_span<float>(20, 4); }
#else
  public ArraySegment<byte>? GetRangeRatioBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public float[] GetRangeRatioArray() { return __p.__vector_as_array<float>(20); }

  public static Offset<WWParser.Defs.AiTeamLevelNew> CreateAiTeamLevelNew(FlatBufferBuilder builder,
      int id = 1,
      VectorOffset position_idOffset = default(VectorOffset),
      Offset<WWParser.Defs.FloatRange> allocation_periodicOffset = default(Offset<WWParser.Defs.FloatRange>),
      int attacker_num = 2,
      Offset<WWParser.Defs.FloatRange> attack_count_downOffset = default(Offset<WWParser.Defs.FloatRange>),
      Offset<WWParser.Defs.FloatRange> no_attack_count_downOffset = default(Offset<WWParser.Defs.FloatRange>),
      Offset<WWParser.Defs.FloatRange> be_attack_count_downOffset = default(Offset<WWParser.Defs.FloatRange>),
      VectorOffset elite_ratioOffset = default(VectorOffset),
      VectorOffset range_ratioOffset = default(VectorOffset)) {
    builder.StartTable(9);
    AiTeamLevelNew.AddRangeRatio(builder, range_ratioOffset);
    AiTeamLevelNew.AddEliteRatio(builder, elite_ratioOffset);
    AiTeamLevelNew.AddBeAttackCountDown(builder, be_attack_count_downOffset);
    AiTeamLevelNew.AddNoAttackCountDown(builder, no_attack_count_downOffset);
    AiTeamLevelNew.AddAttackCountDown(builder, attack_count_downOffset);
    AiTeamLevelNew.AddAttackerNum(builder, attacker_num);
    AiTeamLevelNew.AddAllocationPeriodic(builder, allocation_periodicOffset);
    AiTeamLevelNew.AddPositionId(builder, position_idOffset);
    AiTeamLevelNew.AddId(builder, id);
    return AiTeamLevelNew.EndAiTeamLevelNew(builder);
  }

  public static void StartAiTeamLevelNew(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 1); }
  public static void AddPositionId(FlatBufferBuilder builder, VectorOffset positionIdOffset) { builder.AddOffset(1, positionIdOffset.Value, 0); }
  public static VectorOffset CreatePositionIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePositionIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePositionIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePositionIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPositionIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAllocationPeriodic(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> allocationPeriodicOffset) { builder.AddOffset(2, allocationPeriodicOffset.Value, 0); }
  public static void AddAttackerNum(FlatBufferBuilder builder, int attackerNum) { builder.AddInt(3, attackerNum, 2); }
  public static void AddAttackCountDown(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> attackCountDownOffset) { builder.AddOffset(4, attackCountDownOffset.Value, 0); }
  public static void AddNoAttackCountDown(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> noAttackCountDownOffset) { builder.AddOffset(5, noAttackCountDownOffset.Value, 0); }
  public static void AddBeAttackCountDown(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> beAttackCountDownOffset) { builder.AddOffset(6, beAttackCountDownOffset.Value, 0); }
  public static void AddEliteRatio(FlatBufferBuilder builder, VectorOffset eliteRatioOffset) { builder.AddOffset(7, eliteRatioOffset.Value, 0); }
  public static VectorOffset CreateEliteRatioVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEliteRatioVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEliteRatioVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEliteRatioVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEliteRatioVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRangeRatio(FlatBufferBuilder builder, VectorOffset rangeRatioOffset) { builder.AddOffset(8, rangeRatioOffset.Value, 0); }
  public static VectorOffset CreateRangeRatioVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRangeRatioVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRangeRatioVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRangeRatioVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRangeRatioVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.AiTeamLevelNew> EndAiTeamLevelNew(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AiTeamLevelNew>(o);
  }
  public AiTeamLevelNewT UnPack() {
    var _o = new AiTeamLevelNewT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AiTeamLevelNewT _o) {
    _o.Id = this.Id;
    _o.PositionId = new List<int>();
    for (var _j = 0; _j < this.PositionIdLength; ++_j) {_o.PositionId.Add(this.PositionId(_j));}
    _o.AllocationPeriodic = this.AllocationPeriodic.HasValue ? this.AllocationPeriodic.Value.UnPack() : null;
    _o.AttackerNum = this.AttackerNum;
    _o.AttackCountDown = this.AttackCountDown.HasValue ? this.AttackCountDown.Value.UnPack() : null;
    _o.NoAttackCountDown = this.NoAttackCountDown.HasValue ? this.NoAttackCountDown.Value.UnPack() : null;
    _o.BeAttackCountDown = this.BeAttackCountDown.HasValue ? this.BeAttackCountDown.Value.UnPack() : null;
    _o.EliteRatio = new List<float>();
    for (var _j = 0; _j < this.EliteRatioLength; ++_j) {_o.EliteRatio.Add(this.EliteRatio(_j));}
    _o.RangeRatio = new List<float>();
    for (var _j = 0; _j < this.RangeRatioLength; ++_j) {_o.RangeRatio.Add(this.RangeRatio(_j));}
  }
  public static Offset<WWParser.Defs.AiTeamLevelNew> Pack(FlatBufferBuilder builder, AiTeamLevelNewT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AiTeamLevelNew>);
    var _position_id = default(VectorOffset);
    if (_o.PositionId != null) {
      var __position_id = _o.PositionId.ToArray();
      _position_id = CreatePositionIdVector(builder, __position_id);
    }
    var _allocation_periodic = _o.AllocationPeriodic == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.AllocationPeriodic);
    var _attack_count_down = _o.AttackCountDown == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.AttackCountDown);
    var _no_attack_count_down = _o.NoAttackCountDown == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.NoAttackCountDown);
    var _be_attack_count_down = _o.BeAttackCountDown == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.BeAttackCountDown);
    var _elite_ratio = default(VectorOffset);
    if (_o.EliteRatio != null) {
      var __elite_ratio = _o.EliteRatio.ToArray();
      _elite_ratio = CreateEliteRatioVector(builder, __elite_ratio);
    }
    var _range_ratio = default(VectorOffset);
    if (_o.RangeRatio != null) {
      var __range_ratio = _o.RangeRatio.ToArray();
      _range_ratio = CreateRangeRatioVector(builder, __range_ratio);
    }
    return CreateAiTeamLevelNew(
      builder,
      _o.Id,
      _position_id,
      _allocation_periodic,
      _o.AttackerNum,
      _attack_count_down,
      _no_attack_count_down,
      _be_attack_count_down,
      _elite_ratio,
      _range_ratio);
  }
}

public class AiTeamLevelNewT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("position_id")]
  public List<int> PositionId { get; set; }
  [Newtonsoft.Json.JsonProperty("allocation_periodic")]
  public WWParser.Defs.FloatRangeT AllocationPeriodic { get; set; }
  [Newtonsoft.Json.JsonProperty("attacker_num")]
  public int AttackerNum { get; set; }
  [Newtonsoft.Json.JsonProperty("attack_count_down")]
  public WWParser.Defs.FloatRangeT AttackCountDown { get; set; }
  [Newtonsoft.Json.JsonProperty("no_attack_count_down")]
  public WWParser.Defs.FloatRangeT NoAttackCountDown { get; set; }
  [Newtonsoft.Json.JsonProperty("be_attack_count_down")]
  public WWParser.Defs.FloatRangeT BeAttackCountDown { get; set; }
  [Newtonsoft.Json.JsonProperty("elite_ratio")]
  public List<float> EliteRatio { get; set; }
  [Newtonsoft.Json.JsonProperty("range_ratio")]
  public List<float> RangeRatio { get; set; }

  public AiTeamLevelNewT() {
    this.Id = 1;
    this.PositionId = null;
    this.AllocationPeriodic = null;
    this.AttackerNum = 2;
    this.AttackCountDown = null;
    this.NoAttackCountDown = null;
    this.BeAttackCountDown = null;
    this.EliteRatio = null;
    this.RangeRatio = null;
  }
}


static public class AiTeamLevelNewVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*PositionId*/, 4 /*int*/, false)
      && verifier.VerifyTable(tablePos, 8 /*AllocationPeriodic*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyField(tablePos, 10 /*AttackerNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 12 /*AttackCountDown*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 14 /*NoAttackCountDown*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 16 /*BeAttackCountDown*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*EliteRatio*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*RangeRatio*/, 4 /*float*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
