// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RecordConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RecordConfig GetRootAsRecordConfig(ByteBuffer _bb) { return GetRootAsRecordConfig(_bb, new RecordConfig()); }
  public static RecordConfig GetRootAsRecordConfig(ByteBuffer _bb, RecordConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RecordConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicStringString? LimitParams(int j) { int o = __p.__offset(6); return o != 0 ? (WWParser.Defs.DicStringString?)(new WWParser.Defs.DicStringString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int LimitParamsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int ProgressNeed { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public bool SaveRecord { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.RecordConfig> CreateRecordConfig(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset limit_paramsOffset = default(VectorOffset),
      int progress_need = 1,
      bool save_record = false) {
    builder.StartTable(4);
    RecordConfig.AddProgressNeed(builder, progress_need);
    RecordConfig.AddLimitParams(builder, limit_paramsOffset);
    RecordConfig.AddId(builder, id);
    RecordConfig.AddSaveRecord(builder, save_record);
    return RecordConfig.EndRecordConfig(builder);
  }

  public static void StartRecordConfig(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddLimitParams(FlatBufferBuilder builder, VectorOffset limitParamsOffset) { builder.AddOffset(1, limitParamsOffset.Value, 0); }
  public static VectorOffset CreateLimitParamsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringString>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLimitParamsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicStringString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitParamsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicStringString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitParamsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicStringString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLimitParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddProgressNeed(FlatBufferBuilder builder, int progressNeed) { builder.AddInt(2, progressNeed, 1); }
  public static void AddSaveRecord(FlatBufferBuilder builder, bool saveRecord) { builder.AddBool(3, saveRecord, false); }
  public static Offset<WWParser.Defs.RecordConfig> EndRecordConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RecordConfig>(o);
  }
  public RecordConfigT UnPack() {
    var _o = new RecordConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RecordConfigT _o) {
    _o.Id = this.Id;
    _o.LimitParams = new List<WWParser.Defs.DicStringStringT>();
    for (var _j = 0; _j < this.LimitParamsLength; ++_j) {_o.LimitParams.Add(this.LimitParams(_j).HasValue ? this.LimitParams(_j).Value.UnPack() : null);}
    _o.ProgressNeed = this.ProgressNeed;
    _o.SaveRecord = this.SaveRecord;
  }
  public static Offset<WWParser.Defs.RecordConfig> Pack(FlatBufferBuilder builder, RecordConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RecordConfig>);
    var _limit_params = default(VectorOffset);
    if (_o.LimitParams != null) {
      var __limit_params = new Offset<WWParser.Defs.DicStringString>[_o.LimitParams.Count];
      for (var _j = 0; _j < __limit_params.Length; ++_j) { __limit_params[_j] = WWParser.Defs.DicStringString.Pack(builder, _o.LimitParams[_j]); }
      _limit_params = CreateLimitParamsVector(builder, __limit_params);
    }
    return CreateRecordConfig(
      builder,
      _o.Id,
      _limit_params,
      _o.ProgressNeed,
      _o.SaveRecord);
  }
}

public class RecordConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("limit_params")]
  public List<WWParser.Defs.DicStringStringT> LimitParams { get; set; }
  [Newtonsoft.Json.JsonProperty("progress_need")]
  public int ProgressNeed { get; set; }
  [Newtonsoft.Json.JsonProperty("save_record")]
  public bool SaveRecord { get; set; }

  public RecordConfigT() {
    this.Id = 0;
    this.LimitParams = null;
    this.ProgressNeed = 1;
    this.SaveRecord = false;
  }
}


static public class RecordConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*LimitParams*/, WWParser.Defs.DicStringStringVerify.Verify, false)
      && verifier.VerifyField(tablePos, 8 /*ProgressNeed*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*SaveRecord*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
