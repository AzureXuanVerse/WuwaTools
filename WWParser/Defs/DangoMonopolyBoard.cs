// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DangoMonopolyBoard : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DangoMonopolyBoard GetRootAsDangoMonopolyBoard(ByteBuffer _bb) { return GetRootAsDangoMonopolyBoard(_bb, new DangoMonopolyBoard()); }
  public static DangoMonopolyBoard GetRootAsDangoMonopolyBoard(ByteBuffer _bb, DangoMonopolyBoard obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DangoMonopolyBoard __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int BoardId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BoardGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemNum { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GridGroupId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockDay { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string FinishTitle { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFinishTitleBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetFinishTitleBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetFinishTitleArray() { return __p.__vector_as_array<byte>(16); }
  public string FinishDesc { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFinishDescBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetFinishDescBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetFinishDescArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<WWParser.Defs.DangoMonopolyBoard> CreateDangoMonopolyBoard(FlatBufferBuilder builder,
      int board_id = 0,
      int board_group_id = 0,
      int item_id = 0,
      int item_num = 0,
      int grid_group_id = 0,
      int unlock_day = 0,
      StringOffset finish_titleOffset = default(StringOffset),
      StringOffset finish_descOffset = default(StringOffset)) {
    builder.StartTable(8);
    DangoMonopolyBoard.AddFinishDesc(builder, finish_descOffset);
    DangoMonopolyBoard.AddFinishTitle(builder, finish_titleOffset);
    DangoMonopolyBoard.AddUnlockDay(builder, unlock_day);
    DangoMonopolyBoard.AddGridGroupId(builder, grid_group_id);
    DangoMonopolyBoard.AddItemNum(builder, item_num);
    DangoMonopolyBoard.AddItemId(builder, item_id);
    DangoMonopolyBoard.AddBoardGroupId(builder, board_group_id);
    DangoMonopolyBoard.AddBoardId(builder, board_id);
    return DangoMonopolyBoard.EndDangoMonopolyBoard(builder);
  }

  public static void StartDangoMonopolyBoard(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddBoardId(FlatBufferBuilder builder, int boardId) { builder.AddInt(0, boardId, 0); }
  public static void AddBoardGroupId(FlatBufferBuilder builder, int boardGroupId) { builder.AddInt(1, boardGroupId, 0); }
  public static void AddItemId(FlatBufferBuilder builder, int itemId) { builder.AddInt(2, itemId, 0); }
  public static void AddItemNum(FlatBufferBuilder builder, int itemNum) { builder.AddInt(3, itemNum, 0); }
  public static void AddGridGroupId(FlatBufferBuilder builder, int gridGroupId) { builder.AddInt(4, gridGroupId, 0); }
  public static void AddUnlockDay(FlatBufferBuilder builder, int unlockDay) { builder.AddInt(5, unlockDay, 0); }
  public static void AddFinishTitle(FlatBufferBuilder builder, StringOffset finishTitleOffset) { builder.AddOffset(6, finishTitleOffset.Value, 0); }
  public static void AddFinishDesc(FlatBufferBuilder builder, StringOffset finishDescOffset) { builder.AddOffset(7, finishDescOffset.Value, 0); }
  public static Offset<WWParser.Defs.DangoMonopolyBoard> EndDangoMonopolyBoard(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.DangoMonopolyBoard>(o);
  }
  public DangoMonopolyBoardT UnPack() {
    var _o = new DangoMonopolyBoardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DangoMonopolyBoardT _o) {
    _o.BoardId = this.BoardId;
    _o.BoardGroupId = this.BoardGroupId;
    _o.ItemId = this.ItemId;
    _o.ItemNum = this.ItemNum;
    _o.GridGroupId = this.GridGroupId;
    _o.UnlockDay = this.UnlockDay;
    _o.FinishTitle = this.FinishTitle;
    _o.FinishDesc = this.FinishDesc;
  }
  public static Offset<WWParser.Defs.DangoMonopolyBoard> Pack(FlatBufferBuilder builder, DangoMonopolyBoardT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.DangoMonopolyBoard>);
    var _finish_title = _o.FinishTitle == null ? default(StringOffset) : builder.CreateString(_o.FinishTitle);
    var _finish_desc = _o.FinishDesc == null ? default(StringOffset) : builder.CreateString(_o.FinishDesc);
    return CreateDangoMonopolyBoard(
      builder,
      _o.BoardId,
      _o.BoardGroupId,
      _o.ItemId,
      _o.ItemNum,
      _o.GridGroupId,
      _o.UnlockDay,
      _finish_title,
      _finish_desc);
  }
}

public class DangoMonopolyBoardT
{
  [Newtonsoft.Json.JsonProperty("board_id")]
  public int BoardId { get; set; }
  [Newtonsoft.Json.JsonProperty("board_group_id")]
  public int BoardGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("item_id")]
  public int ItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("item_num")]
  public int ItemNum { get; set; }
  [Newtonsoft.Json.JsonProperty("grid_group_id")]
  public int GridGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("unlock_day")]
  public int UnlockDay { get; set; }
  [Newtonsoft.Json.JsonProperty("finish_title")]
  public string FinishTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("finish_desc")]
  public string FinishDesc { get; set; }

  public DangoMonopolyBoardT() {
    this.BoardId = 0;
    this.BoardGroupId = 0;
    this.ItemId = 0;
    this.ItemNum = 0;
    this.GridGroupId = 0;
    this.UnlockDay = 0;
    this.FinishTitle = null;
    this.FinishDesc = null;
  }
}


static public class DangoMonopolyBoardVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*BoardId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*BoardGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ItemNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*GridGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*UnlockDay*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*FinishTitle*/, false)
      && verifier.VerifyString(tablePos, 18 /*FinishDesc*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
