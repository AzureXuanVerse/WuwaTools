// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueWeeklyCycle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueWeeklyCycle GetRootAsRogueWeeklyCycle(ByteBuffer _bb) { return GetRootAsRogueWeeklyCycle(_bb, new RogueWeeklyCycle()); }
  public static RogueWeeklyCycle GetRootAsRogueWeeklyCycle(ByteBuffer _bb, RogueWeeklyCycle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueWeeklyCycle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TimeId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntInt? Diff(int j) { int o = __p.__offset(10); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DiffLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int MapMark { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QuestId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EntranceId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RecommendedRole(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RecommendedRoleLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRecommendedRoleBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetRecommendedRoleBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetRecommendedRoleArray() { return __p.__vector_as_array<int>(20); }
  public int ScoreRate { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string RoguelikeRoomFloatTipsSpecialIcon { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoguelikeRoomFloatTipsSpecialIconBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetRoguelikeRoomFloatTipsSpecialIconBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetRoguelikeRoomFloatTipsSpecialIconArray() { return __p.__vector_as_array<byte>(24); }
  public WWParser.Defs.DicIntInt? BlackFlowerCost(int j) { int o = __p.__offset(26); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BlackFlowerCostLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int BlackFlowerAward { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GoldItemId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string CycleName { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCycleNameBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetCycleNameBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetCycleNameArray() { return __p.__vector_as_array<byte>(32); }
  public string ViewBackground { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetViewBackgroundBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetViewBackgroundBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetViewBackgroundArray() { return __p.__vector_as_array<byte>(34); }
  public string BuffIcon { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffIconBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetBuffIconBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetBuffIconArray() { return __p.__vector_as_array<byte>(36); }
  public int BuffPr { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BuffDesc { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffDescBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetBuffDescBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetBuffDescArray() { return __p.__vector_as_array<byte>(40); }
  public string BuffDescParam(int j) { int o = __p.__offset(42); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BuffDescParamLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int HelpId { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BlackFlowerHelpId { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxScore { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.RogueWeeklyCycle> CreateRogueWeeklyCycle(FlatBufferBuilder builder,
      int id = 0,
      int activity_id = 0,
      int time_id = 0,
      VectorOffset diffOffset = default(VectorOffset),
      int map_mark = 0,
      int quest_id = 0,
      int entrance_id = 0,
      int inst_id = 0,
      VectorOffset recommended_roleOffset = default(VectorOffset),
      int score_rate = 0,
      StringOffset roguelike_room_float_tips_special_iconOffset = default(StringOffset),
      VectorOffset black_flower_costOffset = default(VectorOffset),
      int black_flower_award = 0,
      int gold_item_id = 0,
      StringOffset cycle_nameOffset = default(StringOffset),
      StringOffset view_backgroundOffset = default(StringOffset),
      StringOffset buff_iconOffset = default(StringOffset),
      int buff_pr = 0,
      StringOffset buff_descOffset = default(StringOffset),
      VectorOffset buff_desc_paramOffset = default(VectorOffset),
      int help_id = 0,
      int black_flower_help_id = 0,
      int max_score = 0) {
    builder.StartTable(23);
    RogueWeeklyCycle.AddMaxScore(builder, max_score);
    RogueWeeklyCycle.AddBlackFlowerHelpId(builder, black_flower_help_id);
    RogueWeeklyCycle.AddHelpId(builder, help_id);
    RogueWeeklyCycle.AddBuffDescParam(builder, buff_desc_paramOffset);
    RogueWeeklyCycle.AddBuffDesc(builder, buff_descOffset);
    RogueWeeklyCycle.AddBuffPr(builder, buff_pr);
    RogueWeeklyCycle.AddBuffIcon(builder, buff_iconOffset);
    RogueWeeklyCycle.AddViewBackground(builder, view_backgroundOffset);
    RogueWeeklyCycle.AddCycleName(builder, cycle_nameOffset);
    RogueWeeklyCycle.AddGoldItemId(builder, gold_item_id);
    RogueWeeklyCycle.AddBlackFlowerAward(builder, black_flower_award);
    RogueWeeklyCycle.AddBlackFlowerCost(builder, black_flower_costOffset);
    RogueWeeklyCycle.AddRoguelikeRoomFloatTipsSpecialIcon(builder, roguelike_room_float_tips_special_iconOffset);
    RogueWeeklyCycle.AddScoreRate(builder, score_rate);
    RogueWeeklyCycle.AddRecommendedRole(builder, recommended_roleOffset);
    RogueWeeklyCycle.AddInstId(builder, inst_id);
    RogueWeeklyCycle.AddEntranceId(builder, entrance_id);
    RogueWeeklyCycle.AddQuestId(builder, quest_id);
    RogueWeeklyCycle.AddMapMark(builder, map_mark);
    RogueWeeklyCycle.AddDiff(builder, diffOffset);
    RogueWeeklyCycle.AddTimeId(builder, time_id);
    RogueWeeklyCycle.AddActivityId(builder, activity_id);
    RogueWeeklyCycle.AddId(builder, id);
    return RogueWeeklyCycle.EndRogueWeeklyCycle(builder);
  }

  public static void StartRogueWeeklyCycle(FlatBufferBuilder builder) { builder.StartTable(23); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddTimeId(FlatBufferBuilder builder, int timeId) { builder.AddInt(2, timeId, 0); }
  public static void AddDiff(FlatBufferBuilder builder, VectorOffset diffOffset) { builder.AddOffset(3, diffOffset.Value, 0); }
  public static VectorOffset CreateDiffVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDiffVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDiffVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDiffVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDiffVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMapMark(FlatBufferBuilder builder, int mapMark) { builder.AddInt(4, mapMark, 0); }
  public static void AddQuestId(FlatBufferBuilder builder, int questId) { builder.AddInt(5, questId, 0); }
  public static void AddEntranceId(FlatBufferBuilder builder, int entranceId) { builder.AddInt(6, entranceId, 0); }
  public static void AddInstId(FlatBufferBuilder builder, int instId) { builder.AddInt(7, instId, 0); }
  public static void AddRecommendedRole(FlatBufferBuilder builder, VectorOffset recommendedRoleOffset) { builder.AddOffset(8, recommendedRoleOffset.Value, 0); }
  public static VectorOffset CreateRecommendedRoleVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRecommendedRoleVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecommendedRoleVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecommendedRoleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRecommendedRoleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddScoreRate(FlatBufferBuilder builder, int scoreRate) { builder.AddInt(9, scoreRate, 0); }
  public static void AddRoguelikeRoomFloatTipsSpecialIcon(FlatBufferBuilder builder, StringOffset roguelikeRoomFloatTipsSpecialIconOffset) { builder.AddOffset(10, roguelikeRoomFloatTipsSpecialIconOffset.Value, 0); }
  public static void AddBlackFlowerCost(FlatBufferBuilder builder, VectorOffset blackFlowerCostOffset) { builder.AddOffset(11, blackFlowerCostOffset.Value, 0); }
  public static VectorOffset CreateBlackFlowerCostVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBlackFlowerCostVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBlackFlowerCostVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBlackFlowerCostVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBlackFlowerCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBlackFlowerAward(FlatBufferBuilder builder, int blackFlowerAward) { builder.AddInt(12, blackFlowerAward, 0); }
  public static void AddGoldItemId(FlatBufferBuilder builder, int goldItemId) { builder.AddInt(13, goldItemId, 0); }
  public static void AddCycleName(FlatBufferBuilder builder, StringOffset cycleNameOffset) { builder.AddOffset(14, cycleNameOffset.Value, 0); }
  public static void AddViewBackground(FlatBufferBuilder builder, StringOffset viewBackgroundOffset) { builder.AddOffset(15, viewBackgroundOffset.Value, 0); }
  public static void AddBuffIcon(FlatBufferBuilder builder, StringOffset buffIconOffset) { builder.AddOffset(16, buffIconOffset.Value, 0); }
  public static void AddBuffPr(FlatBufferBuilder builder, int buffPr) { builder.AddInt(17, buffPr, 0); }
  public static void AddBuffDesc(FlatBufferBuilder builder, StringOffset buffDescOffset) { builder.AddOffset(18, buffDescOffset.Value, 0); }
  public static void AddBuffDescParam(FlatBufferBuilder builder, VectorOffset buffDescParamOffset) { builder.AddOffset(19, buffDescParamOffset.Value, 0); }
  public static VectorOffset CreateBuffDescParamVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBuffDescParamVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffDescParamVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffDescParamVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffDescParamVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHelpId(FlatBufferBuilder builder, int helpId) { builder.AddInt(20, helpId, 0); }
  public static void AddBlackFlowerHelpId(FlatBufferBuilder builder, int blackFlowerHelpId) { builder.AddInt(21, blackFlowerHelpId, 0); }
  public static void AddMaxScore(FlatBufferBuilder builder, int maxScore) { builder.AddInt(22, maxScore, 0); }
  public static Offset<WWParser.Defs.RogueWeeklyCycle> EndRogueWeeklyCycle(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueWeeklyCycle>(o);
  }
  public RogueWeeklyCycleT UnPack() {
    var _o = new RogueWeeklyCycleT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueWeeklyCycleT _o) {
    _o.Id = this.Id;
    _o.ActivityId = this.ActivityId;
    _o.TimeId = this.TimeId;
    _o.Diff = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.DiffLength; ++_j) {_o.Diff.Add(this.Diff(_j).HasValue ? this.Diff(_j).Value.UnPack() : null);}
    _o.MapMark = this.MapMark;
    _o.QuestId = this.QuestId;
    _o.EntranceId = this.EntranceId;
    _o.InstId = this.InstId;
    _o.RecommendedRole = new List<int>();
    for (var _j = 0; _j < this.RecommendedRoleLength; ++_j) {_o.RecommendedRole.Add(this.RecommendedRole(_j));}
    _o.ScoreRate = this.ScoreRate;
    _o.RoguelikeRoomFloatTipsSpecialIcon = this.RoguelikeRoomFloatTipsSpecialIcon;
    _o.BlackFlowerCost = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.BlackFlowerCostLength; ++_j) {_o.BlackFlowerCost.Add(this.BlackFlowerCost(_j).HasValue ? this.BlackFlowerCost(_j).Value.UnPack() : null);}
    _o.BlackFlowerAward = this.BlackFlowerAward;
    _o.GoldItemId = this.GoldItemId;
    _o.CycleName = this.CycleName;
    _o.ViewBackground = this.ViewBackground;
    _o.BuffIcon = this.BuffIcon;
    _o.BuffPr = this.BuffPr;
    _o.BuffDesc = this.BuffDesc;
    _o.BuffDescParam = new List<string>();
    for (var _j = 0; _j < this.BuffDescParamLength; ++_j) {_o.BuffDescParam.Add(this.BuffDescParam(_j));}
    _o.HelpId = this.HelpId;
    _o.BlackFlowerHelpId = this.BlackFlowerHelpId;
    _o.MaxScore = this.MaxScore;
  }
  public static Offset<WWParser.Defs.RogueWeeklyCycle> Pack(FlatBufferBuilder builder, RogueWeeklyCycleT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueWeeklyCycle>);
    var _diff = default(VectorOffset);
    if (_o.Diff != null) {
      var __diff = new Offset<WWParser.Defs.DicIntInt>[_o.Diff.Count];
      for (var _j = 0; _j < __diff.Length; ++_j) { __diff[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.Diff[_j]); }
      _diff = CreateDiffVector(builder, __diff);
    }
    var _recommended_role = default(VectorOffset);
    if (_o.RecommendedRole != null) {
      var __recommended_role = _o.RecommendedRole.ToArray();
      _recommended_role = CreateRecommendedRoleVector(builder, __recommended_role);
    }
    var _roguelike_room_float_tips_special_icon = _o.RoguelikeRoomFloatTipsSpecialIcon == null ? default(StringOffset) : builder.CreateString(_o.RoguelikeRoomFloatTipsSpecialIcon);
    var _black_flower_cost = default(VectorOffset);
    if (_o.BlackFlowerCost != null) {
      var __black_flower_cost = new Offset<WWParser.Defs.DicIntInt>[_o.BlackFlowerCost.Count];
      for (var _j = 0; _j < __black_flower_cost.Length; ++_j) { __black_flower_cost[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.BlackFlowerCost[_j]); }
      _black_flower_cost = CreateBlackFlowerCostVector(builder, __black_flower_cost);
    }
    var _cycle_name = _o.CycleName == null ? default(StringOffset) : builder.CreateString(_o.CycleName);
    var _view_background = _o.ViewBackground == null ? default(StringOffset) : builder.CreateString(_o.ViewBackground);
    var _buff_icon = _o.BuffIcon == null ? default(StringOffset) : builder.CreateString(_o.BuffIcon);
    var _buff_desc = _o.BuffDesc == null ? default(StringOffset) : builder.CreateString(_o.BuffDesc);
    var _buff_desc_param = default(VectorOffset);
    if (_o.BuffDescParam != null) {
      var __buff_desc_param = new StringOffset[_o.BuffDescParam.Count];
      for (var _j = 0; _j < __buff_desc_param.Length; ++_j) { __buff_desc_param[_j] = builder.CreateString(_o.BuffDescParam[_j]); }
      _buff_desc_param = CreateBuffDescParamVector(builder, __buff_desc_param);
    }
    return CreateRogueWeeklyCycle(
      builder,
      _o.Id,
      _o.ActivityId,
      _o.TimeId,
      _diff,
      _o.MapMark,
      _o.QuestId,
      _o.EntranceId,
      _o.InstId,
      _recommended_role,
      _o.ScoreRate,
      _roguelike_room_float_tips_special_icon,
      _black_flower_cost,
      _o.BlackFlowerAward,
      _o.GoldItemId,
      _cycle_name,
      _view_background,
      _buff_icon,
      _o.BuffPr,
      _buff_desc,
      _buff_desc_param,
      _o.HelpId,
      _o.BlackFlowerHelpId,
      _o.MaxScore);
  }
}

public class RogueWeeklyCycleT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("time_id")]
  public int TimeId { get; set; }
  [Newtonsoft.Json.JsonProperty("diff")]
  public List<WWParser.Defs.DicIntIntT> Diff { get; set; }
  [Newtonsoft.Json.JsonProperty("map_mark")]
  public int MapMark { get; set; }
  [Newtonsoft.Json.JsonProperty("quest_id")]
  public int QuestId { get; set; }
  [Newtonsoft.Json.JsonProperty("entrance_id")]
  public int EntranceId { get; set; }
  [Newtonsoft.Json.JsonProperty("inst_id")]
  public int InstId { get; set; }
  [Newtonsoft.Json.JsonProperty("recommended_role")]
  public List<int> RecommendedRole { get; set; }
  [Newtonsoft.Json.JsonProperty("score_rate")]
  public int ScoreRate { get; set; }
  [Newtonsoft.Json.JsonProperty("roguelike_room_float_tips_special_icon")]
  public string RoguelikeRoomFloatTipsSpecialIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("black_flower_cost")]
  public List<WWParser.Defs.DicIntIntT> BlackFlowerCost { get; set; }
  [Newtonsoft.Json.JsonProperty("black_flower_award")]
  public int BlackFlowerAward { get; set; }
  [Newtonsoft.Json.JsonProperty("gold_item_id")]
  public int GoldItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("cycle_name")]
  public string CycleName { get; set; }
  [Newtonsoft.Json.JsonProperty("view_background")]
  public string ViewBackground { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_icon")]
  public string BuffIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_pr")]
  public int BuffPr { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_desc")]
  public string BuffDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_desc_param")]
  public List<string> BuffDescParam { get; set; }
  [Newtonsoft.Json.JsonProperty("help_id")]
  public int HelpId { get; set; }
  [Newtonsoft.Json.JsonProperty("black_flower_help_id")]
  public int BlackFlowerHelpId { get; set; }
  [Newtonsoft.Json.JsonProperty("max_score")]
  public int MaxScore { get; set; }

  public RogueWeeklyCycleT() {
    this.Id = 0;
    this.ActivityId = 0;
    this.TimeId = 0;
    this.Diff = null;
    this.MapMark = 0;
    this.QuestId = 0;
    this.EntranceId = 0;
    this.InstId = 0;
    this.RecommendedRole = null;
    this.ScoreRate = 0;
    this.RoguelikeRoomFloatTipsSpecialIcon = null;
    this.BlackFlowerCost = null;
    this.BlackFlowerAward = 0;
    this.GoldItemId = 0;
    this.CycleName = null;
    this.ViewBackground = null;
    this.BuffIcon = null;
    this.BuffPr = 0;
    this.BuffDesc = null;
    this.BuffDescParam = null;
    this.HelpId = 0;
    this.BlackFlowerHelpId = 0;
    this.MaxScore = 0;
  }
}


static public class RogueWeeklyCycleVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*TimeId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*Diff*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 12 /*MapMark*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*QuestId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*EntranceId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*InstId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*RecommendedRole*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 22 /*ScoreRate*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 24 /*RoguelikeRoomFloatTipsSpecialIcon*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 26 /*BlackFlowerCost*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 28 /*BlackFlowerAward*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*GoldItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 32 /*CycleName*/, false)
      && verifier.VerifyString(tablePos, 34 /*ViewBackground*/, false)
      && verifier.VerifyString(tablePos, 36 /*BuffIcon*/, false)
      && verifier.VerifyField(tablePos, 38 /*BuffPr*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 40 /*BuffDesc*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 42 /*BuffDescParam*/, false)
      && verifier.VerifyField(tablePos, 44 /*HelpId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*BlackFlowerHelpId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*MaxScore*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
