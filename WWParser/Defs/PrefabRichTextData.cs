// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PrefabRichTextData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PrefabRichTextData GetRootAsPrefabRichTextData(ByteBuffer _bb) { return GetRootAsPrefabRichTextData(_bb, new PrefabRichTextData()); }
  public static PrefabRichTextData GetRootAsPrefabRichTextData(ByteBuffer _bb, PrefabRichTextData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PrefabRichTextData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public bool IsIncludeRichText { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsIncludeGameText { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.PrefabRichTextData> CreatePrefabRichTextData(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      bool is_include_rich_text = false,
      bool is_include_game_text = false) {
    builder.StartTable(3);
    PrefabRichTextData.AddId(builder, idOffset);
    PrefabRichTextData.AddIsIncludeGameText(builder, is_include_game_text);
    PrefabRichTextData.AddIsIncludeRichText(builder, is_include_rich_text);
    return PrefabRichTextData.EndPrefabRichTextData(builder);
  }

  public static void StartPrefabRichTextData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIsIncludeRichText(FlatBufferBuilder builder, bool isIncludeRichText) { builder.AddBool(1, isIncludeRichText, false); }
  public static void AddIsIncludeGameText(FlatBufferBuilder builder, bool isIncludeGameText) { builder.AddBool(2, isIncludeGameText, false); }
  public static Offset<WWParser.Defs.PrefabRichTextData> EndPrefabRichTextData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PrefabRichTextData>(o);
  }
  public PrefabRichTextDataT UnPack() {
    var _o = new PrefabRichTextDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PrefabRichTextDataT _o) {
    _o.Id = this.Id;
    _o.IsIncludeRichText = this.IsIncludeRichText;
    _o.IsIncludeGameText = this.IsIncludeGameText;
  }
  public static Offset<WWParser.Defs.PrefabRichTextData> Pack(FlatBufferBuilder builder, PrefabRichTextDataT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PrefabRichTextData>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    return CreatePrefabRichTextData(
      builder,
      _id,
      _o.IsIncludeRichText,
      _o.IsIncludeGameText);
  }
}

public class PrefabRichTextDataT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("is_include_rich_text")]
  public bool IsIncludeRichText { get; set; }
  [Newtonsoft.Json.JsonProperty("is_include_game_text")]
  public bool IsIncludeGameText { get; set; }

  public PrefabRichTextDataT() {
    this.Id = null;
    this.IsIncludeRichText = false;
    this.IsIncludeGameText = false;
  }
}


static public class PrefabRichTextDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyField(tablePos, 6 /*IsIncludeRichText*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*IsIncludeGameText*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
