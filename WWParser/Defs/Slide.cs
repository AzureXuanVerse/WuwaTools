// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Slide : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Slide GetRootAsSlide(ByteBuffer _bb) { return GetRootAsSlide(_bb, new Slide()); }
  public static Slide GetRootAsSlide(ByteBuffer _bb, Slide obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Slide __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public WWParser.Defs.DicIntFloat? FallingLateralFrictions(int j) { int o = __p.__offset(6); return o != 0 ? (WWParser.Defs.DicIntFloat?)(new WWParser.Defs.DicIntFloat()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FallingLateralFrictionsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public float SlideFriction { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)2.0f; } }
  public float SlideAccel { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public float SlideAccelUp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public float SlideAccelDown { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public float MaxSlideHorizontalSeed { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)500.0f; } }
  public WWParser.Defs.FloatRange? SlideModeSwitchRange { get { int o = __p.__offset(18); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool Ski { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float SkiMaxSpHor { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)2000.0f; } }
  public float SkiMaxSpVer { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)2000.0f; } }
  public float JumpRate { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public float TurnSpeed { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)720.0f; } }
  public WWParser.Defs.FloatRange? SkiHorizontalInputSpeedThreshold { get { int o = __p.__offset(30); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string SpeedReduceCurve { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpeedReduceCurveBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetSpeedReduceCurveBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetSpeedReduceCurveArray() { return __p.__vector_as_array<byte>(32); }

  public static Offset<WWParser.Defs.Slide> CreateSlide(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      VectorOffset falling_lateral_frictionsOffset = default(VectorOffset),
      float slide_friction = 2.0f,
      float slide_accel = 1.0f,
      float slide_accel_up = 1.0f,
      float slide_accel_down = 1.0f,
      float max_slide_horizontal_seed = 500.0f,
      Offset<WWParser.Defs.FloatRange> slide_mode_switch_rangeOffset = default(Offset<WWParser.Defs.FloatRange>),
      bool ski = false,
      float ski_max_sp_hor = 2000.0f,
      float ski_max_sp_ver = 2000.0f,
      float jump_rate = 1.0f,
      float turn_speed = 720.0f,
      Offset<WWParser.Defs.FloatRange> ski_horizontal_input_speed_thresholdOffset = default(Offset<WWParser.Defs.FloatRange>),
      StringOffset speed_reduce_curveOffset = default(StringOffset)) {
    builder.StartTable(15);
    Slide.AddSpeedReduceCurve(builder, speed_reduce_curveOffset);
    Slide.AddSkiHorizontalInputSpeedThreshold(builder, ski_horizontal_input_speed_thresholdOffset);
    Slide.AddTurnSpeed(builder, turn_speed);
    Slide.AddJumpRate(builder, jump_rate);
    Slide.AddSkiMaxSpVer(builder, ski_max_sp_ver);
    Slide.AddSkiMaxSpHor(builder, ski_max_sp_hor);
    Slide.AddSlideModeSwitchRange(builder, slide_mode_switch_rangeOffset);
    Slide.AddMaxSlideHorizontalSeed(builder, max_slide_horizontal_seed);
    Slide.AddSlideAccelDown(builder, slide_accel_down);
    Slide.AddSlideAccelUp(builder, slide_accel_up);
    Slide.AddSlideAccel(builder, slide_accel);
    Slide.AddSlideFriction(builder, slide_friction);
    Slide.AddFallingLateralFrictions(builder, falling_lateral_frictionsOffset);
    Slide.AddId(builder, idOffset);
    Slide.AddSki(builder, ski);
    return Slide.EndSlide(builder);
  }

  public static void StartSlide(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddFallingLateralFrictions(FlatBufferBuilder builder, VectorOffset fallingLateralFrictionsOffset) { builder.AddOffset(1, fallingLateralFrictionsOffset.Value, 0); }
  public static VectorOffset CreateFallingLateralFrictionsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntFloat>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFallingLateralFrictionsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntFloat>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFallingLateralFrictionsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntFloat>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFallingLateralFrictionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntFloat>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFallingLateralFrictionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSlideFriction(FlatBufferBuilder builder, float slideFriction) { builder.AddFloat(2, slideFriction, 2.0f); }
  public static void AddSlideAccel(FlatBufferBuilder builder, float slideAccel) { builder.AddFloat(3, slideAccel, 1.0f); }
  public static void AddSlideAccelUp(FlatBufferBuilder builder, float slideAccelUp) { builder.AddFloat(4, slideAccelUp, 1.0f); }
  public static void AddSlideAccelDown(FlatBufferBuilder builder, float slideAccelDown) { builder.AddFloat(5, slideAccelDown, 1.0f); }
  public static void AddMaxSlideHorizontalSeed(FlatBufferBuilder builder, float maxSlideHorizontalSeed) { builder.AddFloat(6, maxSlideHorizontalSeed, 500.0f); }
  public static void AddSlideModeSwitchRange(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> slideModeSwitchRangeOffset) { builder.AddOffset(7, slideModeSwitchRangeOffset.Value, 0); }
  public static void AddSki(FlatBufferBuilder builder, bool ski) { builder.AddBool(8, ski, false); }
  public static void AddSkiMaxSpHor(FlatBufferBuilder builder, float skiMaxSpHor) { builder.AddFloat(9, skiMaxSpHor, 2000.0f); }
  public static void AddSkiMaxSpVer(FlatBufferBuilder builder, float skiMaxSpVer) { builder.AddFloat(10, skiMaxSpVer, 2000.0f); }
  public static void AddJumpRate(FlatBufferBuilder builder, float jumpRate) { builder.AddFloat(11, jumpRate, 1.0f); }
  public static void AddTurnSpeed(FlatBufferBuilder builder, float turnSpeed) { builder.AddFloat(12, turnSpeed, 720.0f); }
  public static void AddSkiHorizontalInputSpeedThreshold(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> skiHorizontalInputSpeedThresholdOffset) { builder.AddOffset(13, skiHorizontalInputSpeedThresholdOffset.Value, 0); }
  public static void AddSpeedReduceCurve(FlatBufferBuilder builder, StringOffset speedReduceCurveOffset) { builder.AddOffset(14, speedReduceCurveOffset.Value, 0); }
  public static Offset<WWParser.Defs.Slide> EndSlide(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Slide>(o);
  }
  public SlideT UnPack() {
    var _o = new SlideT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SlideT _o) {
    _o.Id = this.Id;
    _o.FallingLateralFrictions = new List<WWParser.Defs.DicIntFloatT>();
    for (var _j = 0; _j < this.FallingLateralFrictionsLength; ++_j) {_o.FallingLateralFrictions.Add(this.FallingLateralFrictions(_j).HasValue ? this.FallingLateralFrictions(_j).Value.UnPack() : null);}
    _o.SlideFriction = this.SlideFriction;
    _o.SlideAccel = this.SlideAccel;
    _o.SlideAccelUp = this.SlideAccelUp;
    _o.SlideAccelDown = this.SlideAccelDown;
    _o.MaxSlideHorizontalSeed = this.MaxSlideHorizontalSeed;
    _o.SlideModeSwitchRange = this.SlideModeSwitchRange.HasValue ? this.SlideModeSwitchRange.Value.UnPack() : null;
    _o.Ski = this.Ski;
    _o.SkiMaxSpHor = this.SkiMaxSpHor;
    _o.SkiMaxSpVer = this.SkiMaxSpVer;
    _o.JumpRate = this.JumpRate;
    _o.TurnSpeed = this.TurnSpeed;
    _o.SkiHorizontalInputSpeedThreshold = this.SkiHorizontalInputSpeedThreshold.HasValue ? this.SkiHorizontalInputSpeedThreshold.Value.UnPack() : null;
    _o.SpeedReduceCurve = this.SpeedReduceCurve;
  }
  public static Offset<WWParser.Defs.Slide> Pack(FlatBufferBuilder builder, SlideT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Slide>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _falling_lateral_frictions = default(VectorOffset);
    if (_o.FallingLateralFrictions != null) {
      var __falling_lateral_frictions = new Offset<WWParser.Defs.DicIntFloat>[_o.FallingLateralFrictions.Count];
      for (var _j = 0; _j < __falling_lateral_frictions.Length; ++_j) { __falling_lateral_frictions[_j] = WWParser.Defs.DicIntFloat.Pack(builder, _o.FallingLateralFrictions[_j]); }
      _falling_lateral_frictions = CreateFallingLateralFrictionsVector(builder, __falling_lateral_frictions);
    }
    var _slide_mode_switch_range = _o.SlideModeSwitchRange == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.SlideModeSwitchRange);
    var _ski_horizontal_input_speed_threshold = _o.SkiHorizontalInputSpeedThreshold == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.SkiHorizontalInputSpeedThreshold);
    var _speed_reduce_curve = _o.SpeedReduceCurve == null ? default(StringOffset) : builder.CreateString(_o.SpeedReduceCurve);
    return CreateSlide(
      builder,
      _id,
      _falling_lateral_frictions,
      _o.SlideFriction,
      _o.SlideAccel,
      _o.SlideAccelUp,
      _o.SlideAccelDown,
      _o.MaxSlideHorizontalSeed,
      _slide_mode_switch_range,
      _o.Ski,
      _o.SkiMaxSpHor,
      _o.SkiMaxSpVer,
      _o.JumpRate,
      _o.TurnSpeed,
      _ski_horizontal_input_speed_threshold,
      _speed_reduce_curve);
  }
}

public class SlideT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("falling_lateral_frictions")]
  public List<WWParser.Defs.DicIntFloatT> FallingLateralFrictions { get; set; }
  [Newtonsoft.Json.JsonProperty("slide_friction")]
  public float SlideFriction { get; set; }
  [Newtonsoft.Json.JsonProperty("slide_accel")]
  public float SlideAccel { get; set; }
  [Newtonsoft.Json.JsonProperty("slide_accel_up")]
  public float SlideAccelUp { get; set; }
  [Newtonsoft.Json.JsonProperty("slide_accel_down")]
  public float SlideAccelDown { get; set; }
  [Newtonsoft.Json.JsonProperty("max_slide_horizontal_seed")]
  public float MaxSlideHorizontalSeed { get; set; }
  [Newtonsoft.Json.JsonProperty("slide_mode_switch_range")]
  public WWParser.Defs.FloatRangeT SlideModeSwitchRange { get; set; }
  [Newtonsoft.Json.JsonProperty("ski")]
  public bool Ski { get; set; }
  [Newtonsoft.Json.JsonProperty("ski_max_sp_hor")]
  public float SkiMaxSpHor { get; set; }
  [Newtonsoft.Json.JsonProperty("ski_max_sp_ver")]
  public float SkiMaxSpVer { get; set; }
  [Newtonsoft.Json.JsonProperty("jump_rate")]
  public float JumpRate { get; set; }
  [Newtonsoft.Json.JsonProperty("turn_speed")]
  public float TurnSpeed { get; set; }
  [Newtonsoft.Json.JsonProperty("ski_horizontal_input_speed_threshold")]
  public WWParser.Defs.FloatRangeT SkiHorizontalInputSpeedThreshold { get; set; }
  [Newtonsoft.Json.JsonProperty("speed_reduce_curve")]
  public string SpeedReduceCurve { get; set; }

  public SlideT() {
    this.Id = null;
    this.FallingLateralFrictions = null;
    this.SlideFriction = 2.0f;
    this.SlideAccel = 1.0f;
    this.SlideAccelUp = 1.0f;
    this.SlideAccelDown = 1.0f;
    this.MaxSlideHorizontalSeed = 500.0f;
    this.SlideModeSwitchRange = null;
    this.Ski = false;
    this.SkiMaxSpHor = 2000.0f;
    this.SkiMaxSpVer = 2000.0f;
    this.JumpRate = 1.0f;
    this.TurnSpeed = 720.0f;
    this.SkiHorizontalInputSpeedThreshold = null;
    this.SpeedReduceCurve = null;
  }
}


static public class SlideVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*FallingLateralFrictions*/, WWParser.Defs.DicIntFloatVerify.Verify, false)
      && verifier.VerifyField(tablePos, 8 /*SlideFriction*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*SlideAccel*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*SlideAccelUp*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*SlideAccelDown*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*MaxSlideHorizontalSeed*/, 4 /*float*/, 4, false)
      && verifier.VerifyTable(tablePos, 18 /*SlideModeSwitchRange*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyField(tablePos, 20 /*Ski*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*SkiMaxSpHor*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*SkiMaxSpVer*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*JumpRate*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*TurnSpeed*/, 4 /*float*/, 4, false)
      && verifier.VerifyTable(tablePos, 30 /*SkiHorizontalInputSpeedThreshold*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyString(tablePos, 32 /*SpeedReduceCurve*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
