// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiSkillInfos : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AiSkillInfos GetRootAsAiSkillInfos(ByteBuffer _bb) { return GetRootAsAiSkillInfos(_bb, new AiSkillInfos()); }
  public static AiSkillInfos GetRootAsAiSkillInfos(ByteBuffer _bb, AiSkillInfos obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiSkillInfos __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillWeight { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int SkillPreconditionId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SkillId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSkillIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSkillIdArray() { return __p.__vector_as_array<byte>(10); }
  public WWParser.Defs.FloatRange? SkillCdRange { get { int o = __p.__offset(12); return o != 0 ? (WWParser.Defs.FloatRange?)(new WWParser.Defs.FloatRange()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int SkillType { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }

  public static Offset<WWParser.Defs.AiSkillInfos> CreateAiSkillInfos(FlatBufferBuilder builder,
      int id = 0,
      int skill_weight = 1,
      int skill_precondition_id = 0,
      StringOffset skill_idOffset = default(StringOffset),
      Offset<WWParser.Defs.FloatRange> skill_cd_rangeOffset = default(Offset<WWParser.Defs.FloatRange>),
      int skill_type = -1) {
    builder.StartTable(6);
    AiSkillInfos.AddSkillType(builder, skill_type);
    AiSkillInfos.AddSkillCdRange(builder, skill_cd_rangeOffset);
    AiSkillInfos.AddSkillId(builder, skill_idOffset);
    AiSkillInfos.AddSkillPreconditionId(builder, skill_precondition_id);
    AiSkillInfos.AddSkillWeight(builder, skill_weight);
    AiSkillInfos.AddId(builder, id);
    return AiSkillInfos.EndAiSkillInfos(builder);
  }

  public static void StartAiSkillInfos(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddSkillWeight(FlatBufferBuilder builder, int skillWeight) { builder.AddInt(1, skillWeight, 1); }
  public static void AddSkillPreconditionId(FlatBufferBuilder builder, int skillPreconditionId) { builder.AddInt(2, skillPreconditionId, 0); }
  public static void AddSkillId(FlatBufferBuilder builder, StringOffset skillIdOffset) { builder.AddOffset(3, skillIdOffset.Value, 0); }
  public static void AddSkillCdRange(FlatBufferBuilder builder, Offset<WWParser.Defs.FloatRange> skillCdRangeOffset) { builder.AddOffset(4, skillCdRangeOffset.Value, 0); }
  public static void AddSkillType(FlatBufferBuilder builder, int skillType) { builder.AddInt(5, skillType, -1); }
  public static Offset<WWParser.Defs.AiSkillInfos> EndAiSkillInfos(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AiSkillInfos>(o);
  }
  public AiSkillInfosT UnPack() {
    var _o = new AiSkillInfosT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AiSkillInfosT _o) {
    _o.Id = this.Id;
    _o.SkillWeight = this.SkillWeight;
    _o.SkillPreconditionId = this.SkillPreconditionId;
    _o.SkillId = this.SkillId;
    _o.SkillCdRange = this.SkillCdRange.HasValue ? this.SkillCdRange.Value.UnPack() : null;
    _o.SkillType = this.SkillType;
  }
  public static Offset<WWParser.Defs.AiSkillInfos> Pack(FlatBufferBuilder builder, AiSkillInfosT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AiSkillInfos>);
    var _skill_id = _o.SkillId == null ? default(StringOffset) : builder.CreateString(_o.SkillId);
    var _skill_cd_range = _o.SkillCdRange == null ? default(Offset<WWParser.Defs.FloatRange>) : WWParser.Defs.FloatRange.Pack(builder, _o.SkillCdRange);
    return CreateAiSkillInfos(
      builder,
      _o.Id,
      _o.SkillWeight,
      _o.SkillPreconditionId,
      _skill_id,
      _skill_cd_range,
      _o.SkillType);
  }
}

public class AiSkillInfosT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_weight")]
  public int SkillWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_precondition_id")]
  public int SkillPreconditionId { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_id")]
  public string SkillId { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_cd_range")]
  public WWParser.Defs.FloatRangeT SkillCdRange { get; set; }
  [Newtonsoft.Json.JsonProperty("skill_type")]
  public int SkillType { get; set; }

  public AiSkillInfosT() {
    this.Id = 0;
    this.SkillWeight = 1;
    this.SkillPreconditionId = 0;
    this.SkillId = null;
    this.SkillCdRange = null;
    this.SkillType = -1;
  }
}


static public class AiSkillInfosVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SkillWeight*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*SkillPreconditionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*SkillId*/, false)
      && verifier.VerifyTable(tablePos, 12 /*SkillCdRange*/, WWParser.Defs.FloatRangeVerify.Verify, false)
      && verifier.VerifyField(tablePos, 14 /*SkillType*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
