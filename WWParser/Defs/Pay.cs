// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Pay : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Pay GetRootAsPay(ByteBuffer _bb) { return GetRootAsPay(_bb, new Pay()); }
  public static Pay GetRootAsPay(ByteBuffer _bb, Pay obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Pay __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PayId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Region { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRegionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetRegionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetRegionArray() { return __p.__vector_as_array<byte>(8); }
  public float Amount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float GlobalAmount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string ProductId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProductIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetProductIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetProductIdArray() { return __p.__vector_as_array<byte>(14); }
  public string CurrencyType { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCurrencyTypeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetCurrencyTypeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetCurrencyTypeArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<WWParser.Defs.Pay> CreatePay(FlatBufferBuilder builder,
      int id = 0,
      int pay_id = 0,
      StringOffset regionOffset = default(StringOffset),
      float amount = 0.0f,
      float global_amount = 0.0f,
      StringOffset product_idOffset = default(StringOffset),
      StringOffset currency_typeOffset = default(StringOffset)) {
    builder.StartTable(7);
    Pay.AddCurrencyType(builder, currency_typeOffset);
    Pay.AddProductId(builder, product_idOffset);
    Pay.AddGlobalAmount(builder, global_amount);
    Pay.AddAmount(builder, amount);
    Pay.AddRegion(builder, regionOffset);
    Pay.AddPayId(builder, pay_id);
    Pay.AddId(builder, id);
    return Pay.EndPay(builder);
  }

  public static void StartPay(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPayId(FlatBufferBuilder builder, int payId) { builder.AddInt(1, payId, 0); }
  public static void AddRegion(FlatBufferBuilder builder, StringOffset regionOffset) { builder.AddOffset(2, regionOffset.Value, 0); }
  public static void AddAmount(FlatBufferBuilder builder, float amount) { builder.AddFloat(3, amount, 0.0f); }
  public static void AddGlobalAmount(FlatBufferBuilder builder, float globalAmount) { builder.AddFloat(4, globalAmount, 0.0f); }
  public static void AddProductId(FlatBufferBuilder builder, StringOffset productIdOffset) { builder.AddOffset(5, productIdOffset.Value, 0); }
  public static void AddCurrencyType(FlatBufferBuilder builder, StringOffset currencyTypeOffset) { builder.AddOffset(6, currencyTypeOffset.Value, 0); }
  public static Offset<WWParser.Defs.Pay> EndPay(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Pay>(o);
  }
  public PayT UnPack() {
    var _o = new PayT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PayT _o) {
    _o.Id = this.Id;
    _o.PayId = this.PayId;
    _o.Region = this.Region;
    _o.Amount = this.Amount;
    _o.GlobalAmount = this.GlobalAmount;
    _o.ProductId = this.ProductId;
    _o.CurrencyType = this.CurrencyType;
  }
  public static Offset<WWParser.Defs.Pay> Pack(FlatBufferBuilder builder, PayT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Pay>);
    var _region = _o.Region == null ? default(StringOffset) : builder.CreateString(_o.Region);
    var _product_id = _o.ProductId == null ? default(StringOffset) : builder.CreateString(_o.ProductId);
    var _currency_type = _o.CurrencyType == null ? default(StringOffset) : builder.CreateString(_o.CurrencyType);
    return CreatePay(
      builder,
      _o.Id,
      _o.PayId,
      _region,
      _o.Amount,
      _o.GlobalAmount,
      _product_id,
      _currency_type);
  }
}

public class PayT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("pay_id")]
  public int PayId { get; set; }
  [Newtonsoft.Json.JsonProperty("region")]
  public string Region { get; set; }
  [Newtonsoft.Json.JsonProperty("amount")]
  public float Amount { get; set; }
  [Newtonsoft.Json.JsonProperty("global_amount")]
  public float GlobalAmount { get; set; }
  [Newtonsoft.Json.JsonProperty("product_id")]
  public string ProductId { get; set; }
  [Newtonsoft.Json.JsonProperty("currency_type")]
  public string CurrencyType { get; set; }

  public PayT() {
    this.Id = 0;
    this.PayId = 0;
    this.Region = null;
    this.Amount = 0.0f;
    this.GlobalAmount = 0.0f;
    this.ProductId = null;
    this.CurrencyType = null;
  }
}


static public class PayVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*PayId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Region*/, false)
      && verifier.VerifyField(tablePos, 10 /*Amount*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*GlobalAmount*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*ProductId*/, false)
      && verifier.VerifyString(tablePos, 16 /*CurrencyType*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
