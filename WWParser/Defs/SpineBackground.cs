// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SpineBackground : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SpineBackground GetRootAsSpineBackground(ByteBuffer _bb) { return GetRootAsSpineBackground(_bb, new SpineBackground()); }
  public static SpineBackground GetRootAsSpineBackground(ByteBuffer _bb, SpineBackground obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SpineBackground __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Remark { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRemarkBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetRemarkBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetRemarkArray() { return __p.__vector_as_array<byte>(6); }
  public string UiPrefabId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUiPrefabIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetUiPrefabIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetUiPrefabIdArray() { return __p.__vector_as_array<byte>(8); }
  public string AnimationName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetAnimationNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetAnimationNameArray() { return __p.__vector_as_array<byte>(10); }
  public string UiPrefabIdMaleVariant { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUiPrefabIdMaleVariantBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetUiPrefabIdMaleVariantBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetUiPrefabIdMaleVariantArray() { return __p.__vector_as_array<byte>(12); }
  public string AnimationNameMaleVariant { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationNameMaleVariantBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetAnimationNameMaleVariantBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetAnimationNameMaleVariantArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<WWParser.Defs.SpineBackground> CreateSpineBackground(FlatBufferBuilder builder,
      int id = 0,
      StringOffset remarkOffset = default(StringOffset),
      StringOffset ui_prefab_idOffset = default(StringOffset),
      StringOffset animation_nameOffset = default(StringOffset),
      StringOffset ui_prefab_id_male_variantOffset = default(StringOffset),
      StringOffset animation_name_male_variantOffset = default(StringOffset)) {
    builder.StartTable(6);
    SpineBackground.AddAnimationNameMaleVariant(builder, animation_name_male_variantOffset);
    SpineBackground.AddUiPrefabIdMaleVariant(builder, ui_prefab_id_male_variantOffset);
    SpineBackground.AddAnimationName(builder, animation_nameOffset);
    SpineBackground.AddUiPrefabId(builder, ui_prefab_idOffset);
    SpineBackground.AddRemark(builder, remarkOffset);
    SpineBackground.AddId(builder, id);
    return SpineBackground.EndSpineBackground(builder);
  }

  public static void StartSpineBackground(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddRemark(FlatBufferBuilder builder, StringOffset remarkOffset) { builder.AddOffset(1, remarkOffset.Value, 0); }
  public static void AddUiPrefabId(FlatBufferBuilder builder, StringOffset uiPrefabIdOffset) { builder.AddOffset(2, uiPrefabIdOffset.Value, 0); }
  public static void AddAnimationName(FlatBufferBuilder builder, StringOffset animationNameOffset) { builder.AddOffset(3, animationNameOffset.Value, 0); }
  public static void AddUiPrefabIdMaleVariant(FlatBufferBuilder builder, StringOffset uiPrefabIdMaleVariantOffset) { builder.AddOffset(4, uiPrefabIdMaleVariantOffset.Value, 0); }
  public static void AddAnimationNameMaleVariant(FlatBufferBuilder builder, StringOffset animationNameMaleVariantOffset) { builder.AddOffset(5, animationNameMaleVariantOffset.Value, 0); }
  public static Offset<WWParser.Defs.SpineBackground> EndSpineBackground(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SpineBackground>(o);
  }
  public SpineBackgroundT UnPack() {
    var _o = new SpineBackgroundT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SpineBackgroundT _o) {
    _o.Id = this.Id;
    _o.Remark = this.Remark;
    _o.UiPrefabId = this.UiPrefabId;
    _o.AnimationName = this.AnimationName;
    _o.UiPrefabIdMaleVariant = this.UiPrefabIdMaleVariant;
    _o.AnimationNameMaleVariant = this.AnimationNameMaleVariant;
  }
  public static Offset<WWParser.Defs.SpineBackground> Pack(FlatBufferBuilder builder, SpineBackgroundT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SpineBackground>);
    var _remark = _o.Remark == null ? default(StringOffset) : builder.CreateString(_o.Remark);
    var _ui_prefab_id = _o.UiPrefabId == null ? default(StringOffset) : builder.CreateString(_o.UiPrefabId);
    var _animation_name = _o.AnimationName == null ? default(StringOffset) : builder.CreateString(_o.AnimationName);
    var _ui_prefab_id_male_variant = _o.UiPrefabIdMaleVariant == null ? default(StringOffset) : builder.CreateString(_o.UiPrefabIdMaleVariant);
    var _animation_name_male_variant = _o.AnimationNameMaleVariant == null ? default(StringOffset) : builder.CreateString(_o.AnimationNameMaleVariant);
    return CreateSpineBackground(
      builder,
      _o.Id,
      _remark,
      _ui_prefab_id,
      _animation_name,
      _ui_prefab_id_male_variant,
      _animation_name_male_variant);
  }
}

public class SpineBackgroundT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("remark")]
  public string Remark { get; set; }
  [Newtonsoft.Json.JsonProperty("ui_prefab_id")]
  public string UiPrefabId { get; set; }
  [Newtonsoft.Json.JsonProperty("animation_name")]
  public string AnimationName { get; set; }
  [Newtonsoft.Json.JsonProperty("ui_prefab_id_male_variant")]
  public string UiPrefabIdMaleVariant { get; set; }
  [Newtonsoft.Json.JsonProperty("animation_name_male_variant")]
  public string AnimationNameMaleVariant { get; set; }

  public SpineBackgroundT() {
    this.Id = 0;
    this.Remark = null;
    this.UiPrefabId = null;
    this.AnimationName = null;
    this.UiPrefabIdMaleVariant = null;
    this.AnimationNameMaleVariant = null;
  }
}


static public class SpineBackgroundVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Remark*/, false)
      && verifier.VerifyString(tablePos, 8 /*UiPrefabId*/, false)
      && verifier.VerifyString(tablePos, 10 /*AnimationName*/, false)
      && verifier.VerifyString(tablePos, 12 /*UiPrefabIdMaleVariant*/, false)
      && verifier.VerifyString(tablePos, 14 /*AnimationNameMaleVariant*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
