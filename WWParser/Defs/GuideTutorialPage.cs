// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GuideTutorialPage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GuideTutorialPage GetRootAsGuideTutorialPage(ByteBuffer _bb) { return GetRootAsGuideTutorialPage(_bb, new GuideTutorialPage()); }
  public static GuideTutorialPage GetRootAsGuideTutorialPage(ByteBuffer _bb, GuideTutorialPage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GuideTutorialPage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Pic { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPicBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetPicBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPicArray() { return __p.__vector_as_array<byte>(6); }
  public string Title { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(8); }
  public string SubTitle { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSubTitleBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSubTitleBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSubTitleArray() { return __p.__vector_as_array<byte>(10); }
  public string Content { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetContentBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetContentArray() { return __p.__vector_as_array<byte>(12); }
  public string Button(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ButtonLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.GuideTutorialPage> CreateGuideTutorialPage(FlatBufferBuilder builder,
      int id = 0,
      StringOffset picOffset = default(StringOffset),
      StringOffset titleOffset = default(StringOffset),
      StringOffset sub_titleOffset = default(StringOffset),
      StringOffset contentOffset = default(StringOffset),
      VectorOffset buttonOffset = default(VectorOffset)) {
    builder.StartTable(6);
    GuideTutorialPage.AddButton(builder, buttonOffset);
    GuideTutorialPage.AddContent(builder, contentOffset);
    GuideTutorialPage.AddSubTitle(builder, sub_titleOffset);
    GuideTutorialPage.AddTitle(builder, titleOffset);
    GuideTutorialPage.AddPic(builder, picOffset);
    GuideTutorialPage.AddId(builder, id);
    return GuideTutorialPage.EndGuideTutorialPage(builder);
  }

  public static void StartGuideTutorialPage(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddPic(FlatBufferBuilder builder, StringOffset picOffset) { builder.AddOffset(1, picOffset.Value, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(2, titleOffset.Value, 0); }
  public static void AddSubTitle(FlatBufferBuilder builder, StringOffset subTitleOffset) { builder.AddOffset(3, subTitleOffset.Value, 0); }
  public static void AddContent(FlatBufferBuilder builder, StringOffset contentOffset) { builder.AddOffset(4, contentOffset.Value, 0); }
  public static void AddButton(FlatBufferBuilder builder, VectorOffset buttonOffset) { builder.AddOffset(5, buttonOffset.Value, 0); }
  public static VectorOffset CreateButtonVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateButtonVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateButtonVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateButtonVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartButtonVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.GuideTutorialPage> EndGuideTutorialPage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.GuideTutorialPage>(o);
  }
  public GuideTutorialPageT UnPack() {
    var _o = new GuideTutorialPageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GuideTutorialPageT _o) {
    _o.Id = this.Id;
    _o.Pic = this.Pic;
    _o.Title = this.Title;
    _o.SubTitle = this.SubTitle;
    _o.Content = this.Content;
    _o.Button = new List<string>();
    for (var _j = 0; _j < this.ButtonLength; ++_j) {_o.Button.Add(this.Button(_j));}
  }
  public static Offset<WWParser.Defs.GuideTutorialPage> Pack(FlatBufferBuilder builder, GuideTutorialPageT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.GuideTutorialPage>);
    var _pic = _o.Pic == null ? default(StringOffset) : builder.CreateString(_o.Pic);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _sub_title = _o.SubTitle == null ? default(StringOffset) : builder.CreateString(_o.SubTitle);
    var _content = _o.Content == null ? default(StringOffset) : builder.CreateString(_o.Content);
    var _button = default(VectorOffset);
    if (_o.Button != null) {
      var __button = new StringOffset[_o.Button.Count];
      for (var _j = 0; _j < __button.Length; ++_j) { __button[_j] = builder.CreateString(_o.Button[_j]); }
      _button = CreateButtonVector(builder, __button);
    }
    return CreateGuideTutorialPage(
      builder,
      _o.Id,
      _pic,
      _title,
      _sub_title,
      _content,
      _button);
  }
}

public class GuideTutorialPageT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("pic")]
  public string Pic { get; set; }
  [Newtonsoft.Json.JsonProperty("title")]
  public string Title { get; set; }
  [Newtonsoft.Json.JsonProperty("sub_title")]
  public string SubTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("content")]
  public string Content { get; set; }
  [Newtonsoft.Json.JsonProperty("button")]
  public List<string> Button { get; set; }

  public GuideTutorialPageT() {
    this.Id = 0;
    this.Pic = null;
    this.Title = null;
    this.SubTitle = null;
    this.Content = null;
    this.Button = null;
  }
}


static public class GuideTutorialPageVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Pic*/, false)
      && verifier.VerifyString(tablePos, 8 /*Title*/, false)
      && verifier.VerifyString(tablePos, 10 /*SubTitle*/, false)
      && verifier.VerifyString(tablePos, 12 /*Content*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*Button*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
