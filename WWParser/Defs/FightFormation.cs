// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FightFormation : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FightFormation GetRootAsFightFormation(ByteBuffer _bb) { return GetRootAsFightFormation(_bb, new FightFormation()); }
  public static FightFormation GetRootAsFightFormation(ByteBuffer _bb, FightFormation obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FightFormation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LimitRole(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LimitRoleLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLimitRoleBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetLimitRoleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetLimitRoleArray() { return __p.__vector_as_array<int>(6); }
  public int LimitCount(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LimitCountLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLimitCountBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetLimitCountBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetLimitCountArray() { return __p.__vector_as_array<int>(8); }
  public int LitmitElement(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LitmitElementLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLitmitElementBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetLitmitElementBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetLitmitElementArray() { return __p.__vector_as_array<int>(10); }
  public string Content { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetContentBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetContentArray() { return __p.__vector_as_array<byte>(12); }
  public int RecommendFormation(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RecommendFormationLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRecommendFormationBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetRecommendFormationBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetRecommendFormationArray() { return __p.__vector_as_array<int>(14); }
  public int TrialRole(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TrialRoleLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTrialRoleBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetTrialRoleBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetTrialRoleArray() { return __p.__vector_as_array<int>(16); }
  public int AutoRole(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AutoRoleLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAutoRoleBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetAutoRoleBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetAutoRoleArray() { return __p.__vector_as_array<int>(18); }
  public bool ChooseRole { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.FightFormation> CreateFightFormation(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset limit_roleOffset = default(VectorOffset),
      VectorOffset limit_countOffset = default(VectorOffset),
      VectorOffset litmit_elementOffset = default(VectorOffset),
      StringOffset contentOffset = default(StringOffset),
      VectorOffset recommend_formationOffset = default(VectorOffset),
      VectorOffset trial_roleOffset = default(VectorOffset),
      VectorOffset auto_roleOffset = default(VectorOffset),
      bool choose_role = false) {
    builder.StartTable(9);
    FightFormation.AddAutoRole(builder, auto_roleOffset);
    FightFormation.AddTrialRole(builder, trial_roleOffset);
    FightFormation.AddRecommendFormation(builder, recommend_formationOffset);
    FightFormation.AddContent(builder, contentOffset);
    FightFormation.AddLitmitElement(builder, litmit_elementOffset);
    FightFormation.AddLimitCount(builder, limit_countOffset);
    FightFormation.AddLimitRole(builder, limit_roleOffset);
    FightFormation.AddId(builder, id);
    FightFormation.AddChooseRole(builder, choose_role);
    return FightFormation.EndFightFormation(builder);
  }

  public static void StartFightFormation(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddLimitRole(FlatBufferBuilder builder, VectorOffset limitRoleOffset) { builder.AddOffset(1, limitRoleOffset.Value, 0); }
  public static VectorOffset CreateLimitRoleVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLimitRoleVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitRoleVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitRoleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLimitRoleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLimitCount(FlatBufferBuilder builder, VectorOffset limitCountOffset) { builder.AddOffset(2, limitCountOffset.Value, 0); }
  public static VectorOffset CreateLimitCountVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLimitCountVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitCountVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLimitCountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLimitCountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLitmitElement(FlatBufferBuilder builder, VectorOffset litmitElementOffset) { builder.AddOffset(3, litmitElementOffset.Value, 0); }
  public static VectorOffset CreateLitmitElementVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLitmitElementVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLitmitElementVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLitmitElementVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLitmitElementVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddContent(FlatBufferBuilder builder, StringOffset contentOffset) { builder.AddOffset(4, contentOffset.Value, 0); }
  public static void AddRecommendFormation(FlatBufferBuilder builder, VectorOffset recommendFormationOffset) { builder.AddOffset(5, recommendFormationOffset.Value, 0); }
  public static VectorOffset CreateRecommendFormationVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRecommendFormationVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecommendFormationVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRecommendFormationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRecommendFormationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTrialRole(FlatBufferBuilder builder, VectorOffset trialRoleOffset) { builder.AddOffset(6, trialRoleOffset.Value, 0); }
  public static VectorOffset CreateTrialRoleVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTrialRoleVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTrialRoleVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTrialRoleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTrialRoleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAutoRole(FlatBufferBuilder builder, VectorOffset autoRoleOffset) { builder.AddOffset(7, autoRoleOffset.Value, 0); }
  public static VectorOffset CreateAutoRoleVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAutoRoleVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAutoRoleVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAutoRoleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAutoRoleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddChooseRole(FlatBufferBuilder builder, bool chooseRole) { builder.AddBool(8, chooseRole, false); }
  public static Offset<WWParser.Defs.FightFormation> EndFightFormation(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FightFormation>(o);
  }
  public FightFormationT UnPack() {
    var _o = new FightFormationT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FightFormationT _o) {
    _o.Id = this.Id;
    _o.LimitRole = new List<int>();
    for (var _j = 0; _j < this.LimitRoleLength; ++_j) {_o.LimitRole.Add(this.LimitRole(_j));}
    _o.LimitCount = new List<int>();
    for (var _j = 0; _j < this.LimitCountLength; ++_j) {_o.LimitCount.Add(this.LimitCount(_j));}
    _o.LitmitElement = new List<int>();
    for (var _j = 0; _j < this.LitmitElementLength; ++_j) {_o.LitmitElement.Add(this.LitmitElement(_j));}
    _o.Content = this.Content;
    _o.RecommendFormation = new List<int>();
    for (var _j = 0; _j < this.RecommendFormationLength; ++_j) {_o.RecommendFormation.Add(this.RecommendFormation(_j));}
    _o.TrialRole = new List<int>();
    for (var _j = 0; _j < this.TrialRoleLength; ++_j) {_o.TrialRole.Add(this.TrialRole(_j));}
    _o.AutoRole = new List<int>();
    for (var _j = 0; _j < this.AutoRoleLength; ++_j) {_o.AutoRole.Add(this.AutoRole(_j));}
    _o.ChooseRole = this.ChooseRole;
  }
  public static Offset<WWParser.Defs.FightFormation> Pack(FlatBufferBuilder builder, FightFormationT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FightFormation>);
    var _limit_role = default(VectorOffset);
    if (_o.LimitRole != null) {
      var __limit_role = _o.LimitRole.ToArray();
      _limit_role = CreateLimitRoleVector(builder, __limit_role);
    }
    var _limit_count = default(VectorOffset);
    if (_o.LimitCount != null) {
      var __limit_count = _o.LimitCount.ToArray();
      _limit_count = CreateLimitCountVector(builder, __limit_count);
    }
    var _litmit_element = default(VectorOffset);
    if (_o.LitmitElement != null) {
      var __litmit_element = _o.LitmitElement.ToArray();
      _litmit_element = CreateLitmitElementVector(builder, __litmit_element);
    }
    var _content = _o.Content == null ? default(StringOffset) : builder.CreateString(_o.Content);
    var _recommend_formation = default(VectorOffset);
    if (_o.RecommendFormation != null) {
      var __recommend_formation = _o.RecommendFormation.ToArray();
      _recommend_formation = CreateRecommendFormationVector(builder, __recommend_formation);
    }
    var _trial_role = default(VectorOffset);
    if (_o.TrialRole != null) {
      var __trial_role = _o.TrialRole.ToArray();
      _trial_role = CreateTrialRoleVector(builder, __trial_role);
    }
    var _auto_role = default(VectorOffset);
    if (_o.AutoRole != null) {
      var __auto_role = _o.AutoRole.ToArray();
      _auto_role = CreateAutoRoleVector(builder, __auto_role);
    }
    return CreateFightFormation(
      builder,
      _o.Id,
      _limit_role,
      _limit_count,
      _litmit_element,
      _content,
      _recommend_formation,
      _trial_role,
      _auto_role,
      _o.ChooseRole);
  }
}

public class FightFormationT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("limit_role")]
  public List<int> LimitRole { get; set; }
  [Newtonsoft.Json.JsonProperty("limit_count")]
  public List<int> LimitCount { get; set; }
  [Newtonsoft.Json.JsonProperty("litmit_element")]
  public List<int> LitmitElement { get; set; }
  [Newtonsoft.Json.JsonProperty("content")]
  public string Content { get; set; }
  [Newtonsoft.Json.JsonProperty("recommend_formation")]
  public List<int> RecommendFormation { get; set; }
  [Newtonsoft.Json.JsonProperty("trial_role")]
  public List<int> TrialRole { get; set; }
  [Newtonsoft.Json.JsonProperty("auto_role")]
  public List<int> AutoRole { get; set; }
  [Newtonsoft.Json.JsonProperty("choose_role")]
  public bool ChooseRole { get; set; }

  public FightFormationT() {
    this.Id = 0;
    this.LimitRole = null;
    this.LimitCount = null;
    this.LitmitElement = null;
    this.Content = null;
    this.RecommendFormation = null;
    this.TrialRole = null;
    this.AutoRole = null;
    this.ChooseRole = false;
  }
}


static public class FightFormationVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*LimitRole*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*LimitCount*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*LitmitElement*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 12 /*Content*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*RecommendFormation*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*TrialRole*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*AutoRole*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 20 /*ChooseRole*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
