// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BattleLinkCharacter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BattleLinkCharacter GetRootAsBattleLinkCharacter(ByteBuffer _bb) { return GetRootAsBattleLinkCharacter(_bb, new BattleLinkCharacter()); }
  public static BattleLinkCharacter GetRootAsBattleLinkCharacter(ByteBuffer _bb, BattleLinkCharacter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BattleLinkCharacter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NeedLoadMesh { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string CharacterDataAsset { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharacterDataAssetBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCharacterDataAssetBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCharacterDataAssetArray() { return __p.__vector_as_array<byte>(8); }
  public string Seq { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSeqBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSeqBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSeqArray() { return __p.__vector_as_array<byte>(10); }
  public string Pose { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPoseBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetPoseBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetPoseArray() { return __p.__vector_as_array<byte>(12); }
  public string RogueSkillIcon { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRogueSkillIconBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetRogueSkillIconBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetRogueSkillIconArray() { return __p.__vector_as_array<byte>(14); }
  public string RogueSkillDesc { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRogueSkillDescBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetRogueSkillDescBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetRogueSkillDescArray() { return __p.__vector_as_array<byte>(16); }
  public string RogueSkillDescParam(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RogueSkillDescParamLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string RogueSkillTitle { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRogueSkillTitleBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetRogueSkillTitleBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetRogueSkillTitleArray() { return __p.__vector_as_array<byte>(20); }
  public string RoleLinkAudio { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoleLinkAudioBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetRoleLinkAudioBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetRoleLinkAudioArray() { return __p.__vector_as_array<byte>(22); }
  public int FormationSkillList(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FormationSkillListLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFormationSkillListBytes() { return __p.__vector_as_span<int>(24, 4); }
#else
  public ArraySegment<byte>? GetFormationSkillListBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public int[] GetFormationSkillListArray() { return __p.__vector_as_array<int>(24); }
  public bool IsShowInTeamView { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.BattleLinkCharacter> CreateBattleLinkCharacter(FlatBufferBuilder builder,
      int id = 0,
      int need_load_mesh = 0,
      StringOffset character_data_assetOffset = default(StringOffset),
      StringOffset seqOffset = default(StringOffset),
      StringOffset poseOffset = default(StringOffset),
      StringOffset rogue_skill_iconOffset = default(StringOffset),
      StringOffset rogue_skill_descOffset = default(StringOffset),
      VectorOffset rogue_skill_desc_paramOffset = default(VectorOffset),
      StringOffset rogue_skill_titleOffset = default(StringOffset),
      StringOffset role_link_audioOffset = default(StringOffset),
      VectorOffset formation_skill_listOffset = default(VectorOffset),
      bool is_show_in_team_view = false) {
    builder.StartTable(12);
    BattleLinkCharacter.AddFormationSkillList(builder, formation_skill_listOffset);
    BattleLinkCharacter.AddRoleLinkAudio(builder, role_link_audioOffset);
    BattleLinkCharacter.AddRogueSkillTitle(builder, rogue_skill_titleOffset);
    BattleLinkCharacter.AddRogueSkillDescParam(builder, rogue_skill_desc_paramOffset);
    BattleLinkCharacter.AddRogueSkillDesc(builder, rogue_skill_descOffset);
    BattleLinkCharacter.AddRogueSkillIcon(builder, rogue_skill_iconOffset);
    BattleLinkCharacter.AddPose(builder, poseOffset);
    BattleLinkCharacter.AddSeq(builder, seqOffset);
    BattleLinkCharacter.AddCharacterDataAsset(builder, character_data_assetOffset);
    BattleLinkCharacter.AddNeedLoadMesh(builder, need_load_mesh);
    BattleLinkCharacter.AddId(builder, id);
    BattleLinkCharacter.AddIsShowInTeamView(builder, is_show_in_team_view);
    return BattleLinkCharacter.EndBattleLinkCharacter(builder);
  }

  public static void StartBattleLinkCharacter(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddNeedLoadMesh(FlatBufferBuilder builder, int needLoadMesh) { builder.AddInt(1, needLoadMesh, 0); }
  public static void AddCharacterDataAsset(FlatBufferBuilder builder, StringOffset characterDataAssetOffset) { builder.AddOffset(2, characterDataAssetOffset.Value, 0); }
  public static void AddSeq(FlatBufferBuilder builder, StringOffset seqOffset) { builder.AddOffset(3, seqOffset.Value, 0); }
  public static void AddPose(FlatBufferBuilder builder, StringOffset poseOffset) { builder.AddOffset(4, poseOffset.Value, 0); }
  public static void AddRogueSkillIcon(FlatBufferBuilder builder, StringOffset rogueSkillIconOffset) { builder.AddOffset(5, rogueSkillIconOffset.Value, 0); }
  public static void AddRogueSkillDesc(FlatBufferBuilder builder, StringOffset rogueSkillDescOffset) { builder.AddOffset(6, rogueSkillDescOffset.Value, 0); }
  public static void AddRogueSkillDescParam(FlatBufferBuilder builder, VectorOffset rogueSkillDescParamOffset) { builder.AddOffset(7, rogueSkillDescParamOffset.Value, 0); }
  public static VectorOffset CreateRogueSkillDescParamVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRogueSkillDescParamVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRogueSkillDescParamVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRogueSkillDescParamVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRogueSkillDescParamVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRogueSkillTitle(FlatBufferBuilder builder, StringOffset rogueSkillTitleOffset) { builder.AddOffset(8, rogueSkillTitleOffset.Value, 0); }
  public static void AddRoleLinkAudio(FlatBufferBuilder builder, StringOffset roleLinkAudioOffset) { builder.AddOffset(9, roleLinkAudioOffset.Value, 0); }
  public static void AddFormationSkillList(FlatBufferBuilder builder, VectorOffset formationSkillListOffset) { builder.AddOffset(10, formationSkillListOffset.Value, 0); }
  public static VectorOffset CreateFormationSkillListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFormationSkillListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormationSkillListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFormationSkillListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFormationSkillListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsShowInTeamView(FlatBufferBuilder builder, bool isShowInTeamView) { builder.AddBool(11, isShowInTeamView, false); }
  public static Offset<WWParser.Defs.BattleLinkCharacter> EndBattleLinkCharacter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.BattleLinkCharacter>(o);
  }
  public BattleLinkCharacterT UnPack() {
    var _o = new BattleLinkCharacterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BattleLinkCharacterT _o) {
    _o.Id = this.Id;
    _o.NeedLoadMesh = this.NeedLoadMesh;
    _o.CharacterDataAsset = this.CharacterDataAsset;
    _o.Seq = this.Seq;
    _o.Pose = this.Pose;
    _o.RogueSkillIcon = this.RogueSkillIcon;
    _o.RogueSkillDesc = this.RogueSkillDesc;
    _o.RogueSkillDescParam = new List<string>();
    for (var _j = 0; _j < this.RogueSkillDescParamLength; ++_j) {_o.RogueSkillDescParam.Add(this.RogueSkillDescParam(_j));}
    _o.RogueSkillTitle = this.RogueSkillTitle;
    _o.RoleLinkAudio = this.RoleLinkAudio;
    _o.FormationSkillList = new List<int>();
    for (var _j = 0; _j < this.FormationSkillListLength; ++_j) {_o.FormationSkillList.Add(this.FormationSkillList(_j));}
    _o.IsShowInTeamView = this.IsShowInTeamView;
  }
  public static Offset<WWParser.Defs.BattleLinkCharacter> Pack(FlatBufferBuilder builder, BattleLinkCharacterT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.BattleLinkCharacter>);
    var _character_data_asset = _o.CharacterDataAsset == null ? default(StringOffset) : builder.CreateString(_o.CharacterDataAsset);
    var _seq = _o.Seq == null ? default(StringOffset) : builder.CreateString(_o.Seq);
    var _pose = _o.Pose == null ? default(StringOffset) : builder.CreateString(_o.Pose);
    var _rogue_skill_icon = _o.RogueSkillIcon == null ? default(StringOffset) : builder.CreateString(_o.RogueSkillIcon);
    var _rogue_skill_desc = _o.RogueSkillDesc == null ? default(StringOffset) : builder.CreateString(_o.RogueSkillDesc);
    var _rogue_skill_desc_param = default(VectorOffset);
    if (_o.RogueSkillDescParam != null) {
      var __rogue_skill_desc_param = new StringOffset[_o.RogueSkillDescParam.Count];
      for (var _j = 0; _j < __rogue_skill_desc_param.Length; ++_j) { __rogue_skill_desc_param[_j] = builder.CreateString(_o.RogueSkillDescParam[_j]); }
      _rogue_skill_desc_param = CreateRogueSkillDescParamVector(builder, __rogue_skill_desc_param);
    }
    var _rogue_skill_title = _o.RogueSkillTitle == null ? default(StringOffset) : builder.CreateString(_o.RogueSkillTitle);
    var _role_link_audio = _o.RoleLinkAudio == null ? default(StringOffset) : builder.CreateString(_o.RoleLinkAudio);
    var _formation_skill_list = default(VectorOffset);
    if (_o.FormationSkillList != null) {
      var __formation_skill_list = _o.FormationSkillList.ToArray();
      _formation_skill_list = CreateFormationSkillListVector(builder, __formation_skill_list);
    }
    return CreateBattleLinkCharacter(
      builder,
      _o.Id,
      _o.NeedLoadMesh,
      _character_data_asset,
      _seq,
      _pose,
      _rogue_skill_icon,
      _rogue_skill_desc,
      _rogue_skill_desc_param,
      _rogue_skill_title,
      _role_link_audio,
      _formation_skill_list,
      _o.IsShowInTeamView);
  }
}

public class BattleLinkCharacterT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("need_load_mesh")]
  public int NeedLoadMesh { get; set; }
  [Newtonsoft.Json.JsonProperty("character_data_asset")]
  public string CharacterDataAsset { get; set; }
  [Newtonsoft.Json.JsonProperty("seq")]
  public string Seq { get; set; }
  [Newtonsoft.Json.JsonProperty("pose")]
  public string Pose { get; set; }
  [Newtonsoft.Json.JsonProperty("rogue_skill_icon")]
  public string RogueSkillIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("rogue_skill_desc")]
  public string RogueSkillDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("rogue_skill_desc_param")]
  public List<string> RogueSkillDescParam { get; set; }
  [Newtonsoft.Json.JsonProperty("rogue_skill_title")]
  public string RogueSkillTitle { get; set; }
  [Newtonsoft.Json.JsonProperty("role_link_audio")]
  public string RoleLinkAudio { get; set; }
  [Newtonsoft.Json.JsonProperty("formation_skill_list")]
  public List<int> FormationSkillList { get; set; }
  [Newtonsoft.Json.JsonProperty("is_show_in_team_view")]
  public bool IsShowInTeamView { get; set; }

  public BattleLinkCharacterT() {
    this.Id = 0;
    this.NeedLoadMesh = 0;
    this.CharacterDataAsset = null;
    this.Seq = null;
    this.Pose = null;
    this.RogueSkillIcon = null;
    this.RogueSkillDesc = null;
    this.RogueSkillDescParam = null;
    this.RogueSkillTitle = null;
    this.RoleLinkAudio = null;
    this.FormationSkillList = null;
    this.IsShowInTeamView = false;
  }
}


static public class BattleLinkCharacterVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*NeedLoadMesh*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*CharacterDataAsset*/, false)
      && verifier.VerifyString(tablePos, 10 /*Seq*/, false)
      && verifier.VerifyString(tablePos, 12 /*Pose*/, false)
      && verifier.VerifyString(tablePos, 14 /*RogueSkillIcon*/, false)
      && verifier.VerifyString(tablePos, 16 /*RogueSkillDesc*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*RogueSkillDescParam*/, false)
      && verifier.VerifyString(tablePos, 20 /*RogueSkillTitle*/, false)
      && verifier.VerifyString(tablePos, 22 /*RoleLinkAudio*/, false)
      && verifier.VerifyVectorOfData(tablePos, 24 /*FormationSkillList*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 26 /*IsShowInTeamView*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
