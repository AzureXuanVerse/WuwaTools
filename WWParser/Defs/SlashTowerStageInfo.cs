// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SlashTowerStageInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SlashTowerStageInfo GetRootAsSlashTowerStageInfo(ByteBuffer _bb) { return GetRootAsSlashTowerStageInfo(_bb, new SlashTowerStageInfo()); }
  public static SlashTowerStageInfo GetRootAsSlashTowerStageInfo(ByteBuffer _bb, SlashTowerStageInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SlashTowerStageInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MonsterId(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MonsterIdLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetMonsterIdBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetMonsterIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetMonsterIdArray() { return __p.__vector_as_array<int>(8); }
  public int BuffId(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BuffIdLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBuffIdBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetBuffIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetBuffIdArray() { return __p.__vector_as_array<int>(10); }

  public static Offset<WWParser.Defs.SlashTowerStageInfo> CreateSlashTowerStageInfo(FlatBufferBuilder builder,
      int id = 0,
      int inst_id = 0,
      VectorOffset monster_idOffset = default(VectorOffset),
      VectorOffset buff_idOffset = default(VectorOffset)) {
    builder.StartTable(4);
    SlashTowerStageInfo.AddBuffId(builder, buff_idOffset);
    SlashTowerStageInfo.AddMonsterId(builder, monster_idOffset);
    SlashTowerStageInfo.AddInstId(builder, inst_id);
    SlashTowerStageInfo.AddId(builder, id);
    return SlashTowerStageInfo.EndSlashTowerStageInfo(builder);
  }

  public static void StartSlashTowerStageInfo(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddInstId(FlatBufferBuilder builder, int instId) { builder.AddInt(1, instId, 0); }
  public static void AddMonsterId(FlatBufferBuilder builder, VectorOffset monsterIdOffset) { builder.AddOffset(2, monsterIdOffset.Value, 0); }
  public static VectorOffset CreateMonsterIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMonsterIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMonsterIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMonsterIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMonsterIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffId(FlatBufferBuilder builder, VectorOffset buffIdOffset) { builder.AddOffset(3, buffIdOffset.Value, 0); }
  public static VectorOffset CreateBuffIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.SlashTowerStageInfo> EndSlashTowerStageInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SlashTowerStageInfo>(o);
  }
  public SlashTowerStageInfoT UnPack() {
    var _o = new SlashTowerStageInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SlashTowerStageInfoT _o) {
    _o.Id = this.Id;
    _o.InstId = this.InstId;
    _o.MonsterId = new List<int>();
    for (var _j = 0; _j < this.MonsterIdLength; ++_j) {_o.MonsterId.Add(this.MonsterId(_j));}
    _o.BuffId = new List<int>();
    for (var _j = 0; _j < this.BuffIdLength; ++_j) {_o.BuffId.Add(this.BuffId(_j));}
  }
  public static Offset<WWParser.Defs.SlashTowerStageInfo> Pack(FlatBufferBuilder builder, SlashTowerStageInfoT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SlashTowerStageInfo>);
    var _monster_id = default(VectorOffset);
    if (_o.MonsterId != null) {
      var __monster_id = _o.MonsterId.ToArray();
      _monster_id = CreateMonsterIdVector(builder, __monster_id);
    }
    var _buff_id = default(VectorOffset);
    if (_o.BuffId != null) {
      var __buff_id = _o.BuffId.ToArray();
      _buff_id = CreateBuffIdVector(builder, __buff_id);
    }
    return CreateSlashTowerStageInfo(
      builder,
      _o.Id,
      _o.InstId,
      _monster_id,
      _buff_id);
  }
}

public class SlashTowerStageInfoT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("inst_id")]
  public int InstId { get; set; }
  [Newtonsoft.Json.JsonProperty("monster_id")]
  public List<int> MonsterId { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_id")]
  public List<int> BuffId { get; set; }

  public SlashTowerStageInfoT() {
    this.Id = 0;
    this.InstId = 0;
    this.MonsterId = null;
    this.BuffId = null;
  }
}


static public class SlashTowerStageInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*InstId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*MonsterId*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*BuffId*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
