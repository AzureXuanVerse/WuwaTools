// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct KeyPool : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static KeyPool GetRootAsKeyPool(ByteBuffer _bb) { return GetRootAsKeyPool(_bb, new KeyPool()); }
  public static KeyPool GetRootAsKeyPool(ByteBuffer _bb, KeyPool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KeyPool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string ValidKeys(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ValidKeysLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.KeyPool> CreateKeyPool(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      VectorOffset valid_keysOffset = default(VectorOffset)) {
    builder.StartTable(2);
    KeyPool.AddValidKeys(builder, valid_keysOffset);
    KeyPool.AddId(builder, idOffset);
    return KeyPool.EndKeyPool(builder);
  }

  public static void StartKeyPool(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddValidKeys(FlatBufferBuilder builder, VectorOffset validKeysOffset) { builder.AddOffset(1, validKeysOffset.Value, 0); }
  public static VectorOffset CreateValidKeysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateValidKeysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValidKeysVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValidKeysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartValidKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.KeyPool> EndKeyPool(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.KeyPool>(o);
  }
  public KeyPoolT UnPack() {
    var _o = new KeyPoolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(KeyPoolT _o) {
    _o.Id = this.Id;
    _o.ValidKeys = new List<string>();
    for (var _j = 0; _j < this.ValidKeysLength; ++_j) {_o.ValidKeys.Add(this.ValidKeys(_j));}
  }
  public static Offset<WWParser.Defs.KeyPool> Pack(FlatBufferBuilder builder, KeyPoolT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.KeyPool>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _valid_keys = default(VectorOffset);
    if (_o.ValidKeys != null) {
      var __valid_keys = new StringOffset[_o.ValidKeys.Count];
      for (var _j = 0; _j < __valid_keys.Length; ++_j) { __valid_keys[_j] = builder.CreateString(_o.ValidKeys[_j]); }
      _valid_keys = CreateValidKeysVector(builder, __valid_keys);
    }
    return CreateKeyPool(
      builder,
      _id,
      _valid_keys);
  }
}

public class KeyPoolT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("valid_keys")]
  public List<string> ValidKeys { get; set; }

  public KeyPoolT() {
    this.Id = null;
    this.ValidKeys = null;
  }
}


static public class KeyPoolVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 6 /*ValidKeys*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
