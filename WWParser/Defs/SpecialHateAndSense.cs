// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SpecialHateAndSense : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SpecialHateAndSense GetRootAsSpecialHateAndSense(ByteBuffer _bb) { return GetRootAsSpecialHateAndSense(_bb, new SpecialHateAndSense()); }
  public static SpecialHateAndSense GetRootAsSpecialHateAndSense(ByteBuffer _bb, SpecialHateAndSense obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SpecialHateAndSense __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string DescText { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescTextBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescTextBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescTextArray() { return __p.__vector_as_array<byte>(6); }
  public int AiHateId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FirstAiSenseId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.SpecialHateAndSense> CreateSpecialHateAndSense(FlatBufferBuilder builder,
      int id = 0,
      StringOffset desc_textOffset = default(StringOffset),
      int ai_hate_id = 0,
      int first_ai_sense_id = 0) {
    builder.StartTable(4);
    SpecialHateAndSense.AddFirstAiSenseId(builder, first_ai_sense_id);
    SpecialHateAndSense.AddAiHateId(builder, ai_hate_id);
    SpecialHateAndSense.AddDescText(builder, desc_textOffset);
    SpecialHateAndSense.AddId(builder, id);
    return SpecialHateAndSense.EndSpecialHateAndSense(builder);
  }

  public static void StartSpecialHateAndSense(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDescText(FlatBufferBuilder builder, StringOffset descTextOffset) { builder.AddOffset(1, descTextOffset.Value, 0); }
  public static void AddAiHateId(FlatBufferBuilder builder, int aiHateId) { builder.AddInt(2, aiHateId, 0); }
  public static void AddFirstAiSenseId(FlatBufferBuilder builder, int firstAiSenseId) { builder.AddInt(3, firstAiSenseId, 0); }
  public static Offset<WWParser.Defs.SpecialHateAndSense> EndSpecialHateAndSense(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.SpecialHateAndSense>(o);
  }
  public SpecialHateAndSenseT UnPack() {
    var _o = new SpecialHateAndSenseT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SpecialHateAndSenseT _o) {
    _o.Id = this.Id;
    _o.DescText = this.DescText;
    _o.AiHateId = this.AiHateId;
    _o.FirstAiSenseId = this.FirstAiSenseId;
  }
  public static Offset<WWParser.Defs.SpecialHateAndSense> Pack(FlatBufferBuilder builder, SpecialHateAndSenseT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.SpecialHateAndSense>);
    var _desc_text = _o.DescText == null ? default(StringOffset) : builder.CreateString(_o.DescText);
    return CreateSpecialHateAndSense(
      builder,
      _o.Id,
      _desc_text,
      _o.AiHateId,
      _o.FirstAiSenseId);
  }
}

public class SpecialHateAndSenseT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("desc_text")]
  public string DescText { get; set; }
  [Newtonsoft.Json.JsonProperty("ai_hate_id")]
  public int AiHateId { get; set; }
  [Newtonsoft.Json.JsonProperty("first_ai_sense_id")]
  public int FirstAiSenseId { get; set; }

  public SpecialHateAndSenseT() {
    this.Id = 0;
    this.DescText = null;
    this.AiHateId = 0;
    this.FirstAiSenseId = 0;
  }
}


static public class SpecialHateAndSenseVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*DescText*/, false)
      && verifier.VerifyField(tablePos, 8 /*AiHateId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*FirstAiSenseId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
