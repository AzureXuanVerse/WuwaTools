// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CatchSignalDifficulty : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CatchSignalDifficulty GetRootAsCatchSignalDifficulty(ByteBuffer _bb) { return GetRootAsCatchSignalDifficulty(_bb, new CatchSignalDifficulty()); }
  public static CatchSignalDifficulty GetRootAsCatchSignalDifficulty(ByteBuffer _bb, CatchSignalDifficulty obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CatchSignalDifficulty __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public float SpeedRate { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public int TapTimeWindow { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)100; } }
  public int PressTimeWindow { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)100; } }
  public int ReleaseTimeWindow { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)100; } }
  public int TargetCompletion { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)80; } }

  public static Offset<WWParser.Defs.CatchSignalDifficulty> CreateCatchSignalDifficulty(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      float speed_rate = 1.0f,
      int tap_time_window = 100,
      int press_time_window = 100,
      int release_time_window = 100,
      int target_completion = 80) {
    builder.StartTable(7);
    CatchSignalDifficulty.AddTargetCompletion(builder, target_completion);
    CatchSignalDifficulty.AddReleaseTimeWindow(builder, release_time_window);
    CatchSignalDifficulty.AddPressTimeWindow(builder, press_time_window);
    CatchSignalDifficulty.AddTapTimeWindow(builder, tap_time_window);
    CatchSignalDifficulty.AddSpeedRate(builder, speed_rate);
    CatchSignalDifficulty.AddName(builder, nameOffset);
    CatchSignalDifficulty.AddId(builder, id);
    return CatchSignalDifficulty.EndCatchSignalDifficulty(builder);
  }

  public static void StartCatchSignalDifficulty(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddSpeedRate(FlatBufferBuilder builder, float speedRate) { builder.AddFloat(2, speedRate, 1.0f); }
  public static void AddTapTimeWindow(FlatBufferBuilder builder, int tapTimeWindow) { builder.AddInt(3, tapTimeWindow, 100); }
  public static void AddPressTimeWindow(FlatBufferBuilder builder, int pressTimeWindow) { builder.AddInt(4, pressTimeWindow, 100); }
  public static void AddReleaseTimeWindow(FlatBufferBuilder builder, int releaseTimeWindow) { builder.AddInt(5, releaseTimeWindow, 100); }
  public static void AddTargetCompletion(FlatBufferBuilder builder, int targetCompletion) { builder.AddInt(6, targetCompletion, 80); }
  public static Offset<WWParser.Defs.CatchSignalDifficulty> EndCatchSignalDifficulty(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.CatchSignalDifficulty>(o);
  }
  public CatchSignalDifficultyT UnPack() {
    var _o = new CatchSignalDifficultyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CatchSignalDifficultyT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.SpeedRate = this.SpeedRate;
    _o.TapTimeWindow = this.TapTimeWindow;
    _o.PressTimeWindow = this.PressTimeWindow;
    _o.ReleaseTimeWindow = this.ReleaseTimeWindow;
    _o.TargetCompletion = this.TargetCompletion;
  }
  public static Offset<WWParser.Defs.CatchSignalDifficulty> Pack(FlatBufferBuilder builder, CatchSignalDifficultyT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.CatchSignalDifficulty>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateCatchSignalDifficulty(
      builder,
      _o.Id,
      _name,
      _o.SpeedRate,
      _o.TapTimeWindow,
      _o.PressTimeWindow,
      _o.ReleaseTimeWindow,
      _o.TargetCompletion);
  }
}

public class CatchSignalDifficultyT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("speed_rate")]
  public float SpeedRate { get; set; }
  [Newtonsoft.Json.JsonProperty("tap_time_window")]
  public int TapTimeWindow { get; set; }
  [Newtonsoft.Json.JsonProperty("press_time_window")]
  public int PressTimeWindow { get; set; }
  [Newtonsoft.Json.JsonProperty("release_time_window")]
  public int ReleaseTimeWindow { get; set; }
  [Newtonsoft.Json.JsonProperty("target_completion")]
  public int TargetCompletion { get; set; }

  public CatchSignalDifficultyT() {
    this.Id = 0;
    this.Name = null;
    this.SpeedRate = 1.0f;
    this.TapTimeWindow = 100;
    this.PressTimeWindow = 100;
    this.ReleaseTimeWindow = 100;
    this.TargetCompletion = 80;
  }
}


static public class CatchSignalDifficultyVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*SpeedRate*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*TapTimeWindow*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*PressTimeWindow*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ReleaseTimeWindow*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*TargetCompletion*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
