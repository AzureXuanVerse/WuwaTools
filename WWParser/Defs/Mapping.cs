// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Mapping : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Mapping GetRootAsMapping(ByteBuffer _bb) { return GetRootAsMapping(_bb, new Mapping()); }
  public static Mapping GetRootAsMapping(ByteBuffer _bb, Mapping obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Mapping __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ExcelName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExcelNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetExcelNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetExcelNameArray() { return __p.__vector_as_array<byte>(6); }
  public string SheetName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSheetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSheetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSheetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string FieldName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFieldNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetFieldNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetFieldNameArray() { return __p.__vector_as_array<byte>(10); }
  public int Value { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Comment { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommentBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCommentBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCommentArray() { return __p.__vector_as_array<byte>(14); }
  public string Icon { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<WWParser.Defs.Mapping> CreateMapping(FlatBufferBuilder builder,
      int id = 0,
      StringOffset excel_nameOffset = default(StringOffset),
      StringOffset sheet_nameOffset = default(StringOffset),
      StringOffset field_nameOffset = default(StringOffset),
      int value = 0,
      StringOffset commentOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset)) {
    builder.StartTable(7);
    Mapping.AddIcon(builder, iconOffset);
    Mapping.AddComment(builder, commentOffset);
    Mapping.AddValue(builder, value);
    Mapping.AddFieldName(builder, field_nameOffset);
    Mapping.AddSheetName(builder, sheet_nameOffset);
    Mapping.AddExcelName(builder, excel_nameOffset);
    Mapping.AddId(builder, id);
    return Mapping.EndMapping(builder);
  }

  public static void StartMapping(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddExcelName(FlatBufferBuilder builder, StringOffset excelNameOffset) { builder.AddOffset(1, excelNameOffset.Value, 0); }
  public static void AddSheetName(FlatBufferBuilder builder, StringOffset sheetNameOffset) { builder.AddOffset(2, sheetNameOffset.Value, 0); }
  public static void AddFieldName(FlatBufferBuilder builder, StringOffset fieldNameOffset) { builder.AddOffset(3, fieldNameOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, int value) { builder.AddInt(4, value, 0); }
  public static void AddComment(FlatBufferBuilder builder, StringOffset commentOffset) { builder.AddOffset(5, commentOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(6, iconOffset.Value, 0); }
  public static Offset<WWParser.Defs.Mapping> EndMapping(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Mapping>(o);
  }
  public MappingT UnPack() {
    var _o = new MappingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MappingT _o) {
    _o.Id = this.Id;
    _o.ExcelName = this.ExcelName;
    _o.SheetName = this.SheetName;
    _o.FieldName = this.FieldName;
    _o.Value = this.Value;
    _o.Comment = this.Comment;
    _o.Icon = this.Icon;
  }
  public static Offset<WWParser.Defs.Mapping> Pack(FlatBufferBuilder builder, MappingT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Mapping>);
    var _excel_name = _o.ExcelName == null ? default(StringOffset) : builder.CreateString(_o.ExcelName);
    var _sheet_name = _o.SheetName == null ? default(StringOffset) : builder.CreateString(_o.SheetName);
    var _field_name = _o.FieldName == null ? default(StringOffset) : builder.CreateString(_o.FieldName);
    var _comment = _o.Comment == null ? default(StringOffset) : builder.CreateString(_o.Comment);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    return CreateMapping(
      builder,
      _o.Id,
      _excel_name,
      _sheet_name,
      _field_name,
      _o.Value,
      _comment,
      _icon);
  }
}

public class MappingT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("excel_name")]
  public string ExcelName { get; set; }
  [Newtonsoft.Json.JsonProperty("sheet_name")]
  public string SheetName { get; set; }
  [Newtonsoft.Json.JsonProperty("field_name")]
  public string FieldName { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public int Value { get; set; }
  [Newtonsoft.Json.JsonProperty("comment")]
  public string Comment { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }

  public MappingT() {
    this.Id = 0;
    this.ExcelName = null;
    this.SheetName = null;
    this.FieldName = null;
    this.Value = 0;
    this.Comment = null;
    this.Icon = null;
  }
}


static public class MappingVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*ExcelName*/, false)
      && verifier.VerifyString(tablePos, 8 /*SheetName*/, false)
      && verifier.VerifyString(tablePos, 10 /*FieldName*/, false)
      && verifier.VerifyField(tablePos, 12 /*Value*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*Comment*/, false)
      && verifier.VerifyString(tablePos, 16 /*Icon*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
