// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LinkData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static LinkData GetRootAsLinkData(ByteBuffer _bb) { return GetRootAsLinkData(_bb, new LinkData()); }
  public static LinkData GetRootAsLinkData(ByteBuffer _bb, LinkData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LinkData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BattleScoreId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long BuffIdsInAccumulate(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BuffIdsInAccumulateLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBuffIdsInAccumulateBytes() { return __p.__vector_as_span<long>(8, 8); }
#else
  public ArraySegment<byte>? GetBuffIdsInAccumulateBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public long[] GetBuffIdsInAccumulateArray() { return __p.__vector_as_array<long>(8); }
  public long BulletIdsInAccumulate(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BulletIdsInAccumulateLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBulletIdsInAccumulateBytes() { return __p.__vector_as_span<long>(10, 8); }
#else
  public ArraySegment<byte>? GetBulletIdsInAccumulateBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public long[] GetBulletIdsInAccumulateArray() { return __p.__vector_as_array<long>(10); }
  public long BuffIdsInReady(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BuffIdsInReadyLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBuffIdsInReadyBytes() { return __p.__vector_as_span<long>(12, 8); }
#else
  public ArraySegment<byte>? GetBuffIdsInReadyBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public long[] GetBuffIdsInReadyArray() { return __p.__vector_as_array<long>(12); }
  public long BulletIdsInReady(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BulletIdsInReadyLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBulletIdsInReadyBytes() { return __p.__vector_as_span<long>(14, 8); }
#else
  public ArraySegment<byte>? GetBulletIdsInReadyBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public long[] GetBulletIdsInReadyArray() { return __p.__vector_as_array<long>(14); }
  public long BuffIdsInBrust(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BuffIdsInBrustLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBuffIdsInBrustBytes() { return __p.__vector_as_span<long>(16, 8); }
#else
  public ArraySegment<byte>? GetBuffIdsInBrustBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public long[] GetBuffIdsInBrustArray() { return __p.__vector_as_array<long>(16); }
  public long BulletIdsInBrust(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BulletIdsInBrustLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBulletIdsInBrustBytes() { return __p.__vector_as_span<long>(18, 8); }
#else
  public ArraySegment<byte>? GetBulletIdsInBrustBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public long[] GetBulletIdsInBrustArray() { return __p.__vector_as_array<long>(18); }
  public float BrustDuration { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int IsEnableOneRoleBurst { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int OneRoleBurstTeammateId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.LinkData> CreateLinkData(FlatBufferBuilder builder,
      int id = 0,
      int battle_score_id = 0,
      VectorOffset buff_ids_in_accumulateOffset = default(VectorOffset),
      VectorOffset bullet_ids_in_accumulateOffset = default(VectorOffset),
      VectorOffset buff_ids_in_readyOffset = default(VectorOffset),
      VectorOffset bullet_ids_in_readyOffset = default(VectorOffset),
      VectorOffset buff_ids_in_brustOffset = default(VectorOffset),
      VectorOffset bullet_ids_in_brustOffset = default(VectorOffset),
      float brust_duration = 0.0f,
      int is_enable_one_role_burst = 0,
      int one_role_burst_teammate_id = 0) {
    builder.StartTable(11);
    LinkData.AddOneRoleBurstTeammateId(builder, one_role_burst_teammate_id);
    LinkData.AddIsEnableOneRoleBurst(builder, is_enable_one_role_burst);
    LinkData.AddBrustDuration(builder, brust_duration);
    LinkData.AddBulletIdsInBrust(builder, bullet_ids_in_brustOffset);
    LinkData.AddBuffIdsInBrust(builder, buff_ids_in_brustOffset);
    LinkData.AddBulletIdsInReady(builder, bullet_ids_in_readyOffset);
    LinkData.AddBuffIdsInReady(builder, buff_ids_in_readyOffset);
    LinkData.AddBulletIdsInAccumulate(builder, bullet_ids_in_accumulateOffset);
    LinkData.AddBuffIdsInAccumulate(builder, buff_ids_in_accumulateOffset);
    LinkData.AddBattleScoreId(builder, battle_score_id);
    LinkData.AddId(builder, id);
    return LinkData.EndLinkData(builder);
  }

  public static void StartLinkData(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddBattleScoreId(FlatBufferBuilder builder, int battleScoreId) { builder.AddInt(1, battleScoreId, 0); }
  public static void AddBuffIdsInAccumulate(FlatBufferBuilder builder, VectorOffset buffIdsInAccumulateOffset) { builder.AddOffset(2, buffIdsInAccumulateOffset.Value, 0); }
  public static VectorOffset CreateBuffIdsInAccumulateVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsInAccumulateVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsInAccumulateVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsInAccumulateVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffIdsInAccumulateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBulletIdsInAccumulate(FlatBufferBuilder builder, VectorOffset bulletIdsInAccumulateOffset) { builder.AddOffset(3, bulletIdsInAccumulateOffset.Value, 0); }
  public static VectorOffset CreateBulletIdsInAccumulateVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBulletIdsInAccumulateVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBulletIdsInAccumulateVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBulletIdsInAccumulateVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBulletIdsInAccumulateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBuffIdsInReady(FlatBufferBuilder builder, VectorOffset buffIdsInReadyOffset) { builder.AddOffset(4, buffIdsInReadyOffset.Value, 0); }
  public static VectorOffset CreateBuffIdsInReadyVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsInReadyVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsInReadyVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsInReadyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffIdsInReadyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBulletIdsInReady(FlatBufferBuilder builder, VectorOffset bulletIdsInReadyOffset) { builder.AddOffset(5, bulletIdsInReadyOffset.Value, 0); }
  public static VectorOffset CreateBulletIdsInReadyVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBulletIdsInReadyVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBulletIdsInReadyVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBulletIdsInReadyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBulletIdsInReadyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBuffIdsInBrust(FlatBufferBuilder builder, VectorOffset buffIdsInBrustOffset) { builder.AddOffset(6, buffIdsInBrustOffset.Value, 0); }
  public static VectorOffset CreateBuffIdsInBrustVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsInBrustVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsInBrustVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdsInBrustVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffIdsInBrustVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBulletIdsInBrust(FlatBufferBuilder builder, VectorOffset bulletIdsInBrustOffset) { builder.AddOffset(7, bulletIdsInBrustOffset.Value, 0); }
  public static VectorOffset CreateBulletIdsInBrustVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBulletIdsInBrustVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBulletIdsInBrustVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBulletIdsInBrustVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBulletIdsInBrustVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBrustDuration(FlatBufferBuilder builder, float brustDuration) { builder.AddFloat(8, brustDuration, 0.0f); }
  public static void AddIsEnableOneRoleBurst(FlatBufferBuilder builder, int isEnableOneRoleBurst) { builder.AddInt(9, isEnableOneRoleBurst, 0); }
  public static void AddOneRoleBurstTeammateId(FlatBufferBuilder builder, int oneRoleBurstTeammateId) { builder.AddInt(10, oneRoleBurstTeammateId, 0); }
  public static Offset<WWParser.Defs.LinkData> EndLinkData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.LinkData>(o);
  }
  public LinkDataT UnPack() {
    var _o = new LinkDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LinkDataT _o) {
    _o.Id = this.Id;
    _o.BattleScoreId = this.BattleScoreId;
    _o.BuffIdsInAccumulate = new List<long>();
    for (var _j = 0; _j < this.BuffIdsInAccumulateLength; ++_j) {_o.BuffIdsInAccumulate.Add(this.BuffIdsInAccumulate(_j));}
    _o.BulletIdsInAccumulate = new List<long>();
    for (var _j = 0; _j < this.BulletIdsInAccumulateLength; ++_j) {_o.BulletIdsInAccumulate.Add(this.BulletIdsInAccumulate(_j));}
    _o.BuffIdsInReady = new List<long>();
    for (var _j = 0; _j < this.BuffIdsInReadyLength; ++_j) {_o.BuffIdsInReady.Add(this.BuffIdsInReady(_j));}
    _o.BulletIdsInReady = new List<long>();
    for (var _j = 0; _j < this.BulletIdsInReadyLength; ++_j) {_o.BulletIdsInReady.Add(this.BulletIdsInReady(_j));}
    _o.BuffIdsInBrust = new List<long>();
    for (var _j = 0; _j < this.BuffIdsInBrustLength; ++_j) {_o.BuffIdsInBrust.Add(this.BuffIdsInBrust(_j));}
    _o.BulletIdsInBrust = new List<long>();
    for (var _j = 0; _j < this.BulletIdsInBrustLength; ++_j) {_o.BulletIdsInBrust.Add(this.BulletIdsInBrust(_j));}
    _o.BrustDuration = this.BrustDuration;
    _o.IsEnableOneRoleBurst = this.IsEnableOneRoleBurst;
    _o.OneRoleBurstTeammateId = this.OneRoleBurstTeammateId;
  }
  public static Offset<WWParser.Defs.LinkData> Pack(FlatBufferBuilder builder, LinkDataT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.LinkData>);
    var _buff_ids_in_accumulate = default(VectorOffset);
    if (_o.BuffIdsInAccumulate != null) {
      var __buff_ids_in_accumulate = _o.BuffIdsInAccumulate.ToArray();
      _buff_ids_in_accumulate = CreateBuffIdsInAccumulateVector(builder, __buff_ids_in_accumulate);
    }
    var _bullet_ids_in_accumulate = default(VectorOffset);
    if (_o.BulletIdsInAccumulate != null) {
      var __bullet_ids_in_accumulate = _o.BulletIdsInAccumulate.ToArray();
      _bullet_ids_in_accumulate = CreateBulletIdsInAccumulateVector(builder, __bullet_ids_in_accumulate);
    }
    var _buff_ids_in_ready = default(VectorOffset);
    if (_o.BuffIdsInReady != null) {
      var __buff_ids_in_ready = _o.BuffIdsInReady.ToArray();
      _buff_ids_in_ready = CreateBuffIdsInReadyVector(builder, __buff_ids_in_ready);
    }
    var _bullet_ids_in_ready = default(VectorOffset);
    if (_o.BulletIdsInReady != null) {
      var __bullet_ids_in_ready = _o.BulletIdsInReady.ToArray();
      _bullet_ids_in_ready = CreateBulletIdsInReadyVector(builder, __bullet_ids_in_ready);
    }
    var _buff_ids_in_brust = default(VectorOffset);
    if (_o.BuffIdsInBrust != null) {
      var __buff_ids_in_brust = _o.BuffIdsInBrust.ToArray();
      _buff_ids_in_brust = CreateBuffIdsInBrustVector(builder, __buff_ids_in_brust);
    }
    var _bullet_ids_in_brust = default(VectorOffset);
    if (_o.BulletIdsInBrust != null) {
      var __bullet_ids_in_brust = _o.BulletIdsInBrust.ToArray();
      _bullet_ids_in_brust = CreateBulletIdsInBrustVector(builder, __bullet_ids_in_brust);
    }
    return CreateLinkData(
      builder,
      _o.Id,
      _o.BattleScoreId,
      _buff_ids_in_accumulate,
      _bullet_ids_in_accumulate,
      _buff_ids_in_ready,
      _bullet_ids_in_ready,
      _buff_ids_in_brust,
      _bullet_ids_in_brust,
      _o.BrustDuration,
      _o.IsEnableOneRoleBurst,
      _o.OneRoleBurstTeammateId);
  }
}

public class LinkDataT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("battle_score_id")]
  public int BattleScoreId { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_ids_in_accumulate")]
  public List<long> BuffIdsInAccumulate { get; set; }
  [Newtonsoft.Json.JsonProperty("bullet_ids_in_accumulate")]
  public List<long> BulletIdsInAccumulate { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_ids_in_ready")]
  public List<long> BuffIdsInReady { get; set; }
  [Newtonsoft.Json.JsonProperty("bullet_ids_in_ready")]
  public List<long> BulletIdsInReady { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_ids_in_brust")]
  public List<long> BuffIdsInBrust { get; set; }
  [Newtonsoft.Json.JsonProperty("bullet_ids_in_brust")]
  public List<long> BulletIdsInBrust { get; set; }
  [Newtonsoft.Json.JsonProperty("brust_duration")]
  public float BrustDuration { get; set; }
  [Newtonsoft.Json.JsonProperty("is_enable_one_role_burst")]
  public int IsEnableOneRoleBurst { get; set; }
  [Newtonsoft.Json.JsonProperty("one_role_burst_teammate_id")]
  public int OneRoleBurstTeammateId { get; set; }

  public LinkDataT() {
    this.Id = 0;
    this.BattleScoreId = 0;
    this.BuffIdsInAccumulate = null;
    this.BulletIdsInAccumulate = null;
    this.BuffIdsInReady = null;
    this.BulletIdsInReady = null;
    this.BuffIdsInBrust = null;
    this.BulletIdsInBrust = null;
    this.BrustDuration = 0.0f;
    this.IsEnableOneRoleBurst = 0;
    this.OneRoleBurstTeammateId = 0;
  }
}


static public class LinkDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*BattleScoreId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*BuffIdsInAccumulate*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*BulletIdsInAccumulate*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*BuffIdsInReady*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*BulletIdsInReady*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*BuffIdsInBrust*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*BulletIdsInBrust*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 20 /*BrustDuration*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*IsEnableOneRoleBurst*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*OneRoleBurstTeammateId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
