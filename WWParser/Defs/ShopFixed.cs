// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ShopFixed : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ShopFixed GetRootAsShopFixed(ByteBuffer _bb) { return GetRootAsShopFixed(_bb, new ShopFixed()); }
  public static ShopFixed GetRootAsShopFixed(ByteBuffer _bb, ShopFixed obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ShopFixed __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShopId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemNum { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int CondId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int VisableCondition { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DisableCondition { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LimitNum { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public WWParser.Defs.DicIntInt? OriginalPrice(int j) { int o = __p.__offset(20); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OriginalPriceLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public WWParser.Defs.DicIntInt? Price(int j) { int o = __p.__offset(22); return o != 0 ? (WWParser.Defs.DicIntInt?)(new WWParser.Defs.DicIntInt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PriceLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool Show { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Label { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLabelBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetLabelBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetLabelArray() { return __p.__vector_as_array<byte>(26); }
  public string SwitchText { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSwitchTextBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetSwitchTextBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetSwitchTextArray() { return __p.__vector_as_array<byte>(28); }
  public string PurchaseText { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPurchaseTextBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetPurchaseTextBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetPurchaseTextArray() { return __p.__vector_as_array<byte>(30); }

  public static Offset<WWParser.Defs.ShopFixed> CreateShopFixed(FlatBufferBuilder builder,
      int id = 0,
      int shop_id = 0,
      int item_id = 0,
      int item_num = 1,
      int cond_id = 0,
      int visable_condition = 0,
      int disable_condition = 0,
      int limit_num = -1,
      VectorOffset original_priceOffset = default(VectorOffset),
      VectorOffset priceOffset = default(VectorOffset),
      bool show = false,
      StringOffset labelOffset = default(StringOffset),
      StringOffset switch_textOffset = default(StringOffset),
      StringOffset purchase_textOffset = default(StringOffset)) {
    builder.StartTable(14);
    ShopFixed.AddPurchaseText(builder, purchase_textOffset);
    ShopFixed.AddSwitchText(builder, switch_textOffset);
    ShopFixed.AddLabel(builder, labelOffset);
    ShopFixed.AddPrice(builder, priceOffset);
    ShopFixed.AddOriginalPrice(builder, original_priceOffset);
    ShopFixed.AddLimitNum(builder, limit_num);
    ShopFixed.AddDisableCondition(builder, disable_condition);
    ShopFixed.AddVisableCondition(builder, visable_condition);
    ShopFixed.AddCondId(builder, cond_id);
    ShopFixed.AddItemNum(builder, item_num);
    ShopFixed.AddItemId(builder, item_id);
    ShopFixed.AddShopId(builder, shop_id);
    ShopFixed.AddId(builder, id);
    ShopFixed.AddShow(builder, show);
    return ShopFixed.EndShopFixed(builder);
  }

  public static void StartShopFixed(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddShopId(FlatBufferBuilder builder, int shopId) { builder.AddInt(1, shopId, 0); }
  public static void AddItemId(FlatBufferBuilder builder, int itemId) { builder.AddInt(2, itemId, 0); }
  public static void AddItemNum(FlatBufferBuilder builder, int itemNum) { builder.AddInt(3, itemNum, 1); }
  public static void AddCondId(FlatBufferBuilder builder, int condId) { builder.AddInt(4, condId, 0); }
  public static void AddVisableCondition(FlatBufferBuilder builder, int visableCondition) { builder.AddInt(5, visableCondition, 0); }
  public static void AddDisableCondition(FlatBufferBuilder builder, int disableCondition) { builder.AddInt(6, disableCondition, 0); }
  public static void AddLimitNum(FlatBufferBuilder builder, int limitNum) { builder.AddInt(7, limitNum, -1); }
  public static void AddOriginalPrice(FlatBufferBuilder builder, VectorOffset originalPriceOffset) { builder.AddOffset(8, originalPriceOffset.Value, 0); }
  public static VectorOffset CreateOriginalPriceVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOriginalPriceVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOriginalPriceVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOriginalPriceVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOriginalPriceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPrice(FlatBufferBuilder builder, VectorOffset priceOffset) { builder.AddOffset(9, priceOffset.Value, 0); }
  public static VectorOffset CreatePriceVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePriceVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntInt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePriceVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntInt>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePriceVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntInt>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPriceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShow(FlatBufferBuilder builder, bool show) { builder.AddBool(10, show, false); }
  public static void AddLabel(FlatBufferBuilder builder, StringOffset labelOffset) { builder.AddOffset(11, labelOffset.Value, 0); }
  public static void AddSwitchText(FlatBufferBuilder builder, StringOffset switchTextOffset) { builder.AddOffset(12, switchTextOffset.Value, 0); }
  public static void AddPurchaseText(FlatBufferBuilder builder, StringOffset purchaseTextOffset) { builder.AddOffset(13, purchaseTextOffset.Value, 0); }
  public static Offset<WWParser.Defs.ShopFixed> EndShopFixed(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ShopFixed>(o);
  }
  public ShopFixedT UnPack() {
    var _o = new ShopFixedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ShopFixedT _o) {
    _o.Id = this.Id;
    _o.ShopId = this.ShopId;
    _o.ItemId = this.ItemId;
    _o.ItemNum = this.ItemNum;
    _o.CondId = this.CondId;
    _o.VisableCondition = this.VisableCondition;
    _o.DisableCondition = this.DisableCondition;
    _o.LimitNum = this.LimitNum;
    _o.OriginalPrice = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.OriginalPriceLength; ++_j) {_o.OriginalPrice.Add(this.OriginalPrice(_j).HasValue ? this.OriginalPrice(_j).Value.UnPack() : null);}
    _o.Price = new List<WWParser.Defs.DicIntIntT>();
    for (var _j = 0; _j < this.PriceLength; ++_j) {_o.Price.Add(this.Price(_j).HasValue ? this.Price(_j).Value.UnPack() : null);}
    _o.Show = this.Show;
    _o.Label = this.Label;
    _o.SwitchText = this.SwitchText;
    _o.PurchaseText = this.PurchaseText;
  }
  public static Offset<WWParser.Defs.ShopFixed> Pack(FlatBufferBuilder builder, ShopFixedT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ShopFixed>);
    var _original_price = default(VectorOffset);
    if (_o.OriginalPrice != null) {
      var __original_price = new Offset<WWParser.Defs.DicIntInt>[_o.OriginalPrice.Count];
      for (var _j = 0; _j < __original_price.Length; ++_j) { __original_price[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.OriginalPrice[_j]); }
      _original_price = CreateOriginalPriceVector(builder, __original_price);
    }
    var _price = default(VectorOffset);
    if (_o.Price != null) {
      var __price = new Offset<WWParser.Defs.DicIntInt>[_o.Price.Count];
      for (var _j = 0; _j < __price.Length; ++_j) { __price[_j] = WWParser.Defs.DicIntInt.Pack(builder, _o.Price[_j]); }
      _price = CreatePriceVector(builder, __price);
    }
    var _label = _o.Label == null ? default(StringOffset) : builder.CreateString(_o.Label);
    var _switch_text = _o.SwitchText == null ? default(StringOffset) : builder.CreateString(_o.SwitchText);
    var _purchase_text = _o.PurchaseText == null ? default(StringOffset) : builder.CreateString(_o.PurchaseText);
    return CreateShopFixed(
      builder,
      _o.Id,
      _o.ShopId,
      _o.ItemId,
      _o.ItemNum,
      _o.CondId,
      _o.VisableCondition,
      _o.DisableCondition,
      _o.LimitNum,
      _original_price,
      _price,
      _o.Show,
      _label,
      _switch_text,
      _purchase_text);
  }
}

public class ShopFixedT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("shop_id")]
  public int ShopId { get; set; }
  [Newtonsoft.Json.JsonProperty("item_id")]
  public int ItemId { get; set; }
  [Newtonsoft.Json.JsonProperty("item_num")]
  public int ItemNum { get; set; }
  [Newtonsoft.Json.JsonProperty("cond_id")]
  public int CondId { get; set; }
  [Newtonsoft.Json.JsonProperty("visable_condition")]
  public int VisableCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("disable_condition")]
  public int DisableCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("limit_num")]
  public int LimitNum { get; set; }
  [Newtonsoft.Json.JsonProperty("original_price")]
  public List<WWParser.Defs.DicIntIntT> OriginalPrice { get; set; }
  [Newtonsoft.Json.JsonProperty("price")]
  public List<WWParser.Defs.DicIntIntT> Price { get; set; }
  [Newtonsoft.Json.JsonProperty("show")]
  public bool Show { get; set; }
  [Newtonsoft.Json.JsonProperty("label")]
  public string Label { get; set; }
  [Newtonsoft.Json.JsonProperty("switch_text")]
  public string SwitchText { get; set; }
  [Newtonsoft.Json.JsonProperty("purchase_text")]
  public string PurchaseText { get; set; }

  public ShopFixedT() {
    this.Id = 0;
    this.ShopId = 0;
    this.ItemId = 0;
    this.ItemNum = 1;
    this.CondId = 0;
    this.VisableCondition = 0;
    this.DisableCondition = 0;
    this.LimitNum = -1;
    this.OriginalPrice = null;
    this.Price = null;
    this.Show = false;
    this.Label = null;
    this.SwitchText = null;
    this.PurchaseText = null;
  }
}


static public class ShopFixedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ShopId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ItemId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ItemNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*CondId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*VisableCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*DisableCondition*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*LimitNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 20 /*OriginalPrice*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 22 /*Price*/, WWParser.Defs.DicIntIntVerify.Verify, false)
      && verifier.VerifyField(tablePos, 24 /*Show*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 26 /*Label*/, false)
      && verifier.VerifyString(tablePos, 28 /*SwitchText*/, false)
      && verifier.VerifyString(tablePos, 30 /*PurchaseText*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
