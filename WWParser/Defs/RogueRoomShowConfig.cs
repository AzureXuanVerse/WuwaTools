// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RogueRoomShowConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RogueRoomShowConfig GetRootAsRogueRoomShowConfig(ByteBuffer _bb) { return GetRootAsRogueRoomShowConfig(_bb, new RogueRoomShowConfig()); }
  public static RogueRoomShowConfig GetRootAsRogueRoomShowConfig(ByteBuffer _bb, RogueRoomShowConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RogueRoomShowConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int BehaviorTree { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Icon { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(6); }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string Desc { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(10); }
  public int BuffPoolId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuffId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<WWParser.Defs.RogueRoomShowConfig> CreateRogueRoomShowConfig(FlatBufferBuilder builder,
      int behavior_tree = 0,
      StringOffset iconOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      int buff_pool_id = 0,
      int buff_id = 0) {
    builder.StartTable(6);
    RogueRoomShowConfig.AddBuffId(builder, buff_id);
    RogueRoomShowConfig.AddBuffPoolId(builder, buff_pool_id);
    RogueRoomShowConfig.AddDesc(builder, descOffset);
    RogueRoomShowConfig.AddName(builder, nameOffset);
    RogueRoomShowConfig.AddIcon(builder, iconOffset);
    RogueRoomShowConfig.AddBehaviorTree(builder, behavior_tree);
    return RogueRoomShowConfig.EndRogueRoomShowConfig(builder);
  }

  public static void StartRogueRoomShowConfig(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddBehaviorTree(FlatBufferBuilder builder, int behaviorTree) { builder.AddInt(0, behaviorTree, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(1, iconOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(3, descOffset.Value, 0); }
  public static void AddBuffPoolId(FlatBufferBuilder builder, int buffPoolId) { builder.AddInt(4, buffPoolId, 0); }
  public static void AddBuffId(FlatBufferBuilder builder, int buffId) { builder.AddInt(5, buffId, 0); }
  public static Offset<WWParser.Defs.RogueRoomShowConfig> EndRogueRoomShowConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RogueRoomShowConfig>(o);
  }
  public RogueRoomShowConfigT UnPack() {
    var _o = new RogueRoomShowConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RogueRoomShowConfigT _o) {
    _o.BehaviorTree = this.BehaviorTree;
    _o.Icon = this.Icon;
    _o.Name = this.Name;
    _o.Desc = this.Desc;
    _o.BuffPoolId = this.BuffPoolId;
    _o.BuffId = this.BuffId;
  }
  public static Offset<WWParser.Defs.RogueRoomShowConfig> Pack(FlatBufferBuilder builder, RogueRoomShowConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RogueRoomShowConfig>);
    var _icon = _o.Icon == null ? default(StringOffset) : builder.CreateString(_o.Icon);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    return CreateRogueRoomShowConfig(
      builder,
      _o.BehaviorTree,
      _icon,
      _name,
      _desc,
      _o.BuffPoolId,
      _o.BuffId);
  }
}

public class RogueRoomShowConfigT
{
  [Newtonsoft.Json.JsonProperty("behavior_tree")]
  public int BehaviorTree { get; set; }
  [Newtonsoft.Json.JsonProperty("icon")]
  public string Icon { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("desc")]
  public string Desc { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_pool_id")]
  public int BuffPoolId { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_id")]
  public int BuffId { get; set; }

  public RogueRoomShowConfigT() {
    this.BehaviorTree = 0;
    this.Icon = null;
    this.Name = null;
    this.Desc = null;
    this.BuffPoolId = 0;
    this.BuffId = 0;
  }
}


static public class RogueRoomShowConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*BehaviorTree*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyString(tablePos, 10 /*Desc*/, false)
      && verifier.VerifyField(tablePos, 12 /*BuffPoolId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*BuffId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
