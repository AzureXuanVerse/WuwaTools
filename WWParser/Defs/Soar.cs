// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Soar : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Soar GetRootAsSoar(ByteBuffer _bb) { return GetRootAsSoar(_bb, new Soar()); }
  public static Soar GetRootAsSoar(ByteBuffer _bb, Soar obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Soar __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string HangSocket { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHangSocketBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetHangSocketBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetHangSocketArray() { return __p.__vector_as_array<byte>(6); }
  public float Scale { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }

  public static Offset<WWParser.Defs.Soar> CreateSoar(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset hang_socketOffset = default(StringOffset),
      float scale = 1.0f) {
    builder.StartTable(3);
    Soar.AddScale(builder, scale);
    Soar.AddHangSocket(builder, hang_socketOffset);
    Soar.AddId(builder, idOffset);
    return Soar.EndSoar(builder);
  }

  public static void StartSoar(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddHangSocket(FlatBufferBuilder builder, StringOffset hangSocketOffset) { builder.AddOffset(1, hangSocketOffset.Value, 0); }
  public static void AddScale(FlatBufferBuilder builder, float scale) { builder.AddFloat(2, scale, 1.0f); }
  public static Offset<WWParser.Defs.Soar> EndSoar(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.Soar>(o);
  }
  public SoarT UnPack() {
    var _o = new SoarT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SoarT _o) {
    _o.Id = this.Id;
    _o.HangSocket = this.HangSocket;
    _o.Scale = this.Scale;
  }
  public static Offset<WWParser.Defs.Soar> Pack(FlatBufferBuilder builder, SoarT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.Soar>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _hang_socket = _o.HangSocket == null ? default(StringOffset) : builder.CreateString(_o.HangSocket);
    return CreateSoar(
      builder,
      _id,
      _hang_socket,
      _o.Scale);
  }
}

public class SoarT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("hang_socket")]
  public string HangSocket { get; set; }
  [Newtonsoft.Json.JsonProperty("scale")]
  public float Scale { get; set; }

  public SoarT() {
    this.Id = null;
    this.HangSocket = null;
    this.Scale = 1.0f;
  }
}


static public class SoarVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*HangSocket*/, false)
      && verifier.VerifyField(tablePos, 8 /*Scale*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
