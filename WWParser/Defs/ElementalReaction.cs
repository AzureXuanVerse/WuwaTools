// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ElementalReaction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ElementalReaction GetRootAsElementalReaction(ByteBuffer _bb) { return GetRootAsElementalReaction(_bb, new ElementalReaction()); }
  public static ElementalReaction GetRootAsElementalReaction(ByteBuffer _bb, ElementalReaction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ElementalReaction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ReactionId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ReactionName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReactionNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetReactionNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetReactionNameArray() { return __p.__vector_as_array<byte>(8); }
  public int SortIndex { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ReactionTexturePath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReactionTexturePathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetReactionTexturePathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetReactionTexturePathArray() { return __p.__vector_as_array<byte>(12); }
  public string ReactionColor { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReactionColorBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetReactionColorBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetReactionColorArray() { return __p.__vector_as_array<byte>(14); }
  public bool IsVisible { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ReactionDescription { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReactionDescriptionBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetReactionDescriptionBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetReactionDescriptionArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<WWParser.Defs.ElementalReaction> CreateElementalReaction(FlatBufferBuilder builder,
      int id = 0,
      int reaction_id = 0,
      StringOffset reaction_nameOffset = default(StringOffset),
      int sort_index = 0,
      StringOffset reaction_texture_pathOffset = default(StringOffset),
      StringOffset reaction_colorOffset = default(StringOffset),
      bool is_visible = false,
      StringOffset reaction_descriptionOffset = default(StringOffset)) {
    builder.StartTable(8);
    ElementalReaction.AddReactionDescription(builder, reaction_descriptionOffset);
    ElementalReaction.AddReactionColor(builder, reaction_colorOffset);
    ElementalReaction.AddReactionTexturePath(builder, reaction_texture_pathOffset);
    ElementalReaction.AddSortIndex(builder, sort_index);
    ElementalReaction.AddReactionName(builder, reaction_nameOffset);
    ElementalReaction.AddReactionId(builder, reaction_id);
    ElementalReaction.AddId(builder, id);
    ElementalReaction.AddIsVisible(builder, is_visible);
    return ElementalReaction.EndElementalReaction(builder);
  }

  public static void StartElementalReaction(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddReactionId(FlatBufferBuilder builder, int reactionId) { builder.AddInt(1, reactionId, 0); }
  public static void AddReactionName(FlatBufferBuilder builder, StringOffset reactionNameOffset) { builder.AddOffset(2, reactionNameOffset.Value, 0); }
  public static void AddSortIndex(FlatBufferBuilder builder, int sortIndex) { builder.AddInt(3, sortIndex, 0); }
  public static void AddReactionTexturePath(FlatBufferBuilder builder, StringOffset reactionTexturePathOffset) { builder.AddOffset(4, reactionTexturePathOffset.Value, 0); }
  public static void AddReactionColor(FlatBufferBuilder builder, StringOffset reactionColorOffset) { builder.AddOffset(5, reactionColorOffset.Value, 0); }
  public static void AddIsVisible(FlatBufferBuilder builder, bool isVisible) { builder.AddBool(6, isVisible, false); }
  public static void AddReactionDescription(FlatBufferBuilder builder, StringOffset reactionDescriptionOffset) { builder.AddOffset(7, reactionDescriptionOffset.Value, 0); }
  public static Offset<WWParser.Defs.ElementalReaction> EndElementalReaction(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ElementalReaction>(o);
  }
  public ElementalReactionT UnPack() {
    var _o = new ElementalReactionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ElementalReactionT _o) {
    _o.Id = this.Id;
    _o.ReactionId = this.ReactionId;
    _o.ReactionName = this.ReactionName;
    _o.SortIndex = this.SortIndex;
    _o.ReactionTexturePath = this.ReactionTexturePath;
    _o.ReactionColor = this.ReactionColor;
    _o.IsVisible = this.IsVisible;
    _o.ReactionDescription = this.ReactionDescription;
  }
  public static Offset<WWParser.Defs.ElementalReaction> Pack(FlatBufferBuilder builder, ElementalReactionT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ElementalReaction>);
    var _reaction_name = _o.ReactionName == null ? default(StringOffset) : builder.CreateString(_o.ReactionName);
    var _reaction_texture_path = _o.ReactionTexturePath == null ? default(StringOffset) : builder.CreateString(_o.ReactionTexturePath);
    var _reaction_color = _o.ReactionColor == null ? default(StringOffset) : builder.CreateString(_o.ReactionColor);
    var _reaction_description = _o.ReactionDescription == null ? default(StringOffset) : builder.CreateString(_o.ReactionDescription);
    return CreateElementalReaction(
      builder,
      _o.Id,
      _o.ReactionId,
      _reaction_name,
      _o.SortIndex,
      _reaction_texture_path,
      _reaction_color,
      _o.IsVisible,
      _reaction_description);
  }
}

public class ElementalReactionT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("reaction_id")]
  public int ReactionId { get; set; }
  [Newtonsoft.Json.JsonProperty("reaction_name")]
  public string ReactionName { get; set; }
  [Newtonsoft.Json.JsonProperty("sort_index")]
  public int SortIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("reaction_texture_path")]
  public string ReactionTexturePath { get; set; }
  [Newtonsoft.Json.JsonProperty("reaction_color")]
  public string ReactionColor { get; set; }
  [Newtonsoft.Json.JsonProperty("is_visible")]
  public bool IsVisible { get; set; }
  [Newtonsoft.Json.JsonProperty("reaction_description")]
  public string ReactionDescription { get; set; }

  public ElementalReactionT() {
    this.Id = 0;
    this.ReactionId = 0;
    this.ReactionName = null;
    this.SortIndex = 0;
    this.ReactionTexturePath = null;
    this.ReactionColor = null;
    this.IsVisible = false;
    this.ReactionDescription = null;
  }
}


static public class ElementalReactionVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ReactionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*ReactionName*/, false)
      && verifier.VerifyField(tablePos, 10 /*SortIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*ReactionTexturePath*/, false)
      && verifier.VerifyString(tablePos, 14 /*ReactionColor*/, false)
      && verifier.VerifyField(tablePos, 16 /*IsVisible*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 18 /*ReactionDescription*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
