// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ErrorCode : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ErrorCode GetRootAsErrorCode(ByteBuffer _bb) { return GetRootAsErrorCode(_bb, new ErrorCode()); }
  public static ErrorCode GetRootAsErrorCode(ByteBuffer _bb, ErrorCode obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ErrorCode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string DebugText { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDebugTextBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDebugTextBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDebugTextArray() { return __p.__vector_as_array<byte>(6); }
  public string Text { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTextBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTextArray() { return __p.__vector_as_array<byte>(8); }
  public bool IsTip { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<WWParser.Defs.ErrorCode> CreateErrorCode(FlatBufferBuilder builder,
      int id = 0,
      StringOffset debug_textOffset = default(StringOffset),
      StringOffset textOffset = default(StringOffset),
      bool is_tip = false) {
    builder.StartTable(4);
    ErrorCode.AddText(builder, textOffset);
    ErrorCode.AddDebugText(builder, debug_textOffset);
    ErrorCode.AddId(builder, id);
    ErrorCode.AddIsTip(builder, is_tip);
    return ErrorCode.EndErrorCode(builder);
  }

  public static void StartErrorCode(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDebugText(FlatBufferBuilder builder, StringOffset debugTextOffset) { builder.AddOffset(1, debugTextOffset.Value, 0); }
  public static void AddText(FlatBufferBuilder builder, StringOffset textOffset) { builder.AddOffset(2, textOffset.Value, 0); }
  public static void AddIsTip(FlatBufferBuilder builder, bool isTip) { builder.AddBool(3, isTip, false); }
  public static Offset<WWParser.Defs.ErrorCode> EndErrorCode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.ErrorCode>(o);
  }
  public ErrorCodeT UnPack() {
    var _o = new ErrorCodeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ErrorCodeT _o) {
    _o.Id = this.Id;
    _o.DebugText = this.DebugText;
    _o.Text = this.Text;
    _o.IsTip = this.IsTip;
  }
  public static Offset<WWParser.Defs.ErrorCode> Pack(FlatBufferBuilder builder, ErrorCodeT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.ErrorCode>);
    var _debug_text = _o.DebugText == null ? default(StringOffset) : builder.CreateString(_o.DebugText);
    var _text = _o.Text == null ? default(StringOffset) : builder.CreateString(_o.Text);
    return CreateErrorCode(
      builder,
      _o.Id,
      _debug_text,
      _text,
      _o.IsTip);
  }
}

public class ErrorCodeT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("debug_text")]
  public string DebugText { get; set; }
  [Newtonsoft.Json.JsonProperty("text")]
  public string Text { get; set; }
  [Newtonsoft.Json.JsonProperty("is_tip")]
  public bool IsTip { get; set; }

  public ErrorCodeT() {
    this.Id = 0;
    this.DebugText = null;
    this.Text = null;
    this.IsTip = false;
  }
}


static public class ErrorCodeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*DebugText*/, false)
      && verifier.VerifyString(tablePos, 8 /*Text*/, false)
      && verifier.VerifyField(tablePos, 10 /*IsTip*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
