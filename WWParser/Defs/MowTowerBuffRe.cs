// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MowTowerBuffRe : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MowTowerBuffRe GetRootAsMowTowerBuffRe(ByteBuffer _bb) { return GetRootAsMowTowerBuffRe(_bb, new MowTowerBuffRe()); }
  public static MowTowerBuffRe GetRootAsMowTowerBuffRe(ByteBuffer _bb, MowTowerBuffRe obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MowTowerBuffRe __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long BuffId(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BuffIdLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBuffIdBytes() { return __p.__vector_as_span<long>(6, 8); }
#else
  public ArraySegment<byte>? GetBuffIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public long[] GetBuffIdArray() { return __p.__vector_as_array<long>(6); }
  public string Texture { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextureBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTextureBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTextureArray() { return __p.__vector_as_array<byte>(8); }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public string Description { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(12); }
  public string DescriptionParam(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DescriptionParamLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.MowTowerBuffRe> CreateMowTowerBuffRe(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset buff_idOffset = default(VectorOffset),
      StringOffset textureOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      VectorOffset description_paramOffset = default(VectorOffset)) {
    builder.StartTable(6);
    MowTowerBuffRe.AddDescriptionParam(builder, description_paramOffset);
    MowTowerBuffRe.AddDescription(builder, descriptionOffset);
    MowTowerBuffRe.AddName(builder, nameOffset);
    MowTowerBuffRe.AddTexture(builder, textureOffset);
    MowTowerBuffRe.AddBuffId(builder, buff_idOffset);
    MowTowerBuffRe.AddId(builder, id);
    return MowTowerBuffRe.EndMowTowerBuffRe(builder);
  }

  public static void StartMowTowerBuffRe(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddBuffId(FlatBufferBuilder builder, VectorOffset buffIdOffset) { builder.AddOffset(1, buffIdOffset.Value, 0); }
  public static VectorOffset CreateBuffIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddTexture(FlatBufferBuilder builder, StringOffset textureOffset) { builder.AddOffset(2, textureOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(4, descriptionOffset.Value, 0); }
  public static void AddDescriptionParam(FlatBufferBuilder builder, VectorOffset descriptionParamOffset) { builder.AddOffset(5, descriptionParamOffset.Value, 0); }
  public static VectorOffset CreateDescriptionParamVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDescriptionParamVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDescriptionParamVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDescriptionParamVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDescriptionParamVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.MowTowerBuffRe> EndMowTowerBuffRe(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.MowTowerBuffRe>(o);
  }
  public MowTowerBuffReT UnPack() {
    var _o = new MowTowerBuffReT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MowTowerBuffReT _o) {
    _o.Id = this.Id;
    _o.BuffId = new List<long>();
    for (var _j = 0; _j < this.BuffIdLength; ++_j) {_o.BuffId.Add(this.BuffId(_j));}
    _o.Texture = this.Texture;
    _o.Name = this.Name;
    _o.Description = this.Description;
    _o.DescriptionParam = new List<string>();
    for (var _j = 0; _j < this.DescriptionParamLength; ++_j) {_o.DescriptionParam.Add(this.DescriptionParam(_j));}
  }
  public static Offset<WWParser.Defs.MowTowerBuffRe> Pack(FlatBufferBuilder builder, MowTowerBuffReT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.MowTowerBuffRe>);
    var _buff_id = default(VectorOffset);
    if (_o.BuffId != null) {
      var __buff_id = _o.BuffId.ToArray();
      _buff_id = CreateBuffIdVector(builder, __buff_id);
    }
    var _texture = _o.Texture == null ? default(StringOffset) : builder.CreateString(_o.Texture);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _description_param = default(VectorOffset);
    if (_o.DescriptionParam != null) {
      var __description_param = new StringOffset[_o.DescriptionParam.Count];
      for (var _j = 0; _j < __description_param.Length; ++_j) { __description_param[_j] = builder.CreateString(_o.DescriptionParam[_j]); }
      _description_param = CreateDescriptionParamVector(builder, __description_param);
    }
    return CreateMowTowerBuffRe(
      builder,
      _o.Id,
      _buff_id,
      _texture,
      _name,
      _description,
      _description_param);
  }
}

public class MowTowerBuffReT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_id")]
  public List<long> BuffId { get; set; }
  [Newtonsoft.Json.JsonProperty("texture")]
  public string Texture { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("description")]
  public string Description { get; set; }
  [Newtonsoft.Json.JsonProperty("description_param")]
  public List<string> DescriptionParam { get; set; }

  public MowTowerBuffReT() {
    this.Id = 0;
    this.BuffId = null;
    this.Texture = null;
    this.Name = null;
    this.Description = null;
    this.DescriptionParam = null;
  }
}


static public class MowTowerBuffReVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*BuffId*/, 8 /*long*/, false)
      && verifier.VerifyString(tablePos, 8 /*Texture*/, false)
      && verifier.VerifyString(tablePos, 10 /*Name*/, false)
      && verifier.VerifyString(tablePos, 12 /*Description*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*DescriptionParam*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
