// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FishingDelivery : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FishingDelivery GetRootAsFishingDelivery(ByteBuffer _bb) { return GetRootAsFishingDelivery(_bb, new FishingDelivery()); }
  public static FishingDelivery GetRootAsFishingDelivery(ByteBuffer _bb, FishingDelivery obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FishingDelivery __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public WWParser.Defs.DicIntIntArray? NeedItems(int j) { int o = __p.__offset(6); return o != 0 ? (WWParser.Defs.DicIntIntArray?)(new WWParser.Defs.DicIntIntArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int NeedItemsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WWParser.Defs.FishingDelivery> CreateFishingDelivery(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset need_itemsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    FishingDelivery.AddNeedItems(builder, need_itemsOffset);
    FishingDelivery.AddId(builder, id);
    return FishingDelivery.EndFishingDelivery(builder);
  }

  public static void StartFishingDelivery(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddNeedItems(FlatBufferBuilder builder, VectorOffset needItemsOffset) { builder.AddOffset(1, needItemsOffset.Value, 0); }
  public static VectorOffset CreateNeedItemsVector(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntIntArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNeedItemsVectorBlock(FlatBufferBuilder builder, Offset<WWParser.Defs.DicIntIntArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNeedItemsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<WWParser.Defs.DicIntIntArray>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNeedItemsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<WWParser.Defs.DicIntIntArray>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNeedItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WWParser.Defs.FishingDelivery> EndFishingDelivery(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.FishingDelivery>(o);
  }
  public FishingDeliveryT UnPack() {
    var _o = new FishingDeliveryT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FishingDeliveryT _o) {
    _o.Id = this.Id;
    _o.NeedItems = new List<WWParser.Defs.DicIntIntArrayT>();
    for (var _j = 0; _j < this.NeedItemsLength; ++_j) {_o.NeedItems.Add(this.NeedItems(_j).HasValue ? this.NeedItems(_j).Value.UnPack() : null);}
  }
  public static Offset<WWParser.Defs.FishingDelivery> Pack(FlatBufferBuilder builder, FishingDeliveryT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.FishingDelivery>);
    var _need_items = default(VectorOffset);
    if (_o.NeedItems != null) {
      var __need_items = new Offset<WWParser.Defs.DicIntIntArray>[_o.NeedItems.Count];
      for (var _j = 0; _j < __need_items.Length; ++_j) { __need_items[_j] = WWParser.Defs.DicIntIntArray.Pack(builder, _o.NeedItems[_j]); }
      _need_items = CreateNeedItemsVector(builder, __need_items);
    }
    return CreateFishingDelivery(
      builder,
      _o.Id,
      _need_items);
  }
}

public class FishingDeliveryT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("need_items")]
  public List<WWParser.Defs.DicIntIntArrayT> NeedItems { get; set; }

  public FishingDeliveryT() {
    this.Id = 0;
    this.NeedItems = null;
  }
}


static public class FishingDeliveryVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*NeedItems*/, WWParser.Defs.DicIntIntArrayVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
