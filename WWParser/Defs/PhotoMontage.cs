// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PhotoMontage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PhotoMontage GetRootAsPhotoMontage(ByteBuffer _bb) { return GetRootAsPhotoMontage(_bb, new PhotoMontage()); }
  public static PhotoMontage GetRootAsPhotoMontage(ByteBuffer _bb, PhotoMontage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PhotoMontage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RoleId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Sort { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public bool IsLoop { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string MontagePath { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMontagePathBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetMontagePathBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetMontagePathArray() { return __p.__vector_as_array<byte>(14); }
  public int IconType { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MotionType { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnLockConditionGroup { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ConditionTipsId { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConditionTipsIdBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetConditionTipsIdBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetConditionTipsIdArray() { return __p.__vector_as_array<byte>(22); }

  public static Offset<WWParser.Defs.PhotoMontage> CreatePhotoMontage(FlatBufferBuilder builder,
      int id = 0,
      int role_id = 0,
      int sort = 0,
      StringOffset nameOffset = default(StringOffset),
      bool is_loop = false,
      StringOffset montage_pathOffset = default(StringOffset),
      int icon_type = 0,
      int motion_type = 0,
      int un_lock_condition_group = 0,
      StringOffset condition_tips_idOffset = default(StringOffset)) {
    builder.StartTable(10);
    PhotoMontage.AddConditionTipsId(builder, condition_tips_idOffset);
    PhotoMontage.AddUnLockConditionGroup(builder, un_lock_condition_group);
    PhotoMontage.AddMotionType(builder, motion_type);
    PhotoMontage.AddIconType(builder, icon_type);
    PhotoMontage.AddMontagePath(builder, montage_pathOffset);
    PhotoMontage.AddName(builder, nameOffset);
    PhotoMontage.AddSort(builder, sort);
    PhotoMontage.AddRoleId(builder, role_id);
    PhotoMontage.AddId(builder, id);
    PhotoMontage.AddIsLoop(builder, is_loop);
    return PhotoMontage.EndPhotoMontage(builder);
  }

  public static void StartPhotoMontage(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddRoleId(FlatBufferBuilder builder, int roleId) { builder.AddInt(1, roleId, 0); }
  public static void AddSort(FlatBufferBuilder builder, int sort) { builder.AddInt(2, sort, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddIsLoop(FlatBufferBuilder builder, bool isLoop) { builder.AddBool(4, isLoop, false); }
  public static void AddMontagePath(FlatBufferBuilder builder, StringOffset montagePathOffset) { builder.AddOffset(5, montagePathOffset.Value, 0); }
  public static void AddIconType(FlatBufferBuilder builder, int iconType) { builder.AddInt(6, iconType, 0); }
  public static void AddMotionType(FlatBufferBuilder builder, int motionType) { builder.AddInt(7, motionType, 0); }
  public static void AddUnLockConditionGroup(FlatBufferBuilder builder, int unLockConditionGroup) { builder.AddInt(8, unLockConditionGroup, 0); }
  public static void AddConditionTipsId(FlatBufferBuilder builder, StringOffset conditionTipsIdOffset) { builder.AddOffset(9, conditionTipsIdOffset.Value, 0); }
  public static Offset<WWParser.Defs.PhotoMontage> EndPhotoMontage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.PhotoMontage>(o);
  }
  public PhotoMontageT UnPack() {
    var _o = new PhotoMontageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PhotoMontageT _o) {
    _o.Id = this.Id;
    _o.RoleId = this.RoleId;
    _o.Sort = this.Sort;
    _o.Name = this.Name;
    _o.IsLoop = this.IsLoop;
    _o.MontagePath = this.MontagePath;
    _o.IconType = this.IconType;
    _o.MotionType = this.MotionType;
    _o.UnLockConditionGroup = this.UnLockConditionGroup;
    _o.ConditionTipsId = this.ConditionTipsId;
  }
  public static Offset<WWParser.Defs.PhotoMontage> Pack(FlatBufferBuilder builder, PhotoMontageT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.PhotoMontage>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _montage_path = _o.MontagePath == null ? default(StringOffset) : builder.CreateString(_o.MontagePath);
    var _condition_tips_id = _o.ConditionTipsId == null ? default(StringOffset) : builder.CreateString(_o.ConditionTipsId);
    return CreatePhotoMontage(
      builder,
      _o.Id,
      _o.RoleId,
      _o.Sort,
      _name,
      _o.IsLoop,
      _montage_path,
      _o.IconType,
      _o.MotionType,
      _o.UnLockConditionGroup,
      _condition_tips_id);
  }
}

public class PhotoMontageT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("role_id")]
  public int RoleId { get; set; }
  [Newtonsoft.Json.JsonProperty("sort")]
  public int Sort { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("is_loop")]
  public bool IsLoop { get; set; }
  [Newtonsoft.Json.JsonProperty("montage_path")]
  public string MontagePath { get; set; }
  [Newtonsoft.Json.JsonProperty("icon_type")]
  public int IconType { get; set; }
  [Newtonsoft.Json.JsonProperty("motion_type")]
  public int MotionType { get; set; }
  [Newtonsoft.Json.JsonProperty("un_lock_condition_group")]
  public int UnLockConditionGroup { get; set; }
  [Newtonsoft.Json.JsonProperty("condition_tips_id")]
  public string ConditionTipsId { get; set; }

  public PhotoMontageT() {
    this.Id = 0;
    this.RoleId = 0;
    this.Sort = 0;
    this.Name = null;
    this.IsLoop = false;
    this.MontagePath = null;
    this.IconType = 0;
    this.MotionType = 0;
    this.UnLockConditionGroup = 0;
    this.ConditionTipsId = null;
  }
}


static public class PhotoMontageVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*RoleId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Sort*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Name*/, false)
      && verifier.VerifyField(tablePos, 12 /*IsLoop*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 14 /*MontagePath*/, false)
      && verifier.VerifyField(tablePos, 16 /*IconType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*MotionType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*UnLockConditionGroup*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*ConditionTipsId*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
