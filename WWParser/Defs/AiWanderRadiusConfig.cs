// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiWanderRadiusConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AiWanderRadiusConfig GetRootAsAiWanderRadiusConfig(ByteBuffer _bb) { return GetRootAsAiWanderRadiusConfig(_bb, new AiWanderRadiusConfig()); }
  public static AiWanderRadiusConfig GetRootAsAiWanderRadiusConfig(ByteBuffer _bb, AiWanderRadiusConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiWanderRadiusConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float RandomRadius { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)600.0f; } }
  public float MinWanderDistance { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)400.0f; } }

  public static Offset<WWParser.Defs.AiWanderRadiusConfig> CreateAiWanderRadiusConfig(FlatBufferBuilder builder,
      int id = 0,
      float random_radius = 600.0f,
      float min_wander_distance = 400.0f) {
    builder.StartTable(3);
    AiWanderRadiusConfig.AddMinWanderDistance(builder, min_wander_distance);
    AiWanderRadiusConfig.AddRandomRadius(builder, random_radius);
    AiWanderRadiusConfig.AddId(builder, id);
    return AiWanderRadiusConfig.EndAiWanderRadiusConfig(builder);
  }

  public static void StartAiWanderRadiusConfig(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddRandomRadius(FlatBufferBuilder builder, float randomRadius) { builder.AddFloat(1, randomRadius, 600.0f); }
  public static void AddMinWanderDistance(FlatBufferBuilder builder, float minWanderDistance) { builder.AddFloat(2, minWanderDistance, 400.0f); }
  public static Offset<WWParser.Defs.AiWanderRadiusConfig> EndAiWanderRadiusConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.AiWanderRadiusConfig>(o);
  }
  public AiWanderRadiusConfigT UnPack() {
    var _o = new AiWanderRadiusConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AiWanderRadiusConfigT _o) {
    _o.Id = this.Id;
    _o.RandomRadius = this.RandomRadius;
    _o.MinWanderDistance = this.MinWanderDistance;
  }
  public static Offset<WWParser.Defs.AiWanderRadiusConfig> Pack(FlatBufferBuilder builder, AiWanderRadiusConfigT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.AiWanderRadiusConfig>);
    return CreateAiWanderRadiusConfig(
      builder,
      _o.Id,
      _o.RandomRadius,
      _o.MinWanderDistance);
  }
}

public class AiWanderRadiusConfigT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("random_radius")]
  public float RandomRadius { get; set; }
  [Newtonsoft.Json.JsonProperty("min_wander_distance")]
  public float MinWanderDistance { get; set; }

  public AiWanderRadiusConfigT() {
    this.Id = 0;
    this.RandomRadius = 600.0f;
    this.MinWanderDistance = 400.0f;
  }
}


static public class AiWanderRadiusConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*RandomRadius*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*MinWanderDistance*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
