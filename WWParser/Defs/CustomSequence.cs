// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CustomSequence : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CustomSequence GetRootAsCustomSequence(ByteBuffer _bb) { return GetRootAsCustomSequence(_bb, new CustomSequence()); }
  public static CustomSequence GetRootAsCustomSequence(ByteBuffer _bb, CustomSequence obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CustomSequence __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Name { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SeqDataPath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSeqDataPathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSeqDataPathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSeqDataPathArray() { return __p.__vector_as_array<byte>(8); }
  public string BinderType { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBinderTypeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetBinderTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetBinderTypeArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<WWParser.Defs.CustomSequence> CreateCustomSequence(FlatBufferBuilder builder,
      int id = 0,
      int name = 0,
      StringOffset seq_data_pathOffset = default(StringOffset),
      StringOffset binder_typeOffset = default(StringOffset)) {
    builder.StartTable(4);
    CustomSequence.AddBinderType(builder, binder_typeOffset);
    CustomSequence.AddSeqDataPath(builder, seq_data_pathOffset);
    CustomSequence.AddName(builder, name);
    CustomSequence.AddId(builder, id);
    return CustomSequence.EndCustomSequence(builder);
  }

  public static void StartCustomSequence(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, int name) { builder.AddInt(1, name, 0); }
  public static void AddSeqDataPath(FlatBufferBuilder builder, StringOffset seqDataPathOffset) { builder.AddOffset(2, seqDataPathOffset.Value, 0); }
  public static void AddBinderType(FlatBufferBuilder builder, StringOffset binderTypeOffset) { builder.AddOffset(3, binderTypeOffset.Value, 0); }
  public static Offset<WWParser.Defs.CustomSequence> EndCustomSequence(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.CustomSequence>(o);
  }
  public CustomSequenceT UnPack() {
    var _o = new CustomSequenceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CustomSequenceT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.SeqDataPath = this.SeqDataPath;
    _o.BinderType = this.BinderType;
  }
  public static Offset<WWParser.Defs.CustomSequence> Pack(FlatBufferBuilder builder, CustomSequenceT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.CustomSequence>);
    var _seq_data_path = _o.SeqDataPath == null ? default(StringOffset) : builder.CreateString(_o.SeqDataPath);
    var _binder_type = _o.BinderType == null ? default(StringOffset) : builder.CreateString(_o.BinderType);
    return CreateCustomSequence(
      builder,
      _o.Id,
      _o.Name,
      _seq_data_path,
      _binder_type);
  }
}

public class CustomSequenceT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public int Name { get; set; }
  [Newtonsoft.Json.JsonProperty("seq_data_path")]
  public string SeqDataPath { get; set; }
  [Newtonsoft.Json.JsonProperty("binder_type")]
  public string BinderType { get; set; }

  public CustomSequenceT() {
    this.Id = 0;
    this.Name = 0;
    this.SeqDataPath = null;
    this.BinderType = null;
  }
}


static public class CustomSequenceVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Name*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*SeqDataPath*/, false)
      && verifier.VerifyString(tablePos, 10 /*BinderType*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
