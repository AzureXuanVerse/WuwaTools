// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WWParser.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RiskHarvestBuffGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RiskHarvestBuffGroup GetRootAsRiskHarvestBuffGroup(ByteBuffer _bb) { return GetRootAsRiskHarvestBuffGroup(_bb, new RiskHarvestBuffGroup()); }
  public static RiskHarvestBuffGroup GetRootAsRiskHarvestBuffGroup(ByteBuffer _bb, RiskHarvestBuffGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RiskHarvestBuffGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActivityId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public double Buff(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int BuffLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetBuffBytes() { return __p.__vector_as_span<double>(8, 8); }
#else
  public ArraySegment<byte>? GetBuffBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public double[] GetBuffArray() { return __p.__vector_as_array<double>(8); }
  public string BuffName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetBuffNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetBuffNameArray() { return __p.__vector_as_array<byte>(10); }
  public string BuffDesc { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffDescBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetBuffDescBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetBuffDescArray() { return __p.__vector_as_array<byte>(12); }
  public string BuffFactors(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BuffFactorsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int BuffType { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuffProgress { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BuffIcon { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffIconBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetBuffIconBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetBuffIconArray() { return __p.__vector_as_array<byte>(20); }
  public int Reward { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string RewardDesc { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRewardDescBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetRewardDescBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetRewardDescArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<WWParser.Defs.RiskHarvestBuffGroup> CreateRiskHarvestBuffGroup(FlatBufferBuilder builder,
      int id = 0,
      int activity_id = 0,
      VectorOffset buffOffset = default(VectorOffset),
      StringOffset buff_nameOffset = default(StringOffset),
      StringOffset buff_descOffset = default(StringOffset),
      VectorOffset buff_factorsOffset = default(VectorOffset),
      int buff_type = 0,
      int buff_progress = 0,
      StringOffset buff_iconOffset = default(StringOffset),
      int reward = 0,
      StringOffset reward_descOffset = default(StringOffset)) {
    builder.StartTable(11);
    RiskHarvestBuffGroup.AddRewardDesc(builder, reward_descOffset);
    RiskHarvestBuffGroup.AddReward(builder, reward);
    RiskHarvestBuffGroup.AddBuffIcon(builder, buff_iconOffset);
    RiskHarvestBuffGroup.AddBuffProgress(builder, buff_progress);
    RiskHarvestBuffGroup.AddBuffType(builder, buff_type);
    RiskHarvestBuffGroup.AddBuffFactors(builder, buff_factorsOffset);
    RiskHarvestBuffGroup.AddBuffDesc(builder, buff_descOffset);
    RiskHarvestBuffGroup.AddBuffName(builder, buff_nameOffset);
    RiskHarvestBuffGroup.AddBuff(builder, buffOffset);
    RiskHarvestBuffGroup.AddActivityId(builder, activity_id);
    RiskHarvestBuffGroup.AddId(builder, id);
    return RiskHarvestBuffGroup.EndRiskHarvestBuffGroup(builder);
  }

  public static void StartRiskHarvestBuffGroup(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int activityId) { builder.AddInt(1, activityId, 0); }
  public static void AddBuff(FlatBufferBuilder builder, VectorOffset buffOffset) { builder.AddOffset(2, buffOffset.Value, 0); }
  public static VectorOffset CreateBuffVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBuffName(FlatBufferBuilder builder, StringOffset buffNameOffset) { builder.AddOffset(3, buffNameOffset.Value, 0); }
  public static void AddBuffDesc(FlatBufferBuilder builder, StringOffset buffDescOffset) { builder.AddOffset(4, buffDescOffset.Value, 0); }
  public static void AddBuffFactors(FlatBufferBuilder builder, VectorOffset buffFactorsOffset) { builder.AddOffset(5, buffFactorsOffset.Value, 0); }
  public static VectorOffset CreateBuffFactorsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBuffFactorsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffFactorsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuffFactorsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuffFactorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffType(FlatBufferBuilder builder, int buffType) { builder.AddInt(6, buffType, 0); }
  public static void AddBuffProgress(FlatBufferBuilder builder, int buffProgress) { builder.AddInt(7, buffProgress, 0); }
  public static void AddBuffIcon(FlatBufferBuilder builder, StringOffset buffIconOffset) { builder.AddOffset(8, buffIconOffset.Value, 0); }
  public static void AddReward(FlatBufferBuilder builder, int reward) { builder.AddInt(9, reward, 0); }
  public static void AddRewardDesc(FlatBufferBuilder builder, StringOffset rewardDescOffset) { builder.AddOffset(10, rewardDescOffset.Value, 0); }
  public static Offset<WWParser.Defs.RiskHarvestBuffGroup> EndRiskHarvestBuffGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WWParser.Defs.RiskHarvestBuffGroup>(o);
  }
  public RiskHarvestBuffGroupT UnPack() {
    var _o = new RiskHarvestBuffGroupT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RiskHarvestBuffGroupT _o) {
    _o.Id = this.Id;
    _o.ActivityId = this.ActivityId;
    _o.Buff = new List<double>();
    for (var _j = 0; _j < this.BuffLength; ++_j) {_o.Buff.Add(this.Buff(_j));}
    _o.BuffName = this.BuffName;
    _o.BuffDesc = this.BuffDesc;
    _o.BuffFactors = new List<string>();
    for (var _j = 0; _j < this.BuffFactorsLength; ++_j) {_o.BuffFactors.Add(this.BuffFactors(_j));}
    _o.BuffType = this.BuffType;
    _o.BuffProgress = this.BuffProgress;
    _o.BuffIcon = this.BuffIcon;
    _o.Reward = this.Reward;
    _o.RewardDesc = this.RewardDesc;
  }
  public static Offset<WWParser.Defs.RiskHarvestBuffGroup> Pack(FlatBufferBuilder builder, RiskHarvestBuffGroupT _o) {
    if (_o == null) return default(Offset<WWParser.Defs.RiskHarvestBuffGroup>);
    var _buff = default(VectorOffset);
    if (_o.Buff != null) {
      var __buff = _o.Buff.ToArray();
      _buff = CreateBuffVector(builder, __buff);
    }
    var _buff_name = _o.BuffName == null ? default(StringOffset) : builder.CreateString(_o.BuffName);
    var _buff_desc = _o.BuffDesc == null ? default(StringOffset) : builder.CreateString(_o.BuffDesc);
    var _buff_factors = default(VectorOffset);
    if (_o.BuffFactors != null) {
      var __buff_factors = new StringOffset[_o.BuffFactors.Count];
      for (var _j = 0; _j < __buff_factors.Length; ++_j) { __buff_factors[_j] = builder.CreateString(_o.BuffFactors[_j]); }
      _buff_factors = CreateBuffFactorsVector(builder, __buff_factors);
    }
    var _buff_icon = _o.BuffIcon == null ? default(StringOffset) : builder.CreateString(_o.BuffIcon);
    var _reward_desc = _o.RewardDesc == null ? default(StringOffset) : builder.CreateString(_o.RewardDesc);
    return CreateRiskHarvestBuffGroup(
      builder,
      _o.Id,
      _o.ActivityId,
      _buff,
      _buff_name,
      _buff_desc,
      _buff_factors,
      _o.BuffType,
      _o.BuffProgress,
      _buff_icon,
      _o.Reward,
      _reward_desc);
  }
}

public class RiskHarvestBuffGroupT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("activity_id")]
  public int ActivityId { get; set; }
  [Newtonsoft.Json.JsonProperty("buff")]
  public List<double> Buff { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_name")]
  public string BuffName { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_desc")]
  public string BuffDesc { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_factors")]
  public List<string> BuffFactors { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_type")]
  public int BuffType { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_progress")]
  public int BuffProgress { get; set; }
  [Newtonsoft.Json.JsonProperty("buff_icon")]
  public string BuffIcon { get; set; }
  [Newtonsoft.Json.JsonProperty("reward")]
  public int Reward { get; set; }
  [Newtonsoft.Json.JsonProperty("reward_desc")]
  public string RewardDesc { get; set; }

  public RiskHarvestBuffGroupT() {
    this.Id = 0;
    this.ActivityId = 0;
    this.Buff = null;
    this.BuffName = null;
    this.BuffDesc = null;
    this.BuffFactors = null;
    this.BuffType = 0;
    this.BuffProgress = 0;
    this.BuffIcon = null;
    this.Reward = 0;
    this.RewardDesc = null;
  }
}


static public class RiskHarvestBuffGroupVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActivityId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*Buff*/, 8 /*double*/, false)
      && verifier.VerifyString(tablePos, 10 /*BuffName*/, false)
      && verifier.VerifyString(tablePos, 12 /*BuffDesc*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*BuffFactors*/, false)
      && verifier.VerifyField(tablePos, 16 /*BuffType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*BuffProgress*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*BuffIcon*/, false)
      && verifier.VerifyField(tablePos, 22 /*Reward*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 24 /*RewardDesc*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
